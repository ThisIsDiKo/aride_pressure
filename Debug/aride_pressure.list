
aride_pressure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031f4  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080033e4  080033e4  000133e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08003444  08003444  00013444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800344c  0800344c  0001344c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003450  08003450  00013450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  20000000  08003454  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00005084  20000010  08003464  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20005094  08003464  00025094  2**0
                  ALLOC
  9 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001cb74  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003b36  00000000  00000000  0003cbad  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000a0bb  00000000  00000000  000406e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000e38  00000000  00000000  0004a7a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001278  00000000  00000000  0004b5d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00008469  00000000  00000000  0004c850  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000578c  00000000  00000000  00054cb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0005a445  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000029b0  00000000  00000000  0005a4c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000010 	.word	0x20000010
 800020c:	00000000 	.word	0x00000000
 8000210:	080033cc 	.word	0x080033cc

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	20000014 	.word	0x20000014
 800022c:	080033cc 	.word	0x080033cc

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b97a 	b.w	800053c <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	468c      	mov	ip, r1
 8000266:	460e      	mov	r6, r1
 8000268:	4604      	mov	r4, r0
 800026a:	9d08      	ldr	r5, [sp, #32]
 800026c:	2b00      	cmp	r3, #0
 800026e:	d150      	bne.n	8000312 <__udivmoddi4+0xb2>
 8000270:	428a      	cmp	r2, r1
 8000272:	4617      	mov	r7, r2
 8000274:	d96c      	bls.n	8000350 <__udivmoddi4+0xf0>
 8000276:	fab2 fe82 	clz	lr, r2
 800027a:	f1be 0f00 	cmp.w	lr, #0
 800027e:	d00b      	beq.n	8000298 <__udivmoddi4+0x38>
 8000280:	f1ce 0c20 	rsb	ip, lr, #32
 8000284:	fa01 f60e 	lsl.w	r6, r1, lr
 8000288:	fa20 fc0c 	lsr.w	ip, r0, ip
 800028c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000290:	ea4c 0c06 	orr.w	ip, ip, r6
 8000294:	fa00 f40e 	lsl.w	r4, r0, lr
 8000298:	0c3a      	lsrs	r2, r7, #16
 800029a:	fbbc f9f2 	udiv	r9, ip, r2
 800029e:	b2bb      	uxth	r3, r7
 80002a0:	fb02 cc19 	mls	ip, r2, r9, ip
 80002a4:	fb09 fa03 	mul.w	sl, r9, r3
 80002a8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80002ac:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
 80002b0:	45b2      	cmp	sl, r6
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x6a>
 80002b4:	19f6      	adds	r6, r6, r7
 80002b6:	f109 31ff 	add.w	r1, r9, #4294967295
 80002ba:	f080 8125 	bcs.w	8000508 <__udivmoddi4+0x2a8>
 80002be:	45b2      	cmp	sl, r6
 80002c0:	f240 8122 	bls.w	8000508 <__udivmoddi4+0x2a8>
 80002c4:	f1a9 0902 	sub.w	r9, r9, #2
 80002c8:	443e      	add	r6, r7
 80002ca:	eba6 060a 	sub.w	r6, r6, sl
 80002ce:	fbb6 f0f2 	udiv	r0, r6, r2
 80002d2:	fb02 6610 	mls	r6, r2, r0, r6
 80002d6:	fb00 f303 	mul.w	r3, r0, r3
 80002da:	b2a4      	uxth	r4, r4
 80002dc:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 80002e0:	42a3      	cmp	r3, r4
 80002e2:	d909      	bls.n	80002f8 <__udivmoddi4+0x98>
 80002e4:	19e4      	adds	r4, r4, r7
 80002e6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ea:	f080 810b 	bcs.w	8000504 <__udivmoddi4+0x2a4>
 80002ee:	42a3      	cmp	r3, r4
 80002f0:	f240 8108 	bls.w	8000504 <__udivmoddi4+0x2a4>
 80002f4:	3802      	subs	r0, #2
 80002f6:	443c      	add	r4, r7
 80002f8:	2100      	movs	r1, #0
 80002fa:	1ae4      	subs	r4, r4, r3
 80002fc:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000300:	2d00      	cmp	r5, #0
 8000302:	d062      	beq.n	80003ca <__udivmoddi4+0x16a>
 8000304:	2300      	movs	r3, #0
 8000306:	fa24 f40e 	lsr.w	r4, r4, lr
 800030a:	602c      	str	r4, [r5, #0]
 800030c:	606b      	str	r3, [r5, #4]
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0xc6>
 8000316:	2d00      	cmp	r5, #0
 8000318:	d055      	beq.n	80003c6 <__udivmoddi4+0x166>
 800031a:	2100      	movs	r1, #0
 800031c:	e885 0041 	stmia.w	r5, {r0, r6}
 8000320:	4608      	mov	r0, r1
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f183 	clz	r1, r3
 800032a:	2900      	cmp	r1, #0
 800032c:	f040 808f 	bne.w	800044e <__udivmoddi4+0x1ee>
 8000330:	42b3      	cmp	r3, r6
 8000332:	d302      	bcc.n	800033a <__udivmoddi4+0xda>
 8000334:	4282      	cmp	r2, r0
 8000336:	f200 80fc 	bhi.w	8000532 <__udivmoddi4+0x2d2>
 800033a:	1a84      	subs	r4, r0, r2
 800033c:	eb66 0603 	sbc.w	r6, r6, r3
 8000340:	2001      	movs	r0, #1
 8000342:	46b4      	mov	ip, r6
 8000344:	2d00      	cmp	r5, #0
 8000346:	d040      	beq.n	80003ca <__udivmoddi4+0x16a>
 8000348:	e885 1010 	stmia.w	r5, {r4, ip}
 800034c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000350:	b912      	cbnz	r2, 8000358 <__udivmoddi4+0xf8>
 8000352:	2701      	movs	r7, #1
 8000354:	fbb7 f7f2 	udiv	r7, r7, r2
 8000358:	fab7 fe87 	clz	lr, r7
 800035c:	f1be 0f00 	cmp.w	lr, #0
 8000360:	d135      	bne.n	80003ce <__udivmoddi4+0x16e>
 8000362:	2101      	movs	r1, #1
 8000364:	1bf6      	subs	r6, r6, r7
 8000366:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800036a:	fa1f f887 	uxth.w	r8, r7
 800036e:	fbb6 f2fc 	udiv	r2, r6, ip
 8000372:	fb0c 6612 	mls	r6, ip, r2, r6
 8000376:	fb08 f002 	mul.w	r0, r8, r2
 800037a:	0c23      	lsrs	r3, r4, #16
 800037c:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
 8000380:	42b0      	cmp	r0, r6
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x134>
 8000384:	19f6      	adds	r6, r6, r7
 8000386:	f102 33ff 	add.w	r3, r2, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x132>
 800038c:	42b0      	cmp	r0, r6
 800038e:	f200 80d2 	bhi.w	8000536 <__udivmoddi4+0x2d6>
 8000392:	461a      	mov	r2, r3
 8000394:	1a36      	subs	r6, r6, r0
 8000396:	fbb6 f0fc 	udiv	r0, r6, ip
 800039a:	fb0c 6610 	mls	r6, ip, r0, r6
 800039e:	fb08 f800 	mul.w	r8, r8, r0
 80003a2:	b2a3      	uxth	r3, r4
 80003a4:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x15c>
 80003ac:	19e4      	adds	r4, r4, r7
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x15a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80b9 	bhi.w	800052c <__udivmoddi4+0x2cc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80003c4:	e79c      	b.n	8000300 <__udivmoddi4+0xa0>
 80003c6:	4629      	mov	r1, r5
 80003c8:	4628      	mov	r0, r5
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fa07 f70e 	lsl.w	r7, r7, lr
 80003d2:	f1ce 0320 	rsb	r3, lr, #32
 80003d6:	fa26 f203 	lsr.w	r2, r6, r3
 80003da:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80003de:	fbb2 f1fc 	udiv	r1, r2, ip
 80003e2:	fa1f f887 	uxth.w	r8, r7
 80003e6:	fb0c 2211 	mls	r2, ip, r1, r2
 80003ea:	fa06 f60e 	lsl.w	r6, r6, lr
 80003ee:	fa20 f303 	lsr.w	r3, r0, r3
 80003f2:	fb01 f908 	mul.w	r9, r1, r8
 80003f6:	4333      	orrs	r3, r6
 80003f8:	0c1e      	lsrs	r6, r3, #16
 80003fa:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 80003fe:	45b1      	cmp	r9, r6
 8000400:	fa00 f40e 	lsl.w	r4, r0, lr
 8000404:	d909      	bls.n	800041a <__udivmoddi4+0x1ba>
 8000406:	19f6      	adds	r6, r6, r7
 8000408:	f101 32ff 	add.w	r2, r1, #4294967295
 800040c:	f080 808c 	bcs.w	8000528 <__udivmoddi4+0x2c8>
 8000410:	45b1      	cmp	r9, r6
 8000412:	f240 8089 	bls.w	8000528 <__udivmoddi4+0x2c8>
 8000416:	3902      	subs	r1, #2
 8000418:	443e      	add	r6, r7
 800041a:	eba6 0609 	sub.w	r6, r6, r9
 800041e:	fbb6 f0fc 	udiv	r0, r6, ip
 8000422:	fb0c 6210 	mls	r2, ip, r0, r6
 8000426:	fb00 f908 	mul.w	r9, r0, r8
 800042a:	b29e      	uxth	r6, r3
 800042c:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 8000430:	45b1      	cmp	r9, r6
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x1e4>
 8000434:	19f6      	adds	r6, r6, r7
 8000436:	f100 33ff 	add.w	r3, r0, #4294967295
 800043a:	d271      	bcs.n	8000520 <__udivmoddi4+0x2c0>
 800043c:	45b1      	cmp	r9, r6
 800043e:	d96f      	bls.n	8000520 <__udivmoddi4+0x2c0>
 8000440:	3802      	subs	r0, #2
 8000442:	443e      	add	r6, r7
 8000444:	eba6 0609 	sub.w	r6, r6, r9
 8000448:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800044c:	e78f      	b.n	800036e <__udivmoddi4+0x10e>
 800044e:	f1c1 0720 	rsb	r7, r1, #32
 8000452:	fa22 f807 	lsr.w	r8, r2, r7
 8000456:	408b      	lsls	r3, r1
 8000458:	ea48 0303 	orr.w	r3, r8, r3
 800045c:	fa26 f407 	lsr.w	r4, r6, r7
 8000460:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8000464:	fbb4 f9fe 	udiv	r9, r4, lr
 8000468:	fa1f fc83 	uxth.w	ip, r3
 800046c:	fb0e 4419 	mls	r4, lr, r9, r4
 8000470:	408e      	lsls	r6, r1
 8000472:	fa20 f807 	lsr.w	r8, r0, r7
 8000476:	fb09 fa0c 	mul.w	sl, r9, ip
 800047a:	ea48 0806 	orr.w	r8, r8, r6
 800047e:	ea4f 4618 	mov.w	r6, r8, lsr #16
 8000482:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
 8000486:	45a2      	cmp	sl, r4
 8000488:	fa02 f201 	lsl.w	r2, r2, r1
 800048c:	fa00 f601 	lsl.w	r6, r0, r1
 8000490:	d908      	bls.n	80004a4 <__udivmoddi4+0x244>
 8000492:	18e4      	adds	r4, r4, r3
 8000494:	f109 30ff 	add.w	r0, r9, #4294967295
 8000498:	d244      	bcs.n	8000524 <__udivmoddi4+0x2c4>
 800049a:	45a2      	cmp	sl, r4
 800049c:	d942      	bls.n	8000524 <__udivmoddi4+0x2c4>
 800049e:	f1a9 0902 	sub.w	r9, r9, #2
 80004a2:	441c      	add	r4, r3
 80004a4:	eba4 040a 	sub.w	r4, r4, sl
 80004a8:	fbb4 f0fe 	udiv	r0, r4, lr
 80004ac:	fb0e 4410 	mls	r4, lr, r0, r4
 80004b0:	fb00 fc0c 	mul.w	ip, r0, ip
 80004b4:	fa1f f888 	uxth.w	r8, r8
 80004b8:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 80004bc:	45a4      	cmp	ip, r4
 80004be:	d907      	bls.n	80004d0 <__udivmoddi4+0x270>
 80004c0:	18e4      	adds	r4, r4, r3
 80004c2:	f100 3eff 	add.w	lr, r0, #4294967295
 80004c6:	d229      	bcs.n	800051c <__udivmoddi4+0x2bc>
 80004c8:	45a4      	cmp	ip, r4
 80004ca:	d927      	bls.n	800051c <__udivmoddi4+0x2bc>
 80004cc:	3802      	subs	r0, #2
 80004ce:	441c      	add	r4, r3
 80004d0:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004d4:	fba0 8902 	umull	r8, r9, r0, r2
 80004d8:	eba4 0c0c 	sub.w	ip, r4, ip
 80004dc:	45cc      	cmp	ip, r9
 80004de:	46c2      	mov	sl, r8
 80004e0:	46ce      	mov	lr, r9
 80004e2:	d315      	bcc.n	8000510 <__udivmoddi4+0x2b0>
 80004e4:	d012      	beq.n	800050c <__udivmoddi4+0x2ac>
 80004e6:	b155      	cbz	r5, 80004fe <__udivmoddi4+0x29e>
 80004e8:	ebb6 030a 	subs.w	r3, r6, sl
 80004ec:	eb6c 060e 	sbc.w	r6, ip, lr
 80004f0:	fa06 f707 	lsl.w	r7, r6, r7
 80004f4:	40cb      	lsrs	r3, r1
 80004f6:	431f      	orrs	r7, r3
 80004f8:	40ce      	lsrs	r6, r1
 80004fa:	602f      	str	r7, [r5, #0]
 80004fc:	606e      	str	r6, [r5, #4]
 80004fe:	2100      	movs	r1, #0
 8000500:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000504:	4610      	mov	r0, r2
 8000506:	e6f7      	b.n	80002f8 <__udivmoddi4+0x98>
 8000508:	4689      	mov	r9, r1
 800050a:	e6de      	b.n	80002ca <__udivmoddi4+0x6a>
 800050c:	4546      	cmp	r6, r8
 800050e:	d2ea      	bcs.n	80004e6 <__udivmoddi4+0x286>
 8000510:	ebb8 0a02 	subs.w	sl, r8, r2
 8000514:	eb69 0e03 	sbc.w	lr, r9, r3
 8000518:	3801      	subs	r0, #1
 800051a:	e7e4      	b.n	80004e6 <__udivmoddi4+0x286>
 800051c:	4670      	mov	r0, lr
 800051e:	e7d7      	b.n	80004d0 <__udivmoddi4+0x270>
 8000520:	4618      	mov	r0, r3
 8000522:	e78f      	b.n	8000444 <__udivmoddi4+0x1e4>
 8000524:	4681      	mov	r9, r0
 8000526:	e7bd      	b.n	80004a4 <__udivmoddi4+0x244>
 8000528:	4611      	mov	r1, r2
 800052a:	e776      	b.n	800041a <__udivmoddi4+0x1ba>
 800052c:	3802      	subs	r0, #2
 800052e:	443c      	add	r4, r7
 8000530:	e744      	b.n	80003bc <__udivmoddi4+0x15c>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0xe4>
 8000536:	3a02      	subs	r2, #2
 8000538:	443e      	add	r6, r7
 800053a:	e72b      	b.n	8000394 <__udivmoddi4+0x134>

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000540:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000542:	4b0e      	ldr	r3, [pc, #56]	; (800057c <HAL_InitTick+0x3c>)
{
 8000544:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000546:	7818      	ldrb	r0, [r3, #0]
 8000548:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800054c:	fbb3 f3f0 	udiv	r3, r3, r0
 8000550:	4a0b      	ldr	r2, [pc, #44]	; (8000580 <HAL_InitTick+0x40>)
 8000552:	6810      	ldr	r0, [r2, #0]
 8000554:	fbb0 f0f3 	udiv	r0, r0, r3
 8000558:	f000 fb18 	bl	8000b8c <HAL_SYSTICK_Config>
 800055c:	4604      	mov	r4, r0
 800055e:	b958      	cbnz	r0, 8000578 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000560:	2d0f      	cmp	r5, #15
 8000562:	d809      	bhi.n	8000578 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000564:	4602      	mov	r2, r0
 8000566:	4629      	mov	r1, r5
 8000568:	f04f 30ff 	mov.w	r0, #4294967295
 800056c:	f000 face 	bl	8000b0c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000570:	4b04      	ldr	r3, [pc, #16]	; (8000584 <HAL_InitTick+0x44>)
 8000572:	4620      	mov	r0, r4
 8000574:	601d      	str	r5, [r3, #0]
 8000576:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000578:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800057a:	bd38      	pop	{r3, r4, r5, pc}
 800057c:	20000000 	.word	0x20000000
 8000580:	2000000c 	.word	0x2000000c
 8000584:	20000004 	.word	0x20000004

08000588 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000588:	4a07      	ldr	r2, [pc, #28]	; (80005a8 <HAL_Init+0x20>)
{
 800058a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800058c:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800058e:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000590:	f043 0310 	orr.w	r3, r3, #16
 8000594:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000596:	f000 faa7 	bl	8000ae8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800059a:	200f      	movs	r0, #15
 800059c:	f7ff ffd0 	bl	8000540 <HAL_InitTick>
  HAL_MspInit();
 80005a0:	f002 fd84 	bl	80030ac <HAL_MspInit>
}
 80005a4:	2000      	movs	r0, #0
 80005a6:	bd08      	pop	{r3, pc}
 80005a8:	40022000 	.word	0x40022000

080005ac <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80005ac:	4a03      	ldr	r2, [pc, #12]	; (80005bc <HAL_IncTick+0x10>)
 80005ae:	4b04      	ldr	r3, [pc, #16]	; (80005c0 <HAL_IncTick+0x14>)
 80005b0:	6811      	ldr	r1, [r2, #0]
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	440b      	add	r3, r1
 80005b6:	6013      	str	r3, [r2, #0]
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	20004f98 	.word	0x20004f98
 80005c0:	20000000 	.word	0x20000000

080005c4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005c4:	4b01      	ldr	r3, [pc, #4]	; (80005cc <HAL_GetTick+0x8>)
 80005c6:	6818      	ldr	r0, [r3, #0]
}
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	20004f98 	.word	0x20004f98

080005d0 <HAL_ADC_ConvCpltCallback>:
 80005d0:	4770      	bx	lr

080005d2 <HAL_ADC_LevelOutOfWindowCallback>:
 80005d2:	4770      	bx	lr

080005d4 <HAL_ADC_IRQHandler>:
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80005d4:	6803      	ldr	r3, [r0, #0]
{
 80005d6:	b510      	push	{r4, lr}
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80005d8:	685a      	ldr	r2, [r3, #4]
{
 80005da:	4604      	mov	r4, r0
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80005dc:	0690      	lsls	r0, r2, #26
 80005de:	d527      	bpl.n	8000630 <HAL_ADC_IRQHandler+0x5c>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 80005e0:	681a      	ldr	r2, [r3, #0]
 80005e2:	0791      	lsls	r1, r2, #30
 80005e4:	d524      	bpl.n	8000630 <HAL_ADC_IRQHandler+0x5c>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80005e6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80005e8:	06d2      	lsls	r2, r2, #27
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80005ea:	bf5e      	ittt	pl
 80005ec:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 80005ee:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 80005f2:	62a2      	strpl	r2, [r4, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80005f4:	689a      	ldr	r2, [r3, #8]
 80005f6:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 80005fa:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 80005fe:	d110      	bne.n	8000622 <HAL_ADC_IRQHandler+0x4e>
 8000600:	68e2      	ldr	r2, [r4, #12]
 8000602:	b972      	cbnz	r2, 8000622 <HAL_ADC_IRQHandler+0x4e>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000604:	685a      	ldr	r2, [r3, #4]
 8000606:	f022 0220 	bic.w	r2, r2, #32
 800060a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800060c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800060e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000612:	62a3      	str	r3, [r4, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000614:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000616:	04db      	lsls	r3, r3, #19
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000618:	bf5e      	ittt	pl
 800061a:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 800061c:	f043 0301 	orrpl.w	r3, r3, #1
 8000620:	62a3      	strpl	r3, [r4, #40]	; 0x28
        }
      }

      /* Conversion complete callback */
      HAL_ADC_ConvCpltCallback(hadc);
 8000622:	4620      	mov	r0, r4
 8000624:	f7ff ffd4 	bl	80005d0 <HAL_ADC_ConvCpltCallback>
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000628:	f06f 0212 	mvn.w	r2, #18
 800062c:	6823      	ldr	r3, [r4, #0]
 800062e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8000630:	6823      	ldr	r3, [r4, #0]
 8000632:	685a      	ldr	r2, [r3, #4]
 8000634:	0610      	lsls	r0, r2, #24
 8000636:	d530      	bpl.n	800069a <HAL_ADC_IRQHandler+0xc6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8000638:	681a      	ldr	r2, [r3, #0]
 800063a:	0751      	lsls	r1, r2, #29
 800063c:	d52d      	bpl.n	800069a <HAL_ADC_IRQHandler+0xc6>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800063e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000640:	06d2      	lsls	r2, r2, #27
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000642:	bf5e      	ittt	pl
 8000644:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 8000646:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 800064a:	62a2      	strpl	r2, [r4, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800064c:	689a      	ldr	r2, [r3, #8]
 800064e:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
 8000652:	f5b2 4fe0 	cmp.w	r2, #28672	; 0x7000
 8000656:	d00a      	beq.n	800066e <HAL_ADC_IRQHandler+0x9a>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000658:	685a      	ldr	r2, [r3, #4]
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800065a:	0550      	lsls	r0, r2, #21
 800065c:	d416      	bmi.n	800068c <HAL_ADC_IRQHandler+0xb8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800065e:	689a      	ldr	r2, [r3, #8]
 8000660:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000664:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000668:	d110      	bne.n	800068c <HAL_ADC_IRQHandler+0xb8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800066a:	68e2      	ldr	r2, [r4, #12]
 800066c:	b972      	cbnz	r2, 800068c <HAL_ADC_IRQHandler+0xb8>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800066e:	685a      	ldr	r2, [r3, #4]
 8000670:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000674:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000676:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000678:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800067c:	62a3      	str	r3, [r4, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800067e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000680:	05d9      	lsls	r1, r3, #23
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000682:	bf5e      	ittt	pl
 8000684:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 8000686:	f043 0301 	orrpl.w	r3, r3, #1
 800068a:	62a3      	strpl	r3, [r4, #40]	; 0x28
        }
      }

      /* Conversion complete callback */ 
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800068c:	4620      	mov	r0, r4
 800068e:	f000 f93d 	bl	800090c <HAL_ADCEx_InjectedConvCpltCallback>
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000692:	f06f 020c 	mvn.w	r2, #12
 8000696:	6823      	ldr	r3, [r4, #0]
 8000698:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800069a:	6823      	ldr	r3, [r4, #0]
 800069c:	685a      	ldr	r2, [r3, #4]
 800069e:	0652      	lsls	r2, r2, #25
 80006a0:	d50d      	bpl.n	80006be <HAL_ADC_IRQHandler+0xea>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	07db      	lsls	r3, r3, #31
 80006a6:	d50a      	bpl.n	80006be <HAL_ADC_IRQHandler+0xea>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80006a8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      
      /* Level out of window callback */ 
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80006aa:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80006ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006b0:	62a3      	str	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80006b2:	f7ff ff8e 	bl	80005d2 <HAL_ADC_LevelOutOfWindowCallback>
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80006b6:	f06f 0201 	mvn.w	r2, #1
 80006ba:	6823      	ldr	r3, [r4, #0]
 80006bc:	601a      	str	r2, [r3, #0]
 80006be:	bd10      	pop	{r4, pc}

080006c0 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 80006c0:	2300      	movs	r3, #0
{ 
 80006c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 80006c4:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80006c6:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80006ca:	2b01      	cmp	r3, #1
 80006cc:	d074      	beq.n	80007b8 <HAL_ADC_ConfigChannel+0xf8>
 80006ce:	2301      	movs	r3, #1
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80006d0:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 80006d2:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 80006d6:	2d06      	cmp	r5, #6
 80006d8:	6802      	ldr	r2, [r0, #0]
 80006da:	ea4f 0385 	mov.w	r3, r5, lsl #2
 80006de:	680c      	ldr	r4, [r1, #0]
 80006e0:	d825      	bhi.n	800072e <HAL_ADC_ConfigChannel+0x6e>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80006e2:	442b      	add	r3, r5
 80006e4:	251f      	movs	r5, #31
 80006e6:	6b56      	ldr	r6, [r2, #52]	; 0x34
 80006e8:	3b05      	subs	r3, #5
 80006ea:	409d      	lsls	r5, r3
 80006ec:	ea26 0505 	bic.w	r5, r6, r5
 80006f0:	fa04 f303 	lsl.w	r3, r4, r3
 80006f4:	432b      	orrs	r3, r5
 80006f6:	6353      	str	r3, [r2, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80006f8:	2c09      	cmp	r4, #9
 80006fa:	ea4f 0344 	mov.w	r3, r4, lsl #1
 80006fe:	688d      	ldr	r5, [r1, #8]
 8000700:	d92f      	bls.n	8000762 <HAL_ADC_ConfigChannel+0xa2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000702:	2607      	movs	r6, #7
 8000704:	4423      	add	r3, r4
 8000706:	68d1      	ldr	r1, [r2, #12]
 8000708:	3b1e      	subs	r3, #30
 800070a:	409e      	lsls	r6, r3
 800070c:	ea21 0106 	bic.w	r1, r1, r6
 8000710:	fa05 f303 	lsl.w	r3, r5, r3
 8000714:	430b      	orrs	r3, r1
 8000716:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000718:	f1a4 0310 	sub.w	r3, r4, #16
 800071c:	2b01      	cmp	r3, #1
 800071e:	d92b      	bls.n	8000778 <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000720:	2300      	movs	r3, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000722:	2200      	movs	r2, #0
 8000724:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8000728:	4618      	mov	r0, r3
 800072a:	b002      	add	sp, #8
 800072c:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 800072e:	2d0c      	cmp	r5, #12
 8000730:	d80b      	bhi.n	800074a <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000732:	442b      	add	r3, r5
 8000734:	251f      	movs	r5, #31
 8000736:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8000738:	3b23      	subs	r3, #35	; 0x23
 800073a:	409d      	lsls	r5, r3
 800073c:	ea26 0505 	bic.w	r5, r6, r5
 8000740:	fa04 f303 	lsl.w	r3, r4, r3
 8000744:	432b      	orrs	r3, r5
 8000746:	6313      	str	r3, [r2, #48]	; 0x30
 8000748:	e7d6      	b.n	80006f8 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800074a:	442b      	add	r3, r5
 800074c:	251f      	movs	r5, #31
 800074e:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8000750:	3b41      	subs	r3, #65	; 0x41
 8000752:	409d      	lsls	r5, r3
 8000754:	ea26 0505 	bic.w	r5, r6, r5
 8000758:	fa04 f303 	lsl.w	r3, r4, r3
 800075c:	432b      	orrs	r3, r5
 800075e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000760:	e7ca      	b.n	80006f8 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000762:	2607      	movs	r6, #7
 8000764:	6911      	ldr	r1, [r2, #16]
 8000766:	4423      	add	r3, r4
 8000768:	409e      	lsls	r6, r3
 800076a:	ea21 0106 	bic.w	r1, r1, r6
 800076e:	fa05 f303 	lsl.w	r3, r5, r3
 8000772:	430b      	orrs	r3, r1
 8000774:	6113      	str	r3, [r2, #16]
 8000776:	e7cf      	b.n	8000718 <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 8000778:	4b10      	ldr	r3, [pc, #64]	; (80007bc <HAL_ADC_ConfigChannel+0xfc>)
 800077a:	429a      	cmp	r2, r3
 800077c:	d116      	bne.n	80007ac <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800077e:	6893      	ldr	r3, [r2, #8]
 8000780:	021b      	lsls	r3, r3, #8
 8000782:	d4cd      	bmi.n	8000720 <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000784:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000786:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000788:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800078c:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800078e:	d1c7      	bne.n	8000720 <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000790:	4b0b      	ldr	r3, [pc, #44]	; (80007c0 <HAL_ADC_ConfigChannel+0x100>)
 8000792:	4a0c      	ldr	r2, [pc, #48]	; (80007c4 <HAL_ADC_ConfigChannel+0x104>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	fbb3 f2f2 	udiv	r2, r3, r2
 800079a:	230a      	movs	r3, #10
 800079c:	4353      	muls	r3, r2
            wait_loop_index--;
 800079e:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80007a0:	9b01      	ldr	r3, [sp, #4]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d0bc      	beq.n	8000720 <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 80007a6:	9b01      	ldr	r3, [sp, #4]
 80007a8:	3b01      	subs	r3, #1
 80007aa:	e7f8      	b.n	800079e <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80007ac:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80007ae:	f043 0320 	orr.w	r3, r3, #32
 80007b2:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 80007b4:	2301      	movs	r3, #1
 80007b6:	e7b4      	b.n	8000722 <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 80007b8:	2302      	movs	r3, #2
 80007ba:	e7b5      	b.n	8000728 <HAL_ADC_ConfigChannel+0x68>
 80007bc:	40012400 	.word	0x40012400
 80007c0:	2000000c 	.word	0x2000000c
 80007c4:	000f4240 	.word	0x000f4240

080007c8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80007c8:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80007ca:	6803      	ldr	r3, [r0, #0]
{
 80007cc:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 80007ce:	689a      	ldr	r2, [r3, #8]
 80007d0:	07d2      	lsls	r2, r2, #31
 80007d2:	d401      	bmi.n	80007d8 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80007d4:	2000      	movs	r0, #0
 80007d6:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 80007d8:	689a      	ldr	r2, [r3, #8]
 80007da:	f022 0201 	bic.w	r2, r2, #1
 80007de:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80007e0:	f7ff fef0 	bl	80005c4 <HAL_GetTick>
 80007e4:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 80007e6:	6823      	ldr	r3, [r4, #0]
 80007e8:	689b      	ldr	r3, [r3, #8]
 80007ea:	07db      	lsls	r3, r3, #31
 80007ec:	d5f2      	bpl.n	80007d4 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80007ee:	f7ff fee9 	bl	80005c4 <HAL_GetTick>
 80007f2:	1b40      	subs	r0, r0, r5
 80007f4:	2802      	cmp	r0, #2
 80007f6:	d9f6      	bls.n	80007e6 <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80007f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80007fa:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80007fc:	f043 0310 	orr.w	r3, r3, #16
 8000800:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000802:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	62e3      	str	r3, [r4, #44]	; 0x2c
 800080a:	bd38      	pop	{r3, r4, r5, pc}

0800080c <HAL_ADC_Init>:
{
 800080c:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 800080e:	4604      	mov	r4, r0
 8000810:	2800      	cmp	r0, #0
 8000812:	d071      	beq.n	80008f8 <HAL_ADC_Init+0xec>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000814:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000816:	b923      	cbnz	r3, 8000822 <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8000818:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 800081a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 800081e:	f002 fc6d 	bl	80030fc <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000822:	4620      	mov	r0, r4
 8000824:	f7ff ffd0 	bl	80007c8 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000828:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800082a:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 800082e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000830:	d164      	bne.n	80008fc <HAL_ADC_Init+0xf0>
 8000832:	2800      	cmp	r0, #0
 8000834:	d162      	bne.n	80008fc <HAL_ADC_Init+0xf0>
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000836:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 8000838:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 800083c:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 800083e:	f023 0302 	bic.w	r3, r3, #2
 8000842:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000846:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000848:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 800084a:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 800084c:	68e3      	ldr	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800084e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 8000852:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000856:	d038      	beq.n	80008ca <HAL_ADC_Init+0xbe>
 8000858:	2901      	cmp	r1, #1
 800085a:	bf14      	ite	ne
 800085c:	4606      	movne	r6, r0
 800085e:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000862:	6965      	ldr	r5, [r4, #20]
 8000864:	2d01      	cmp	r5, #1
 8000866:	d107      	bne.n	8000878 <HAL_ADC_Init+0x6c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000868:	2b00      	cmp	r3, #0
 800086a:	d130      	bne.n	80008ce <HAL_ADC_Init+0xc2>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800086c:	69a3      	ldr	r3, [r4, #24]
 800086e:	3b01      	subs	r3, #1
 8000870:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 8000874:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8000878:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800087a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 800087e:	685d      	ldr	r5, [r3, #4]
 8000880:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 8000884:	ea45 0506 	orr.w	r5, r5, r6
 8000888:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 800088a:	689e      	ldr	r6, [r3, #8]
 800088c:	4d1d      	ldr	r5, [pc, #116]	; (8000904 <HAL_ADC_Init+0xf8>)
 800088e:	ea05 0506 	and.w	r5, r5, r6
 8000892:	ea45 0502 	orr.w	r5, r5, r2
 8000896:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000898:	d001      	beq.n	800089e <HAL_ADC_Init+0x92>
 800089a:	2901      	cmp	r1, #1
 800089c:	d120      	bne.n	80008e0 <HAL_ADC_Init+0xd4>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800089e:	6921      	ldr	r1, [r4, #16]
 80008a0:	3901      	subs	r1, #1
 80008a2:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 80008a4:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80008a6:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 80008aa:	4329      	orrs	r1, r5
 80008ac:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80008ae:	6899      	ldr	r1, [r3, #8]
 80008b0:	4b15      	ldr	r3, [pc, #84]	; (8000908 <HAL_ADC_Init+0xfc>)
 80008b2:	400b      	ands	r3, r1
 80008b4:	429a      	cmp	r2, r3
 80008b6:	d115      	bne.n	80008e4 <HAL_ADC_Init+0xd8>
      ADC_CLEAR_ERRORCODE(hadc);
 80008b8:	2300      	movs	r3, #0
 80008ba:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 80008bc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80008be:	f023 0303 	bic.w	r3, r3, #3
 80008c2:	f043 0301 	orr.w	r3, r3, #1
 80008c6:	62a3      	str	r3, [r4, #40]	; 0x28
 80008c8:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80008ca:	460e      	mov	r6, r1
 80008cc:	e7c9      	b.n	8000862 <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80008ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80008d0:	f043 0320 	orr.w	r3, r3, #32
 80008d4:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80008d6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80008d8:	f043 0301 	orr.w	r3, r3, #1
 80008dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80008de:	e7cb      	b.n	8000878 <HAL_ADC_Init+0x6c>
  uint32_t tmp_sqr1 = 0U;
 80008e0:	2100      	movs	r1, #0
 80008e2:	e7df      	b.n	80008a4 <HAL_ADC_Init+0x98>
      ADC_STATE_CLR_SET(hadc->State,
 80008e4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80008e6:	f023 0312 	bic.w	r3, r3, #18
 80008ea:	f043 0310 	orr.w	r3, r3, #16
 80008ee:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80008f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80008f2:	f043 0301 	orr.w	r3, r3, #1
 80008f6:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 80008f8:	2001      	movs	r0, #1
}
 80008fa:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80008fc:	f043 0310 	orr.w	r3, r3, #16
 8000900:	62a3      	str	r3, [r4, #40]	; 0x28
 8000902:	e7f9      	b.n	80008f8 <HAL_ADC_Init+0xec>
 8000904:	ffe1f7fd 	.word	0xffe1f7fd
 8000908:	ff1f0efe 	.word	0xff1f0efe

0800090c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800090c:	4770      	bx	lr
	...

08000910 <HAL_ADCEx_InjectedConfigChannel>:
  * @param  sConfigInjected: Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8000910:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000912:	4602      	mov	r2, r0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8000914:	2000      	movs	r0, #0
    assert_param(IS_ADC_INJECTED_NB_CONV(sConfigInjected->InjectedNbrOfConversion));
    assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->InjectedDiscontinuousConvMode));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000916:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
  __IO uint32_t wait_loop_index = 0U;
 800091a:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 800091c:	2b01      	cmp	r3, #1
 800091e:	f000 80d8 	beq.w	8000ad2 <HAL_ADCEx_InjectedConfigChannel+0x1c2>
 8000922:	2701      	movs	r7, #1
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000924:	f8d2 e008 	ldr.w	lr, [r2, #8]
  __HAL_LOCK(hadc);
 8000928:	f882 7024 	strb.w	r7, [r2, #36]	; 0x24
 800092c:	684e      	ldr	r6, [r1, #4]
 800092e:	6813      	ldr	r3, [r2, #0]
 8000930:	680d      	ldr	r5, [r1, #0]
  /*   Note: Scan mode is present by hardware on this device and, if          */
  /*   disabled, discards automatically nb of conversions. Anyway, nb of      */
  /*   conversions is forced to 0x00 for alignment over all STM32 devices.    */
  /* - if scan mode is enabled, injected channels sequence length is set to   */
  /*   parameter "InjectedNbrOfConversion".                                   */
  if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8000932:	f1be 0f00 	cmp.w	lr, #0
 8000936:	d17b      	bne.n	8000a30 <HAL_ADCEx_InjectedConfigChannel+0x120>
  {
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8000938:	42be      	cmp	r6, r7
 800093a:	d173      	bne.n	8000a24 <HAL_ADCEx_InjectedConfigChannel+0x114>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800093c:	4670      	mov	r0, lr
    {
      /* Clear the old SQx bits for all injected ranks */
      MODIFY_REG(hadc->Instance->JSQR                             ,
 800093e:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8000940:	0da4      	lsrs	r4, r4, #22
 8000942:	05a4      	lsls	r4, r4, #22
 8000944:	ea44 34c5 	orr.w	r4, r4, r5, lsl #15
 8000948:	639c      	str	r4, [r3, #56]	; 0x38
  /* Parameters update not conditioned to ADC state:                          */
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  /* Note: In case of ADC already enabled, caution to not launch an unwanted  */
  /*       conversion while modifying register CR2 by writing 1 to bit ADON.  */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800094a:	689c      	ldr	r4, [r3, #8]
 800094c:	07e4      	lsls	r4, r4, #31
 800094e:	d407      	bmi.n	8000960 <HAL_ADCEx_InjectedConfigChannel+0x50>
  {    
    MODIFY_REG(hadc->Instance->CR2                                           ,
 8000950:	689c      	ldr	r4, [r3, #8]
 8000952:	69cf      	ldr	r7, [r1, #28]
 8000954:	f424 44e0 	bic.w	r4, r4, #28672	; 0x7000
 8000958:	f024 0401 	bic.w	r4, r4, #1
 800095c:	433c      	orrs	r4, r7
 800095e:	609c      	str	r4, [r3, #8]
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  
    /* Automatic injected conversion can be enabled if injected group         */
    /* external triggers are disabled.                                        */
    if (sConfigInjected->AutoInjectedConv == ENABLE)
 8000960:	698c      	ldr	r4, [r1, #24]
 8000962:	2c01      	cmp	r4, #1
 8000964:	d10d      	bne.n	8000982 <HAL_ADCEx_InjectedConfigChannel+0x72>
    {
      if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8000966:	69cf      	ldr	r7, [r1, #28]
 8000968:	f5b7 4fe0 	cmp.w	r7, #28672	; 0x7000
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO);
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800096c:	bf17      	itett	ne
 800096e:	6a90      	ldrne	r0, [r2, #40]	; 0x28
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8000970:	685f      	ldreq	r7, [r3, #4]
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000972:	f040 0020 	orrne.w	r0, r0, #32
 8000976:	6290      	strne	r0, [r2, #40]	; 0x28
        
        tmp_hal_status = HAL_ERROR;
 8000978:	bf12      	itee	ne
 800097a:	4620      	movne	r0, r4
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO);
 800097c:	f447 6780 	orreq.w	r7, r7, #1024	; 0x400
 8000980:	605f      	streq	r7, [r3, #4]
      }
    }
    
    /* Injected discontinuous can be enabled only if auto-injected mode is    */
    /* disabled.                                                              */  
    if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 8000982:	694f      	ldr	r7, [r1, #20]
 8000984:	2f01      	cmp	r7, #1
 8000986:	d105      	bne.n	8000994 <HAL_ADCEx_InjectedConfigChannel+0x84>
    {
      if (sConfigInjected->AutoInjectedConv == DISABLE)
 8000988:	2c00      	cmp	r4, #0
 800098a:	d174      	bne.n	8000a76 <HAL_ADCEx_InjectedConfigChannel+0x166>
      {
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JDISCEN);
 800098c:	685c      	ldr	r4, [r3, #4]
 800098e:	f444 5480 	orr.w	r4, r4, #4096	; 0x1000
 8000992:	605c      	str	r4, [r3, #4]
    }


  /* InjectedChannel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8000994:	2d09      	cmp	r5, #9
 8000996:	ea4f 0445 	mov.w	r4, r5, lsl #1
 800099a:	f8d1 e008 	ldr.w	lr, [r1, #8]
 800099e:	d970      	bls.n	8000a82 <HAL_ADCEx_InjectedConfigChannel+0x172>
  {
    MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 80009a0:	f04f 0c07 	mov.w	ip, #7
 80009a4:	442c      	add	r4, r5
 80009a6:	68df      	ldr	r7, [r3, #12]
 80009a8:	3c1e      	subs	r4, #30
 80009aa:	fa0c fc04 	lsl.w	ip, ip, r4
 80009ae:	ea27 070c 	bic.w	r7, r7, ip
 80009b2:	fa0e f404 	lsl.w	r4, lr, r4
 80009b6:	433c      	orrs	r4, r7
 80009b8:	60dc      	str	r4, [r3, #12]
               ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  
  /* If ADC1 InjectedChannel_16 or InjectedChannel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 80009ba:	f1a5 0410 	sub.w	r4, r5, #16
 80009be:	2c01      	cmp	r4, #1
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
  {
    SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80009c0:	bf98      	it	ls
 80009c2:	689f      	ldrls	r7, [r3, #8]
 80009c4:	f8df e11c 	ldr.w	lr, [pc, #284]	; 8000ae4 <HAL_ADCEx_InjectedConfigChannel+0x1d4>
 80009c8:	bf9c      	itt	ls
 80009ca:	f447 0700 	orrls.w	r7, r7, #8388608	; 0x800000
 80009ce:	609f      	strls	r7, [r3, #8]
  }
  
  
  /* Configure the offset: offset enable/disable, InjectedChannel, offset value */
  switch(sConfigInjected->InjectedRank)
 80009d0:	2e02      	cmp	r6, #2
 80009d2:	68cf      	ldr	r7, [r1, #12]
 80009d4:	d062      	beq.n	8000a9c <HAL_ADCEx_InjectedConfigChannel+0x18c>
 80009d6:	2e03      	cmp	r6, #3
 80009d8:	d066      	beq.n	8000aa8 <HAL_ADCEx_InjectedConfigChannel+0x198>
 80009da:	2e01      	cmp	r6, #1
 80009dc:	d16a      	bne.n	8000ab4 <HAL_ADCEx_InjectedConfigChannel+0x1a4>
  {
    case 1:
      /* Set injected channel 1 offset */
      MODIFY_REG(hadc->Instance->JOFR1,
 80009de:	6959      	ldr	r1, [r3, #20]
 80009e0:	ea01 010e 	and.w	r1, r1, lr
 80009e4:	4339      	orrs	r1, r7
 80009e6:	6159      	str	r1, [r3, #20]
      break;
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 80009e8:	2c01      	cmp	r4, #1
 80009ea:	d816      	bhi.n	8000a1a <HAL_ADCEx_InjectedConfigChannel+0x10a>
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80009ec:	493a      	ldr	r1, [pc, #232]	; (8000ad8 <HAL_ADCEx_InjectedConfigChannel+0x1c8>)
 80009ee:	428b      	cmp	r3, r1
 80009f0:	d169      	bne.n	8000ac6 <HAL_ADCEx_InjectedConfigChannel+0x1b6>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80009f2:	6899      	ldr	r1, [r3, #8]
 80009f4:	0209      	lsls	r1, r1, #8
 80009f6:	d410      	bmi.n	8000a1a <HAL_ADCEx_InjectedConfigChannel+0x10a>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80009f8:	6899      	ldr	r1, [r3, #8]
        
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR))
 80009fa:	2d10      	cmp	r5, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80009fc:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a00:	6099      	str	r1, [r3, #8]
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR))
 8000a02:	d10a      	bne.n	8000a1a <HAL_ADCEx_InjectedConfigChannel+0x10a>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000a04:	4b35      	ldr	r3, [pc, #212]	; (8000adc <HAL_ADCEx_InjectedConfigChannel+0x1cc>)
 8000a06:	4936      	ldr	r1, [pc, #216]	; (8000ae0 <HAL_ADCEx_InjectedConfigChannel+0x1d0>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	fbb3 f1f1 	udiv	r1, r3, r1
 8000a0e:	230a      	movs	r3, #10
 8000a10:	434b      	muls	r3, r1
          while(wait_loop_index != 0U)
          {
            wait_loop_index--;
 8000a12:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8000a14:	9b01      	ldr	r3, [sp, #4]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d152      	bne.n	8000ac0 <HAL_ADCEx_InjectedConfigChannel+0x1b0>
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8000a20:	b003      	add	sp, #12
 8000a22:	bdf0      	pop	{r4, r5, r6, r7, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a24:	6a94      	ldr	r4, [r2, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8000a26:	4638      	mov	r0, r7
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a28:	f044 0420 	orr.w	r4, r4, #32
 8000a2c:	6294      	str	r4, [r2, #40]	; 0x28
 8000a2e:	e78c      	b.n	800094a <HAL_ADCEx_InjectedConfigChannel+0x3a>
    if (sConfigInjected->InjectedRank <= sConfigInjected->InjectedNbrOfConversion)
 8000a30:	690f      	ldr	r7, [r1, #16]
      MODIFY_REG(hadc->Instance->JSQR                                         ,
 8000a32:	f8d3 e038 	ldr.w	lr, [r3, #56]	; 0x38
 8000a36:	1bf4      	subs	r4, r6, r7
 8000a38:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    if (sConfigInjected->InjectedRank <= sConfigInjected->InjectedNbrOfConversion)
 8000a3c:	42be      	cmp	r6, r7
      MODIFY_REG(hadc->Instance->JSQR                                         ,
 8000a3e:	f104 040f 	add.w	r4, r4, #15
    if (sConfigInjected->InjectedRank <= sConfigInjected->InjectedNbrOfConversion)
 8000a42:	d810      	bhi.n	8000a66 <HAL_ADCEx_InjectedConfigChannel+0x156>
      MODIFY_REG(hadc->Instance->JSQR                                         ,
 8000a44:	f107 3cff 	add.w	ip, r7, #4294967295
 8000a48:	fa05 f704 	lsl.w	r7, r5, r4
 8000a4c:	ea47 570c 	orr.w	r7, r7, ip, lsl #20
 8000a50:	f04f 0c1f 	mov.w	ip, #31
 8000a54:	fa0c f404 	lsl.w	r4, ip, r4
 8000a58:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8000a5c:	ea2e 0404 	bic.w	r4, lr, r4
 8000a60:	433c      	orrs	r4, r7
      MODIFY_REG(hadc->Instance->JSQR                                       ,
 8000a62:	639c      	str	r4, [r3, #56]	; 0x38
 8000a64:	e771      	b.n	800094a <HAL_ADCEx_InjectedConfigChannel+0x3a>
 8000a66:	271f      	movs	r7, #31
 8000a68:	fa07 f404 	lsl.w	r4, r7, r4
 8000a6c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8000a70:	ea2e 0404 	bic.w	r4, lr, r4
 8000a74:	e7f5      	b.n	8000a62 <HAL_ADCEx_InjectedConfigChannel+0x152>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a76:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8000a78:	f040 0020 	orr.w	r0, r0, #32
 8000a7c:	6290      	str	r0, [r2, #40]	; 0x28
        tmp_hal_status = HAL_ERROR;
 8000a7e:	4638      	mov	r0, r7
 8000a80:	e788      	b.n	8000994 <HAL_ADCEx_InjectedConfigChannel+0x84>
    MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 8000a82:	f04f 0c07 	mov.w	ip, #7
 8000a86:	691f      	ldr	r7, [r3, #16]
 8000a88:	442c      	add	r4, r5
 8000a8a:	fa0c fc04 	lsl.w	ip, ip, r4
 8000a8e:	ea27 070c 	bic.w	r7, r7, ip
 8000a92:	fa0e f404 	lsl.w	r4, lr, r4
 8000a96:	433c      	orrs	r4, r7
 8000a98:	611c      	str	r4, [r3, #16]
 8000a9a:	e78e      	b.n	80009ba <HAL_ADCEx_InjectedConfigChannel+0xaa>
      MODIFY_REG(hadc->Instance->JOFR2,
 8000a9c:	6999      	ldr	r1, [r3, #24]
 8000a9e:	ea01 010e 	and.w	r1, r1, lr
 8000aa2:	4339      	orrs	r1, r7
 8000aa4:	6199      	str	r1, [r3, #24]
      break;
 8000aa6:	e79f      	b.n	80009e8 <HAL_ADCEx_InjectedConfigChannel+0xd8>
      MODIFY_REG(hadc->Instance->JOFR3,
 8000aa8:	69d9      	ldr	r1, [r3, #28]
 8000aaa:	ea01 010e 	and.w	r1, r1, lr
 8000aae:	4339      	orrs	r1, r7
 8000ab0:	61d9      	str	r1, [r3, #28]
      break;
 8000ab2:	e799      	b.n	80009e8 <HAL_ADCEx_InjectedConfigChannel+0xd8>
      MODIFY_REG(hadc->Instance->JOFR4,
 8000ab4:	6a19      	ldr	r1, [r3, #32]
 8000ab6:	ea01 010e 	and.w	r1, r1, lr
 8000aba:	4339      	orrs	r1, r7
 8000abc:	6219      	str	r1, [r3, #32]
      break;
 8000abe:	e793      	b.n	80009e8 <HAL_ADCEx_InjectedConfigChannel+0xd8>
            wait_loop_index--;
 8000ac0:	9b01      	ldr	r3, [sp, #4]
 8000ac2:	3b01      	subs	r3, #1
 8000ac4:	e7a5      	b.n	8000a12 <HAL_ADCEx_InjectedConfigChannel+0x102>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ac6:	6a93      	ldr	r3, [r2, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8000ac8:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000aca:	f043 0320 	orr.w	r3, r3, #32
 8000ace:	6293      	str	r3, [r2, #40]	; 0x28
 8000ad0:	e7a3      	b.n	8000a1a <HAL_ADCEx_InjectedConfigChannel+0x10a>
  __HAL_LOCK(hadc);
 8000ad2:	2002      	movs	r0, #2
 8000ad4:	e7a4      	b.n	8000a20 <HAL_ADCEx_InjectedConfigChannel+0x110>
 8000ad6:	bf00      	nop
 8000ad8:	40012400 	.word	0x40012400
 8000adc:	2000000c 	.word	0x2000000c
 8000ae0:	000f4240 	.word	0x000f4240
 8000ae4:	fffff000 	.word	0xfffff000

08000ae8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ae8:	4a07      	ldr	r2, [pc, #28]	; (8000b08 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000aea:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aec:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000aee:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000af2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000af6:	041b      	lsls	r3, r3, #16
 8000af8:	0c1b      	lsrs	r3, r3, #16
 8000afa:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000afe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000b02:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000b04:	60d3      	str	r3, [r2, #12]
 8000b06:	4770      	bx	lr
 8000b08:	e000ed00 	.word	0xe000ed00

08000b0c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b0c:	4b17      	ldr	r3, [pc, #92]	; (8000b6c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b0e:	b530      	push	{r4, r5, lr}
 8000b10:	68dc      	ldr	r4, [r3, #12]
 8000b12:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b16:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b1a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b1c:	2b04      	cmp	r3, #4
 8000b1e:	bf28      	it	cs
 8000b20:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b22:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b24:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b28:	bf98      	it	ls
 8000b2a:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b2c:	fa05 f303 	lsl.w	r3, r5, r3
 8000b30:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b34:	bf88      	it	hi
 8000b36:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b38:	4019      	ands	r1, r3
 8000b3a:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b3c:	fa05 f404 	lsl.w	r4, r5, r4
 8000b40:	3c01      	subs	r4, #1
 8000b42:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000b44:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b46:	ea42 0201 	orr.w	r2, r2, r1
 8000b4a:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b4e:	bfaf      	iteee	ge
 8000b50:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b54:	4b06      	ldrlt	r3, [pc, #24]	; (8000b70 <HAL_NVIC_SetPriority+0x64>)
 8000b56:	f000 000f 	andlt.w	r0, r0, #15
 8000b5a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b5c:	bfa5      	ittet	ge
 8000b5e:	b2d2      	uxtbge	r2, r2
 8000b60:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b64:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b66:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000b6a:	bd30      	pop	{r4, r5, pc}
 8000b6c:	e000ed00 	.word	0xe000ed00
 8000b70:	e000ed14 	.word	0xe000ed14

08000b74 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000b74:	2301      	movs	r3, #1
 8000b76:	0942      	lsrs	r2, r0, #5
 8000b78:	f000 001f 	and.w	r0, r0, #31
 8000b7c:	fa03 f000 	lsl.w	r0, r3, r0
 8000b80:	4b01      	ldr	r3, [pc, #4]	; (8000b88 <HAL_NVIC_EnableIRQ+0x14>)
 8000b82:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000b86:	4770      	bx	lr
 8000b88:	e000e100 	.word	0xe000e100

08000b8c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b8c:	3801      	subs	r0, #1
 8000b8e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b92:	d20a      	bcs.n	8000baa <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b94:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b96:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b98:	4a06      	ldr	r2, [pc, #24]	; (8000bb4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b9a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b9c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ba0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ba2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ba4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000baa:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	e000e010 	.word	0xe000e010
 8000bb4:	e000ed00 	.word	0xe000ed00

08000bb8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000bb8:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000bba:	2800      	cmp	r0, #0
 8000bbc:	d032      	beq.n	8000c24 <HAL_DMA_Init+0x6c>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (STM32F101xE) || defined (STM32F101xG) || defined (STM32F103xE) || defined (STM32F103xG) || defined (STM32F100xE) || defined (STM32F105xC) || defined (STM32F107xC)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000bbe:	6801      	ldr	r1, [r0, #0]
 8000bc0:	4b19      	ldr	r3, [pc, #100]	; (8000c28 <HAL_DMA_Init+0x70>)
 8000bc2:	2414      	movs	r4, #20
 8000bc4:	4299      	cmp	r1, r3
 8000bc6:	d825      	bhi.n	8000c14 <HAL_DMA_Init+0x5c>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000bc8:	4a18      	ldr	r2, [pc, #96]	; (8000c2c <HAL_DMA_Init+0x74>)
    hdma->DmaBaseAddress = DMA1;
 8000bca:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000bce:	440a      	add	r2, r1
 8000bd0:	fbb2 f2f4 	udiv	r2, r2, r4
 8000bd4:	0092      	lsls	r2, r2, #2
 8000bd6:	6402      	str	r2, [r0, #64]	; 0x40
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000bd8:	6884      	ldr	r4, [r0, #8]
    hdma->DmaBaseAddress = DMA2;
 8000bda:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp |=  hdma->Init.Direction        |
 8000bdc:	6843      	ldr	r3, [r0, #4]
  tmp = hdma->Instance->CCR;
 8000bde:	680a      	ldr	r2, [r1, #0]
  tmp |=  hdma->Init.Direction        |
 8000be0:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000be2:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000be4:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000be8:	4323      	orrs	r3, r4
 8000bea:	6904      	ldr	r4, [r0, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000bec:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000bf0:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000bf2:	6944      	ldr	r4, [r0, #20]
 8000bf4:	4323      	orrs	r3, r4
 8000bf6:	6984      	ldr	r4, [r0, #24]
 8000bf8:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8000bfa:	69c4      	ldr	r4, [r0, #28]
 8000bfc:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8000bfe:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000c00:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000c02:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c04:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000c06:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c0a:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000c0c:	f880 3020 	strb.w	r3, [r0, #32]

  return HAL_OK;
 8000c10:	4618      	mov	r0, r3
 8000c12:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8000c14:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <HAL_DMA_Init+0x78>)
 8000c16:	440b      	add	r3, r1
 8000c18:	fbb3 f3f4 	udiv	r3, r3, r4
 8000c1c:	009b      	lsls	r3, r3, #2
 8000c1e:	6403      	str	r3, [r0, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8000c20:	4b04      	ldr	r3, [pc, #16]	; (8000c34 <HAL_DMA_Init+0x7c>)
 8000c22:	e7d9      	b.n	8000bd8 <HAL_DMA_Init+0x20>
    return HAL_ERROR;
 8000c24:	2001      	movs	r0, #1
}
 8000c26:	bd10      	pop	{r4, pc}
 8000c28:	40020407 	.word	0x40020407
 8000c2c:	bffdfff8 	.word	0xbffdfff8
 8000c30:	bffdfbf8 	.word	0xbffdfbf8
 8000c34:	40020400 	.word	0x40020400

08000c38 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c38:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 8000c3c:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c3e:	2b02      	cmp	r3, #2
 8000c40:	d003      	beq.n	8000c4a <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c42:	2304      	movs	r3, #4
 8000c44:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8000c46:	2001      	movs	r0, #1
 8000c48:	bd10      	pop	{r4, pc}
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c4a:	6803      	ldr	r3, [r0, #0]
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	f022 020e 	bic.w	r2, r2, #14
 8000c52:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	f022 0201 	bic.w	r2, r2, #1
 8000c5a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000c5c:	4a29      	ldr	r2, [pc, #164]	; (8000d04 <HAL_DMA_Abort_IT+0xcc>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d924      	bls.n	8000cac <HAL_DMA_Abort_IT+0x74>
 8000c62:	f502 7262 	add.w	r2, r2, #904	; 0x388
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d019      	beq.n	8000c9e <HAL_DMA_Abort_IT+0x66>
 8000c6a:	3214      	adds	r2, #20
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d018      	beq.n	8000ca2 <HAL_DMA_Abort_IT+0x6a>
 8000c70:	3214      	adds	r2, #20
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d017      	beq.n	8000ca6 <HAL_DMA_Abort_IT+0x6e>
 8000c76:	3214      	adds	r2, #20
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	bf0c      	ite	eq
 8000c7c:	f44f 5380 	moveq.w	r3, #4096	; 0x1000
 8000c80:	f44f 3380 	movne.w	r3, #65536	; 0x10000
 8000c84:	4a20      	ldr	r2, [pc, #128]	; (8000d08 <HAL_DMA_Abort_IT+0xd0>)
 8000c86:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c88:	2301      	movs	r3, #1

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c8a:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 8000c8c:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000c90:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 8000c92:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8000c96:	b39b      	cbz	r3, 8000d00 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000c98:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000c9a:	4620      	mov	r0, r4
 8000c9c:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e7f0      	b.n	8000c84 <HAL_DMA_Abort_IT+0x4c>
 8000ca2:	2310      	movs	r3, #16
 8000ca4:	e7ee      	b.n	8000c84 <HAL_DMA_Abort_IT+0x4c>
 8000ca6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000caa:	e7eb      	b.n	8000c84 <HAL_DMA_Abort_IT+0x4c>
 8000cac:	4917      	ldr	r1, [pc, #92]	; (8000d0c <HAL_DMA_Abort_IT+0xd4>)
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d016      	beq.n	8000ce0 <HAL_DMA_Abort_IT+0xa8>
 8000cb2:	3114      	adds	r1, #20
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	d015      	beq.n	8000ce4 <HAL_DMA_Abort_IT+0xac>
 8000cb8:	3114      	adds	r1, #20
 8000cba:	428b      	cmp	r3, r1
 8000cbc:	d014      	beq.n	8000ce8 <HAL_DMA_Abort_IT+0xb0>
 8000cbe:	3114      	adds	r1, #20
 8000cc0:	428b      	cmp	r3, r1
 8000cc2:	d014      	beq.n	8000cee <HAL_DMA_Abort_IT+0xb6>
 8000cc4:	3114      	adds	r1, #20
 8000cc6:	428b      	cmp	r3, r1
 8000cc8:	d014      	beq.n	8000cf4 <HAL_DMA_Abort_IT+0xbc>
 8000cca:	3114      	adds	r1, #20
 8000ccc:	428b      	cmp	r3, r1
 8000cce:	d014      	beq.n	8000cfa <HAL_DMA_Abort_IT+0xc2>
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	bf14      	ite	ne
 8000cd4:	f44f 3380 	movne.w	r3, #65536	; 0x10000
 8000cd8:	f04f 7380 	moveq.w	r3, #16777216	; 0x1000000
 8000cdc:	4a0c      	ldr	r2, [pc, #48]	; (8000d10 <HAL_DMA_Abort_IT+0xd8>)
 8000cde:	e7d2      	b.n	8000c86 <HAL_DMA_Abort_IT+0x4e>
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	e7fb      	b.n	8000cdc <HAL_DMA_Abort_IT+0xa4>
 8000ce4:	2310      	movs	r3, #16
 8000ce6:	e7f9      	b.n	8000cdc <HAL_DMA_Abort_IT+0xa4>
 8000ce8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cec:	e7f6      	b.n	8000cdc <HAL_DMA_Abort_IT+0xa4>
 8000cee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cf2:	e7f3      	b.n	8000cdc <HAL_DMA_Abort_IT+0xa4>
 8000cf4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cf8:	e7f0      	b.n	8000cdc <HAL_DMA_Abort_IT+0xa4>
 8000cfa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000cfe:	e7ed      	b.n	8000cdc <HAL_DMA_Abort_IT+0xa4>
  HAL_StatusTypeDef status = HAL_OK;
 8000d00:	4618      	mov	r0, r3
    } 
  }
  return status;
}
 8000d02:	bd10      	pop	{r4, pc}
 8000d04:	40020080 	.word	0x40020080
 8000d08:	40020400 	.word	0x40020400
 8000d0c:	40020008 	.word	0x40020008
 8000d10:	40020000 	.word	0x40020000

08000d14 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000d14:	b470      	push	{r4, r5, r6}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
  uint32_t source_it = hdma->Instance->CCR;
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000d16:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000d18:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000d1a:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000d1c:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000d1e:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000d20:	4095      	lsls	r5, r2
 8000d22:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8000d24:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000d26:	d055      	beq.n	8000dd4 <HAL_DMA_IRQHandler+0xc0>
 8000d28:	074d      	lsls	r5, r1, #29
 8000d2a:	d553      	bpl.n	8000dd4 <HAL_DMA_IRQHandler+0xc0>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	0696      	lsls	r6, r2, #26
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000d30:	bf5e      	ittt	pl
 8000d32:	681a      	ldrpl	r2, [r3, #0]
 8000d34:	f022 0204 	bicpl.w	r2, r2, #4
 8000d38:	601a      	strpl	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000d3a:	4a60      	ldr	r2, [pc, #384]	; (8000ebc <HAL_DMA_IRQHandler+0x1a8>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d91f      	bls.n	8000d80 <HAL_DMA_IRQHandler+0x6c>
 8000d40:	f502 7262 	add.w	r2, r2, #904	; 0x388
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d014      	beq.n	8000d72 <HAL_DMA_IRQHandler+0x5e>
 8000d48:	3214      	adds	r2, #20
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d013      	beq.n	8000d76 <HAL_DMA_IRQHandler+0x62>
 8000d4e:	3214      	adds	r2, #20
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d012      	beq.n	8000d7a <HAL_DMA_IRQHandler+0x66>
 8000d54:	3214      	adds	r2, #20
 8000d56:	4293      	cmp	r3, r2
 8000d58:	bf0c      	ite	eq
 8000d5a:	f44f 4380 	moveq.w	r3, #16384	; 0x4000
 8000d5e:	f44f 2380 	movne.w	r3, #262144	; 0x40000
 8000d62:	4a57      	ldr	r2, [pc, #348]	; (8000ec0 <HAL_DMA_IRQHandler+0x1ac>)
 8000d64:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000d66:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    if (hdma->XferErrorCallback != NULL)
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	f000 80a5 	beq.w	8000eb8 <HAL_DMA_IRQHandler+0x1a4>
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
    }
  }
  return;
}
 8000d6e:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8000d70:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000d72:	2304      	movs	r3, #4
 8000d74:	e7f5      	b.n	8000d62 <HAL_DMA_IRQHandler+0x4e>
 8000d76:	2340      	movs	r3, #64	; 0x40
 8000d78:	e7f3      	b.n	8000d62 <HAL_DMA_IRQHandler+0x4e>
 8000d7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d7e:	e7f0      	b.n	8000d62 <HAL_DMA_IRQHandler+0x4e>
 8000d80:	4950      	ldr	r1, [pc, #320]	; (8000ec4 <HAL_DMA_IRQHandler+0x1b0>)
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d016      	beq.n	8000db4 <HAL_DMA_IRQHandler+0xa0>
 8000d86:	3114      	adds	r1, #20
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d015      	beq.n	8000db8 <HAL_DMA_IRQHandler+0xa4>
 8000d8c:	3114      	adds	r1, #20
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d014      	beq.n	8000dbc <HAL_DMA_IRQHandler+0xa8>
 8000d92:	3114      	adds	r1, #20
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d014      	beq.n	8000dc2 <HAL_DMA_IRQHandler+0xae>
 8000d98:	3114      	adds	r1, #20
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	d014      	beq.n	8000dc8 <HAL_DMA_IRQHandler+0xb4>
 8000d9e:	3114      	adds	r1, #20
 8000da0:	428b      	cmp	r3, r1
 8000da2:	d014      	beq.n	8000dce <HAL_DMA_IRQHandler+0xba>
 8000da4:	4293      	cmp	r3, r2
 8000da6:	bf14      	ite	ne
 8000da8:	f44f 2380 	movne.w	r3, #262144	; 0x40000
 8000dac:	f04f 6380 	moveq.w	r3, #67108864	; 0x4000000
 8000db0:	4a45      	ldr	r2, [pc, #276]	; (8000ec8 <HAL_DMA_IRQHandler+0x1b4>)
 8000db2:	e7d7      	b.n	8000d64 <HAL_DMA_IRQHandler+0x50>
 8000db4:	2304      	movs	r3, #4
 8000db6:	e7fb      	b.n	8000db0 <HAL_DMA_IRQHandler+0x9c>
 8000db8:	2340      	movs	r3, #64	; 0x40
 8000dba:	e7f9      	b.n	8000db0 <HAL_DMA_IRQHandler+0x9c>
 8000dbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dc0:	e7f6      	b.n	8000db0 <HAL_DMA_IRQHandler+0x9c>
 8000dc2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000dc6:	e7f3      	b.n	8000db0 <HAL_DMA_IRQHandler+0x9c>
 8000dc8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000dcc:	e7f0      	b.n	8000db0 <HAL_DMA_IRQHandler+0x9c>
 8000dce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000dd2:	e7ed      	b.n	8000db0 <HAL_DMA_IRQHandler+0x9c>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000dd4:	2502      	movs	r5, #2
 8000dd6:	4095      	lsls	r5, r2
 8000dd8:	4225      	tst	r5, r4
 8000dda:	d057      	beq.n	8000e8c <HAL_DMA_IRQHandler+0x178>
 8000ddc:	078d      	lsls	r5, r1, #30
 8000dde:	d555      	bpl.n	8000e8c <HAL_DMA_IRQHandler+0x178>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	0694      	lsls	r4, r2, #26
 8000de4:	d406      	bmi.n	8000df4 <HAL_DMA_IRQHandler+0xe0>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	f022 020a 	bic.w	r2, r2, #10
 8000dec:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8000dee:	2201      	movs	r2, #1
 8000df0:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000df4:	4a31      	ldr	r2, [pc, #196]	; (8000ebc <HAL_DMA_IRQHandler+0x1a8>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d91e      	bls.n	8000e38 <HAL_DMA_IRQHandler+0x124>
 8000dfa:	f502 7262 	add.w	r2, r2, #904	; 0x388
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d013      	beq.n	8000e2a <HAL_DMA_IRQHandler+0x116>
 8000e02:	3214      	adds	r2, #20
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d012      	beq.n	8000e2e <HAL_DMA_IRQHandler+0x11a>
 8000e08:	3214      	adds	r2, #20
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d011      	beq.n	8000e32 <HAL_DMA_IRQHandler+0x11e>
 8000e0e:	3214      	adds	r2, #20
 8000e10:	4293      	cmp	r3, r2
 8000e12:	bf0c      	ite	eq
 8000e14:	f44f 5300 	moveq.w	r3, #8192	; 0x2000
 8000e18:	f44f 3300 	movne.w	r3, #131072	; 0x20000
 8000e1c:	4a28      	ldr	r2, [pc, #160]	; (8000ec0 <HAL_DMA_IRQHandler+0x1ac>)
 8000e1e:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8000e20:	2300      	movs	r3, #0
 8000e22:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8000e26:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000e28:	e79e      	b.n	8000d68 <HAL_DMA_IRQHandler+0x54>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	e7f6      	b.n	8000e1c <HAL_DMA_IRQHandler+0x108>
 8000e2e:	2320      	movs	r3, #32
 8000e30:	e7f4      	b.n	8000e1c <HAL_DMA_IRQHandler+0x108>
 8000e32:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e36:	e7f1      	b.n	8000e1c <HAL_DMA_IRQHandler+0x108>
 8000e38:	4922      	ldr	r1, [pc, #136]	; (8000ec4 <HAL_DMA_IRQHandler+0x1b0>)
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d016      	beq.n	8000e6c <HAL_DMA_IRQHandler+0x158>
 8000e3e:	3114      	adds	r1, #20
 8000e40:	428b      	cmp	r3, r1
 8000e42:	d015      	beq.n	8000e70 <HAL_DMA_IRQHandler+0x15c>
 8000e44:	3114      	adds	r1, #20
 8000e46:	428b      	cmp	r3, r1
 8000e48:	d014      	beq.n	8000e74 <HAL_DMA_IRQHandler+0x160>
 8000e4a:	3114      	adds	r1, #20
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d014      	beq.n	8000e7a <HAL_DMA_IRQHandler+0x166>
 8000e50:	3114      	adds	r1, #20
 8000e52:	428b      	cmp	r3, r1
 8000e54:	d014      	beq.n	8000e80 <HAL_DMA_IRQHandler+0x16c>
 8000e56:	3114      	adds	r1, #20
 8000e58:	428b      	cmp	r3, r1
 8000e5a:	d014      	beq.n	8000e86 <HAL_DMA_IRQHandler+0x172>
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	bf14      	ite	ne
 8000e60:	f44f 3300 	movne.w	r3, #131072	; 0x20000
 8000e64:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8000e68:	4a17      	ldr	r2, [pc, #92]	; (8000ec8 <HAL_DMA_IRQHandler+0x1b4>)
 8000e6a:	e7d8      	b.n	8000e1e <HAL_DMA_IRQHandler+0x10a>
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	e7fb      	b.n	8000e68 <HAL_DMA_IRQHandler+0x154>
 8000e70:	2320      	movs	r3, #32
 8000e72:	e7f9      	b.n	8000e68 <HAL_DMA_IRQHandler+0x154>
 8000e74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e78:	e7f6      	b.n	8000e68 <HAL_DMA_IRQHandler+0x154>
 8000e7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e7e:	e7f3      	b.n	8000e68 <HAL_DMA_IRQHandler+0x154>
 8000e80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e84:	e7f0      	b.n	8000e68 <HAL_DMA_IRQHandler+0x154>
 8000e86:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000e8a:	e7ed      	b.n	8000e68 <HAL_DMA_IRQHandler+0x154>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000e8c:	2508      	movs	r5, #8
 8000e8e:	4095      	lsls	r5, r2
 8000e90:	4225      	tst	r5, r4
 8000e92:	d011      	beq.n	8000eb8 <HAL_DMA_IRQHandler+0x1a4>
 8000e94:	0709      	lsls	r1, r1, #28
 8000e96:	d50f      	bpl.n	8000eb8 <HAL_DMA_IRQHandler+0x1a4>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e98:	6819      	ldr	r1, [r3, #0]
 8000e9a:	f021 010e 	bic.w	r1, r1, #14
 8000e9e:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	fa03 f202 	lsl.w	r2, r3, r2
 8000ea6:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000ea8:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8000eaa:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8000eae:	2300      	movs	r3, #0
 8000eb0:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8000eb4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000eb6:	e757      	b.n	8000d68 <HAL_DMA_IRQHandler+0x54>
}
 8000eb8:	bc70      	pop	{r4, r5, r6}
 8000eba:	4770      	bx	lr
 8000ebc:	40020080 	.word	0x40020080
 8000ec0:	40020400 	.word	0x40020400
 8000ec4:	40020008 	.word	0x40020008
 8000ec8:	40020000 	.word	0x40020000

08000ecc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ecc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8000ed0:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000ed2:	4616      	mov	r6, r2
 8000ed4:	4b65      	ldr	r3, [pc, #404]	; (800106c <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ed6:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 800107c <HAL_GPIO_Init+0x1b0>
 8000eda:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8001080 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 8000ede:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ee2:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8000ee4:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ee8:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8000eec:	45a0      	cmp	r8, r4
 8000eee:	d17f      	bne.n	8000ff0 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8000ef0:	684d      	ldr	r5, [r1, #4]
 8000ef2:	2d12      	cmp	r5, #18
 8000ef4:	f000 80af 	beq.w	8001056 <HAL_GPIO_Init+0x18a>
 8000ef8:	f200 8088 	bhi.w	800100c <HAL_GPIO_Init+0x140>
 8000efc:	2d02      	cmp	r5, #2
 8000efe:	f000 80a7 	beq.w	8001050 <HAL_GPIO_Init+0x184>
 8000f02:	d87c      	bhi.n	8000ffe <HAL_GPIO_Init+0x132>
 8000f04:	2d00      	cmp	r5, #0
 8000f06:	f000 808e 	beq.w	8001026 <HAL_GPIO_Init+0x15a>
 8000f0a:	2d01      	cmp	r5, #1
 8000f0c:	f000 809e 	beq.w	800104c <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f10:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f14:	2cff      	cmp	r4, #255	; 0xff
 8000f16:	bf93      	iteet	ls
 8000f18:	4682      	movls	sl, r0
 8000f1a:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8000f1e:	3d08      	subhi	r5, #8
 8000f20:	f8d0 b000 	ldrls.w	fp, [r0]
 8000f24:	bf92      	itee	ls
 8000f26:	00b5      	lslls	r5, r6, #2
 8000f28:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000f2c:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f2e:	fa09 f805 	lsl.w	r8, r9, r5
 8000f32:	ea2b 0808 	bic.w	r8, fp, r8
 8000f36:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f3a:	bf88      	it	hi
 8000f3c:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f40:	ea48 0505 	orr.w	r5, r8, r5
 8000f44:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f48:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000f4c:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000f50:	d04e      	beq.n	8000ff0 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f52:	4d47      	ldr	r5, [pc, #284]	; (8001070 <HAL_GPIO_Init+0x1a4>)
 8000f54:	4f46      	ldr	r7, [pc, #280]	; (8001070 <HAL_GPIO_Init+0x1a4>)
 8000f56:	69ad      	ldr	r5, [r5, #24]
 8000f58:	f026 0803 	bic.w	r8, r6, #3
 8000f5c:	f045 0501 	orr.w	r5, r5, #1
 8000f60:	61bd      	str	r5, [r7, #24]
 8000f62:	69bd      	ldr	r5, [r7, #24]
 8000f64:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000f68:	f005 0501 	and.w	r5, r5, #1
 8000f6c:	9501      	str	r5, [sp, #4]
 8000f6e:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000f72:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f76:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000f78:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8000f7c:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000f80:	fa09 f90b 	lsl.w	r9, r9, fp
 8000f84:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f88:	4d3a      	ldr	r5, [pc, #232]	; (8001074 <HAL_GPIO_Init+0x1a8>)
 8000f8a:	42a8      	cmp	r0, r5
 8000f8c:	d068      	beq.n	8001060 <HAL_GPIO_Init+0x194>
 8000f8e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f92:	42a8      	cmp	r0, r5
 8000f94:	d066      	beq.n	8001064 <HAL_GPIO_Init+0x198>
 8000f96:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f9a:	42a8      	cmp	r0, r5
 8000f9c:	d064      	beq.n	8001068 <HAL_GPIO_Init+0x19c>
 8000f9e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000fa2:	42a8      	cmp	r0, r5
 8000fa4:	bf0c      	ite	eq
 8000fa6:	2503      	moveq	r5, #3
 8000fa8:	2504      	movne	r5, #4
 8000faa:	fa05 f50b 	lsl.w	r5, r5, fp
 8000fae:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 8000fb2:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000fb6:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fb8:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000fbc:	bf14      	ite	ne
 8000fbe:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000fc0:	43a5      	biceq	r5, r4
 8000fc2:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000fc4:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fc6:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000fca:	bf14      	ite	ne
 8000fcc:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000fce:	43a5      	biceq	r5, r4
 8000fd0:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000fd2:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fd4:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000fd8:	bf14      	ite	ne
 8000fda:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000fdc:	43a5      	biceq	r5, r4
 8000fde:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000fe0:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fe2:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000fe6:	bf14      	ite	ne
 8000fe8:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000fea:	ea25 0404 	biceq.w	r4, r5, r4
 8000fee:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8000ff0:	3601      	adds	r6, #1
 8000ff2:	2e10      	cmp	r6, #16
 8000ff4:	f47f af73 	bne.w	8000ede <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8000ff8:	b003      	add	sp, #12
 8000ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8000ffe:	2d03      	cmp	r5, #3
 8001000:	d022      	beq.n	8001048 <HAL_GPIO_Init+0x17c>
 8001002:	2d11      	cmp	r5, #17
 8001004:	d184      	bne.n	8000f10 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001006:	68ca      	ldr	r2, [r1, #12]
 8001008:	3204      	adds	r2, #4
          break;
 800100a:	e781      	b.n	8000f10 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 800100c:	4f1a      	ldr	r7, [pc, #104]	; (8001078 <HAL_GPIO_Init+0x1ac>)
 800100e:	42bd      	cmp	r5, r7
 8001010:	d009      	beq.n	8001026 <HAL_GPIO_Init+0x15a>
 8001012:	d812      	bhi.n	800103a <HAL_GPIO_Init+0x16e>
 8001014:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8001084 <HAL_GPIO_Init+0x1b8>
 8001018:	454d      	cmp	r5, r9
 800101a:	d004      	beq.n	8001026 <HAL_GPIO_Init+0x15a>
 800101c:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8001020:	454d      	cmp	r5, r9
 8001022:	f47f af75 	bne.w	8000f10 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001026:	688a      	ldr	r2, [r1, #8]
 8001028:	b1c2      	cbz	r2, 800105c <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800102a:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 800102c:	bf0c      	ite	eq
 800102e:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8001032:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001036:	2208      	movs	r2, #8
 8001038:	e76a      	b.n	8000f10 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 800103a:	4575      	cmp	r5, lr
 800103c:	d0f3      	beq.n	8001026 <HAL_GPIO_Init+0x15a>
 800103e:	4565      	cmp	r5, ip
 8001040:	d0f1      	beq.n	8001026 <HAL_GPIO_Init+0x15a>
 8001042:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8001088 <HAL_GPIO_Init+0x1bc>
 8001046:	e7eb      	b.n	8001020 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001048:	2200      	movs	r2, #0
 800104a:	e761      	b.n	8000f10 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800104c:	68ca      	ldr	r2, [r1, #12]
          break;
 800104e:	e75f      	b.n	8000f10 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001050:	68ca      	ldr	r2, [r1, #12]
 8001052:	3208      	adds	r2, #8
          break;
 8001054:	e75c      	b.n	8000f10 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001056:	68ca      	ldr	r2, [r1, #12]
 8001058:	320c      	adds	r2, #12
          break;
 800105a:	e759      	b.n	8000f10 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800105c:	2204      	movs	r2, #4
 800105e:	e757      	b.n	8000f10 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001060:	2500      	movs	r5, #0
 8001062:	e7a2      	b.n	8000faa <HAL_GPIO_Init+0xde>
 8001064:	2501      	movs	r5, #1
 8001066:	e7a0      	b.n	8000faa <HAL_GPIO_Init+0xde>
 8001068:	2502      	movs	r5, #2
 800106a:	e79e      	b.n	8000faa <HAL_GPIO_Init+0xde>
 800106c:	40010400 	.word	0x40010400
 8001070:	40021000 	.word	0x40021000
 8001074:	40010800 	.word	0x40010800
 8001078:	10210000 	.word	0x10210000
 800107c:	10310000 	.word	0x10310000
 8001080:	10320000 	.word	0x10320000
 8001084:	10110000 	.word	0x10110000
 8001088:	10220000 	.word	0x10220000

0800108c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800108c:	b10a      	cbz	r2, 8001092 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800108e:	6101      	str	r1, [r0, #16]
 8001090:	4770      	bx	lr
 8001092:	0409      	lsls	r1, r1, #16
 8001094:	e7fb      	b.n	800108e <HAL_GPIO_WritePin+0x2>
	...

08001098 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001098:	6803      	ldr	r3, [r0, #0]
{
 800109a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800109e:	07db      	lsls	r3, r3, #31
{
 80010a0:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010a2:	d414      	bmi.n	80010ce <HAL_RCC_OscConfig+0x36>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010a4:	682b      	ldr	r3, [r5, #0]
 80010a6:	079f      	lsls	r7, r3, #30
 80010a8:	d462      	bmi.n	8001170 <HAL_RCC_OscConfig+0xd8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010aa:	682b      	ldr	r3, [r5, #0]
 80010ac:	0719      	lsls	r1, r3, #28
 80010ae:	f100 8099 	bmi.w	80011e4 <HAL_RCC_OscConfig+0x14c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010b2:	682b      	ldr	r3, [r5, #0]
 80010b4:	075a      	lsls	r2, r3, #29
 80010b6:	f100 80c3 	bmi.w	8001240 <HAL_RCC_OscConfig+0x1a8>

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 80010ba:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80010bc:	2a00      	cmp	r2, #0
 80010be:	f040 8131 	bne.w	8001324 <HAL_RCC_OscConfig+0x28c>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010c2:	6a2a      	ldr	r2, [r5, #32]
 80010c4:	2a00      	cmp	r2, #0
 80010c6:	f040 8184 	bne.w	80013d2 <HAL_RCC_OscConfig+0x33a>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80010ca:	2000      	movs	r0, #0
 80010cc:	e014      	b.n	80010f8 <HAL_RCC_OscConfig+0x60>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80010ce:	4c90      	ldr	r4, [pc, #576]	; (8001310 <HAL_RCC_OscConfig+0x278>)
 80010d0:	6863      	ldr	r3, [r4, #4]
 80010d2:	f003 030c 	and.w	r3, r3, #12
 80010d6:	2b04      	cmp	r3, #4
 80010d8:	d007      	beq.n	80010ea <HAL_RCC_OscConfig+0x52>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010da:	6863      	ldr	r3, [r4, #4]
 80010dc:	f003 030c 	and.w	r3, r3, #12
 80010e0:	2b08      	cmp	r3, #8
 80010e2:	d10c      	bne.n	80010fe <HAL_RCC_OscConfig+0x66>
 80010e4:	6863      	ldr	r3, [r4, #4]
 80010e6:	03de      	lsls	r6, r3, #15
 80010e8:	d509      	bpl.n	80010fe <HAL_RCC_OscConfig+0x66>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010ea:	6823      	ldr	r3, [r4, #0]
 80010ec:	039c      	lsls	r4, r3, #14
 80010ee:	d5d9      	bpl.n	80010a4 <HAL_RCC_OscConfig+0xc>
 80010f0:	68ab      	ldr	r3, [r5, #8]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d1d6      	bne.n	80010a4 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80010f6:	2001      	movs	r0, #1
}
 80010f8:	b002      	add	sp, #8
 80010fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010fe:	68ab      	ldr	r3, [r5, #8]
 8001100:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001104:	d110      	bne.n	8001128 <HAL_RCC_OscConfig+0x90>
 8001106:	6823      	ldr	r3, [r4, #0]
 8001108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800110c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800110e:	f7ff fa59 	bl	80005c4 <HAL_GetTick>
 8001112:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001114:	6823      	ldr	r3, [r4, #0]
 8001116:	0398      	lsls	r0, r3, #14
 8001118:	d4c4      	bmi.n	80010a4 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800111a:	f7ff fa53 	bl	80005c4 <HAL_GetTick>
 800111e:	1b80      	subs	r0, r0, r6
 8001120:	2864      	cmp	r0, #100	; 0x64
 8001122:	d9f7      	bls.n	8001114 <HAL_RCC_OscConfig+0x7c>
            return HAL_TIMEOUT;
 8001124:	2003      	movs	r0, #3
 8001126:	e7e7      	b.n	80010f8 <HAL_RCC_OscConfig+0x60>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001128:	b99b      	cbnz	r3, 8001152 <HAL_RCC_OscConfig+0xba>
 800112a:	6823      	ldr	r3, [r4, #0]
 800112c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001130:	6023      	str	r3, [r4, #0]
 8001132:	6823      	ldr	r3, [r4, #0]
 8001134:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001138:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800113a:	f7ff fa43 	bl	80005c4 <HAL_GetTick>
 800113e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001140:	6823      	ldr	r3, [r4, #0]
 8001142:	0399      	lsls	r1, r3, #14
 8001144:	d5ae      	bpl.n	80010a4 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001146:	f7ff fa3d 	bl	80005c4 <HAL_GetTick>
 800114a:	1b80      	subs	r0, r0, r6
 800114c:	2864      	cmp	r0, #100	; 0x64
 800114e:	d9f7      	bls.n	8001140 <HAL_RCC_OscConfig+0xa8>
 8001150:	e7e8      	b.n	8001124 <HAL_RCC_OscConfig+0x8c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001152:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001156:	6823      	ldr	r3, [r4, #0]
 8001158:	d103      	bne.n	8001162 <HAL_RCC_OscConfig+0xca>
 800115a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800115e:	6023      	str	r3, [r4, #0]
 8001160:	e7d1      	b.n	8001106 <HAL_RCC_OscConfig+0x6e>
 8001162:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001166:	6023      	str	r3, [r4, #0]
 8001168:	6823      	ldr	r3, [r4, #0]
 800116a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800116e:	e7cd      	b.n	800110c <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001170:	4c67      	ldr	r4, [pc, #412]	; (8001310 <HAL_RCC_OscConfig+0x278>)
 8001172:	6863      	ldr	r3, [r4, #4]
 8001174:	f013 0f0c 	tst.w	r3, #12
 8001178:	d007      	beq.n	800118a <HAL_RCC_OscConfig+0xf2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800117a:	6863      	ldr	r3, [r4, #4]
 800117c:	f003 030c 	and.w	r3, r3, #12
 8001180:	2b08      	cmp	r3, #8
 8001182:	d110      	bne.n	80011a6 <HAL_RCC_OscConfig+0x10e>
 8001184:	6863      	ldr	r3, [r4, #4]
 8001186:	03da      	lsls	r2, r3, #15
 8001188:	d40d      	bmi.n	80011a6 <HAL_RCC_OscConfig+0x10e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800118a:	6823      	ldr	r3, [r4, #0]
 800118c:	079b      	lsls	r3, r3, #30
 800118e:	d502      	bpl.n	8001196 <HAL_RCC_OscConfig+0xfe>
 8001190:	696b      	ldr	r3, [r5, #20]
 8001192:	2b01      	cmp	r3, #1
 8001194:	d1af      	bne.n	80010f6 <HAL_RCC_OscConfig+0x5e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001196:	6823      	ldr	r3, [r4, #0]
 8001198:	69aa      	ldr	r2, [r5, #24]
 800119a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800119e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80011a2:	6023      	str	r3, [r4, #0]
 80011a4:	e781      	b.n	80010aa <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011a6:	696a      	ldr	r2, [r5, #20]
 80011a8:	4b5a      	ldr	r3, [pc, #360]	; (8001314 <HAL_RCC_OscConfig+0x27c>)
 80011aa:	b16a      	cbz	r2, 80011c8 <HAL_RCC_OscConfig+0x130>
        __HAL_RCC_HSI_ENABLE();
 80011ac:	2201      	movs	r2, #1
 80011ae:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80011b0:	f7ff fa08 	bl	80005c4 <HAL_GetTick>
 80011b4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011b6:	6823      	ldr	r3, [r4, #0]
 80011b8:	079f      	lsls	r7, r3, #30
 80011ba:	d4ec      	bmi.n	8001196 <HAL_RCC_OscConfig+0xfe>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011bc:	f7ff fa02 	bl	80005c4 <HAL_GetTick>
 80011c0:	1b80      	subs	r0, r0, r6
 80011c2:	2802      	cmp	r0, #2
 80011c4:	d9f7      	bls.n	80011b6 <HAL_RCC_OscConfig+0x11e>
 80011c6:	e7ad      	b.n	8001124 <HAL_RCC_OscConfig+0x8c>
        __HAL_RCC_HSI_DISABLE();
 80011c8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80011ca:	f7ff f9fb 	bl	80005c4 <HAL_GetTick>
 80011ce:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011d0:	6823      	ldr	r3, [r4, #0]
 80011d2:	0798      	lsls	r0, r3, #30
 80011d4:	f57f af69 	bpl.w	80010aa <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011d8:	f7ff f9f4 	bl	80005c4 <HAL_GetTick>
 80011dc:	1b80      	subs	r0, r0, r6
 80011de:	2802      	cmp	r0, #2
 80011e0:	d9f6      	bls.n	80011d0 <HAL_RCC_OscConfig+0x138>
 80011e2:	e79f      	b.n	8001124 <HAL_RCC_OscConfig+0x8c>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011e4:	69ea      	ldr	r2, [r5, #28]
 80011e6:	4c4a      	ldr	r4, [pc, #296]	; (8001310 <HAL_RCC_OscConfig+0x278>)
 80011e8:	4b4b      	ldr	r3, [pc, #300]	; (8001318 <HAL_RCC_OscConfig+0x280>)
 80011ea:	b1da      	cbz	r2, 8001224 <HAL_RCC_OscConfig+0x18c>
      __HAL_RCC_LSI_ENABLE();
 80011ec:	2201      	movs	r2, #1
 80011ee:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80011f0:	f7ff f9e8 	bl	80005c4 <HAL_GetTick>
 80011f4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80011f8:	079b      	lsls	r3, r3, #30
 80011fa:	d50d      	bpl.n	8001218 <HAL_RCC_OscConfig+0x180>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80011fc:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001200:	4b46      	ldr	r3, [pc, #280]	; (800131c <HAL_RCC_OscConfig+0x284>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	fbb3 f3f2 	udiv	r3, r3, r2
 8001208:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 800120a:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 800120c:	9b01      	ldr	r3, [sp, #4]
 800120e:	1e5a      	subs	r2, r3, #1
 8001210:	9201      	str	r2, [sp, #4]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d1f9      	bne.n	800120a <HAL_RCC_OscConfig+0x172>
 8001216:	e74c      	b.n	80010b2 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001218:	f7ff f9d4 	bl	80005c4 <HAL_GetTick>
 800121c:	1b80      	subs	r0, r0, r6
 800121e:	2802      	cmp	r0, #2
 8001220:	d9e9      	bls.n	80011f6 <HAL_RCC_OscConfig+0x15e>
 8001222:	e77f      	b.n	8001124 <HAL_RCC_OscConfig+0x8c>
      __HAL_RCC_LSI_DISABLE();
 8001224:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001226:	f7ff f9cd 	bl	80005c4 <HAL_GetTick>
 800122a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800122c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800122e:	079f      	lsls	r7, r3, #30
 8001230:	f57f af3f 	bpl.w	80010b2 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001234:	f7ff f9c6 	bl	80005c4 <HAL_GetTick>
 8001238:	1b80      	subs	r0, r0, r6
 800123a:	2802      	cmp	r0, #2
 800123c:	d9f6      	bls.n	800122c <HAL_RCC_OscConfig+0x194>
 800123e:	e771      	b.n	8001124 <HAL_RCC_OscConfig+0x8c>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001240:	4c33      	ldr	r4, [pc, #204]	; (8001310 <HAL_RCC_OscConfig+0x278>)
 8001242:	69e3      	ldr	r3, [r4, #28]
 8001244:	00de      	lsls	r6, r3, #3
 8001246:	d424      	bmi.n	8001292 <HAL_RCC_OscConfig+0x1fa>
      pwrclkchanged = SET;
 8001248:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800124a:	69e3      	ldr	r3, [r4, #28]
 800124c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001250:	61e3      	str	r3, [r4, #28]
 8001252:	69e3      	ldr	r3, [r4, #28]
 8001254:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001258:	9300      	str	r3, [sp, #0]
 800125a:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800125c:	4e30      	ldr	r6, [pc, #192]	; (8001320 <HAL_RCC_OscConfig+0x288>)
 800125e:	6833      	ldr	r3, [r6, #0]
 8001260:	05d8      	lsls	r0, r3, #23
 8001262:	d518      	bpl.n	8001296 <HAL_RCC_OscConfig+0x1fe>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001264:	692b      	ldr	r3, [r5, #16]
 8001266:	2b01      	cmp	r3, #1
 8001268:	d126      	bne.n	80012b8 <HAL_RCC_OscConfig+0x220>
 800126a:	6a23      	ldr	r3, [r4, #32]
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001272:	f7ff f9a7 	bl	80005c4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001276:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800127a:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800127c:	6a23      	ldr	r3, [r4, #32]
 800127e:	079a      	lsls	r2, r3, #30
 8001280:	d53f      	bpl.n	8001302 <HAL_RCC_OscConfig+0x26a>
    if(pwrclkchanged == SET)
 8001282:	2f00      	cmp	r7, #0
 8001284:	f43f af19 	beq.w	80010ba <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001288:	69e3      	ldr	r3, [r4, #28]
 800128a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800128e:	61e3      	str	r3, [r4, #28]
 8001290:	e713      	b.n	80010ba <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8001292:	2700      	movs	r7, #0
 8001294:	e7e2      	b.n	800125c <HAL_RCC_OscConfig+0x1c4>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001296:	6833      	ldr	r3, [r6, #0]
 8001298:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800129c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800129e:	f7ff f991 	bl	80005c4 <HAL_GetTick>
 80012a2:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012a4:	6833      	ldr	r3, [r6, #0]
 80012a6:	05d9      	lsls	r1, r3, #23
 80012a8:	d4dc      	bmi.n	8001264 <HAL_RCC_OscConfig+0x1cc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012aa:	f7ff f98b 	bl	80005c4 <HAL_GetTick>
 80012ae:	eba0 0008 	sub.w	r0, r0, r8
 80012b2:	2864      	cmp	r0, #100	; 0x64
 80012b4:	d9f6      	bls.n	80012a4 <HAL_RCC_OscConfig+0x20c>
 80012b6:	e735      	b.n	8001124 <HAL_RCC_OscConfig+0x8c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012b8:	b9ab      	cbnz	r3, 80012e6 <HAL_RCC_OscConfig+0x24e>
 80012ba:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012bc:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012c0:	f023 0301 	bic.w	r3, r3, #1
 80012c4:	6223      	str	r3, [r4, #32]
 80012c6:	6a23      	ldr	r3, [r4, #32]
 80012c8:	f023 0304 	bic.w	r3, r3, #4
 80012cc:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80012ce:	f7ff f979 	bl	80005c4 <HAL_GetTick>
 80012d2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012d4:	6a23      	ldr	r3, [r4, #32]
 80012d6:	079b      	lsls	r3, r3, #30
 80012d8:	d5d3      	bpl.n	8001282 <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012da:	f7ff f973 	bl	80005c4 <HAL_GetTick>
 80012de:	1b80      	subs	r0, r0, r6
 80012e0:	4540      	cmp	r0, r8
 80012e2:	d9f7      	bls.n	80012d4 <HAL_RCC_OscConfig+0x23c>
 80012e4:	e71e      	b.n	8001124 <HAL_RCC_OscConfig+0x8c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012e6:	2b05      	cmp	r3, #5
 80012e8:	6a23      	ldr	r3, [r4, #32]
 80012ea:	d103      	bne.n	80012f4 <HAL_RCC_OscConfig+0x25c>
 80012ec:	f043 0304 	orr.w	r3, r3, #4
 80012f0:	6223      	str	r3, [r4, #32]
 80012f2:	e7ba      	b.n	800126a <HAL_RCC_OscConfig+0x1d2>
 80012f4:	f023 0301 	bic.w	r3, r3, #1
 80012f8:	6223      	str	r3, [r4, #32]
 80012fa:	6a23      	ldr	r3, [r4, #32]
 80012fc:	f023 0304 	bic.w	r3, r3, #4
 8001300:	e7b6      	b.n	8001270 <HAL_RCC_OscConfig+0x1d8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001302:	f7ff f95f 	bl	80005c4 <HAL_GetTick>
 8001306:	eba0 0008 	sub.w	r0, r0, r8
 800130a:	42b0      	cmp	r0, r6
 800130c:	d9b6      	bls.n	800127c <HAL_RCC_OscConfig+0x1e4>
 800130e:	e709      	b.n	8001124 <HAL_RCC_OscConfig+0x8c>
 8001310:	40021000 	.word	0x40021000
 8001314:	42420000 	.word	0x42420000
 8001318:	42420480 	.word	0x42420480
 800131c:	2000000c 	.word	0x2000000c
 8001320:	40007000 	.word	0x40007000
    if((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8001324:	4c4f      	ldr	r4, [pc, #316]	; (8001464 <HAL_RCC_OscConfig+0x3cc>)
 8001326:	6863      	ldr	r3, [r4, #4]
 8001328:	03d8      	lsls	r0, r3, #15
 800132a:	d508      	bpl.n	800133e <HAL_RCC_OscConfig+0x2a6>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 800132c:	6863      	ldr	r3, [r4, #4]
 800132e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8001332:	2b08      	cmp	r3, #8
 8001334:	d103      	bne.n	800133e <HAL_RCC_OscConfig+0x2a6>
        ((READ_BIT(RCC->CFGR2,RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8001336:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8001338:	03d9      	lsls	r1, r3, #15
 800133a:	f53f aedc 	bmi.w	80010f6 <HAL_RCC_OscConfig+0x5e>
      if((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 800133e:	2a02      	cmp	r2, #2
 8001340:	d133      	bne.n	80013aa <HAL_RCC_OscConfig+0x312>
        if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLL3ON) && \
 8001342:	6823      	ldr	r3, [r4, #0]
 8001344:	00da      	lsls	r2, r3, #3
 8001346:	d506      	bpl.n	8001356 <HAL_RCC_OscConfig+0x2be>
          (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8001348:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLL3ON) && \
 800134a:	6b6a      	ldr	r2, [r5, #52]	; 0x34
          (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 800134c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
        if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLL3ON) && \
 8001350:	4293      	cmp	r3, r2
 8001352:	f47f aed0 	bne.w	80010f6 <HAL_RCC_OscConfig+0x5e>
        __HAL_RCC_PLL2_DISABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	4e43      	ldr	r6, [pc, #268]	; (8001468 <HAL_RCC_OscConfig+0x3d0>)
 800135a:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800135c:	f7ff f932 	bl	80005c4 <HAL_GetTick>
 8001360:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8001362:	6823      	ldr	r3, [r4, #0]
 8001364:	011b      	lsls	r3, r3, #4
 8001366:	d41a      	bmi.n	800139e <HAL_RCC_OscConfig+0x306>
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8001368:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800136a:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800136c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001370:	4313      	orrs	r3, r2
 8001372:	62e3      	str	r3, [r4, #44]	; 0x2c
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8001374:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001376:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8001378:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800137c:	4313      	orrs	r3, r2
 800137e:	62e3      	str	r3, [r4, #44]	; 0x2c
        __HAL_RCC_PLL2_ENABLE();
 8001380:	2301      	movs	r3, #1
 8001382:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001384:	f7ff f91e 	bl	80005c4 <HAL_GetTick>
 8001388:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 800138a:	6823      	ldr	r3, [r4, #0]
 800138c:	011f      	lsls	r7, r3, #4
 800138e:	f53f ae98 	bmi.w	80010c2 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8001392:	f7ff f917 	bl	80005c4 <HAL_GetTick>
 8001396:	1b80      	subs	r0, r0, r6
 8001398:	2864      	cmp	r0, #100	; 0x64
 800139a:	d9f6      	bls.n	800138a <HAL_RCC_OscConfig+0x2f2>
 800139c:	e6c2      	b.n	8001124 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800139e:	f7ff f911 	bl	80005c4 <HAL_GetTick>
 80013a2:	1bc0      	subs	r0, r0, r7
 80013a4:	2864      	cmp	r0, #100	; 0x64
 80013a6:	d9dc      	bls.n	8001362 <HAL_RCC_OscConfig+0x2ca>
 80013a8:	e6bc      	b.n	8001124 <HAL_RCC_OscConfig+0x8c>
        __HAL_RCC_PLL2_DISABLE();
 80013aa:	2200      	movs	r2, #0
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 80013ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80013ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013b2:	62e3      	str	r3, [r4, #44]	; 0x2c
        __HAL_RCC_PLL2_DISABLE();
 80013b4:	4b2c      	ldr	r3, [pc, #176]	; (8001468 <HAL_RCC_OscConfig+0x3d0>)
 80013b6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80013b8:	f7ff f904 	bl	80005c4 <HAL_GetTick>
 80013bc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 80013be:	6823      	ldr	r3, [r4, #0]
 80013c0:	0118      	lsls	r0, r3, #4
 80013c2:	f57f ae7e 	bpl.w	80010c2 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80013c6:	f7ff f8fd 	bl	80005c4 <HAL_GetTick>
 80013ca:	1b80      	subs	r0, r0, r6
 80013cc:	2864      	cmp	r0, #100	; 0x64
 80013ce:	d9f6      	bls.n	80013be <HAL_RCC_OscConfig+0x326>
 80013d0:	e6a8      	b.n	8001124 <HAL_RCC_OscConfig+0x8c>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013d2:	4c24      	ldr	r4, [pc, #144]	; (8001464 <HAL_RCC_OscConfig+0x3cc>)
 80013d4:	6863      	ldr	r3, [r4, #4]
 80013d6:	f003 030c 	and.w	r3, r3, #12
 80013da:	2b08      	cmp	r3, #8
 80013dc:	f43f ae8b 	beq.w	80010f6 <HAL_RCC_OscConfig+0x5e>
 80013e0:	2300      	movs	r3, #0
 80013e2:	4e22      	ldr	r6, [pc, #136]	; (800146c <HAL_RCC_OscConfig+0x3d4>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013e4:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80013e6:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013e8:	d12f      	bne.n	800144a <HAL_RCC_OscConfig+0x3b2>
        tickstart = HAL_GetTick();
 80013ea:	f7ff f8eb 	bl	80005c4 <HAL_GetTick>
 80013ee:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013f0:	6823      	ldr	r3, [r4, #0]
 80013f2:	0199      	lsls	r1, r3, #6
 80013f4:	d423      	bmi.n	800143e <HAL_RCC_OscConfig+0x3a6>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80013f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80013f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013fc:	d109      	bne.n	8001412 <HAL_RCC_OscConfig+0x37a>
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 80013fe:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001400:	6869      	ldr	r1, [r5, #4]
 8001402:	430a      	orrs	r2, r1
 8001404:	62e2      	str	r2, [r4, #44]	; 0x2c
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001406:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001408:	68e9      	ldr	r1, [r5, #12]
 800140a:	f022 020f 	bic.w	r2, r2, #15
 800140e:	430a      	orrs	r2, r1
 8001410:	62e2      	str	r2, [r4, #44]	; 0x2c
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001412:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8001414:	6862      	ldr	r2, [r4, #4]
 8001416:	430b      	orrs	r3, r1
 8001418:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800141c:	4313      	orrs	r3, r2
 800141e:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001420:	2301      	movs	r3, #1
 8001422:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001424:	f7ff f8ce 	bl	80005c4 <HAL_GetTick>
 8001428:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800142a:	6823      	ldr	r3, [r4, #0]
 800142c:	019a      	lsls	r2, r3, #6
 800142e:	f53f ae4c 	bmi.w	80010ca <HAL_RCC_OscConfig+0x32>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001432:	f7ff f8c7 	bl	80005c4 <HAL_GetTick>
 8001436:	1b40      	subs	r0, r0, r5
 8001438:	2802      	cmp	r0, #2
 800143a:	d9f6      	bls.n	800142a <HAL_RCC_OscConfig+0x392>
 800143c:	e672      	b.n	8001124 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800143e:	f7ff f8c1 	bl	80005c4 <HAL_GetTick>
 8001442:	1bc0      	subs	r0, r0, r7
 8001444:	2802      	cmp	r0, #2
 8001446:	d9d3      	bls.n	80013f0 <HAL_RCC_OscConfig+0x358>
 8001448:	e66c      	b.n	8001124 <HAL_RCC_OscConfig+0x8c>
        tickstart = HAL_GetTick();
 800144a:	f7ff f8bb 	bl	80005c4 <HAL_GetTick>
 800144e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001450:	6823      	ldr	r3, [r4, #0]
 8001452:	019b      	lsls	r3, r3, #6
 8001454:	f57f ae39 	bpl.w	80010ca <HAL_RCC_OscConfig+0x32>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001458:	f7ff f8b4 	bl	80005c4 <HAL_GetTick>
 800145c:	1b40      	subs	r0, r0, r5
 800145e:	2802      	cmp	r0, #2
 8001460:	d9f6      	bls.n	8001450 <HAL_RCC_OscConfig+0x3b8>
 8001462:	e65f      	b.n	8001124 <HAL_RCC_OscConfig+0x8c>
 8001464:	40021000 	.word	0x40021000
 8001468:	42420068 	.word	0x42420068
 800146c:	42420060 	.word	0x42420060

08001470 <HAL_RCC_GetSysClockFreq>:
{
 8001470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001472:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8001474:	466a      	mov	r2, sp
 8001476:	4b2a      	ldr	r3, [pc, #168]	; (8001520 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001478:	f103 0508 	add.w	r5, r3, #8
 800147c:	4614      	mov	r4, r2
 800147e:	6818      	ldr	r0, [r3, #0]
 8001480:	6859      	ldr	r1, [r3, #4]
 8001482:	3308      	adds	r3, #8
 8001484:	c403      	stmia	r4!, {r0, r1}
 8001486:	42ab      	cmp	r3, r5
 8001488:	4622      	mov	r2, r4
 800148a:	d1f7      	bne.n	800147c <HAL_RCC_GetSysClockFreq+0xc>
 800148c:	6818      	ldr	r0, [r3, #0]
 800148e:	889b      	ldrh	r3, [r3, #4]
 8001490:	6020      	str	r0, [r4, #0]
 8001492:	80a3      	strh	r3, [r4, #4]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8001494:	4b23      	ldr	r3, [pc, #140]	; (8001524 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001496:	ac04      	add	r4, sp, #16
 8001498:	f103 0510 	add.w	r5, r3, #16
 800149c:	4622      	mov	r2, r4
 800149e:	6818      	ldr	r0, [r3, #0]
 80014a0:	6859      	ldr	r1, [r3, #4]
 80014a2:	3308      	adds	r3, #8
 80014a4:	c203      	stmia	r2!, {r0, r1}
 80014a6:	42ab      	cmp	r3, r5
 80014a8:	4614      	mov	r4, r2
 80014aa:	d1f7      	bne.n	800149c <HAL_RCC_GetSysClockFreq+0x2c>
  tmpreg = RCC->CFGR;
 80014ac:	491e      	ldr	r1, [pc, #120]	; (8001528 <HAL_RCC_GetSysClockFreq+0xb8>)
 80014ae:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80014b0:	f003 020c 	and.w	r2, r3, #12
 80014b4:	2a08      	cmp	r2, #8
 80014b6:	d131      	bne.n	800151c <HAL_RCC_GetSysClockFreq+0xac>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80014b8:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80014bc:	a808      	add	r0, sp, #32
 80014be:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80014c0:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80014c2:	f812 6c20 	ldrb.w	r6, [r2, #-32]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80014c6:	d526      	bpl.n	8001516 <HAL_RCC_GetSysClockFreq+0xa6>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 80014c8:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80014ca:	f003 030f 	and.w	r3, r3, #15
 80014ce:	4403      	add	r3, r0
 80014d0:	f813 2c10 	ldrb.w	r2, [r3, #-16]
        if(HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 80014d4:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80014d6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80014da:	4b14      	ldr	r3, [pc, #80]	; (800152c <HAL_RCC_GetSysClockFreq+0xbc>)
 80014dc:	d016      	beq.n	800150c <HAL_RCC_GetSysClockFreq+0x9c>
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 80014de:	6acf      	ldr	r7, [r1, #44]	; 0x2c
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 80014e0:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 80014e2:	f3c4 2403 	ubfx	r4, r4, #8, #4
 80014e6:	3402      	adds	r4, #2
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 80014e8:	fba4 4506 	umull	r4, r5, r4, r6
 80014ec:	fba4 0103 	umull	r0, r1, r4, r3
 80014f0:	fb03 1105 	mla	r1, r3, r5, r1
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 80014f4:	f3c7 1303 	ubfx	r3, r7, #4, #4
 80014f8:	3301      	adds	r3, #1
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 80014fa:	fba3 2302 	umull	r2, r3, r3, r2
 80014fe:	f7fe fe97 	bl	8000230 <__aeabi_uldivmod>
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8001502:	2e0d      	cmp	r6, #13
 8001504:	d100      	bne.n	8001508 <HAL_RCC_GetSysClockFreq+0x98>
            pllclk = pllclk / 2;
 8001506:	0840      	lsrs	r0, r0, #1
}
 8001508:	b009      	add	sp, #36	; 0x24
 800150a:	bdf0      	pop	{r4, r5, r6, r7, pc}
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 800150c:	fb03 f006 	mul.w	r0, r3, r6
 8001510:	fbb0 f0f2 	udiv	r0, r0, r2
 8001514:	e7f5      	b.n	8001502 <HAL_RCC_GetSysClockFreq+0x92>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001516:	4806      	ldr	r0, [pc, #24]	; (8001530 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001518:	4370      	muls	r0, r6
 800151a:	e7f5      	b.n	8001508 <HAL_RCC_GetSysClockFreq+0x98>
      sysclockfreq = HSE_VALUE;
 800151c:	4803      	ldr	r0, [pc, #12]	; (800152c <HAL_RCC_GetSysClockFreq+0xbc>)
  return sysclockfreq;
 800151e:	e7f3      	b.n	8001508 <HAL_RCC_GetSysClockFreq+0x98>
 8001520:	080033e4 	.word	0x080033e4
 8001524:	080033f2 	.word	0x080033f2
 8001528:	40021000 	.word	0x40021000
 800152c:	007a1200 	.word	0x007a1200
 8001530:	003d0900 	.word	0x003d0900

08001534 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001534:	4a54      	ldr	r2, [pc, #336]	; (8001688 <HAL_RCC_ClockConfig+0x154>)
{
 8001536:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800153a:	6813      	ldr	r3, [r2, #0]
{
 800153c:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800153e:	f003 0307 	and.w	r3, r3, #7
 8001542:	428b      	cmp	r3, r1
{
 8001544:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001546:	d32a      	bcc.n	800159e <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001548:	6829      	ldr	r1, [r5, #0]
 800154a:	078c      	lsls	r4, r1, #30
 800154c:	d434      	bmi.n	80015b8 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800154e:	07ca      	lsls	r2, r1, #31
 8001550:	d447      	bmi.n	80015e2 <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001552:	4a4d      	ldr	r2, [pc, #308]	; (8001688 <HAL_RCC_ClockConfig+0x154>)
 8001554:	6813      	ldr	r3, [r2, #0]
 8001556:	f003 0307 	and.w	r3, r3, #7
 800155a:	429e      	cmp	r6, r3
 800155c:	f0c0 8082 	bcc.w	8001664 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001560:	682a      	ldr	r2, [r5, #0]
 8001562:	4c4a      	ldr	r4, [pc, #296]	; (800168c <HAL_RCC_ClockConfig+0x158>)
 8001564:	f012 0f04 	tst.w	r2, #4
 8001568:	f040 8087 	bne.w	800167a <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800156c:	0713      	lsls	r3, r2, #28
 800156e:	d506      	bpl.n	800157e <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001570:	6863      	ldr	r3, [r4, #4]
 8001572:	692a      	ldr	r2, [r5, #16]
 8001574:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001578:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800157c:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800157e:	f7ff ff77 	bl	8001470 <HAL_RCC_GetSysClockFreq>
 8001582:	6863      	ldr	r3, [r4, #4]
 8001584:	4a42      	ldr	r2, [pc, #264]	; (8001690 <HAL_RCC_ClockConfig+0x15c>)
 8001586:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800158a:	5cd3      	ldrb	r3, [r2, r3]
 800158c:	40d8      	lsrs	r0, r3
 800158e:	4b41      	ldr	r3, [pc, #260]	; (8001694 <HAL_RCC_ClockConfig+0x160>)
 8001590:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001592:	200f      	movs	r0, #15
 8001594:	f7fe ffd4 	bl	8000540 <HAL_InitTick>
  return HAL_OK;
 8001598:	2000      	movs	r0, #0
}
 800159a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800159e:	6813      	ldr	r3, [r2, #0]
 80015a0:	f023 0307 	bic.w	r3, r3, #7
 80015a4:	430b      	orrs	r3, r1
 80015a6:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80015a8:	6813      	ldr	r3, [r2, #0]
 80015aa:	f003 0307 	and.w	r3, r3, #7
 80015ae:	4299      	cmp	r1, r3
 80015b0:	d0ca      	beq.n	8001548 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 80015b2:	2001      	movs	r0, #1
 80015b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80015b8:	4b34      	ldr	r3, [pc, #208]	; (800168c <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015ba:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015be:	bf1e      	ittt	ne
 80015c0:	685a      	ldrne	r2, [r3, #4]
 80015c2:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 80015c6:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015c8:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015ca:	bf42      	ittt	mi
 80015cc:	685a      	ldrmi	r2, [r3, #4]
 80015ce:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 80015d2:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015d4:	685a      	ldr	r2, [r3, #4]
 80015d6:	68a8      	ldr	r0, [r5, #8]
 80015d8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80015dc:	4302      	orrs	r2, r0
 80015de:	605a      	str	r2, [r3, #4]
 80015e0:	e7b5      	b.n	800154e <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015e2:	686a      	ldr	r2, [r5, #4]
 80015e4:	4c29      	ldr	r4, [pc, #164]	; (800168c <HAL_RCC_ClockConfig+0x158>)
 80015e6:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015e8:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015ea:	d11c      	bne.n	8001626 <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ec:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015f0:	d0df      	beq.n	80015b2 <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015f2:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015f4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015f8:	f023 0303 	bic.w	r3, r3, #3
 80015fc:	4313      	orrs	r3, r2
 80015fe:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8001600:	f7fe ffe0 	bl	80005c4 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001604:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8001606:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001608:	2b01      	cmp	r3, #1
 800160a:	d114      	bne.n	8001636 <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800160c:	6863      	ldr	r3, [r4, #4]
 800160e:	f003 030c 	and.w	r3, r3, #12
 8001612:	2b04      	cmp	r3, #4
 8001614:	d09d      	beq.n	8001552 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001616:	f7fe ffd5 	bl	80005c4 <HAL_GetTick>
 800161a:	1bc0      	subs	r0, r0, r7
 800161c:	4540      	cmp	r0, r8
 800161e:	d9f5      	bls.n	800160c <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 8001620:	2003      	movs	r0, #3
 8001622:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001626:	2a02      	cmp	r2, #2
 8001628:	d102      	bne.n	8001630 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800162a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800162e:	e7df      	b.n	80015f0 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001630:	f013 0f02 	tst.w	r3, #2
 8001634:	e7dc      	b.n	80015f0 <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001636:	2b02      	cmp	r3, #2
 8001638:	d10f      	bne.n	800165a <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800163a:	6863      	ldr	r3, [r4, #4]
 800163c:	f003 030c 	and.w	r3, r3, #12
 8001640:	2b08      	cmp	r3, #8
 8001642:	d086      	beq.n	8001552 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001644:	f7fe ffbe 	bl	80005c4 <HAL_GetTick>
 8001648:	1bc0      	subs	r0, r0, r7
 800164a:	4540      	cmp	r0, r8
 800164c:	d9f5      	bls.n	800163a <HAL_RCC_ClockConfig+0x106>
 800164e:	e7e7      	b.n	8001620 <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001650:	f7fe ffb8 	bl	80005c4 <HAL_GetTick>
 8001654:	1bc0      	subs	r0, r0, r7
 8001656:	4540      	cmp	r0, r8
 8001658:	d8e2      	bhi.n	8001620 <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800165a:	6863      	ldr	r3, [r4, #4]
 800165c:	f013 0f0c 	tst.w	r3, #12
 8001660:	d1f6      	bne.n	8001650 <HAL_RCC_ClockConfig+0x11c>
 8001662:	e776      	b.n	8001552 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001664:	6813      	ldr	r3, [r2, #0]
 8001666:	f023 0307 	bic.w	r3, r3, #7
 800166a:	4333      	orrs	r3, r6
 800166c:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800166e:	6813      	ldr	r3, [r2, #0]
 8001670:	f003 0307 	and.w	r3, r3, #7
 8001674:	429e      	cmp	r6, r3
 8001676:	d19c      	bne.n	80015b2 <HAL_RCC_ClockConfig+0x7e>
 8001678:	e772      	b.n	8001560 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800167a:	6863      	ldr	r3, [r4, #4]
 800167c:	68e9      	ldr	r1, [r5, #12]
 800167e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001682:	430b      	orrs	r3, r1
 8001684:	6063      	str	r3, [r4, #4]
 8001686:	e771      	b.n	800156c <HAL_RCC_ClockConfig+0x38>
 8001688:	40022000 	.word	0x40022000
 800168c:	40021000 	.word	0x40021000
 8001690:	08003429 	.word	0x08003429
 8001694:	2000000c 	.word	0x2000000c

08001698 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001698:	4b04      	ldr	r3, [pc, #16]	; (80016ac <HAL_RCC_GetPCLK1Freq+0x14>)
 800169a:	4a05      	ldr	r2, [pc, #20]	; (80016b0 <HAL_RCC_GetPCLK1Freq+0x18>)
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80016a2:	5cd3      	ldrb	r3, [r2, r3]
 80016a4:	4a03      	ldr	r2, [pc, #12]	; (80016b4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80016a6:	6810      	ldr	r0, [r2, #0]
}    
 80016a8:	40d8      	lsrs	r0, r3
 80016aa:	4770      	bx	lr
 80016ac:	40021000 	.word	0x40021000
 80016b0:	08003439 	.word	0x08003439
 80016b4:	2000000c 	.word	0x2000000c

080016b8 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80016b8:	4b04      	ldr	r3, [pc, #16]	; (80016cc <HAL_RCC_GetPCLK2Freq+0x14>)
 80016ba:	4a05      	ldr	r2, [pc, #20]	; (80016d0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80016c2:	5cd3      	ldrb	r3, [r2, r3]
 80016c4:	4a03      	ldr	r2, [pc, #12]	; (80016d4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80016c6:	6810      	ldr	r0, [r2, #0]
} 
 80016c8:	40d8      	lsrs	r0, r3
 80016ca:	4770      	bx	lr
 80016cc:	40021000 	.word	0x40021000
 80016d0:	08003439 	.word	0x08003439
 80016d4:	2000000c 	.word	0x2000000c

080016d8 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80016d8:	6803      	ldr	r3, [r0, #0]
{
 80016da:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80016de:	f013 0f01 	tst.w	r3, #1
{
 80016e2:	4605      	mov	r5, r0
 80016e4:	4c57      	ldr	r4, [pc, #348]	; (8001844 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80016e6:	d01f      	beq.n	8001728 <HAL_RCCEx_PeriphCLKConfig+0x50>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016e8:	69e3      	ldr	r3, [r4, #28]
 80016ea:	00da      	lsls	r2, r3, #3
 80016ec:	d447      	bmi.n	800177e <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 80016ee:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 80016f0:	69e3      	ldr	r3, [r4, #28]
 80016f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016f6:	61e3      	str	r3, [r4, #28]
 80016f8:	69e3      	ldr	r3, [r4, #28]
 80016fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016fe:	9301      	str	r3, [sp, #4]
 8001700:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001702:	4e51      	ldr	r6, [pc, #324]	; (8001848 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 8001704:	6833      	ldr	r3, [r6, #0]
 8001706:	05db      	lsls	r3, r3, #23
 8001708:	d53b      	bpl.n	8001782 <HAL_RCCEx_PeriphCLKConfig+0xaa>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800170a:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800170c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001710:	d14b      	bne.n	80017aa <HAL_RCCEx_PeriphCLKConfig+0xd2>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001712:	6a23      	ldr	r3, [r4, #32]
 8001714:	686a      	ldr	r2, [r5, #4]
 8001716:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800171a:	4313      	orrs	r3, r2
 800171c:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800171e:	b11f      	cbz	r7, 8001728 <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001720:	69e3      	ldr	r3, [r4, #28]
 8001722:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001726:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001728:	682a      	ldr	r2, [r5, #0]
 800172a:	0793      	lsls	r3, r2, #30
 800172c:	d505      	bpl.n	800173a <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800172e:	6863      	ldr	r3, [r4, #4]
 8001730:	68a9      	ldr	r1, [r5, #8]
 8001732:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001736:	430b      	orrs	r3, r1
 8001738:	6063      	str	r3, [r4, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 800173a:	0757      	lsls	r7, r2, #29
 800173c:	d505      	bpl.n	800174a <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800173e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001740:	68e9      	ldr	r1, [r5, #12]
 8001742:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001746:	430b      	orrs	r3, r1
 8001748:	62e3      	str	r3, [r4, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 800174a:	0716      	lsls	r6, r2, #28
 800174c:	d505      	bpl.n	800175a <HAL_RCCEx_PeriphCLKConfig+0x82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));
    
    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 800174e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001750:	692a      	ldr	r2, [r5, #16]
 8001752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001756:	4313      	orrs	r3, r2
 8001758:	62e3      	str	r3, [r4, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/ 
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 800175a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800175c:	0398      	lsls	r0, r3, #14
 800175e:	d466      	bmi.n	800182e <HAL_RCCEx_PeriphCLKConfig+0x156>
 8001760:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001762:	0359      	lsls	r1, r3, #13
 8001764:	d463      	bmi.n	800182e <HAL_RCCEx_PeriphCLKConfig+0x156>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001766:	6828      	ldr	r0, [r5, #0]
 8001768:	f010 0010 	ands.w	r0, r0, #16
 800176c:	d01a      	beq.n	80017a4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800176e:	6863      	ldr	r3, [r4, #4]
 8001770:	69ea      	ldr	r2, [r5, #28]
 8001772:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001776:	4313      	orrs	r3, r2
 8001778:	6063      	str	r3, [r4, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800177a:	2000      	movs	r0, #0
 800177c:	e012      	b.n	80017a4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    FlagStatus       pwrclkchanged = RESET;
 800177e:	2700      	movs	r7, #0
 8001780:	e7bf      	b.n	8001702 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001782:	6833      	ldr	r3, [r6, #0]
 8001784:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001788:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800178a:	f7fe ff1b 	bl	80005c4 <HAL_GetTick>
 800178e:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001790:	6833      	ldr	r3, [r6, #0]
 8001792:	05d8      	lsls	r0, r3, #23
 8001794:	d4b9      	bmi.n	800170a <HAL_RCCEx_PeriphCLKConfig+0x32>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001796:	f7fe ff15 	bl	80005c4 <HAL_GetTick>
 800179a:	eba0 0008 	sub.w	r0, r0, r8
 800179e:	2864      	cmp	r0, #100	; 0x64
 80017a0:	d9f6      	bls.n	8001790 <HAL_RCCEx_PeriphCLKConfig+0xb8>
          return HAL_TIMEOUT;
 80017a2:	2003      	movs	r0, #3
}
 80017a4:	b002      	add	sp, #8
 80017a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80017aa:	686a      	ldr	r2, [r5, #4]
 80017ac:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d0ae      	beq.n	8001712 <HAL_RCCEx_PeriphCLKConfig+0x3a>
      __HAL_RCC_BACKUPRESET_FORCE();
 80017b4:	2001      	movs	r0, #1
 80017b6:	4a25      	ldr	r2, [pc, #148]	; (800184c <HAL_RCCEx_PeriphCLKConfig+0x174>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80017b8:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80017ba:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80017bc:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80017be:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 80017c2:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 80017c4:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80017c6:	07d9      	lsls	r1, r3, #31
 80017c8:	d5a3      	bpl.n	8001712 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        tickstart = HAL_GetTick();
 80017ca:	f7fe fefb 	bl	80005c4 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ce:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80017d2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017d4:	6a23      	ldr	r3, [r4, #32]
 80017d6:	079a      	lsls	r2, r3, #30
 80017d8:	d49b      	bmi.n	8001712 <HAL_RCCEx_PeriphCLKConfig+0x3a>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017da:	f7fe fef3 	bl	80005c4 <HAL_GetTick>
 80017de:	1b80      	subs	r0, r0, r6
 80017e0:	4540      	cmp	r0, r8
 80017e2:	d9f7      	bls.n	80017d4 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 80017e4:	e7dd      	b.n	80017a2 <HAL_RCCEx_PeriphCLKConfig+0xca>
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLL2ON) && \
 80017e6:	6823      	ldr	r3, [r4, #0]
 80017e8:	69a9      	ldr	r1, [r5, #24]
 80017ea:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 80017ee:	d004      	beq.n	80017fa <HAL_RCCEx_PeriphCLKConfig+0x122>
        (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 80017f0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80017f2:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLL2ON) && \
 80017f6:	428a      	cmp	r2, r1
 80017f8:	d122      	bne.n	8001840 <HAL_RCCEx_PeriphCLKConfig+0x168>
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 80017fa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80017fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001800:	430b      	orrs	r3, r1
 8001802:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 8001804:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001806:	696a      	ldr	r2, [r5, #20]
 8001808:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800180c:	4313      	orrs	r3, r2
      __HAL_RCC_PLLI2S_ENABLE();
 800180e:	2201      	movs	r2, #1
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 8001810:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_RCC_PLLI2S_ENABLE();
 8001812:	4b0f      	ldr	r3, [pc, #60]	; (8001850 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8001814:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001816:	f7fe fed5 	bl	80005c4 <HAL_GetTick>
 800181a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800181c:	6823      	ldr	r3, [r4, #0]
 800181e:	009a      	lsls	r2, r3, #2
 8001820:	d4a1      	bmi.n	8001766 <HAL_RCCEx_PeriphCLKConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001822:	f7fe fecf 	bl	80005c4 <HAL_GetTick>
 8001826:	1b80      	subs	r0, r0, r6
 8001828:	2864      	cmp	r0, #100	; 0x64
 800182a:	d9f7      	bls.n	800181c <HAL_RCCEx_PeriphCLKConfig+0x144>
 800182c:	e7b9      	b.n	80017a2 <HAL_RCCEx_PeriphCLKConfig+0xca>
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 800182e:	6823      	ldr	r3, [r4, #0]
 8001830:	00db      	lsls	r3, r3, #3
 8001832:	d5d8      	bpl.n	80017e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 8001834:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001836:	696a      	ldr	r2, [r5, #20]
 8001838:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800183c:	4293      	cmp	r3, r2
 800183e:	d092      	beq.n	8001766 <HAL_RCCEx_PeriphCLKConfig+0x8e>
        return HAL_ERROR;
 8001840:	2001      	movs	r0, #1
 8001842:	e7af      	b.n	80017a4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8001844:	40021000 	.word	0x40021000
 8001848:	40007000 	.word	0x40007000
 800184c:	42420440 	.word	0x42420440
 8001850:	42420070 	.word	0x42420070

08001854 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001854:	6a03      	ldr	r3, [r0, #32]
{
 8001856:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001858:	f023 0301 	bic.w	r3, r3, #1
 800185c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800185e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001860:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001862:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001864:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001866:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800186a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800186c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 800186e:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8001872:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001874:	4d0a      	ldr	r5, [pc, #40]	; (80018a0 <TIM_OC1_SetConfig+0x4c>)
 8001876:	42a8      	cmp	r0, r5
 8001878:	d10b      	bne.n	8001892 <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800187a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800187c:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001880:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001882:	698e      	ldr	r6, [r1, #24]
 8001884:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001886:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 800188a:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 800188c:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001890:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001892:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001894:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001896:	684a      	ldr	r2, [r1, #4]
 8001898:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800189a:	6203      	str	r3, [r0, #32]
 800189c:	bd70      	pop	{r4, r5, r6, pc}
 800189e:	bf00      	nop
 80018a0:	40012c00 	.word	0x40012c00

080018a4 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80018a4:	6a03      	ldr	r3, [r0, #32]
{
 80018a6:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80018a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018ac:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80018ae:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80018b0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80018b2:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80018b4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80018b6:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80018ba:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80018bc:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80018be:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80018c2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80018c6:	4d0b      	ldr	r5, [pc, #44]	; (80018f4 <TIM_OC3_SetConfig+0x50>)
 80018c8:	42a8      	cmp	r0, r5
 80018ca:	d10d      	bne.n	80018e8 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80018cc:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80018ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80018d2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80018d6:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80018d8:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80018da:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80018de:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 80018e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80018e4:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80018e8:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80018ea:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80018ec:	684a      	ldr	r2, [r1, #4]
 80018ee:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80018f0:	6203      	str	r3, [r0, #32]
 80018f2:	bd70      	pop	{r4, r5, r6, pc}
 80018f4:	40012c00 	.word	0x40012c00

080018f8 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80018f8:	6a03      	ldr	r3, [r0, #32]
{
 80018fa:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80018fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001900:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001902:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001904:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001906:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001908:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800190a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800190e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001912:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8001914:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001918:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800191c:	4d06      	ldr	r5, [pc, #24]	; (8001938 <TIM_OC4_SetConfig+0x40>)
 800191e:	42a8      	cmp	r0, r5
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8001920:	bf02      	ittt	eq
 8001922:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001924:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8001928:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800192c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800192e:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001930:	684a      	ldr	r2, [r1, #4]
 8001932:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001934:	6203      	str	r3, [r0, #32]
 8001936:	bd30      	pop	{r4, r5, pc}
 8001938:	40012c00 	.word	0x40012c00

0800193c <HAL_TIM_PWM_MspInit>:
 800193c:	4770      	bx	lr

0800193e <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800193e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001942:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8001944:	2b01      	cmp	r3, #1
 8001946:	f04f 0302 	mov.w	r3, #2
 800194a:	d01c      	beq.n	8001986 <HAL_TIM_ConfigClockSource+0x48>
 800194c:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800194e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001952:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8001954:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001958:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800195a:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800195e:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001962:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8001964:	680a      	ldr	r2, [r1, #0]
 8001966:	2a40      	cmp	r2, #64	; 0x40
 8001968:	d079      	beq.n	8001a5e <HAL_TIM_ConfigClockSource+0x120>
 800196a:	d819      	bhi.n	80019a0 <HAL_TIM_ConfigClockSource+0x62>
 800196c:	2a10      	cmp	r2, #16
 800196e:	f000 8093 	beq.w	8001a98 <HAL_TIM_ConfigClockSource+0x15a>
 8001972:	d80a      	bhi.n	800198a <HAL_TIM_ConfigClockSource+0x4c>
 8001974:	2a00      	cmp	r2, #0
 8001976:	f000 8089 	beq.w	8001a8c <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 800197a:	2301      	movs	r3, #1
 800197c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001980:	2300      	movs	r3, #0
 8001982:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001986:	4618      	mov	r0, r3
}
 8001988:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 800198a:	2a20      	cmp	r2, #32
 800198c:	f000 808a 	beq.w	8001aa4 <HAL_TIM_ConfigClockSource+0x166>
 8001990:	2a30      	cmp	r2, #48	; 0x30
 8001992:	d1f2      	bne.n	800197a <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001994:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001996:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800199a:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 800199e:	e036      	b.n	8001a0e <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 80019a0:	2a70      	cmp	r2, #112	; 0x70
 80019a2:	d036      	beq.n	8001a12 <HAL_TIM_ConfigClockSource+0xd4>
 80019a4:	d81b      	bhi.n	80019de <HAL_TIM_ConfigClockSource+0xa0>
 80019a6:	2a50      	cmp	r2, #80	; 0x50
 80019a8:	d042      	beq.n	8001a30 <HAL_TIM_ConfigClockSource+0xf2>
 80019aa:	2a60      	cmp	r2, #96	; 0x60
 80019ac:	d1e5      	bne.n	800197a <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80019ae:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80019b0:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80019b2:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 80019b6:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80019b8:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80019ba:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 80019bc:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80019be:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80019c2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80019c6:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80019ca:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80019ce:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 80019d0:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80019d2:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80019d4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80019d8:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 80019dc:	e017      	b.n	8001a0e <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 80019de:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80019e2:	d011      	beq.n	8001a08 <HAL_TIM_ConfigClockSource+0xca>
 80019e4:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80019e8:	d1c7      	bne.n	800197a <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80019ea:	688a      	ldr	r2, [r1, #8]
 80019ec:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80019ee:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80019f0:	68c9      	ldr	r1, [r1, #12]
 80019f2:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80019f4:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80019f8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80019fc:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80019fe:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001a00:	689a      	ldr	r2, [r3, #8]
 8001a02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001a06:	e002      	b.n	8001a0e <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001a08:	689a      	ldr	r2, [r3, #8]
 8001a0a:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8001a0e:	609a      	str	r2, [r3, #8]
 8001a10:	e7b3      	b.n	800197a <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001a12:	688a      	ldr	r2, [r1, #8]
 8001a14:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8001a16:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001a18:	68c9      	ldr	r1, [r1, #12]
 8001a1a:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001a1c:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001a20:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001a24:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8001a26:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8001a28:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001a2a:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8001a2e:	e7ee      	b.n	8001a0e <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a30:	684c      	ldr	r4, [r1, #4]
 8001a32:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001a34:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001a36:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001a38:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001a3c:	f025 0501 	bic.w	r5, r5, #1
 8001a40:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001a42:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8001a44:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001a46:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001a4a:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001a4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001a50:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001a52:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001a54:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001a58:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8001a5c:	e7d7      	b.n	8001a0e <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a5e:	684c      	ldr	r4, [r1, #4]
 8001a60:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001a62:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001a64:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001a66:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001a6a:	f025 0501 	bic.w	r5, r5, #1
 8001a6e:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001a70:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8001a72:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001a74:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001a78:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001a7c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001a7e:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001a80:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001a82:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001a86:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8001a8a:	e7c0      	b.n	8001a0e <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001a8c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001a8e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001a92:	f042 0207 	orr.w	r2, r2, #7
 8001a96:	e7ba      	b.n	8001a0e <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001a98:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001a9a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001a9e:	f042 0217 	orr.w	r2, r2, #23
 8001aa2:	e7b4      	b.n	8001a0e <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001aa4:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001aa6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001aaa:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8001aae:	e7ae      	b.n	8001a0e <HAL_TIM_ConfigClockSource+0xd0>

08001ab0 <HAL_TIM_PeriodElapsedCallback>:
 8001ab0:	4770      	bx	lr

08001ab2 <HAL_TIM_OC_DelayElapsedCallback>:
 8001ab2:	4770      	bx	lr

08001ab4 <HAL_TIM_IC_CaptureCallback>:
 8001ab4:	4770      	bx	lr

08001ab6 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001ab6:	4770      	bx	lr

08001ab8 <HAL_TIM_TriggerCallback>:
 8001ab8:	4770      	bx	lr

08001aba <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001aba:	6803      	ldr	r3, [r0, #0]
{
 8001abc:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001abe:	691a      	ldr	r2, [r3, #16]
{
 8001ac0:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ac2:	0791      	lsls	r1, r2, #30
 8001ac4:	d50e      	bpl.n	8001ae4 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001ac6:	68da      	ldr	r2, [r3, #12]
 8001ac8:	0792      	lsls	r2, r2, #30
 8001aca:	d50b      	bpl.n	8001ae4 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001acc:	f06f 0202 	mvn.w	r2, #2
 8001ad0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ad2:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ad4:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ad6:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ad8:	079b      	lsls	r3, r3, #30
 8001ada:	d077      	beq.n	8001bcc <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8001adc:	f7ff ffea 	bl	8001ab4 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ae4:	6823      	ldr	r3, [r4, #0]
 8001ae6:	691a      	ldr	r2, [r3, #16]
 8001ae8:	0750      	lsls	r0, r2, #29
 8001aea:	d510      	bpl.n	8001b0e <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001aec:	68da      	ldr	r2, [r3, #12]
 8001aee:	0751      	lsls	r1, r2, #29
 8001af0:	d50d      	bpl.n	8001b0e <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001af2:	f06f 0204 	mvn.w	r2, #4
 8001af6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001af8:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001afa:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001afc:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001afe:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8001b02:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b04:	d068      	beq.n	8001bd8 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8001b06:	f7ff ffd5 	bl	8001ab4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001b0e:	6823      	ldr	r3, [r4, #0]
 8001b10:	691a      	ldr	r2, [r3, #16]
 8001b12:	0712      	lsls	r2, r2, #28
 8001b14:	d50f      	bpl.n	8001b36 <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001b16:	68da      	ldr	r2, [r3, #12]
 8001b18:	0710      	lsls	r0, r2, #28
 8001b1a:	d50c      	bpl.n	8001b36 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001b1c:	f06f 0208 	mvn.w	r2, #8
 8001b20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b22:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b24:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b26:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b28:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8001b2a:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b2c:	d05a      	beq.n	8001be4 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001b2e:	f7ff ffc1 	bl	8001ab4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b32:	2300      	movs	r3, #0
 8001b34:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001b36:	6823      	ldr	r3, [r4, #0]
 8001b38:	691a      	ldr	r2, [r3, #16]
 8001b3a:	06d2      	lsls	r2, r2, #27
 8001b3c:	d510      	bpl.n	8001b60 <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001b3e:	68da      	ldr	r2, [r3, #12]
 8001b40:	06d0      	lsls	r0, r2, #27
 8001b42:	d50d      	bpl.n	8001b60 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001b44:	f06f 0210 	mvn.w	r2, #16
 8001b48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b4a:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b4c:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b4e:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b50:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8001b54:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b56:	d04b      	beq.n	8001bf0 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8001b58:	f7ff ffac 	bl	8001ab4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001b60:	6823      	ldr	r3, [r4, #0]
 8001b62:	691a      	ldr	r2, [r3, #16]
 8001b64:	07d1      	lsls	r1, r2, #31
 8001b66:	d508      	bpl.n	8001b7a <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001b68:	68da      	ldr	r2, [r3, #12]
 8001b6a:	07d2      	lsls	r2, r2, #31
 8001b6c:	d505      	bpl.n	8001b7a <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001b6e:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8001b72:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001b74:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001b76:	f7ff ff9b 	bl	8001ab0 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001b7a:	6823      	ldr	r3, [r4, #0]
 8001b7c:	691a      	ldr	r2, [r3, #16]
 8001b7e:	0610      	lsls	r0, r2, #24
 8001b80:	d508      	bpl.n	8001b94 <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001b82:	68da      	ldr	r2, [r3, #12]
 8001b84:	0611      	lsls	r1, r2, #24
 8001b86:	d505      	bpl.n	8001b94 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001b88:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8001b8c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001b8e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001b90:	f000 f97d 	bl	8001e8e <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001b94:	6823      	ldr	r3, [r4, #0]
 8001b96:	691a      	ldr	r2, [r3, #16]
 8001b98:	0652      	lsls	r2, r2, #25
 8001b9a:	d508      	bpl.n	8001bae <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001b9c:	68da      	ldr	r2, [r3, #12]
 8001b9e:	0650      	lsls	r0, r2, #25
 8001ba0:	d505      	bpl.n	8001bae <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ba2:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8001ba6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ba8:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001baa:	f7ff ff85 	bl	8001ab8 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001bae:	6823      	ldr	r3, [r4, #0]
 8001bb0:	691a      	ldr	r2, [r3, #16]
 8001bb2:	0691      	lsls	r1, r2, #26
 8001bb4:	d522      	bpl.n	8001bfc <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001bb6:	68da      	ldr	r2, [r3, #12]
 8001bb8:	0692      	lsls	r2, r2, #26
 8001bba:	d51f      	bpl.n	8001bfc <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001bbc:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8001bc0:	4620      	mov	r0, r4
}
 8001bc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001bc6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8001bc8:	f000 b960 	b.w	8001e8c <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bcc:	f7ff ff71 	bl	8001ab2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bd0:	4620      	mov	r0, r4
 8001bd2:	f7ff ff70 	bl	8001ab6 <HAL_TIM_PWM_PulseFinishedCallback>
 8001bd6:	e783      	b.n	8001ae0 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bd8:	f7ff ff6b 	bl	8001ab2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bdc:	4620      	mov	r0, r4
 8001bde:	f7ff ff6a 	bl	8001ab6 <HAL_TIM_PWM_PulseFinishedCallback>
 8001be2:	e792      	b.n	8001b0a <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001be4:	f7ff ff65 	bl	8001ab2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001be8:	4620      	mov	r0, r4
 8001bea:	f7ff ff64 	bl	8001ab6 <HAL_TIM_PWM_PulseFinishedCallback>
 8001bee:	e7a0      	b.n	8001b32 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bf0:	f7ff ff5f 	bl	8001ab2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bf4:	4620      	mov	r0, r4
 8001bf6:	f7ff ff5e 	bl	8001ab6 <HAL_TIM_PWM_PulseFinishedCallback>
 8001bfa:	e7af      	b.n	8001b5c <HAL_TIM_IRQHandler+0xa2>
 8001bfc:	bd10      	pop	{r4, pc}
	...

08001c00 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c00:	4a1e      	ldr	r2, [pc, #120]	; (8001c7c <TIM_Base_SetConfig+0x7c>)
  tmpcr1 = TIMx->CR1;
 8001c02:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c04:	4290      	cmp	r0, r2
 8001c06:	d00e      	beq.n	8001c26 <TIM_Base_SetConfig+0x26>
 8001c08:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001c0c:	d00b      	beq.n	8001c26 <TIM_Base_SetConfig+0x26>
 8001c0e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001c12:	4290      	cmp	r0, r2
 8001c14:	d007      	beq.n	8001c26 <TIM_Base_SetConfig+0x26>
 8001c16:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c1a:	4290      	cmp	r0, r2
 8001c1c:	d003      	beq.n	8001c26 <TIM_Base_SetConfig+0x26>
 8001c1e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c22:	4290      	cmp	r0, r2
 8001c24:	d119      	bne.n	8001c5a <TIM_Base_SetConfig+0x5a>
    tmpcr1 |= Structure->CounterMode;
 8001c26:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001c2c:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c2e:	4a13      	ldr	r2, [pc, #76]	; (8001c7c <TIM_Base_SetConfig+0x7c>)
 8001c30:	4290      	cmp	r0, r2
 8001c32:	d00e      	beq.n	8001c52 <TIM_Base_SetConfig+0x52>
 8001c34:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001c38:	d00b      	beq.n	8001c52 <TIM_Base_SetConfig+0x52>
 8001c3a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001c3e:	4290      	cmp	r0, r2
 8001c40:	d007      	beq.n	8001c52 <TIM_Base_SetConfig+0x52>
 8001c42:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c46:	4290      	cmp	r0, r2
 8001c48:	d003      	beq.n	8001c52 <TIM_Base_SetConfig+0x52>
 8001c4a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c4e:	4290      	cmp	r0, r2
 8001c50:	d103      	bne.n	8001c5a <TIM_Base_SetConfig+0x5a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c52:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c58:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001c5a:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8001c5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001c60:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001c62:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001c64:	688b      	ldr	r3, [r1, #8]
 8001c66:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001c68:	680b      	ldr	r3, [r1, #0]
 8001c6a:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001c6c:	4b03      	ldr	r3, [pc, #12]	; (8001c7c <TIM_Base_SetConfig+0x7c>)
 8001c6e:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8001c70:	bf04      	itt	eq
 8001c72:	690b      	ldreq	r3, [r1, #16]
 8001c74:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8001c76:	2301      	movs	r3, #1
 8001c78:	6143      	str	r3, [r0, #20]
 8001c7a:	4770      	bx	lr
 8001c7c:	40012c00 	.word	0x40012c00

08001c80 <HAL_TIM_Base_Init>:
{
 8001c80:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001c82:	4604      	mov	r4, r0
 8001c84:	b1a0      	cbz	r0, 8001cb0 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001c86:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001c8a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001c8e:	b91b      	cbnz	r3, 8001c98 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001c90:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001c94:	f001 fa68 	bl	8003168 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001c98:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c9a:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8001c9c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ca0:	1d21      	adds	r1, r4, #4
 8001ca2:	f7ff ffad 	bl	8001c00 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001ca6:	2301      	movs	r3, #1
  return HAL_OK;
 8001ca8:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8001caa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001cae:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001cb0:	2001      	movs	r0, #1
}
 8001cb2:	bd10      	pop	{r4, pc}

08001cb4 <HAL_TIM_PWM_Init>:
{
 8001cb4:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001cb6:	4604      	mov	r4, r0
 8001cb8:	b1a0      	cbz	r0, 8001ce4 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001cba:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001cbe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001cc2:	b91b      	cbnz	r3, 8001ccc <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001cc4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8001cc8:	f7ff fe38 	bl	800193c <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001ccc:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cce:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8001cd0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cd4:	1d21      	adds	r1, r4, #4
 8001cd6:	f7ff ff93 	bl	8001c00 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001cda:	2301      	movs	r3, #1
  return HAL_OK;
 8001cdc:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8001cde:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001ce2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001ce4:	2001      	movs	r0, #1
}
 8001ce6:	bd10      	pop	{r4, pc}

08001ce8 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001ce8:	6a03      	ldr	r3, [r0, #32]
{
 8001cea:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001cec:	f023 0310 	bic.w	r3, r3, #16
 8001cf0:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001cf2:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8001cf4:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8001cf6:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001cf8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001cfa:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001cfe:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001d02:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8001d04:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001d08:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001d0c:	4d0b      	ldr	r5, [pc, #44]	; (8001d3c <TIM_OC2_SetConfig+0x54>)
 8001d0e:	42a8      	cmp	r0, r5
 8001d10:	d10d      	bne.n	8001d2e <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001d12:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8001d14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001d18:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8001d1c:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8001d1e:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001d20:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8001d24:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8001d26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8001d2a:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8001d2e:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001d30:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001d32:	684a      	ldr	r2, [r1, #4]
 8001d34:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8001d36:	6203      	str	r3, [r0, #32]
 8001d38:	bd70      	pop	{r4, r5, r6, pc}
 8001d3a:	bf00      	nop
 8001d3c:	40012c00 	.word	0x40012c00

08001d40 <HAL_TIM_PWM_ConfigChannel>:
{
 8001d40:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001d42:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001d46:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	f04f 0002 	mov.w	r0, #2
 8001d4e:	d025      	beq.n	8001d9c <HAL_TIM_PWM_ConfigChannel+0x5c>
 8001d50:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8001d52:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8001d56:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 8001d5a:	2a0c      	cmp	r2, #12
 8001d5c:	d818      	bhi.n	8001d90 <HAL_TIM_PWM_ConfigChannel+0x50>
 8001d5e:	e8df f002 	tbb	[pc, r2]
 8001d62:	1707      	.short	0x1707
 8001d64:	171e1717 	.word	0x171e1717
 8001d68:	172f1717 	.word	0x172f1717
 8001d6c:	1717      	.short	0x1717
 8001d6e:	40          	.byte	0x40
 8001d6f:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001d70:	6820      	ldr	r0, [r4, #0]
 8001d72:	f7ff fd6f 	bl	8001854 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001d76:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001d78:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001d7a:	699a      	ldr	r2, [r3, #24]
 8001d7c:	f042 0208 	orr.w	r2, r2, #8
 8001d80:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001d82:	699a      	ldr	r2, [r3, #24]
 8001d84:	f022 0204 	bic.w	r2, r2, #4
 8001d88:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001d8a:	699a      	ldr	r2, [r3, #24]
 8001d8c:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8001d8e:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8001d90:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001d92:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001d94:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001d98:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001d9c:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001d9e:	6820      	ldr	r0, [r4, #0]
 8001da0:	f7ff ffa2 	bl	8001ce8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001da4:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8001da6:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001da8:	699a      	ldr	r2, [r3, #24]
 8001daa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001dae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001db0:	699a      	ldr	r2, [r3, #24]
 8001db2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001db6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8001db8:	699a      	ldr	r2, [r3, #24]
 8001dba:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001dbe:	e7e6      	b.n	8001d8e <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001dc0:	6820      	ldr	r0, [r4, #0]
 8001dc2:	f7ff fd6f 	bl	80018a4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001dc6:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001dc8:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001dca:	69da      	ldr	r2, [r3, #28]
 8001dcc:	f042 0208 	orr.w	r2, r2, #8
 8001dd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001dd2:	69da      	ldr	r2, [r3, #28]
 8001dd4:	f022 0204 	bic.w	r2, r2, #4
 8001dd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001dda:	69da      	ldr	r2, [r3, #28]
 8001ddc:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8001dde:	61da      	str	r2, [r3, #28]
    break;
 8001de0:	e7d6      	b.n	8001d90 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001de2:	6820      	ldr	r0, [r4, #0]
 8001de4:	f7ff fd88 	bl	80018f8 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001de8:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8001dea:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001dec:	69da      	ldr	r2, [r3, #28]
 8001dee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001df2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001df4:	69da      	ldr	r2, [r3, #28]
 8001df6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dfa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8001dfc:	69da      	ldr	r2, [r3, #28]
 8001dfe:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001e02:	e7ec      	b.n	8001dde <HAL_TIM_PWM_ConfigChannel+0x9e>

08001e04 <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001e04:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8001e06:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001e08:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << Channel;
 8001e0a:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8001e0c:	ea23 0304 	bic.w	r3, r3, r4
 8001e10:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8001e12:	6a03      	ldr	r3, [r0, #32]
 8001e14:	408a      	lsls	r2, r1
 8001e16:	431a      	orrs	r2, r3
 8001e18:	6202      	str	r2, [r0, #32]
 8001e1a:	bd10      	pop	{r4, pc}

08001e1c <HAL_TIM_PWM_Start>:
{
 8001e1c:	b510      	push	{r4, lr}
 8001e1e:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001e20:	2201      	movs	r2, #1
 8001e22:	6800      	ldr	r0, [r0, #0]
 8001e24:	f7ff ffee 	bl	8001e04 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001e28:	6823      	ldr	r3, [r4, #0]
 8001e2a:	4a06      	ldr	r2, [pc, #24]	; (8001e44 <HAL_TIM_PWM_Start+0x28>)
}
 8001e2c:	2000      	movs	r0, #0
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001e2e:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 8001e30:	bf02      	ittt	eq
 8001e32:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8001e34:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 8001e38:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	f042 0201 	orr.w	r2, r2, #1
 8001e40:	601a      	str	r2, [r3, #0]
}
 8001e42:	bd10      	pop	{r4, pc}
 8001e44:	40012c00 	.word	0x40012c00

08001e48 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8001e48:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001e4c:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	f04f 0302 	mov.w	r3, #2
 8001e54:	d018      	beq.n	8001e88 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 8001e56:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001e5a:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001e5c:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001e5e:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001e60:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001e62:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001e66:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001e68:	685a      	ldr	r2, [r3, #4]
 8001e6a:	4322      	orrs	r2, r4
 8001e6c:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001e6e:	689a      	ldr	r2, [r3, #8]
 8001e70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e74:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001e76:	689a      	ldr	r2, [r3, #8]
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001e82:	2300      	movs	r3, #0
 8001e84:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001e88:	4618      	mov	r0, r3

  return HAL_OK;
}
 8001e8a:	bd10      	pop	{r4, pc}

08001e8c <HAL_TIMEx_CommutationCallback>:
 8001e8c:	4770      	bx	lr

08001e8e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e8e:	4770      	bx	lr

08001e90 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001e90:	6803      	ldr	r3, [r0, #0]
 8001e92:	68da      	ldr	r2, [r3, #12]
 8001e94:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001e98:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e9a:	695a      	ldr	r2, [r3, #20]
 8001e9c:	f022 0201 	bic.w	r2, r2, #1
 8001ea0:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001ea2:	2320      	movs	r3, #32
 8001ea4:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8001ea8:	4770      	bx	lr
	...

08001eac <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001eac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001eb0:	6805      	ldr	r5, [r0, #0]
 8001eb2:	68c2      	ldr	r2, [r0, #12]
 8001eb4:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001eb6:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001eb8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001ec0:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 8001ec2:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001ec4:	430b      	orrs	r3, r1
 8001ec6:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8001ec8:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8001ecc:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001ed0:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001ed6:	696b      	ldr	r3, [r5, #20]
 8001ed8:	6982      	ldr	r2, [r0, #24]
 8001eda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8001ee2:	4b40      	ldr	r3, [pc, #256]	; (8001fe4 <UART_SetConfig+0x138>)
{
 8001ee4:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 8001ee6:	429d      	cmp	r5, r3
 8001ee8:	f04f 0419 	mov.w	r4, #25
 8001eec:	d146      	bne.n	8001f7c <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001eee:	f7ff fbe3 	bl	80016b8 <HAL_RCC_GetPCLK2Freq>
 8001ef2:	fb04 f300 	mul.w	r3, r4, r0
 8001ef6:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8001efa:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001efe:	00b6      	lsls	r6, r6, #2
 8001f00:	fbb3 f3f6 	udiv	r3, r3, r6
 8001f04:	fbb3 f3f8 	udiv	r3, r3, r8
 8001f08:	011e      	lsls	r6, r3, #4
 8001f0a:	f7ff fbd5 	bl	80016b8 <HAL_RCC_GetPCLK2Freq>
 8001f0e:	4360      	muls	r0, r4
 8001f10:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	fbb0 f7f3 	udiv	r7, r0, r3
 8001f1a:	f7ff fbcd 	bl	80016b8 <HAL_RCC_GetPCLK2Freq>
 8001f1e:	4360      	muls	r0, r4
 8001f20:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f2a:	fbb3 f3f8 	udiv	r3, r3, r8
 8001f2e:	fb08 7313 	mls	r3, r8, r3, r7
 8001f32:	011b      	lsls	r3, r3, #4
 8001f34:	3332      	adds	r3, #50	; 0x32
 8001f36:	fbb3 f3f8 	udiv	r3, r3, r8
 8001f3a:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8001f3e:	f7ff fbbb 	bl	80016b8 <HAL_RCC_GetPCLK2Freq>
 8001f42:	4360      	muls	r0, r4
 8001f44:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8001f48:	0092      	lsls	r2, r2, #2
 8001f4a:	fbb0 faf2 	udiv	sl, r0, r2
 8001f4e:	f7ff fbb3 	bl	80016b8 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001f52:	4360      	muls	r0, r4
 8001f54:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f5e:	fbb3 f3f8 	udiv	r3, r3, r8
 8001f62:	fb08 a313 	mls	r3, r8, r3, sl
 8001f66:	011b      	lsls	r3, r3, #4
 8001f68:	3332      	adds	r3, #50	; 0x32
 8001f6a:	fbb3 f3f8 	udiv	r3, r3, r8
 8001f6e:	f003 030f 	and.w	r3, r3, #15
 8001f72:	433b      	orrs	r3, r7
 8001f74:	4433      	add	r3, r6
 8001f76:	60ab      	str	r3, [r5, #8]
 8001f78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f7c:	f7ff fb8c 	bl	8001698 <HAL_RCC_GetPCLK1Freq>
 8001f80:	fb04 f300 	mul.w	r3, r4, r0
 8001f84:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8001f88:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001f8c:	00b6      	lsls	r6, r6, #2
 8001f8e:	fbb3 f3f6 	udiv	r3, r3, r6
 8001f92:	fbb3 f3f8 	udiv	r3, r3, r8
 8001f96:	011e      	lsls	r6, r3, #4
 8001f98:	f7ff fb7e 	bl	8001698 <HAL_RCC_GetPCLK1Freq>
 8001f9c:	4360      	muls	r0, r4
 8001f9e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	fbb0 f7f3 	udiv	r7, r0, r3
 8001fa8:	f7ff fb76 	bl	8001698 <HAL_RCC_GetPCLK1Freq>
 8001fac:	4360      	muls	r0, r4
 8001fae:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fb8:	fbb3 f3f8 	udiv	r3, r3, r8
 8001fbc:	fb08 7313 	mls	r3, r8, r3, r7
 8001fc0:	011b      	lsls	r3, r3, #4
 8001fc2:	3332      	adds	r3, #50	; 0x32
 8001fc4:	fbb3 f3f8 	udiv	r3, r3, r8
 8001fc8:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8001fcc:	f7ff fb64 	bl	8001698 <HAL_RCC_GetPCLK1Freq>
 8001fd0:	4360      	muls	r0, r4
 8001fd2:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8001fd6:	0092      	lsls	r2, r2, #2
 8001fd8:	fbb0 faf2 	udiv	sl, r0, r2
 8001fdc:	f7ff fb5c 	bl	8001698 <HAL_RCC_GetPCLK1Freq>
 8001fe0:	e7b7      	b.n	8001f52 <UART_SetConfig+0xa6>
 8001fe2:	bf00      	nop
 8001fe4:	40013800 	.word	0x40013800

08001fe8 <HAL_UART_Init>:
{
 8001fe8:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001fea:	4604      	mov	r4, r0
 8001fec:	b340      	cbz	r0, 8002040 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001fee:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001ff2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001ff6:	b91b      	cbnz	r3, 8002000 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001ff8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001ffc:	f001 f90c 	bl	8003218 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8002000:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8002002:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002004:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002008:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 800200a:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 800200c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002010:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002012:	f7ff ff4b 	bl	8001eac <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002016:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002018:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800201a:	691a      	ldr	r2, [r3, #16]
 800201c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002020:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002022:	695a      	ldr	r2, [r3, #20]
 8002024:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002028:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800202a:	68da      	ldr	r2, [r3, #12]
 800202c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002030:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 8002032:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002034:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8002036:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800203a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800203e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002040:	2001      	movs	r0, #1
}
 8002042:	bd10      	pop	{r4, pc}

08002044 <HAL_UART_TxCpltCallback>:
 8002044:	4770      	bx	lr

08002046 <HAL_UART_RxCpltCallback>:
 8002046:	4770      	bx	lr

08002048 <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8002048:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 800204c:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 800204e:	2b22      	cmp	r3, #34	; 0x22
 8002050:	d136      	bne.n	80020c0 <UART_Receive_IT+0x78>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002052:	6883      	ldr	r3, [r0, #8]
 8002054:	6901      	ldr	r1, [r0, #16]
 8002056:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800205a:	6802      	ldr	r2, [r0, #0]
 800205c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800205e:	d123      	bne.n	80020a8 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002060:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002062:	b9e9      	cbnz	r1, 80020a0 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002064:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002068:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 800206c:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 800206e:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8002070:	3c01      	subs	r4, #1
 8002072:	b2a4      	uxth	r4, r4
 8002074:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8002076:	b98c      	cbnz	r4, 800209c <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002078:	6803      	ldr	r3, [r0, #0]
 800207a:	68da      	ldr	r2, [r3, #12]
 800207c:	f022 0220 	bic.w	r2, r2, #32
 8002080:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002082:	68da      	ldr	r2, [r3, #12]
 8002084:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002088:	60da      	str	r2, [r3, #12]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800208a:	695a      	ldr	r2, [r3, #20]
 800208c:	f022 0201 	bic.w	r2, r2, #1
 8002090:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002092:	2320      	movs	r3, #32
 8002094:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8002098:	f7ff ffd5 	bl	8002046 <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 800209c:	2000      	movs	r0, #0
}
 800209e:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80020a0:	b2d2      	uxtb	r2, r2
 80020a2:	f823 2b01 	strh.w	r2, [r3], #1
 80020a6:	e7e1      	b.n	800206c <UART_Receive_IT+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 80020a8:	b921      	cbnz	r1, 80020b4 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80020aa:	1c59      	adds	r1, r3, #1
 80020ac:	6852      	ldr	r2, [r2, #4]
 80020ae:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80020b0:	701a      	strb	r2, [r3, #0]
 80020b2:	e7dc      	b.n	800206e <UART_Receive_IT+0x26>
 80020b4:	6852      	ldr	r2, [r2, #4]
 80020b6:	1c59      	adds	r1, r3, #1
 80020b8:	6281      	str	r1, [r0, #40]	; 0x28
 80020ba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80020be:	e7f7      	b.n	80020b0 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 80020c0:	2002      	movs	r0, #2
 80020c2:	bd10      	pop	{r4, pc}

080020c4 <HAL_UART_ErrorCallback>:
 80020c4:	4770      	bx	lr
	...

080020c8 <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80020c8:	6803      	ldr	r3, [r0, #0]
{
 80020ca:	b570      	push	{r4, r5, r6, lr}
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80020cc:	681a      	ldr	r2, [r3, #0]
{
 80020ce:	4604      	mov	r4, r0
  if(errorflags == RESET)
 80020d0:	0716      	lsls	r6, r2, #28
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80020d2:	68d9      	ldr	r1, [r3, #12]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80020d4:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 80020d6:	d107      	bne.n	80020e8 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80020d8:	0696      	lsls	r6, r2, #26
 80020da:	d55a      	bpl.n	8002192 <HAL_UART_IRQHandler+0xca>
 80020dc:	068d      	lsls	r5, r1, #26
 80020de:	d558      	bpl.n	8002192 <HAL_UART_IRQHandler+0xca>
}
 80020e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 80020e4:	f7ff bfb0 	b.w	8002048 <UART_Receive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80020e8:	f015 0501 	ands.w	r5, r5, #1
 80020ec:	d102      	bne.n	80020f4 <HAL_UART_IRQHandler+0x2c>
 80020ee:	f411 7f90 	tst.w	r1, #288	; 0x120
 80020f2:	d04e      	beq.n	8002192 <HAL_UART_IRQHandler+0xca>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80020f4:	07d3      	lsls	r3, r2, #31
 80020f6:	d505      	bpl.n	8002104 <HAL_UART_IRQHandler+0x3c>
 80020f8:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80020fa:	bf42      	ittt	mi
 80020fc:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 80020fe:	f043 0301 	orrmi.w	r3, r3, #1
 8002102:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002104:	0750      	lsls	r0, r2, #29
 8002106:	d504      	bpl.n	8002112 <HAL_UART_IRQHandler+0x4a>
 8002108:	b11d      	cbz	r5, 8002112 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800210a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800210c:	f043 0302 	orr.w	r3, r3, #2
 8002110:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002112:	0793      	lsls	r3, r2, #30
 8002114:	d504      	bpl.n	8002120 <HAL_UART_IRQHandler+0x58>
 8002116:	b11d      	cbz	r5, 8002120 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002118:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800211a:	f043 0304 	orr.w	r3, r3, #4
 800211e:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002120:	0716      	lsls	r6, r2, #28
 8002122:	d504      	bpl.n	800212e <HAL_UART_IRQHandler+0x66>
 8002124:	b11d      	cbz	r5, 800212e <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002126:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002128:	f043 0308 	orr.w	r3, r3, #8
 800212c:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800212e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002130:	2b00      	cmp	r3, #0
 8002132:	d066      	beq.n	8002202 <HAL_UART_IRQHandler+0x13a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002134:	0695      	lsls	r5, r2, #26
 8002136:	d504      	bpl.n	8002142 <HAL_UART_IRQHandler+0x7a>
 8002138:	0688      	lsls	r0, r1, #26
 800213a:	d502      	bpl.n	8002142 <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 800213c:	4620      	mov	r0, r4
 800213e:	f7ff ff83 	bl	8002048 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002142:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 8002144:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002146:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002148:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800214a:	0711      	lsls	r1, r2, #28
 800214c:	d402      	bmi.n	8002154 <HAL_UART_IRQHandler+0x8c>
 800214e:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8002152:	d01a      	beq.n	800218a <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8002154:	f7ff fe9c 	bl	8001e90 <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002158:	6823      	ldr	r3, [r4, #0]
 800215a:	695a      	ldr	r2, [r3, #20]
 800215c:	0652      	lsls	r2, r2, #25
 800215e:	d510      	bpl.n	8002182 <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002160:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8002162:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002164:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002168:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 800216a:	b150      	cbz	r0, 8002182 <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800216c:	4b25      	ldr	r3, [pc, #148]	; (8002204 <HAL_UART_IRQHandler+0x13c>)
 800216e:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002170:	f7fe fd62 	bl	8000c38 <HAL_DMA_Abort_IT>
 8002174:	2800      	cmp	r0, #0
 8002176:	d044      	beq.n	8002202 <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002178:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 800217a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800217e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002180:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8002182:	4620      	mov	r0, r4
 8002184:	f7ff ff9e 	bl	80020c4 <HAL_UART_ErrorCallback>
 8002188:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 800218a:	f7ff ff9b 	bl	80020c4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800218e:	63e5      	str	r5, [r4, #60]	; 0x3c
 8002190:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002192:	0616      	lsls	r6, r2, #24
 8002194:	d527      	bpl.n	80021e6 <HAL_UART_IRQHandler+0x11e>
 8002196:	060d      	lsls	r5, r1, #24
 8002198:	d525      	bpl.n	80021e6 <HAL_UART_IRQHandler+0x11e>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 800219a:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 800219e:	2a21      	cmp	r2, #33	; 0x21
 80021a0:	d12f      	bne.n	8002202 <HAL_UART_IRQHandler+0x13a>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80021a2:	68a2      	ldr	r2, [r4, #8]
 80021a4:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80021a8:	6a22      	ldr	r2, [r4, #32]
 80021aa:	d117      	bne.n	80021dc <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80021ac:	8811      	ldrh	r1, [r2, #0]
 80021ae:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80021b2:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80021b4:	6921      	ldr	r1, [r4, #16]
 80021b6:	b979      	cbnz	r1, 80021d8 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 80021b8:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 80021ba:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 80021bc:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80021be:	3a01      	subs	r2, #1
 80021c0:	b292      	uxth	r2, r2
 80021c2:	84e2      	strh	r2, [r4, #38]	; 0x26
 80021c4:	b9ea      	cbnz	r2, 8002202 <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80021c6:	68da      	ldr	r2, [r3, #12]
 80021c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021cc:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80021ce:	68da      	ldr	r2, [r3, #12]
 80021d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021d4:	60da      	str	r2, [r3, #12]
 80021d6:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 80021d8:	3201      	adds	r2, #1
 80021da:	e7ee      	b.n	80021ba <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80021dc:	1c51      	adds	r1, r2, #1
 80021de:	6221      	str	r1, [r4, #32]
 80021e0:	7812      	ldrb	r2, [r2, #0]
 80021e2:	605a      	str	r2, [r3, #4]
 80021e4:	e7ea      	b.n	80021bc <HAL_UART_IRQHandler+0xf4>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80021e6:	0650      	lsls	r0, r2, #25
 80021e8:	d50b      	bpl.n	8002202 <HAL_UART_IRQHandler+0x13a>
 80021ea:	064a      	lsls	r2, r1, #25
 80021ec:	d509      	bpl.n	8002202 <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80021ee:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 80021f0:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80021f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021f6:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80021f8:	2320      	movs	r3, #32
 80021fa:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80021fe:	f7ff ff21 	bl	8002044 <HAL_UART_TxCpltCallback>
 8002202:	bd70      	pop	{r4, r5, r6, pc}
 8002204:	08002209 	.word	0x08002209

08002208 <UART_DMAAbortOnError>:
{
 8002208:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 800220a:	2300      	movs	r3, #0
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800220c:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 800220e:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002210:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8002212:	f7ff ff57 	bl	80020c4 <HAL_UART_ErrorCallback>
 8002216:	bd08      	pop	{r3, pc}

08002218 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002218:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 800221a:	f000 fb99 	bl	8002950 <vTaskStartScheduler>
  
  return osOK;
}
 800221e:	2000      	movs	r0, #0
 8002220:	bd08      	pop	{r3, pc}

08002222 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002222:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002224:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
{
 8002228:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 800222a:	2c84      	cmp	r4, #132	; 0x84
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800222c:	bf08      	it	eq
 800222e:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002230:	8a02      	ldrh	r2, [r0, #16]
    fpriority += (priority - osPriorityIdle);
 8002232:	bf18      	it	ne
 8002234:	3403      	addne	r4, #3
{
 8002236:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002238:	e890 0022 	ldmia.w	r0, {r1, r5}
 800223c:	a803      	add	r0, sp, #12
 800223e:	9001      	str	r0, [sp, #4]
 8002240:	9400      	str	r4, [sp, #0]
 8002242:	4628      	mov	r0, r5
 8002244:	f000 fab4 	bl	80027b0 <xTaskCreate>
 8002248:	2801      	cmp	r0, #1
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
                   &handle) != pdPASS)  {
    return NULL;
 800224a:	bf14      	ite	ne
 800224c:	2000      	movne	r0, #0
  }     
#endif
  
  return handle;
 800224e:	9803      	ldreq	r0, [sp, #12]
}
 8002250:	b005      	add	sp, #20
 8002252:	bd30      	pop	{r4, r5, pc}

08002254 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002254:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002256:	2800      	cmp	r0, #0
 8002258:	bf08      	it	eq
 800225a:	2001      	moveq	r0, #1
 800225c:	f000 fcc6 	bl	8002bec <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002260:	2000      	movs	r0, #0
 8002262:	bd08      	pop	{r3, pc}

08002264 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8002264:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002266:	f000 fd59 	bl	8002d1c <xTaskGetSchedulerState>
 800226a:	2801      	cmp	r0, #1
 800226c:	d003      	beq.n	8002276 <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800226e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8002272:	f000 b8e7 	b.w	8002444 <xPortSysTickHandler>
 8002276:	bd08      	pop	{r3, pc}

08002278 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002278:	f100 0308 	add.w	r3, r0, #8
 800227c:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800227e:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002282:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002284:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002286:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002288:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800228a:	6003      	str	r3, [r0, #0]
 800228c:	4770      	bx	lr

0800228e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800228e:	2300      	movs	r3, #0
 8002290:	6103      	str	r3, [r0, #16]
 8002292:	4770      	bx	lr

08002294 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8002294:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002296:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8002298:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800229a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800229c:	689a      	ldr	r2, [r3, #8]
 800229e:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80022a0:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80022a2:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80022a4:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80022a6:	3301      	adds	r3, #1
 80022a8:	6003      	str	r3, [r0, #0]
 80022aa:	4770      	bx	lr

080022ac <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80022ac:	680a      	ldr	r2, [r1, #0]
{
 80022ae:	b530      	push	{r4, r5, lr}
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80022b0:	1c53      	adds	r3, r2, #1
 80022b2:	d10a      	bne.n	80022ca <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80022b4:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80022b6:	685a      	ldr	r2, [r3, #4]
 80022b8:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80022ba:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80022bc:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80022be:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80022c0:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80022c2:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80022c4:	3301      	adds	r3, #1
 80022c6:	6003      	str	r3, [r0, #0]
 80022c8:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022ca:	f100 0308 	add.w	r3, r0, #8
 80022ce:	685c      	ldr	r4, [r3, #4]
 80022d0:	6825      	ldr	r5, [r4, #0]
 80022d2:	42aa      	cmp	r2, r5
 80022d4:	d3ef      	bcc.n	80022b6 <vListInsert+0xa>
 80022d6:	4623      	mov	r3, r4
 80022d8:	e7f9      	b.n	80022ce <vListInsert+0x22>

080022da <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80022da:	6841      	ldr	r1, [r0, #4]
 80022dc:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80022de:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80022e0:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80022e2:	6882      	ldr	r2, [r0, #8]
 80022e4:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80022e6:	6859      	ldr	r1, [r3, #4]
 80022e8:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80022ea:	bf08      	it	eq
 80022ec:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80022ee:	2200      	movs	r2, #0
 80022f0:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80022f2:	6818      	ldr	r0, [r3, #0]
 80022f4:	3801      	subs	r0, #1
 80022f6:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 80022f8:	4770      	bx	lr
	...

080022fc <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80022fc:	4b0a      	ldr	r3, [pc, #40]	; (8002328 <prvTaskExitError+0x2c>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	3301      	adds	r3, #1
 8002302:	d008      	beq.n	8002316 <prvTaskExitError+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002308:	f383 8811 	msr	BASEPRI, r3
 800230c:	f3bf 8f6f 	isb	sy
 8002310:	f3bf 8f4f 	dsb	sy
 8002314:	e7fe      	b.n	8002314 <prvTaskExitError+0x18>
 8002316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800231a:	f383 8811 	msr	BASEPRI, r3
 800231e:	f3bf 8f6f 	isb	sy
 8002322:	f3bf 8f4f 	dsb	sy
 8002326:	e7fe      	b.n	8002326 <prvTaskExitError+0x2a>
 8002328:	20000008 	.word	0x20000008

0800232c <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800232c:	4806      	ldr	r0, [pc, #24]	; (8002348 <prvPortStartFirstTask+0x1c>)
 800232e:	6800      	ldr	r0, [r0, #0]
 8002330:	6800      	ldr	r0, [r0, #0]
 8002332:	f380 8808 	msr	MSP, r0
 8002336:	b662      	cpsie	i
 8002338:	b661      	cpsie	f
 800233a:	f3bf 8f4f 	dsb	sy
 800233e:	f3bf 8f6f 	isb	sy
 8002342:	df00      	svc	0
 8002344:	bf00      	nop
 8002346:	0000      	.short	0x0000
 8002348:	e000ed08 	.word	0xe000ed08

0800234c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800234c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002350:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002354:	4b05      	ldr	r3, [pc, #20]	; (800236c <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002356:	f021 0101 	bic.w	r1, r1, #1
 800235a:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800235e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002362:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8002366:	3840      	subs	r0, #64	; 0x40
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	080022fd 	.word	0x080022fd

08002370 <SVC_Handler>:
	__asm volatile (
 8002370:	4b07      	ldr	r3, [pc, #28]	; (8002390 <pxCurrentTCBConst2>)
 8002372:	6819      	ldr	r1, [r3, #0]
 8002374:	6808      	ldr	r0, [r1, #0]
 8002376:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800237a:	f380 8809 	msr	PSP, r0
 800237e:	f3bf 8f6f 	isb	sy
 8002382:	f04f 0000 	mov.w	r0, #0
 8002386:	f380 8811 	msr	BASEPRI, r0
 800238a:	f04e 0e0d 	orr.w	lr, lr, #13
 800238e:	4770      	bx	lr

08002390 <pxCurrentTCBConst2>:
 8002390:	20004e6c 	.word	0x20004e6c

08002394 <vPortEnterCritical>:
 8002394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002398:	f383 8811 	msr	BASEPRI, r3
 800239c:	f3bf 8f6f 	isb	sy
 80023a0:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80023a4:	4a0a      	ldr	r2, [pc, #40]	; (80023d0 <vPortEnterCritical+0x3c>)
 80023a6:	6813      	ldr	r3, [r2, #0]
 80023a8:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80023aa:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80023ac:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80023ae:	d10d      	bne.n	80023cc <vPortEnterCritical+0x38>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80023b0:	4b08      	ldr	r3, [pc, #32]	; (80023d4 <vPortEnterCritical+0x40>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80023b8:	d008      	beq.n	80023cc <vPortEnterCritical+0x38>
 80023ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023be:	f383 8811 	msr	BASEPRI, r3
 80023c2:	f3bf 8f6f 	isb	sy
 80023c6:	f3bf 8f4f 	dsb	sy
 80023ca:	e7fe      	b.n	80023ca <vPortEnterCritical+0x36>
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	20000008 	.word	0x20000008
 80023d4:	e000ed04 	.word	0xe000ed04

080023d8 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 80023d8:	4a08      	ldr	r2, [pc, #32]	; (80023fc <vPortExitCritical+0x24>)
 80023da:	6813      	ldr	r3, [r2, #0]
 80023dc:	b943      	cbnz	r3, 80023f0 <vPortExitCritical+0x18>
 80023de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023e2:	f383 8811 	msr	BASEPRI, r3
 80023e6:	f3bf 8f6f 	isb	sy
 80023ea:	f3bf 8f4f 	dsb	sy
 80023ee:	e7fe      	b.n	80023ee <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80023f0:	3b01      	subs	r3, #1
 80023f2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80023f4:	b90b      	cbnz	r3, 80023fa <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80023f6:	f383 8811 	msr	BASEPRI, r3
 80023fa:	4770      	bx	lr
 80023fc:	20000008 	.word	0x20000008

08002400 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002400:	f3ef 8009 	mrs	r0, PSP
 8002404:	f3bf 8f6f 	isb	sy
 8002408:	4b0d      	ldr	r3, [pc, #52]	; (8002440 <pxCurrentTCBConst>)
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002410:	6010      	str	r0, [r2, #0]
 8002412:	e92d 4008 	stmdb	sp!, {r3, lr}
 8002416:	f04f 0050 	mov.w	r0, #80	; 0x50
 800241a:	f380 8811 	msr	BASEPRI, r0
 800241e:	f000 fc43 	bl	8002ca8 <vTaskSwitchContext>
 8002422:	f04f 0000 	mov.w	r0, #0
 8002426:	f380 8811 	msr	BASEPRI, r0
 800242a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800242e:	6819      	ldr	r1, [r3, #0]
 8002430:	6808      	ldr	r0, [r1, #0]
 8002432:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002436:	f380 8809 	msr	PSP, r0
 800243a:	f3bf 8f6f 	isb	sy
 800243e:	4770      	bx	lr

08002440 <pxCurrentTCBConst>:
 8002440:	20004e6c 	.word	0x20004e6c

08002444 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002444:	b508      	push	{r3, lr}
	__asm volatile
 8002446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800244a:	f383 8811 	msr	BASEPRI, r3
 800244e:	f3bf 8f6f 	isb	sy
 8002452:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002456:	f000 fabf 	bl	80029d8 <xTaskIncrementTick>
 800245a:	b118      	cbz	r0, 8002464 <xPortSysTickHandler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800245c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002460:	4b02      	ldr	r3, [pc, #8]	; (800246c <xPortSysTickHandler+0x28>)
 8002462:	601a      	str	r2, [r3, #0]
	__asm volatile
 8002464:	2300      	movs	r3, #0
 8002466:	f383 8811 	msr	BASEPRI, r3
 800246a:	bd08      	pop	{r3, pc}
 800246c:	e000ed04 	.word	0xe000ed04

08002470 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002470:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002474:	4b05      	ldr	r3, [pc, #20]	; (800248c <vPortSetupTimerInterrupt+0x1c>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	fbb3 f3f2 	udiv	r3, r3, r2
 800247c:	4a04      	ldr	r2, [pc, #16]	; (8002490 <vPortSetupTimerInterrupt+0x20>)
 800247e:	3b01      	subs	r3, #1
 8002480:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002482:	2207      	movs	r2, #7
 8002484:	4b03      	ldr	r3, [pc, #12]	; (8002494 <vPortSetupTimerInterrupt+0x24>)
 8002486:	601a      	str	r2, [r3, #0]
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	2000000c 	.word	0x2000000c
 8002490:	e000e014 	.word	0xe000e014
 8002494:	e000e010 	.word	0xe000e010

08002498 <xPortStartScheduler>:
{
 8002498:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800249a:	4b1f      	ldr	r3, [pc, #124]	; (8002518 <xPortStartScheduler+0x80>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800249c:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800249e:	781a      	ldrb	r2, [r3, #0]
 80024a0:	b2d2      	uxtb	r2, r2
 80024a2:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80024a4:	22ff      	movs	r2, #255	; 0xff
 80024a6:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80024a8:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80024aa:	4a1c      	ldr	r2, [pc, #112]	; (800251c <xPortStartScheduler+0x84>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80024b2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80024b6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80024ba:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80024bc:	2207      	movs	r2, #7
 80024be:	4b18      	ldr	r3, [pc, #96]	; (8002520 <xPortStartScheduler+0x88>)
 80024c0:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80024c2:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80024c6:	1e54      	subs	r4, r2, #1
 80024c8:	0600      	lsls	r0, r0, #24
 80024ca:	d41c      	bmi.n	8002506 <xPortStartScheduler+0x6e>
 80024cc:	b101      	cbz	r1, 80024d0 <xPortStartScheduler+0x38>
 80024ce:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80024d4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80024d8:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80024da:	9b01      	ldr	r3, [sp, #4]
 80024dc:	4a0e      	ldr	r2, [pc, #56]	; (8002518 <xPortStartScheduler+0x80>)
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80024e2:	4b10      	ldr	r3, [pc, #64]	; (8002524 <xPortStartScheduler+0x8c>)
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80024ea:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80024f2:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 80024f4:	f7ff ffbc 	bl	8002470 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80024f8:	2200      	movs	r2, #0
 80024fa:	4b0b      	ldr	r3, [pc, #44]	; (8002528 <xPortStartScheduler+0x90>)
 80024fc:	601a      	str	r2, [r3, #0]
	prvPortStartFirstTask();
 80024fe:	f7ff ff15 	bl	800232c <prvPortStartFirstTask>
	prvTaskExitError();
 8002502:	f7ff fefb 	bl	80022fc <prvTaskExitError>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002506:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800250a:	2101      	movs	r1, #1
 800250c:	0052      	lsls	r2, r2, #1
 800250e:	b2d2      	uxtb	r2, r2
 8002510:	f88d 2003 	strb.w	r2, [sp, #3]
 8002514:	4622      	mov	r2, r4
 8002516:	e7d4      	b.n	80024c2 <xPortStartScheduler+0x2a>
 8002518:	e000e400 	.word	0xe000e400
 800251c:	2000002c 	.word	0x2000002c
 8002520:	20000030 	.word	0x20000030
 8002524:	e000ed20 	.word	0xe000ed20
 8002528:	20000008 	.word	0x20000008

0800252c <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800252c:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800252e:	4b0f      	ldr	r3, [pc, #60]	; (800256c <prvInsertBlockIntoFreeList+0x40>)
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	4282      	cmp	r2, r0
 8002534:	d318      	bcc.n	8002568 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002536:	685c      	ldr	r4, [r3, #4]
 8002538:	1919      	adds	r1, r3, r4
 800253a:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800253c:	bf01      	itttt	eq
 800253e:	6841      	ldreq	r1, [r0, #4]
 8002540:	4618      	moveq	r0, r3
 8002542:	1909      	addeq	r1, r1, r4
 8002544:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002546:	6844      	ldr	r4, [r0, #4]
 8002548:	1901      	adds	r1, r0, r4
 800254a:	428a      	cmp	r2, r1
 800254c:	d107      	bne.n	800255e <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800254e:	4908      	ldr	r1, [pc, #32]	; (8002570 <prvInsertBlockIntoFreeList+0x44>)
 8002550:	6809      	ldr	r1, [r1, #0]
 8002552:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002554:	bf1f      	itttt	ne
 8002556:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002558:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800255a:	1909      	addne	r1, r1, r4
 800255c:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800255e:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002560:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002562:	bf18      	it	ne
 8002564:	6018      	strne	r0, [r3, #0]
 8002566:	bd10      	pop	{r4, pc}
 8002568:	4613      	mov	r3, r2
 800256a:	e7e1      	b.n	8002530 <prvInsertBlockIntoFreeList+0x4>
 800256c:	20004e64 	.word	0x20004e64
 8002570:	20000034 	.word	0x20000034

08002574 <pvPortMalloc>:
{
 8002574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002578:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800257a:	f000 fa25 	bl	80029c8 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800257e:	493d      	ldr	r1, [pc, #244]	; (8002674 <pvPortMalloc+0x100>)
 8002580:	4d3d      	ldr	r5, [pc, #244]	; (8002678 <pvPortMalloc+0x104>)
 8002582:	680b      	ldr	r3, [r1, #0]
 8002584:	b9fb      	cbnz	r3, 80025c6 <pvPortMalloc+0x52>
	uxAddress = ( size_t ) ucHeap;
 8002586:	4a3d      	ldr	r2, [pc, #244]	; (800267c <pvPortMalloc+0x108>)
	xStart.xBlockSize = ( size_t ) 0;
 8002588:	2000      	movs	r0, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800258a:	0756      	lsls	r6, r2, #29
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800258c:	bf0f      	iteee	eq
 800258e:	f644 6320 	movweq	r3, #20000	; 0x4e20
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002592:	3207      	addne	r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002594:	4b3a      	ldrne	r3, [pc, #232]	; (8002680 <pvPortMalloc+0x10c>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002596:	f022 0207 	bicne.w	r2, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800259a:	bf18      	it	ne
 800259c:	1a9b      	subne	r3, r3, r2
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800259e:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80025a0:	4e38      	ldr	r6, [pc, #224]	; (8002684 <pvPortMalloc+0x110>)
	uxAddress -= xHeapStructSize;
 80025a2:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80025a4:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 80025a8:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80025aa:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 80025ac:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80025ae:	6018      	str	r0, [r3, #0]
	pxEnd = ( void * ) uxAddress;
 80025b0:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80025b2:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80025b4:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80025b6:	4b34      	ldr	r3, [pc, #208]	; (8002688 <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80025b8:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80025ba:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80025bc:	4b33      	ldr	r3, [pc, #204]	; (800268c <pvPortMalloc+0x118>)
 80025be:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80025c0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80025c4:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80025c6:	682f      	ldr	r7, [r5, #0]
 80025c8:	4227      	tst	r7, r4
 80025ca:	d116      	bne.n	80025fa <pvPortMalloc+0x86>
			if( xWantedSize > 0 )
 80025cc:	2c00      	cmp	r4, #0
 80025ce:	d040      	beq.n	8002652 <pvPortMalloc+0xde>
				xWantedSize += xHeapStructSize;
 80025d0:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80025d4:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80025d6:	bf1c      	itt	ne
 80025d8:	f023 0307 	bicne.w	r3, r3, #7
 80025dc:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80025de:	b163      	cbz	r3, 80025fa <pvPortMalloc+0x86>
 80025e0:	4a2a      	ldr	r2, [pc, #168]	; (800268c <pvPortMalloc+0x118>)
 80025e2:	6816      	ldr	r6, [r2, #0]
 80025e4:	4690      	mov	r8, r2
 80025e6:	42b3      	cmp	r3, r6
 80025e8:	d807      	bhi.n	80025fa <pvPortMalloc+0x86>
				pxBlock = xStart.pxNextFreeBlock;
 80025ea:	4a26      	ldr	r2, [pc, #152]	; (8002684 <pvPortMalloc+0x110>)
 80025ec:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80025ee:	6868      	ldr	r0, [r5, #4]
 80025f0:	4283      	cmp	r3, r0
 80025f2:	d804      	bhi.n	80025fe <pvPortMalloc+0x8a>
				if( pxBlock != pxEnd )
 80025f4:	6809      	ldr	r1, [r1, #0]
 80025f6:	428d      	cmp	r5, r1
 80025f8:	d107      	bne.n	800260a <pvPortMalloc+0x96>
void *pvReturn = NULL;
 80025fa:	2400      	movs	r4, #0
 80025fc:	e029      	b.n	8002652 <pvPortMalloc+0xde>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80025fe:	682c      	ldr	r4, [r5, #0]
 8002600:	2c00      	cmp	r4, #0
 8002602:	d0f7      	beq.n	80025f4 <pvPortMalloc+0x80>
 8002604:	462a      	mov	r2, r5
 8002606:	4625      	mov	r5, r4
 8002608:	e7f1      	b.n	80025ee <pvPortMalloc+0x7a>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800260a:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800260c:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800260e:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002610:	1ac2      	subs	r2, r0, r3
 8002612:	2a10      	cmp	r2, #16
 8002614:	d90f      	bls.n	8002636 <pvPortMalloc+0xc2>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002616:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002618:	0741      	lsls	r1, r0, #29
 800261a:	d008      	beq.n	800262e <pvPortMalloc+0xba>
	__asm volatile
 800261c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002620:	f383 8811 	msr	BASEPRI, r3
 8002624:	f3bf 8f6f 	isb	sy
 8002628:	f3bf 8f4f 	dsb	sy
 800262c:	e7fe      	b.n	800262c <pvPortMalloc+0xb8>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800262e:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002630:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002632:	f7ff ff7b 	bl	800252c <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002636:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002638:	4913      	ldr	r1, [pc, #76]	; (8002688 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800263a:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800263c:	431f      	orrs	r7, r3
					pxBlock->pxNextFreeBlock = NULL;
 800263e:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002640:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002642:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002646:	4286      	cmp	r6, r0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002648:	bf38      	it	cc
 800264a:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800264c:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800264e:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002650:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8002652:	f000 fa53 	bl	8002afc <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002656:	0763      	lsls	r3, r4, #29
 8002658:	d008      	beq.n	800266c <pvPortMalloc+0xf8>
 800265a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800265e:	f383 8811 	msr	BASEPRI, r3
 8002662:	f3bf 8f6f 	isb	sy
 8002666:	f3bf 8f4f 	dsb	sy
 800266a:	e7fe      	b.n	800266a <pvPortMalloc+0xf6>
}
 800266c:	4620      	mov	r0, r4
 800266e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002672:	bf00      	nop
 8002674:	20000034 	.word	0x20000034
 8002678:	20004e58 	.word	0x20004e58
 800267c:	20000038 	.word	0x20000038
 8002680:	20004e58 	.word	0x20004e58
 8002684:	20004e64 	.word	0x20004e64
 8002688:	20004e60 	.word	0x20004e60
 800268c:	20004e5c 	.word	0x20004e5c

08002690 <vPortFree>:
{
 8002690:	b510      	push	{r4, lr}
	if( pv != NULL )
 8002692:	4604      	mov	r4, r0
 8002694:	b370      	cbz	r0, 80026f4 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002696:	4a18      	ldr	r2, [pc, #96]	; (80026f8 <vPortFree+0x68>)
 8002698:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800269c:	6812      	ldr	r2, [r2, #0]
 800269e:	4213      	tst	r3, r2
 80026a0:	d108      	bne.n	80026b4 <vPortFree+0x24>
 80026a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026a6:	f383 8811 	msr	BASEPRI, r3
 80026aa:	f3bf 8f6f 	isb	sy
 80026ae:	f3bf 8f4f 	dsb	sy
 80026b2:	e7fe      	b.n	80026b2 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80026b4:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80026b8:	b141      	cbz	r1, 80026cc <vPortFree+0x3c>
 80026ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026be:	f383 8811 	msr	BASEPRI, r3
 80026c2:	f3bf 8f6f 	isb	sy
 80026c6:	f3bf 8f4f 	dsb	sy
 80026ca:	e7fe      	b.n	80026ca <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80026cc:	ea23 0302 	bic.w	r3, r3, r2
 80026d0:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80026d4:	f000 f978 	bl	80029c8 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80026d8:	4a08      	ldr	r2, [pc, #32]	; (80026fc <vPortFree+0x6c>)
 80026da:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80026de:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80026e0:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 80026e4:	440b      	add	r3, r1
 80026e6:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80026e8:	f7ff ff20 	bl	800252c <prvInsertBlockIntoFreeList>
}
 80026ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 80026f0:	f000 ba04 	b.w	8002afc <xTaskResumeAll>
 80026f4:	bd10      	pop	{r4, pc}
 80026f6:	bf00      	nop
 80026f8:	20004e58 	.word	0x20004e58
 80026fc:	20004e5c 	.word	0x20004e5c

08002700 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002700:	4a06      	ldr	r2, [pc, #24]	; (800271c <prvResetNextTaskUnblockTime+0x1c>)
 8002702:	6813      	ldr	r3, [r2, #0]
 8002704:	6819      	ldr	r1, [r3, #0]
 8002706:	4b06      	ldr	r3, [pc, #24]	; (8002720 <prvResetNextTaskUnblockTime+0x20>)
 8002708:	b919      	cbnz	r1, 8002712 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800270a:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002712:	6812      	ldr	r2, [r2, #0]
 8002714:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002716:	68d2      	ldr	r2, [r2, #12]
 8002718:	6852      	ldr	r2, [r2, #4]
 800271a:	e7f8      	b.n	800270e <prvResetNextTaskUnblockTime+0xe>
 800271c:	20004e70 	.word	0x20004e70
 8002720:	20004f48 	.word	0x20004f48

08002724 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002726:	4b1b      	ldr	r3, [pc, #108]	; (8002794 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002728:	4e1b      	ldr	r6, [pc, #108]	; (8002798 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 800272a:	681d      	ldr	r5, [r3, #0]
{
 800272c:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800272e:	6830      	ldr	r0, [r6, #0]
{
 8002730:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002732:	3004      	adds	r0, #4
 8002734:	f7ff fdd1 	bl	80022da <uxListRemove>
 8002738:	4633      	mov	r3, r6
 800273a:	b940      	cbnz	r0, 800274e <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800273c:	2001      	movs	r0, #1
 800273e:	6831      	ldr	r1, [r6, #0]
 8002740:	4e16      	ldr	r6, [pc, #88]	; (800279c <prvAddCurrentTaskToDelayedList+0x78>)
 8002742:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8002744:	6832      	ldr	r2, [r6, #0]
 8002746:	4088      	lsls	r0, r1
 8002748:	ea22 0200 	bic.w	r2, r2, r0
 800274c:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800274e:	1c62      	adds	r2, r4, #1
 8002750:	d107      	bne.n	8002762 <prvAddCurrentTaskToDelayedList+0x3e>
 8002752:	b137      	cbz	r7, 8002762 <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002754:	6819      	ldr	r1, [r3, #0]
 8002756:	4812      	ldr	r0, [pc, #72]	; (80027a0 <prvAddCurrentTaskToDelayedList+0x7c>)
 8002758:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800275a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800275e:	f7ff bd99 	b.w	8002294 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002762:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002764:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 8002766:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002768:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 800276a:	d907      	bls.n	800277c <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800276c:	4a0d      	ldr	r2, [pc, #52]	; (80027a4 <prvAddCurrentTaskToDelayedList+0x80>)
 800276e:	6810      	ldr	r0, [r2, #0]
 8002770:	6819      	ldr	r1, [r3, #0]
}
 8002772:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002776:	3104      	adds	r1, #4
 8002778:	f7ff bd98 	b.w	80022ac <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800277c:	4a0a      	ldr	r2, [pc, #40]	; (80027a8 <prvAddCurrentTaskToDelayedList+0x84>)
 800277e:	6810      	ldr	r0, [r2, #0]
 8002780:	6819      	ldr	r1, [r3, #0]
 8002782:	3104      	adds	r1, #4
 8002784:	f7ff fd92 	bl	80022ac <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002788:	4b08      	ldr	r3, [pc, #32]	; (80027ac <prvAddCurrentTaskToDelayedList+0x88>)
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 800278e:	bf38      	it	cc
 8002790:	601c      	strcc	r4, [r3, #0]
 8002792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002794:	20004f90 	.word	0x20004f90
 8002798:	20004e6c 	.word	0x20004e6c
 800279c:	20004f18 	.word	0x20004f18
 80027a0:	20004f68 	.word	0x20004f68
 80027a4:	20004e74 	.word	0x20004e74
 80027a8:	20004e70 	.word	0x20004e70
 80027ac:	20004f48 	.word	0x20004f48

080027b0 <xTaskCreate>:
	{
 80027b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027b4:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 80027b8:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027ba:	4650      	mov	r0, sl
	{
 80027bc:	460f      	mov	r7, r1
 80027be:	4699      	mov	r9, r3
 80027c0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027c2:	f7ff fed7 	bl	8002574 <pvPortMalloc>
			if( pxStack != NULL )
 80027c6:	4605      	mov	r5, r0
 80027c8:	2800      	cmp	r0, #0
 80027ca:	f000 8096 	beq.w	80028fa <xTaskCreate+0x14a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80027ce:	2054      	movs	r0, #84	; 0x54
 80027d0:	f7ff fed0 	bl	8002574 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80027d4:	4604      	mov	r4, r0
 80027d6:	2800      	cmp	r0, #0
 80027d8:	f000 808c 	beq.w	80028f4 <xTaskCreate+0x144>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80027dc:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 80027e0:	6305      	str	r5, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80027e2:	4455      	add	r5, sl
 80027e4:	1e7b      	subs	r3, r7, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80027e6:	f025 0a07 	bic.w	sl, r5, #7
 80027ea:	f100 0234 	add.w	r2, r0, #52	; 0x34
 80027ee:	370f      	adds	r7, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80027f0:	7859      	ldrb	r1, [r3, #1]
 80027f2:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 80027f6:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80027fa:	b109      	cbz	r1, 8002800 <xTaskCreate+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80027fc:	42bb      	cmp	r3, r7
 80027fe:	d1f7      	bne.n	80027f0 <xTaskCreate+0x40>
 8002800:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002802:	f04f 0b00 	mov.w	fp, #0
 8002806:	2d06      	cmp	r5, #6
 8002808:	bf28      	it	cs
 800280a:	2506      	movcs	r5, #6
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800280c:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 800280e:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8002810:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002812:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002814:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 8002818:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800281c:	f7ff fd37 	bl	800228e <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002820:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002824:	f104 0018 	add.w	r0, r4, #24
 8002828:	f7ff fd31 	bl	800228e <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800282c:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002830:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002832:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002834:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002836:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800283a:	464a      	mov	r2, r9
 800283c:	4641      	mov	r1, r8
 800283e:	4650      	mov	r0, sl
 8002840:	f7ff fd84 	bl	800234c <pxPortInitialiseStack>
 8002844:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8002846:	b106      	cbz	r6, 800284a <xTaskCreate+0x9a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002848:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 800284a:	f7ff fda3 	bl	8002394 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 800284e:	4b32      	ldr	r3, [pc, #200]	; (8002918 <xTaskCreate+0x168>)
		if( pxCurrentTCB == NULL )
 8002850:	4e32      	ldr	r6, [pc, #200]	; (800291c <xTaskCreate+0x16c>)
		uxCurrentNumberOfTasks++;
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8002948 <xTaskCreate+0x198>
 8002858:	3201      	adds	r2, #1
 800285a:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800285c:	6835      	ldr	r5, [r6, #0]
 800285e:	2d00      	cmp	r5, #0
 8002860:	d14e      	bne.n	8002900 <xTaskCreate+0x150>
			pxCurrentTCB = pxNewTCB;
 8002862:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2b01      	cmp	r3, #1
 8002868:	d11d      	bne.n	80028a6 <xTaskCreate+0xf6>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800286a:	eb08 0005 	add.w	r0, r8, r5
 800286e:	3514      	adds	r5, #20
 8002870:	f7ff fd02 	bl	8002278 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002874:	2d8c      	cmp	r5, #140	; 0x8c
 8002876:	d1f8      	bne.n	800286a <xTaskCreate+0xba>
	vListInitialise( &xDelayedTaskList1 );
 8002878:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 800294c <xTaskCreate+0x19c>
	vListInitialise( &xDelayedTaskList2 );
 800287c:	4d28      	ldr	r5, [pc, #160]	; (8002920 <xTaskCreate+0x170>)
	vListInitialise( &xDelayedTaskList1 );
 800287e:	4648      	mov	r0, r9
 8002880:	f7ff fcfa 	bl	8002278 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002884:	4628      	mov	r0, r5
 8002886:	f7ff fcf7 	bl	8002278 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800288a:	4826      	ldr	r0, [pc, #152]	; (8002924 <xTaskCreate+0x174>)
 800288c:	f7ff fcf4 	bl	8002278 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8002890:	4825      	ldr	r0, [pc, #148]	; (8002928 <xTaskCreate+0x178>)
 8002892:	f7ff fcf1 	bl	8002278 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8002896:	4825      	ldr	r0, [pc, #148]	; (800292c <xTaskCreate+0x17c>)
 8002898:	f7ff fcee 	bl	8002278 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800289c:	4b24      	ldr	r3, [pc, #144]	; (8002930 <xTaskCreate+0x180>)
 800289e:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80028a2:	4b24      	ldr	r3, [pc, #144]	; (8002934 <xTaskCreate+0x184>)
 80028a4:	601d      	str	r5, [r3, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80028a6:	2501      	movs	r5, #1
		uxTaskNumber++;
 80028a8:	4a23      	ldr	r2, [pc, #140]	; (8002938 <xTaskCreate+0x188>)
		prvAddTaskToReadyList( pxNewTCB );
 80028aa:	4924      	ldr	r1, [pc, #144]	; (800293c <xTaskCreate+0x18c>)
		uxTaskNumber++;
 80028ac:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80028ae:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 80028b0:	3301      	adds	r3, #1
 80028b2:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80028b4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80028b6:	fa05 f302 	lsl.w	r3, r5, r2
 80028ba:	4303      	orrs	r3, r0
 80028bc:	2014      	movs	r0, #20
 80028be:	600b      	str	r3, [r1, #0]
 80028c0:	fb00 8002 	mla	r0, r0, r2, r8
 80028c4:	4639      	mov	r1, r7
 80028c6:	f7ff fce5 	bl	8002294 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80028ca:	f7ff fd85 	bl	80023d8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80028ce:	4b1c      	ldr	r3, [pc, #112]	; (8002940 <xTaskCreate+0x190>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	b163      	cbz	r3, 80028ee <xTaskCreate+0x13e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80028d4:	6833      	ldr	r3, [r6, #0]
 80028d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80028da:	429a      	cmp	r2, r3
 80028dc:	d207      	bcs.n	80028ee <xTaskCreate+0x13e>
			taskYIELD_IF_USING_PREEMPTION();
 80028de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028e2:	4b18      	ldr	r3, [pc, #96]	; (8002944 <xTaskCreate+0x194>)
 80028e4:	601a      	str	r2, [r3, #0]
 80028e6:	f3bf 8f4f 	dsb	sy
 80028ea:	f3bf 8f6f 	isb	sy
	}
 80028ee:	4628      	mov	r0, r5
 80028f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 80028f4:	4628      	mov	r0, r5
 80028f6:	f7ff fecb 	bl	8002690 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80028fa:	f04f 35ff 	mov.w	r5, #4294967295
 80028fe:	e7f6      	b.n	80028ee <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
 8002900:	4b0f      	ldr	r3, [pc, #60]	; (8002940 <xTaskCreate+0x190>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d1ce      	bne.n	80028a6 <xTaskCreate+0xf6>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002908:	6833      	ldr	r3, [r6, #0]
 800290a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800290c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800290e:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8002910:	bf98      	it	ls
 8002912:	6034      	strls	r4, [r6, #0]
 8002914:	e7c7      	b.n	80028a6 <xTaskCreate+0xf6>
 8002916:	bf00      	nop
 8002918:	20004f04 	.word	0x20004f04
 800291c:	20004e6c 	.word	0x20004e6c
 8002920:	20004f30 	.word	0x20004f30
 8002924:	20004f50 	.word	0x20004f50
 8002928:	20004f7c 	.word	0x20004f7c
 800292c:	20004f68 	.word	0x20004f68
 8002930:	20004e70 	.word	0x20004e70
 8002934:	20004e74 	.word	0x20004e74
 8002938:	20004f14 	.word	0x20004f14
 800293c:	20004f18 	.word	0x20004f18
 8002940:	20004f64 	.word	0x20004f64
 8002944:	e000ed04 	.word	0xe000ed04
 8002948:	20004e78 	.word	0x20004e78
 800294c:	20004f1c 	.word	0x20004f1c

08002950 <vTaskStartScheduler>:
{
 8002950:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 8002952:	2400      	movs	r4, #0
 8002954:	4b16      	ldr	r3, [pc, #88]	; (80029b0 <vTaskStartScheduler+0x60>)
 8002956:	9400      	str	r4, [sp, #0]
 8002958:	9301      	str	r3, [sp, #4]
 800295a:	2280      	movs	r2, #128	; 0x80
 800295c:	4623      	mov	r3, r4
 800295e:	4915      	ldr	r1, [pc, #84]	; (80029b4 <vTaskStartScheduler+0x64>)
 8002960:	4815      	ldr	r0, [pc, #84]	; (80029b8 <vTaskStartScheduler+0x68>)
 8002962:	f7ff ff25 	bl	80027b0 <xTaskCreate>
	if( xReturn == pdPASS )
 8002966:	2801      	cmp	r0, #1
 8002968:	d114      	bne.n	8002994 <vTaskStartScheduler+0x44>
 800296a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800296e:	f383 8811 	msr	BASEPRI, r3
 8002972:	f3bf 8f6f 	isb	sy
 8002976:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800297a:	f04f 32ff 	mov.w	r2, #4294967295
 800297e:	4b0f      	ldr	r3, [pc, #60]	; (80029bc <vTaskStartScheduler+0x6c>)
 8002980:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002982:	4b0f      	ldr	r3, [pc, #60]	; (80029c0 <vTaskStartScheduler+0x70>)
 8002984:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002986:	4b0f      	ldr	r3, [pc, #60]	; (80029c4 <vTaskStartScheduler+0x74>)
 8002988:	601c      	str	r4, [r3, #0]
}
 800298a:	b002      	add	sp, #8
 800298c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8002990:	f7ff bd82 	b.w	8002498 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002994:	3001      	adds	r0, #1
 8002996:	d108      	bne.n	80029aa <vTaskStartScheduler+0x5a>
 8002998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800299c:	f383 8811 	msr	BASEPRI, r3
 80029a0:	f3bf 8f6f 	isb	sy
 80029a4:	f3bf 8f4f 	dsb	sy
 80029a8:	e7fe      	b.n	80029a8 <vTaskStartScheduler+0x58>
}
 80029aa:	b002      	add	sp, #8
 80029ac:	bd10      	pop	{r4, pc}
 80029ae:	bf00      	nop
 80029b0:	20004f44 	.word	0x20004f44
 80029b4:	08003418 	.word	0x08003418
 80029b8:	08002c35 	.word	0x08002c35
 80029bc:	20004f48 	.word	0x20004f48
 80029c0:	20004f64 	.word	0x20004f64
 80029c4:	20004f90 	.word	0x20004f90

080029c8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80029c8:	4a02      	ldr	r2, [pc, #8]	; (80029d4 <vTaskSuspendAll+0xc>)
 80029ca:	6813      	ldr	r3, [r2, #0]
 80029cc:	3301      	adds	r3, #1
 80029ce:	6013      	str	r3, [r2, #0]
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	20004f10 	.word	0x20004f10

080029d8 <xTaskIncrementTick>:
{
 80029d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80029dc:	4b3c      	ldr	r3, [pc, #240]	; (8002ad0 <xTaskIncrementTick+0xf8>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d153      	bne.n	8002a8c <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + 1;
 80029e4:	4b3b      	ldr	r3, [pc, #236]	; (8002ad4 <xTaskIncrementTick+0xfc>)
 80029e6:	681c      	ldr	r4, [r3, #0]
 80029e8:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 80029ea:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 80029ec:	b9bc      	cbnz	r4, 8002a1e <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 80029ee:	4b3a      	ldr	r3, [pc, #232]	; (8002ad8 <xTaskIncrementTick+0x100>)
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	6812      	ldr	r2, [r2, #0]
 80029f4:	b142      	cbz	r2, 8002a08 <xTaskIncrementTick+0x30>
 80029f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029fa:	f383 8811 	msr	BASEPRI, r3
 80029fe:	f3bf 8f6f 	isb	sy
 8002a02:	f3bf 8f4f 	dsb	sy
 8002a06:	e7fe      	b.n	8002a06 <xTaskIncrementTick+0x2e>
 8002a08:	4a34      	ldr	r2, [pc, #208]	; (8002adc <xTaskIncrementTick+0x104>)
 8002a0a:	6819      	ldr	r1, [r3, #0]
 8002a0c:	6810      	ldr	r0, [r2, #0]
 8002a0e:	6018      	str	r0, [r3, #0]
 8002a10:	6011      	str	r1, [r2, #0]
 8002a12:	4a33      	ldr	r2, [pc, #204]	; (8002ae0 <xTaskIncrementTick+0x108>)
 8002a14:	6813      	ldr	r3, [r2, #0]
 8002a16:	3301      	adds	r3, #1
 8002a18:	6013      	str	r3, [r2, #0]
 8002a1a:	f7ff fe71 	bl	8002700 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002a1e:	4d31      	ldr	r5, [pc, #196]	; (8002ae4 <xTaskIncrementTick+0x10c>)
 8002a20:	f04f 0b00 	mov.w	fp, #0
 8002a24:	682b      	ldr	r3, [r5, #0]
 8002a26:	4f30      	ldr	r7, [pc, #192]	; (8002ae8 <xTaskIncrementTick+0x110>)
 8002a28:	429c      	cmp	r4, r3
 8002a2a:	d33e      	bcc.n	8002aaa <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a2c:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8002ad8 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8002a30:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8002af8 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a34:	f8d8 2000 	ldr.w	r2, [r8]
 8002a38:	6812      	ldr	r2, [r2, #0]
 8002a3a:	bb72      	cbnz	r2, 8002a9a <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a40:	602a      	str	r2, [r5, #0]
					break;
 8002a42:	e032      	b.n	8002aaa <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002a44:	f106 0a04 	add.w	sl, r6, #4
 8002a48:	4650      	mov	r0, sl
 8002a4a:	f7ff fc46 	bl	80022da <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002a4e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8002a50:	b119      	cbz	r1, 8002a5a <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002a52:	f106 0018 	add.w	r0, r6, #24
 8002a56:	f7ff fc40 	bl	80022da <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f04f 0e14 	mov.w	lr, #20
 8002a60:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8002a62:	f8d9 3000 	ldr.w	r3, [r9]
 8002a66:	fa02 f100 	lsl.w	r1, r2, r0
 8002a6a:	4319      	orrs	r1, r3
 8002a6c:	4b1f      	ldr	r3, [pc, #124]	; (8002aec <xTaskIncrementTick+0x114>)
 8002a6e:	f8c9 1000 	str.w	r1, [r9]
 8002a72:	fb0e 3000 	mla	r0, lr, r0, r3
 8002a76:	4651      	mov	r1, sl
 8002a78:	f7ff fc0c 	bl	8002294 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002a7c:	6838      	ldr	r0, [r7, #0]
 8002a7e:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8002a80:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8002a82:	4291      	cmp	r1, r2
 8002a84:	bf28      	it	cs
 8002a86:	f04f 0b01 	movcs.w	fp, #1
 8002a8a:	e7d3      	b.n	8002a34 <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 8002a8c:	4a18      	ldr	r2, [pc, #96]	; (8002af0 <xTaskIncrementTick+0x118>)
BaseType_t xSwitchRequired = pdFALSE;
 8002a8e:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 8002a92:	6813      	ldr	r3, [r2, #0]
 8002a94:	3301      	adds	r3, #1
 8002a96:	6013      	str	r3, [r2, #0]
 8002a98:	e011      	b.n	8002abe <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002a9a:	f8d8 2000 	ldr.w	r2, [r8]
 8002a9e:	68d2      	ldr	r2, [r2, #12]
 8002aa0:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002aa2:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8002aa4:	428c      	cmp	r4, r1
 8002aa6:	d2cd      	bcs.n	8002a44 <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 8002aa8:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002aaa:	683a      	ldr	r2, [r7, #0]
 8002aac:	4b0f      	ldr	r3, [pc, #60]	; (8002aec <xTaskIncrementTick+0x114>)
 8002aae:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002ab0:	2214      	movs	r2, #20
 8002ab2:	434a      	muls	r2, r1
 8002ab4:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8002ab6:	2a02      	cmp	r2, #2
 8002ab8:	bf28      	it	cs
 8002aba:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8002abe:	4a0d      	ldr	r2, [pc, #52]	; (8002af4 <xTaskIncrementTick+0x11c>)
 8002ac0:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8002ac2:	2a00      	cmp	r2, #0
 8002ac4:	bf18      	it	ne
 8002ac6:	f04f 0b01 	movne.w	fp, #1
}
 8002aca:	4658      	mov	r0, fp
 8002acc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ad0:	20004f10 	.word	0x20004f10
 8002ad4:	20004f90 	.word	0x20004f90
 8002ad8:	20004e70 	.word	0x20004e70
 8002adc:	20004e74 	.word	0x20004e74
 8002ae0:	20004f4c 	.word	0x20004f4c
 8002ae4:	20004f48 	.word	0x20004f48
 8002ae8:	20004e6c 	.word	0x20004e6c
 8002aec:	20004e78 	.word	0x20004e78
 8002af0:	20004f0c 	.word	0x20004f0c
 8002af4:	20004f94 	.word	0x20004f94
 8002af8:	20004f18 	.word	0x20004f18

08002afc <xTaskResumeAll>:
{
 8002afc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8002b00:	4c31      	ldr	r4, [pc, #196]	; (8002bc8 <xTaskResumeAll+0xcc>)
 8002b02:	6823      	ldr	r3, [r4, #0]
 8002b04:	b943      	cbnz	r3, 8002b18 <xTaskResumeAll+0x1c>
 8002b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b0a:	f383 8811 	msr	BASEPRI, r3
 8002b0e:	f3bf 8f6f 	isb	sy
 8002b12:	f3bf 8f4f 	dsb	sy
 8002b16:	e7fe      	b.n	8002b16 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8002b18:	f7ff fc3c 	bl	8002394 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8002b1c:	6823      	ldr	r3, [r4, #0]
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002b22:	6824      	ldr	r4, [r4, #0]
 8002b24:	b12c      	cbz	r4, 8002b32 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8002b26:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8002b28:	f7ff fc56 	bl	80023d8 <vPortExitCritical>
}
 8002b2c:	4620      	mov	r0, r4
 8002b2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002b32:	4b26      	ldr	r3, [pc, #152]	; (8002bcc <xTaskResumeAll+0xd0>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d0f5      	beq.n	8002b26 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002b3a:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8002be4 <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 8002b3e:	4f24      	ldr	r7, [pc, #144]	; (8002bd0 <xTaskResumeAll+0xd4>)
 8002b40:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8002be8 <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002b44:	f8d9 3000 	ldr.w	r3, [r9]
 8002b48:	b9e3      	cbnz	r3, 8002b84 <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 8002b4a:	b10c      	cbz	r4, 8002b50 <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 8002b4c:	f7ff fdd8 	bl	8002700 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002b50:	4d20      	ldr	r5, [pc, #128]	; (8002bd4 <xTaskResumeAll+0xd8>)
 8002b52:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002b54:	b144      	cbz	r4, 8002b68 <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 8002b56:	2701      	movs	r7, #1
 8002b58:	4e1f      	ldr	r6, [pc, #124]	; (8002bd8 <xTaskResumeAll+0xdc>)
							if( xTaskIncrementTick() != pdFALSE )
 8002b5a:	f7ff ff3d 	bl	80029d8 <xTaskIncrementTick>
 8002b5e:	b100      	cbz	r0, 8002b62 <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 8002b60:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002b62:	3c01      	subs	r4, #1
 8002b64:	d1f9      	bne.n	8002b5a <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 8002b66:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8002b68:	4b1b      	ldr	r3, [pc, #108]	; (8002bd8 <xTaskResumeAll+0xdc>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d0da      	beq.n	8002b26 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8002b70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b74:	4b19      	ldr	r3, [pc, #100]	; (8002bdc <xTaskResumeAll+0xe0>)
 8002b76:	601a      	str	r2, [r3, #0]
 8002b78:	f3bf 8f4f 	dsb	sy
 8002b7c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8002b80:	2401      	movs	r4, #1
 8002b82:	e7d1      	b.n	8002b28 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002b84:	f8d9 300c 	ldr.w	r3, [r9, #12]
					prvAddTaskToReadyList( pxTCB );
 8002b88:	2501      	movs	r5, #1
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002b8a:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b8c:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002b8e:	f104 0018 	add.w	r0, r4, #24
 8002b92:	f7ff fba2 	bl	80022da <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b96:	4630      	mov	r0, r6
 8002b98:	f7ff fb9f 	bl	80022da <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002b9c:	2014      	movs	r0, #20
 8002b9e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002ba0:	6839      	ldr	r1, [r7, #0]
 8002ba2:	fa05 f302 	lsl.w	r3, r5, r2
 8002ba6:	430b      	orrs	r3, r1
 8002ba8:	fb00 8002 	mla	r0, r0, r2, r8
 8002bac:	4631      	mov	r1, r6
 8002bae:	603b      	str	r3, [r7, #0]
 8002bb0:	f7ff fb70 	bl	8002294 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002bb4:	4b0a      	ldr	r3, [pc, #40]	; (8002be0 <xTaskResumeAll+0xe4>)
 8002bb6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bbc:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 8002bbe:	bf24      	itt	cs
 8002bc0:	4b05      	ldrcs	r3, [pc, #20]	; (8002bd8 <xTaskResumeAll+0xdc>)
 8002bc2:	601d      	strcs	r5, [r3, #0]
 8002bc4:	e7be      	b.n	8002b44 <xTaskResumeAll+0x48>
 8002bc6:	bf00      	nop
 8002bc8:	20004f10 	.word	0x20004f10
 8002bcc:	20004f04 	.word	0x20004f04
 8002bd0:	20004f18 	.word	0x20004f18
 8002bd4:	20004f0c 	.word	0x20004f0c
 8002bd8:	20004f94 	.word	0x20004f94
 8002bdc:	e000ed04 	.word	0xe000ed04
 8002be0:	20004e6c 	.word	0x20004e6c
 8002be4:	20004f50 	.word	0x20004f50
 8002be8:	20004e78 	.word	0x20004e78

08002bec <vTaskDelay>:
	{
 8002bec:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002bee:	b940      	cbnz	r0, 8002c02 <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8002bf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bf4:	4b0d      	ldr	r3, [pc, #52]	; (8002c2c <vTaskDelay+0x40>)
 8002bf6:	601a      	str	r2, [r3, #0]
 8002bf8:	f3bf 8f4f 	dsb	sy
 8002bfc:	f3bf 8f6f 	isb	sy
 8002c00:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8002c02:	4b0b      	ldr	r3, [pc, #44]	; (8002c30 <vTaskDelay+0x44>)
 8002c04:	6819      	ldr	r1, [r3, #0]
 8002c06:	b141      	cbz	r1, 8002c1a <vTaskDelay+0x2e>
 8002c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c0c:	f383 8811 	msr	BASEPRI, r3
 8002c10:	f3bf 8f6f 	isb	sy
 8002c14:	f3bf 8f4f 	dsb	sy
 8002c18:	e7fe      	b.n	8002c18 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8002c1a:	f7ff fed5 	bl	80029c8 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002c1e:	f7ff fd81 	bl	8002724 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8002c22:	f7ff ff6b 	bl	8002afc <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8002c26:	2800      	cmp	r0, #0
 8002c28:	d0e2      	beq.n	8002bf0 <vTaskDelay+0x4>
 8002c2a:	bd08      	pop	{r3, pc}
 8002c2c:	e000ed04 	.word	0xe000ed04
 8002c30:	20004f10 	.word	0x20004f10

08002c34 <prvIdleTask>:
{
 8002c34:	b508      	push	{r3, lr}
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8002c36:	4e17      	ldr	r6, [pc, #92]	; (8002c94 <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002c38:	4c17      	ldr	r4, [pc, #92]	; (8002c98 <prvIdleTask+0x64>)
 8002c3a:	6823      	ldr	r3, [r4, #0]
 8002c3c:	b963      	cbnz	r3, 8002c58 <prvIdleTask+0x24>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002c3e:	4b17      	ldr	r3, [pc, #92]	; (8002c9c <prvIdleTask+0x68>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d9f8      	bls.n	8002c38 <prvIdleTask+0x4>
				taskYIELD();
 8002c46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c4a:	4b15      	ldr	r3, [pc, #84]	; (8002ca0 <prvIdleTask+0x6c>)
 8002c4c:	601a      	str	r2, [r3, #0]
 8002c4e:	f3bf 8f4f 	dsb	sy
 8002c52:	f3bf 8f6f 	isb	sy
 8002c56:	e7ef      	b.n	8002c38 <prvIdleTask+0x4>
			vTaskSuspendAll();
 8002c58:	f7ff feb6 	bl	80029c8 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8002c5c:	6835      	ldr	r5, [r6, #0]
			( void ) xTaskResumeAll();
 8002c5e:	f7ff ff4d 	bl	8002afc <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 8002c62:	2d00      	cmp	r5, #0
 8002c64:	d0e9      	beq.n	8002c3a <prvIdleTask+0x6>
				taskENTER_CRITICAL();
 8002c66:	f7ff fb95 	bl	8002394 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002c6a:	68f3      	ldr	r3, [r6, #12]
 8002c6c:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c6e:	1d28      	adds	r0, r5, #4
 8002c70:	f7ff fb33 	bl	80022da <uxListRemove>
					--uxCurrentNumberOfTasks;
 8002c74:	4a0b      	ldr	r2, [pc, #44]	; (8002ca4 <prvIdleTask+0x70>)
 8002c76:	6813      	ldr	r3, [r2, #0]
 8002c78:	3b01      	subs	r3, #1
 8002c7a:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8002c7c:	6823      	ldr	r3, [r4, #0]
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	6023      	str	r3, [r4, #0]
				taskEXIT_CRITICAL();
 8002c82:	f7ff fba9 	bl	80023d8 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 8002c86:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8002c88:	f7ff fd02 	bl	8002690 <vPortFree>
			vPortFree( pxTCB );
 8002c8c:	4628      	mov	r0, r5
 8002c8e:	f7ff fcff 	bl	8002690 <vPortFree>
 8002c92:	e7d2      	b.n	8002c3a <prvIdleTask+0x6>
 8002c94:	20004f7c 	.word	0x20004f7c
 8002c98:	20004f08 	.word	0x20004f08
 8002c9c:	20004e78 	.word	0x20004e78
 8002ca0:	e000ed04 	.word	0xe000ed04
 8002ca4:	20004f04 	.word	0x20004f04

08002ca8 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002ca8:	4b17      	ldr	r3, [pc, #92]	; (8002d08 <vTaskSwitchContext+0x60>)
{
 8002caa:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	4b17      	ldr	r3, [pc, #92]	; (8002d0c <vTaskSwitchContext+0x64>)
 8002cb0:	b112      	cbz	r2, 8002cb8 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8002cb2:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002cb4:	601a      	str	r2, [r3, #0]
 8002cb6:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8002cb8:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002cba:	4b15      	ldr	r3, [pc, #84]	; (8002d10 <vTaskSwitchContext+0x68>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8002cbe:	fab3 f383 	clz	r3, r3
 8002cc2:	2214      	movs	r2, #20
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	f1c3 031f 	rsb	r3, r3, #31
 8002cca:	435a      	muls	r2, r3
 8002ccc:	4911      	ldr	r1, [pc, #68]	; (8002d14 <vTaskSwitchContext+0x6c>)
 8002cce:	588c      	ldr	r4, [r1, r2]
 8002cd0:	1888      	adds	r0, r1, r2
 8002cd2:	b944      	cbnz	r4, 8002ce6 <vTaskSwitchContext+0x3e>
	__asm volatile
 8002cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cd8:	f383 8811 	msr	BASEPRI, r3
 8002cdc:	f3bf 8f6f 	isb	sy
 8002ce0:	f3bf 8f4f 	dsb	sy
 8002ce4:	e7fe      	b.n	8002ce4 <vTaskSwitchContext+0x3c>
 8002ce6:	6844      	ldr	r4, [r0, #4]
 8002ce8:	3208      	adds	r2, #8
 8002cea:	6864      	ldr	r4, [r4, #4]
 8002cec:	440a      	add	r2, r1
 8002cee:	4294      	cmp	r4, r2
 8002cf0:	bf08      	it	eq
 8002cf2:	6862      	ldreq	r2, [r4, #4]
 8002cf4:	6044      	str	r4, [r0, #4]
 8002cf6:	bf08      	it	eq
 8002cf8:	6042      	streq	r2, [r0, #4]
 8002cfa:	2214      	movs	r2, #20
 8002cfc:	fb02 1303 	mla	r3, r2, r3, r1
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	68da      	ldr	r2, [r3, #12]
 8002d04:	4b04      	ldr	r3, [pc, #16]	; (8002d18 <vTaskSwitchContext+0x70>)
 8002d06:	e7d5      	b.n	8002cb4 <vTaskSwitchContext+0xc>
 8002d08:	20004f10 	.word	0x20004f10
 8002d0c:	20004f94 	.word	0x20004f94
 8002d10:	20004f18 	.word	0x20004f18
 8002d14:	20004e78 	.word	0x20004e78
 8002d18:	20004e6c 	.word	0x20004e6c

08002d1c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8002d1c:	4b05      	ldr	r3, [pc, #20]	; (8002d34 <xTaskGetSchedulerState+0x18>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	b133      	cbz	r3, 8002d30 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d22:	4b05      	ldr	r3, [pc, #20]	; (8002d38 <xTaskGetSchedulerState+0x1c>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8002d28:	bf0c      	ite	eq
 8002d2a:	2002      	moveq	r0, #2
 8002d2c:	2000      	movne	r0, #0
 8002d2e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002d30:	2001      	movs	r0, #1
	}
 8002d32:	4770      	bx	lr
 8002d34:	20004f64 	.word	0x20004f64
 8002d38:	20004f10 	.word	0x20004f10

08002d3c <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002d3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint16_t r = 10000;
    int16_t rInc = 100;
    uint16_t b = 20000;
    uint16_t g = 30000;
    int16_t bInc = -100;
    int16_t gInc = -100;
 8002d40:	f06f 0863 	mvn.w	r8, #99	; 0x63
  for(;;)
  {
	r += rInc;
	g += gInc;
	b += bInc;
	if ((r > 45400) || (r < 200)) rInc = -rInc;
 8002d44:	f24b 0990 	movw	r9, #45200	; 0xb090
    int16_t bInc = -100;
 8002d48:	4641      	mov	r1, r8
    uint16_t g = 30000;
 8002d4a:	f247 5530 	movw	r5, #30000	; 0x7530
    uint16_t b = 20000;
 8002d4e:	f644 6620 	movw	r6, #20000	; 0x4e20
    int16_t rInc = 100;
 8002d52:	f04f 0a64 	mov.w	sl, #100	; 0x64
    uint16_t r = 10000;
 8002d56:	f242 7410 	movw	r4, #10000	; 0x2710
 8002d5a:	46cb      	mov	fp, r9
	if ((g > 45400) || (g < 200)) gInc = -gInc;
	if ((b > 45400) || (b < 200)) bInc = -bInc;

	TIM3->CCR1 = b; //B
 8002d5c:	4f17      	ldr	r7, [pc, #92]	; (8002dbc <StartDefaultTask+0x80>)
	r += rInc;
 8002d5e:	fa1f f08a 	uxth.w	r0, sl
 8002d62:	4404      	add	r4, r0
 8002d64:	b2a4      	uxth	r4, r4
	g += gInc;
 8002d66:	fa1f f288 	uxth.w	r2, r8
	if ((r > 45400) || (r < 200)) rInc = -rInc;
 8002d6a:	f1a4 0ec8 	sub.w	lr, r4, #200	; 0xc8
	g += gInc;
 8002d6e:	4415      	add	r5, r2
	if ((r > 45400) || (r < 200)) rInc = -rInc;
 8002d70:	fa1f fe8e 	uxth.w	lr, lr
 8002d74:	45ce      	cmp	lr, r9
	g += gInc;
 8002d76:	b2ad      	uxth	r5, r5
	if ((r > 45400) || (r < 200)) rInc = -rInc;
 8002d78:	bf88      	it	hi
 8002d7a:	f1c0 0a00 	rsbhi	sl, r0, #0
	if ((g > 45400) || (g < 200)) gInc = -gInc;
 8002d7e:	f1a5 00c8 	sub.w	r0, r5, #200	; 0xc8
	b += bInc;
 8002d82:	b28b      	uxth	r3, r1
	if ((g > 45400) || (g < 200)) gInc = -gInc;
 8002d84:	b280      	uxth	r0, r0
	b += bInc;
 8002d86:	441e      	add	r6, r3
	if ((r > 45400) || (r < 200)) rInc = -rInc;
 8002d88:	bf88      	it	hi
 8002d8a:	fa0f fa8a 	sxthhi.w	sl, sl
	if ((g > 45400) || (g < 200)) gInc = -gInc;
 8002d8e:	4558      	cmp	r0, fp
 8002d90:	bf88      	it	hi
 8002d92:	4252      	neghi	r2, r2
	b += bInc;
 8002d94:	b2b6      	uxth	r6, r6
	if ((g > 45400) || (g < 200)) gInc = -gInc;
 8002d96:	bf88      	it	hi
 8002d98:	fa0f f882 	sxthhi.w	r8, r2
	if ((b > 45400) || (b < 200)) bInc = -bInc;
 8002d9c:	f1a6 02c8 	sub.w	r2, r6, #200	; 0xc8
 8002da0:	b292      	uxth	r2, r2
 8002da2:	454a      	cmp	r2, r9
 8002da4:	bf84      	itt	hi
 8002da6:	425b      	neghi	r3, r3
 8002da8:	b219      	sxthhi	r1, r3
 8002daa:	9101      	str	r1, [sp, #4]
	TIM3->CCR2 = g; //G
	TIM3->CCR3 = r; //R
    osDelay(10);
 8002dac:	200a      	movs	r0, #10
	TIM3->CCR1 = b; //B
 8002dae:	637e      	str	r6, [r7, #52]	; 0x34
	TIM3->CCR2 = g; //G
 8002db0:	63bd      	str	r5, [r7, #56]	; 0x38
	TIM3->CCR3 = r; //R
 8002db2:	63fc      	str	r4, [r7, #60]	; 0x3c
    osDelay(10);
 8002db4:	f7ff fa4e 	bl	8002254 <osDelay>
	r += rInc;
 8002db8:	9901      	ldr	r1, [sp, #4]
 8002dba:	e7d0      	b.n	8002d5e <StartDefaultTask+0x22>
 8002dbc:	40000400 	.word	0x40000400

08002dc0 <SystemClock_Config>:
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002dc0:	2238      	movs	r2, #56	; 0x38
{
 8002dc2:	b530      	push	{r4, r5, lr}
 8002dc4:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002dc6:	eb0d 0002 	add.w	r0, sp, r2
 8002dca:	2100      	movs	r1, #0
 8002dcc:	f000 faf5 	bl	80033ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002dd0:	2214      	movs	r2, #20
 8002dd2:	2100      	movs	r1, #0
 8002dd4:	a801      	add	r0, sp, #4
 8002dd6:	f000 faf0 	bl	80033ba <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002dda:	2220      	movs	r2, #32
 8002ddc:	2100      	movs	r1, #0
 8002dde:	a806      	add	r0, sp, #24
 8002de0:	f000 faeb 	bl	80033ba <memset>
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002de4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002de8:	2402      	movs	r4, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002dea:	2501      	movs	r5, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002dec:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002dee:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002df0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002df4:	a80e      	add	r0, sp, #56	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002df6:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002df8:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002dfa:	9513      	str	r5, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002dfc:	9416      	str	r4, [sp, #88]	; 0x58
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002dfe:	f7fe f94b 	bl	8001098 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e02:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002e04:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e08:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e0a:	2300      	movs	r3, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002e0c:	4621      	mov	r1, r4
 8002e0e:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e10:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002e12:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002e14:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e16:	9402      	str	r4, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002e18:	f7fe fb8c 	bl	8001534 <HAL_RCC_ClockConfig>
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002e1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e20:	a806      	add	r0, sp, #24
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002e22:	9308      	str	r3, [sp, #32]
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002e24:	9406      	str	r4, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e26:	f7fe fc57 	bl	80016d8 <HAL_RCCEx_PeriphCLKConfig>
  __HAL_RCC_PLLI2S_ENABLE();
 8002e2a:	4b02      	ldr	r3, [pc, #8]	; (8002e34 <SystemClock_Config+0x74>)
 8002e2c:	601d      	str	r5, [r3, #0]
}
 8002e2e:	b01d      	add	sp, #116	; 0x74
 8002e30:	bd30      	pop	{r4, r5, pc}
 8002e32:	bf00      	nop
 8002e34:	42420070 	.word	0x42420070

08002e38 <main>:
{
 8002e38:	b580      	push	{r7, lr}
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e3a:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002e3c:	f44f 7980 	mov.w	r9, #256	; 0x100
{
 8002e40:	b092      	sub	sp, #72	; 0x48
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e42:	4d8d      	ldr	r5, [pc, #564]	; (8003078 <main+0x240>)
  HAL_Init();
 8002e44:	f7fd fba0 	bl	8000588 <HAL_Init>
  SystemClock_Config();
 8002e48:	f7ff ffba 	bl	8002dc0 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e4c:	2210      	movs	r2, #16
 8002e4e:	2100      	movs	r1, #0
 8002e50:	a80a      	add	r0, sp, #40	; 0x28
 8002e52:	f000 fab2 	bl	80033ba <memset>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e56:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002e58:	2201      	movs	r2, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e5a:	f043 0320 	orr.w	r3, r3, #32
 8002e5e:	61ab      	str	r3, [r5, #24]
 8002e60:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002e62:	f44f 6100 	mov.w	r1, #2048	; 0x800
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e66:	f003 0320 	and.w	r3, r3, #32
 8002e6a:	9301      	str	r3, [sp, #4]
 8002e6c:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e6e:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002e70:	4882      	ldr	r0, [pc, #520]	; (800307c <main+0x244>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e72:	f043 0304 	orr.w	r3, r3, #4
 8002e76:	61ab      	str	r3, [r5, #24]
 8002e78:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e7a:	2601      	movs	r6, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e7c:	f003 0304 	and.w	r3, r3, #4
 8002e80:	9302      	str	r3, [sp, #8]
 8002e82:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e84:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002e86:	2704      	movs	r7, #4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e88:	f043 0308 	orr.w	r3, r3, #8
 8002e8c:	61ab      	str	r3, [r5, #24]
 8002e8e:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e90:	f04f 0803 	mov.w	r8, #3
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e94:	f003 0308 	and.w	r3, r3, #8
 8002e98:	9303      	str	r3, [sp, #12]
 8002e9a:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002e9c:	f7fe f8f6 	bl	800108c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	2104      	movs	r1, #4
 8002ea4:	4876      	ldr	r0, [pc, #472]	; (8003080 <main+0x248>)
 8002ea6:	f7fe f8f1 	bl	800108c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 8002eb0:	4874      	ldr	r0, [pc, #464]	; (8003084 <main+0x24c>)
 8002eb2:	f7fe f8eb 	bl	800108c <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eb6:	a90a      	add	r1, sp, #40	; 0x28
 8002eb8:	4870      	ldr	r0, [pc, #448]	; (800307c <main+0x244>)
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002eba:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ebe:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec0:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ec2:	f7fe f803 	bl	8000ecc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002ec6:	f44f 6300 	mov.w	r3, #2048	; 0x800
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eca:	a90a      	add	r1, sp, #40	; 0x28
 8002ecc:	486b      	ldr	r0, [pc, #428]	; (800307c <main+0x244>)
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002ece:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ed0:	960b      	str	r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002ed2:	960d      	str	r6, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed4:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ed6:	f7fd fff9 	bl	8000ecc <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002eda:	a90a      	add	r1, sp, #40	; 0x28
 8002edc:	4868      	ldr	r0, [pc, #416]	; (8003080 <main+0x248>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ede:	960b      	str	r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002ee0:	970a      	str	r7, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee2:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ee4:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ee8:	f7fd fff0 	bl	8000ecc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
 8002eec:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ef0:	a90a      	add	r1, sp, #40	; 0x28
 8002ef2:	4864      	ldr	r0, [pc, #400]	; (8003084 <main+0x24c>)
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
 8002ef4:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ef6:	960b      	str	r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef8:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002efa:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002efe:	f7fd ffe5 	bl	8000ecc <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002f02:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8002f04:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002f06:	4333      	orrs	r3, r6
 8002f08:	616b      	str	r3, [r5, #20]
 8002f0a:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8002f0c:	2105      	movs	r1, #5
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002f0e:	4033      	ands	r3, r6
 8002f10:	9300      	str	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8002f12:	200e      	movs	r0, #14
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002f14:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8002f16:	f7fd fdf9 	bl	8000b0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002f1a:	200e      	movs	r0, #14
 8002f1c:	f7fd fe2a 	bl	8000b74 <HAL_NVIC_EnableIRQ>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8002f20:	2220      	movs	r2, #32
 8002f22:	4621      	mov	r1, r4
 8002f24:	a80a      	add	r0, sp, #40	; 0x28
  hadc1.Instance = ADC1;
 8002f26:	4d58      	ldr	r5, [pc, #352]	; (8003088 <main+0x250>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8002f28:	9406      	str	r4, [sp, #24]
 8002f2a:	9407      	str	r4, [sp, #28]
 8002f2c:	9408      	str	r4, [sp, #32]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8002f2e:	f000 fa44 	bl	80033ba <memset>
  hadc1.Instance = ADC1;
 8002f32:	4b56      	ldr	r3, [pc, #344]	; (800308c <main+0x254>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002f34:	4628      	mov	r0, r5
  hadc1.Instance = ADC1;
 8002f36:	602b      	str	r3, [r5, #0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002f38:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  hadc1.Init.NbrOfConversion = 1;
 8002f3c:	612e      	str	r6, [r5, #16]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002f3e:	61eb      	str	r3, [r5, #28]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002f40:	f8c5 9008 	str.w	r9, [r5, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002f44:	60ec      	str	r4, [r5, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002f46:	616c      	str	r4, [r5, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002f48:	606c      	str	r4, [r5, #4]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002f4a:	f7fd fc5f 	bl	800080c <HAL_ADC_Init>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f4e:	a906      	add	r1, sp, #24
 8002f50:	4628      	mov	r0, r5
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002f52:	9607      	str	r6, [sp, #28]
  sConfig.Channel = ADC_CHANNEL_0;
 8002f54:	9406      	str	r4, [sp, #24]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002f56:	9408      	str	r4, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002f58:	f7fd fbb2 	bl	80006c0 <HAL_ADC_ConfigChannel>
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8002f5c:	2307      	movs	r3, #7
 8002f5e:	930c      	str	r3, [sp, #48]	; 0x30
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8002f60:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8002f64:	a90a      	add	r1, sp, #40	; 0x28
 8002f66:	4628      	mov	r0, r5
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8002f68:	9311      	str	r3, [sp, #68]	; 0x44
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8002f6a:	960b      	str	r6, [sp, #44]	; 0x2c
  sConfigInjected.InjectedChannel = ADC_CHANNEL_0;
 8002f6c:	940a      	str	r4, [sp, #40]	; 0x28
  sConfigInjected.InjectedNbrOfConversion = 4;
 8002f6e:	970e      	str	r7, [sp, #56]	; 0x38
  sConfigInjected.AutoInjectedConv = DISABLE;
 8002f70:	9410      	str	r4, [sp, #64]	; 0x40
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8002f72:	940f      	str	r4, [sp, #60]	; 0x3c
  sConfigInjected.InjectedOffset = 0;
 8002f74:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8002f76:	f7fd fccb 	bl	8000910 <HAL_ADCEx_InjectedConfigChannel>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8002f7a:	960a      	str	r6, [sp, #40]	; 0x28
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8002f7c:	2602      	movs	r6, #2
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8002f7e:	a90a      	add	r1, sp, #40	; 0x28
 8002f80:	4628      	mov	r0, r5
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8002f82:	960b      	str	r6, [sp, #44]	; 0x2c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8002f84:	f7fd fcc4 	bl	8000910 <HAL_ADCEx_InjectedConfigChannel>
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8002f88:	a90a      	add	r1, sp, #40	; 0x28
 8002f8a:	4628      	mov	r0, r5
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 8002f8c:	960a      	str	r6, [sp, #40]	; 0x28
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8002f8e:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8002f92:	f7fd fcbd 	bl	8000910 <HAL_ADCEx_InjectedConfigChannel>
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8002f96:	a90a      	add	r1, sp, #40	; 0x28
 8002f98:	4628      	mov	r0, r5
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8002f9a:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_4;
 8002f9e:	970b      	str	r7, [sp, #44]	; 0x2c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8002fa0:	f7fd fcb6 	bl	8000910 <HAL_ADCEx_InjectedConfigChannel>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002fa4:	2210      	movs	r2, #16
 8002fa6:	4621      	mov	r1, r4
 8002fa8:	a806      	add	r0, sp, #24
 8002faa:	f000 fa06 	bl	80033ba <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002fae:	221c      	movs	r2, #28
 8002fb0:	4621      	mov	r1, r4
 8002fb2:	a80a      	add	r0, sp, #40	; 0x28
  htim3.Instance = TIM3;
 8002fb4:	4d36      	ldr	r5, [pc, #216]	; (8003090 <main+0x258>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fb6:	9404      	str	r4, [sp, #16]
 8002fb8:	9405      	str	r4, [sp, #20]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002fba:	f000 f9fe 	bl	80033ba <memset>
  htim3.Instance = TIM3;
 8002fbe:	4b35      	ldr	r3, [pc, #212]	; (8003094 <main+0x25c>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002fc0:	4628      	mov	r0, r5
  htim3.Init.Prescaler = 0;
 8002fc2:	e885 0018 	stmia.w	r5, {r3, r4}
  htim3.Init.Period = 65535;
 8002fc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fca:	60ac      	str	r4, [r5, #8]
  htim3.Init.Period = 65535;
 8002fcc:	60eb      	str	r3, [r5, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fce:	612c      	str	r4, [r5, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fd0:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002fd2:	f7fe fe55 	bl	8001c80 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002fda:	a906      	add	r1, sp, #24
 8002fdc:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fde:	9306      	str	r3, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002fe0:	f7fe fcad 	bl	800193e <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002fe4:	4628      	mov	r0, r5
 8002fe6:	f7fe fe65 	bl	8001cb4 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002fea:	a904      	add	r1, sp, #16
 8002fec:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fee:	9404      	str	r4, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ff0:	9405      	str	r4, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002ff2:	f7fe ff29 	bl	8001e48 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ff6:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ff8:	4622      	mov	r2, r4
 8002ffa:	a90a      	add	r1, sp, #40	; 0x28
 8002ffc:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ffe:	930a      	str	r3, [sp, #40]	; 0x28
  sConfigOC.Pulse = 0;
 8003000:	940b      	str	r4, [sp, #44]	; 0x2c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003002:	940c      	str	r4, [sp, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003004:	940e      	str	r4, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003006:	f7fe fe9b 	bl	8001d40 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800300a:	463a      	mov	r2, r7
 800300c:	a90a      	add	r1, sp, #40	; 0x28
 800300e:	4628      	mov	r0, r5
 8003010:	f7fe fe96 	bl	8001d40 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003014:	a90a      	add	r1, sp, #40	; 0x28
 8003016:	2208      	movs	r2, #8
 8003018:	4628      	mov	r0, r5
 800301a:	f7fe fe91 	bl	8001d40 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim3);
 800301e:	4628      	mov	r0, r5
 8003020:	f000 f8c0 	bl	80031a4 <HAL_TIM_MspPostInit>
  huart1.Init.BaudRate = 19200;
 8003024:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
  huart1.Instance = USART1;
 8003028:	481b      	ldr	r0, [pc, #108]	; (8003098 <main+0x260>)
  huart1.Init.BaudRate = 19200;
 800302a:	4a1c      	ldr	r2, [pc, #112]	; (800309c <main+0x264>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800302c:	6084      	str	r4, [r0, #8]
  huart1.Init.BaudRate = 19200;
 800302e:	e880 000c 	stmia.w	r0, {r2, r3}
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003032:	230c      	movs	r3, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003034:	60c4      	str	r4, [r0, #12]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003036:	6143      	str	r3, [r0, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003038:	6104      	str	r4, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800303a:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800303c:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800303e:	f7fe ffd3 	bl	8001fe8 <HAL_UART_Init>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8003042:	4621      	mov	r1, r4
 8003044:	4628      	mov	r0, r5
 8003046:	f7fe fee9 	bl	8001e1c <HAL_TIM_PWM_Start>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800304a:	4e15      	ldr	r6, [pc, #84]	; (80030a0 <main+0x268>)
  	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800304c:	4639      	mov	r1, r7
 800304e:	4628      	mov	r0, r5
 8003050:	f7fe fee4 	bl	8001e1c <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8003054:	2108      	movs	r1, #8
 8003056:	4628      	mov	r0, r5
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8003058:	ad0a      	add	r5, sp, #40	; 0x28
  	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800305a:	f7fe fedf 	bl	8001e1c <HAL_TIM_PWM_Start>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800305e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003060:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003062:	6833      	ldr	r3, [r6, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8003064:	4621      	mov	r1, r4
 8003066:	a80a      	add	r0, sp, #40	; 0x28
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8003068:	602b      	str	r3, [r5, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800306a:	f7ff f8da 	bl	8002222 <osThreadCreate>
 800306e:	4b0d      	ldr	r3, [pc, #52]	; (80030a4 <main+0x26c>)
 8003070:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8003072:	f7ff f8d1 	bl	8002218 <osKernelStart>
 8003076:	e7fe      	b.n	8003076 <main+0x23e>
 8003078:	40021000 	.word	0x40021000
 800307c:	40010800 	.word	0x40010800
 8003080:	40011400 	.word	0x40011400
 8003084:	40010c00 	.word	0x40010c00
 8003088:	20005024 	.word	0x20005024
 800308c:	40012400 	.word	0x40012400
 8003090:	20004fa0 	.word	0x20004fa0
 8003094:	40000400 	.word	0x40000400
 8003098:	20005054 	.word	0x20005054
 800309c:	40013800 	.word	0x40013800
 80030a0:	08003404 	.word	0x08003404
 80030a4:	20004f9c 	.word	0x20004f9c

080030a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80030a8:	4770      	bx	lr
	...

080030ac <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80030ac:	4b11      	ldr	r3, [pc, #68]	; (80030f4 <HAL_MspInit+0x48>)
{
 80030ae:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 80030b0:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80030b2:	210f      	movs	r1, #15
  __HAL_RCC_AFIO_CLK_ENABLE();
 80030b4:	f042 0201 	orr.w	r2, r2, #1
 80030b8:	619a      	str	r2, [r3, #24]
 80030ba:	699a      	ldr	r2, [r3, #24]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80030bc:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_AFIO_CLK_ENABLE();
 80030c0:	f002 0201 	and.w	r2, r2, #1
 80030c4:	9200      	str	r2, [sp, #0]
 80030c6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030c8:	69da      	ldr	r2, [r3, #28]
 80030ca:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80030ce:	61da      	str	r2, [r3, #28]
 80030d0:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80030d2:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 80030d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030d8:	9301      	str	r3, [sp, #4]
 80030da:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80030dc:	f7fd fd16 	bl	8000b0c <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80030e0:	4a05      	ldr	r2, [pc, #20]	; (80030f8 <HAL_MspInit+0x4c>)
 80030e2:	6853      	ldr	r3, [r2, #4]
 80030e4:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80030e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80030ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030ee:	b003      	add	sp, #12
 80030f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80030f4:	40021000 	.word	0x40021000
 80030f8:	40010000 	.word	0x40010000

080030fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80030fc:	b510      	push	{r4, lr}
 80030fe:	4604      	mov	r4, r0
 8003100:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003102:	2210      	movs	r2, #16
 8003104:	2100      	movs	r1, #0
 8003106:	a802      	add	r0, sp, #8
 8003108:	f000 f957 	bl	80033ba <memset>
  if(hadc->Instance==ADC1)
 800310c:	6822      	ldr	r2, [r4, #0]
 800310e:	4b14      	ldr	r3, [pc, #80]	; (8003160 <HAL_ADC_MspInit+0x64>)
 8003110:	429a      	cmp	r2, r3
 8003112:	d123      	bne.n	800315c <HAL_ADC_MspInit+0x60>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003114:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8003118:	699a      	ldr	r2, [r3, #24]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800311a:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 800311c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003120:	619a      	str	r2, [r3, #24]
 8003122:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003124:	480f      	ldr	r0, [pc, #60]	; (8003164 <HAL_ADC_MspInit+0x68>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003126:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800312a:	9200      	str	r2, [sp, #0]
 800312c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800312e:	699a      	ldr	r2, [r3, #24]
 8003130:	f042 0204 	orr.w	r2, r2, #4
 8003134:	619a      	str	r2, [r3, #24]
 8003136:	699b      	ldr	r3, [r3, #24]
 8003138:	f003 0304 	and.w	r3, r3, #4
 800313c:	9301      	str	r3, [sp, #4]
 800313e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8003140:	230f      	movs	r3, #15
 8003142:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003144:	2303      	movs	r3, #3
 8003146:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003148:	f7fd fec0 	bl	8000ecc <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 800314c:	2012      	movs	r0, #18
 800314e:	2200      	movs	r2, #0
 8003150:	2105      	movs	r1, #5
 8003152:	f7fd fcdb 	bl	8000b0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8003156:	2012      	movs	r0, #18
 8003158:	f7fd fd0c 	bl	8000b74 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800315c:	b006      	add	sp, #24
 800315e:	bd10      	pop	{r4, pc}
 8003160:	40012400 	.word	0x40012400
 8003164:	40010800 	.word	0x40010800

08003168 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003168:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM3)
 800316a:	4b0d      	ldr	r3, [pc, #52]	; (80031a0 <HAL_TIM_Base_MspInit+0x38>)
 800316c:	6802      	ldr	r2, [r0, #0]
 800316e:	429a      	cmp	r2, r3
 8003170:	d112      	bne.n	8003198 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003172:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 8003176:	69da      	ldr	r2, [r3, #28]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8003178:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 800317a:	f042 0202 	orr.w	r2, r2, #2
 800317e:	61da      	str	r2, [r3, #28]
 8003180:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8003182:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003184:	f003 0302 	and.w	r3, r3, #2
 8003188:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800318a:	2105      	movs	r1, #5
    __HAL_RCC_TIM3_CLK_ENABLE();
 800318c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800318e:	f7fd fcbd 	bl	8000b0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003192:	201d      	movs	r0, #29
 8003194:	f7fd fcee 	bl	8000b74 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003198:	b003      	add	sp, #12
 800319a:	f85d fb04 	ldr.w	pc, [sp], #4
 800319e:	bf00      	nop
 80031a0:	40000400 	.word	0x40000400

080031a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80031a4:	b510      	push	{r4, lr}
 80031a6:	4604      	mov	r4, r0
 80031a8:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031aa:	2210      	movs	r2, #16
 80031ac:	2100      	movs	r1, #0
 80031ae:	a802      	add	r0, sp, #8
 80031b0:	f000 f903 	bl	80033ba <memset>
  if(htim->Instance==TIM3)
 80031b4:	6822      	ldr	r2, [r4, #0]
 80031b6:	4b15      	ldr	r3, [pc, #84]	; (800320c <HAL_TIM_MspPostInit+0x68>)
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d124      	bne.n	8003206 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031bc:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 80031c0:	699a      	ldr	r2, [r3, #24]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031c2:	2402      	movs	r4, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031c4:	f042 0204 	orr.w	r2, r2, #4
 80031c8:	619a      	str	r2, [r3, #24]
 80031ca:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031cc:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031ce:	f002 0204 	and.w	r2, r2, #4
 80031d2:	9200      	str	r2, [sp, #0]
 80031d4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031d6:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031d8:	480d      	ldr	r0, [pc, #52]	; (8003210 <HAL_TIM_MspPostInit+0x6c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031da:	f042 0208 	orr.w	r2, r2, #8
 80031de:	619a      	str	r2, [r3, #24]
 80031e0:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031e2:	9403      	str	r4, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031e4:	f003 0308 	and.w	r3, r3, #8
 80031e8:	9301      	str	r3, [sp, #4]
 80031ea:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80031ec:	23c0      	movs	r3, #192	; 0xc0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ee:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80031f0:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031f2:	f7fd fe6b 	bl	8000ecc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80031f6:	2301      	movs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031f8:	a902      	add	r1, sp, #8
 80031fa:	4806      	ldr	r0, [pc, #24]	; (8003214 <HAL_TIM_MspPostInit+0x70>)
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80031fc:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031fe:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003200:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003202:	f7fd fe63 	bl	8000ecc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003206:	b006      	add	sp, #24
 8003208:	bd10      	pop	{r4, pc}
 800320a:	bf00      	nop
 800320c:	40000400 	.word	0x40000400
 8003210:	40010800 	.word	0x40010800
 8003214:	40010c00 	.word	0x40010c00

08003218 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003218:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800321a:	2710      	movs	r7, #16
{
 800321c:	4606      	mov	r6, r0
 800321e:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003220:	463a      	mov	r2, r7
 8003222:	2100      	movs	r1, #0
 8003224:	a802      	add	r0, sp, #8
 8003226:	f000 f8c8 	bl	80033ba <memset>
  if(huart->Instance==USART1)
 800322a:	6832      	ldr	r2, [r6, #0]
 800322c:	4b24      	ldr	r3, [pc, #144]	; (80032c0 <HAL_UART_MspInit+0xa8>)
 800322e:	429a      	cmp	r2, r3
 8003230:	d143      	bne.n	80032ba <HAL_UART_MspInit+0xa2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003232:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8003236:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003238:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 800323a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800323e:	619a      	str	r2, [r3, #24]
 8003240:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003242:	4820      	ldr	r0, [pc, #128]	; (80032c4 <HAL_UART_MspInit+0xac>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8003244:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003248:	9200      	str	r2, [sp, #0]
 800324a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800324c:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800324e:	2500      	movs	r5, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003250:	f042 0204 	orr.w	r2, r2, #4
 8003254:	619a      	str	r2, [r3, #24]
 8003256:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8003258:	4c1b      	ldr	r4, [pc, #108]	; (80032c8 <HAL_UART_MspInit+0xb0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800325a:	f003 0304 	and.w	r3, r3, #4
 800325e:	9301      	str	r3, [sp, #4]
 8003260:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003262:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003266:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003268:	2302      	movs	r3, #2
 800326a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800326c:	2303      	movs	r3, #3
 800326e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003270:	f7fd fe2c 	bl	8000ecc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003274:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003278:	4812      	ldr	r0, [pc, #72]	; (80032c4 <HAL_UART_MspInit+0xac>)
 800327a:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800327c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800327e:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003280:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003282:	f7fd fe23 	bl	8000ecc <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8003286:	4b11      	ldr	r3, [pc, #68]	; (80032cc <HAL_UART_MspInit+0xb4>)
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003288:	4620      	mov	r0, r4
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800328a:	e884 0088 	stmia.w	r4, {r3, r7}
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800328e:	2380      	movs	r3, #128	; 0x80
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003290:	60a5      	str	r5, [r4, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003292:	60e3      	str	r3, [r4, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003294:	6125      	str	r5, [r4, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003296:	6165      	str	r5, [r4, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003298:	61a5      	str	r5, [r4, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800329a:	61e5      	str	r5, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800329c:	f7fd fc8c 	bl	8000bb8 <HAL_DMA_Init>
 80032a0:	b108      	cbz	r0, 80032a6 <HAL_UART_MspInit+0x8e>
    {
      Error_Handler();
 80032a2:	f7ff ff01 	bl	80030a8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80032a6:	2025      	movs	r0, #37	; 0x25
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80032a8:	6334      	str	r4, [r6, #48]	; 0x30
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80032aa:	2200      	movs	r2, #0
 80032ac:	2105      	movs	r1, #5
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80032ae:	6266      	str	r6, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80032b0:	f7fd fc2c 	bl	8000b0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80032b4:	2025      	movs	r0, #37	; 0x25
 80032b6:	f7fd fc5d 	bl	8000b74 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80032ba:	b007      	add	sp, #28
 80032bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032be:	bf00      	nop
 80032c0:	40013800 	.word	0x40013800
 80032c4:	40010800 	.word	0x40010800
 80032c8:	20004fe0 	.word	0x20004fe0
 80032cc:	40020044 	.word	0x40020044

080032d0 <NMI_Handler>:
 80032d0:	4770      	bx	lr

080032d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032d2:	e7fe      	b.n	80032d2 <HardFault_Handler>

080032d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032d4:	e7fe      	b.n	80032d4 <MemManage_Handler>

080032d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032d6:	e7fe      	b.n	80032d6 <BusFault_Handler>

080032d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032d8:	e7fe      	b.n	80032d8 <UsageFault_Handler>

080032da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032da:	4770      	bx	lr

080032dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032dc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032de:	f7fd f965 	bl	80005ac <HAL_IncTick>
  osSystickHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  osSystickHandler();
 80032e6:	f7fe bfbd 	b.w	8002264 <osSystickHandler>
	...

080032ec <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80032ec:	4801      	ldr	r0, [pc, #4]	; (80032f4 <DMA1_Channel4_IRQHandler+0x8>)
 80032ee:	f7fd bd11 	b.w	8000d14 <HAL_DMA_IRQHandler>
 80032f2:	bf00      	nop
 80032f4:	20004fe0 	.word	0x20004fe0

080032f8 <ADC1_2_IRQHandler>:
void ADC1_2_IRQHandler(void)
{
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80032f8:	4801      	ldr	r0, [pc, #4]	; (8003300 <ADC1_2_IRQHandler+0x8>)
 80032fa:	f7fd b96b 	b.w	80005d4 <HAL_ADC_IRQHandler>
 80032fe:	bf00      	nop
 8003300:	20005024 	.word	0x20005024

08003304 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003304:	4801      	ldr	r0, [pc, #4]	; (800330c <TIM3_IRQHandler+0x8>)
 8003306:	f7fe bbd8 	b.w	8001aba <HAL_TIM_IRQHandler>
 800330a:	bf00      	nop
 800330c:	20004fa0 	.word	0x20004fa0

08003310 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003310:	4801      	ldr	r0, [pc, #4]	; (8003318 <USART1_IRQHandler+0x8>)
 8003312:	f7fe bed9 	b.w	80020c8 <HAL_UART_IRQHandler>
 8003316:	bf00      	nop
 8003318:	20005054 	.word	0x20005054

0800331c <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800331c:	4b12      	ldr	r3, [pc, #72]	; (8003368 <SystemInit+0x4c>)
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	f042 0201 	orr.w	r2, r2, #1
 8003324:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
#else
  RCC->CFGR &= 0xF0FF0000U;
 8003326:	6859      	ldr	r1, [r3, #4]
 8003328:	4a10      	ldr	r2, [pc, #64]	; (800336c <SystemInit+0x50>)
 800332a:	400a      	ands	r2, r1
 800332c:	605a      	str	r2, [r3, #4]
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003334:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003338:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003340:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003342:	685a      	ldr	r2, [r3, #4]
 8003344:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8003348:	605a      	str	r2, [r3, #4]

#if defined(STM32F105xC) || defined(STM32F107xC)
  /* Reset PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEBFFFFFFU;
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	f022 52a0 	bic.w	r2, r2, #335544320	; 0x14000000
 8003350:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x00FF0000U;
 8003352:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8003356:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;
 8003358:	2200      	movs	r2, #0
 800335a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800335c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003360:	4b03      	ldr	r3, [pc, #12]	; (8003370 <SystemInit+0x54>)
 8003362:	609a      	str	r2, [r3, #8]
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	40021000 	.word	0x40021000
 800336c:	f0ff0000 	.word	0xf0ff0000
 8003370:	e000ed00 	.word	0xe000ed00

08003374 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003374:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003376:	e003      	b.n	8003380 <LoopCopyDataInit>

08003378 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003378:	4b0a      	ldr	r3, [pc, #40]	; (80033a4 <LoopFillZerobss+0x10>)
  ldr r3, [r3, r1]
 800337a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800337c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800337e:	3104      	adds	r1, #4

08003380 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003380:	4809      	ldr	r0, [pc, #36]	; (80033a8 <LoopFillZerobss+0x14>)
  ldr r3, =_edata
 8003382:	4b0a      	ldr	r3, [pc, #40]	; (80033ac <LoopFillZerobss+0x18>)
  adds r2, r0, r1
 8003384:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003386:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003388:	d3f6      	bcc.n	8003378 <CopyDataInit>
  ldr r2, =_sbss
 800338a:	4a09      	ldr	r2, [pc, #36]	; (80033b0 <LoopFillZerobss+0x1c>)
  b LoopFillZerobss
 800338c:	e002      	b.n	8003394 <LoopFillZerobss>

0800338e <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800338e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003390:	f842 3b04 	str.w	r3, [r2], #4

08003394 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003394:	4b07      	ldr	r3, [pc, #28]	; (80033b4 <LoopFillZerobss+0x20>)
  cmp r2, r3
 8003396:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003398:	d3f9      	bcc.n	800338e <FillZerobss>
/* Call the clock system intitialization function.*/
    bl  SystemInit
 800339a:	f7ff ffbf 	bl	800331c <SystemInit>
/* Call the application's entry point.*/
  bl main
 800339e:	f7ff fd4b 	bl	8002e38 <main>
  bx lr
 80033a2:	4770      	bx	lr
  ldr r3, =_sidata
 80033a4:	08003454 	.word	0x08003454
  ldr r0, =_sdata
 80033a8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80033ac:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 80033b0:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 80033b4:	20005094 	.word	0x20005094

080033b8 <CAN1_RX0_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80033b8:	e7fe      	b.n	80033b8 <CAN1_RX0_IRQHandler>

080033ba <memset>:
 80033ba:	4603      	mov	r3, r0
 80033bc:	4402      	add	r2, r0
 80033be:	4293      	cmp	r3, r2
 80033c0:	d100      	bne.n	80033c4 <memset+0xa>
 80033c2:	4770      	bx	lr
 80033c4:	f803 1b01 	strb.w	r1, [r3], #1
 80033c8:	e7f9      	b.n	80033be <memset+0x4>
	...

080033cc <_init>:
 80033cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ce:	bf00      	nop
 80033d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033d2:	bc08      	pop	{r3}
 80033d4:	469e      	mov	lr, r3
 80033d6:	4770      	bx	lr

080033d8 <_fini>:
 80033d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033da:	bf00      	nop
 80033dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033de:	bc08      	pop	{r3}
 80033e0:	469e      	mov	lr, r3
 80033e2:	4770      	bx	lr
