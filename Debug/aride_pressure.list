
aride_pressure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088c8  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d4  08008ab8  08008ab8  00018ab8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800908c  0800908c  0001908c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009094  08009094  00019094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009098  08009098  00019098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000224  20000000  0800909c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00005274  20000228  080092c0  00020228  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  2000549c  080092c0  0002549c  2**0
                  ALLOC
  9 .ARM.attributes 00000029  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002a179  00000000  00000000  0002024d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000059a8  00000000  00000000  0004a3c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000c1fb  00000000  00000000  0004fd6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001188  00000000  00000000  0005bf70  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001718  00000000  00000000  0005d0f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000b81c  00000000  00000000  0005e810  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000067a8  00000000  00000000  0006a02c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000707d4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004154  00000000  00000000  00070850  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000228 	.word	0x20000228
 800020c:	00000000 	.word	0x00000000
 8000210:	08008aa0 	.word	0x08008aa0

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	2000022c 	.word	0x2000022c
 800022c:	08008aa0 	.word	0x08008aa0

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <__aeabi_llsr>:
 8000240:	40d0      	lsrs	r0, r2
 8000242:	1c0b      	adds	r3, r1, #0
 8000244:	40d1      	lsrs	r1, r2
 8000246:	469c      	mov	ip, r3
 8000248:	3a20      	subs	r2, #32
 800024a:	40d3      	lsrs	r3, r2
 800024c:	4318      	orrs	r0, r3
 800024e:	4252      	negs	r2, r2
 8000250:	4663      	mov	r3, ip
 8000252:	4093      	lsls	r3, r2
 8000254:	4318      	orrs	r0, r3
 8000256:	4770      	bx	lr

08000258 <__aeabi_drsub>:
 8000258:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800025c:	e002      	b.n	8000264 <__adddf3>
 800025e:	bf00      	nop

08000260 <__aeabi_dsub>:
 8000260:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000264 <__adddf3>:
 8000264:	b530      	push	{r4, r5, lr}
 8000266:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800026a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800026e:	ea94 0f05 	teq	r4, r5
 8000272:	bf08      	it	eq
 8000274:	ea90 0f02 	teqeq	r0, r2
 8000278:	bf1f      	itttt	ne
 800027a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800027e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000282:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000286:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800028a:	f000 80e2 	beq.w	8000452 <__adddf3+0x1ee>
 800028e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000292:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000296:	bfb8      	it	lt
 8000298:	426d      	neglt	r5, r5
 800029a:	dd0c      	ble.n	80002b6 <__adddf3+0x52>
 800029c:	442c      	add	r4, r5
 800029e:	ea80 0202 	eor.w	r2, r0, r2
 80002a2:	ea81 0303 	eor.w	r3, r1, r3
 80002a6:	ea82 0000 	eor.w	r0, r2, r0
 80002aa:	ea83 0101 	eor.w	r1, r3, r1
 80002ae:	ea80 0202 	eor.w	r2, r0, r2
 80002b2:	ea81 0303 	eor.w	r3, r1, r3
 80002b6:	2d36      	cmp	r5, #54	; 0x36
 80002b8:	bf88      	it	hi
 80002ba:	bd30      	pophi	{r4, r5, pc}
 80002bc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002c4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002c8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002cc:	d002      	beq.n	80002d4 <__adddf3+0x70>
 80002ce:	4240      	negs	r0, r0
 80002d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002d4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002dc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002e0:	d002      	beq.n	80002e8 <__adddf3+0x84>
 80002e2:	4252      	negs	r2, r2
 80002e4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e8:	ea94 0f05 	teq	r4, r5
 80002ec:	f000 80a7 	beq.w	800043e <__adddf3+0x1da>
 80002f0:	f1a4 0401 	sub.w	r4, r4, #1
 80002f4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002f8:	db0d      	blt.n	8000316 <__adddf3+0xb2>
 80002fa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002fe:	fa22 f205 	lsr.w	r2, r2, r5
 8000302:	1880      	adds	r0, r0, r2
 8000304:	f141 0100 	adc.w	r1, r1, #0
 8000308:	fa03 f20e 	lsl.w	r2, r3, lr
 800030c:	1880      	adds	r0, r0, r2
 800030e:	fa43 f305 	asr.w	r3, r3, r5
 8000312:	4159      	adcs	r1, r3
 8000314:	e00e      	b.n	8000334 <__adddf3+0xd0>
 8000316:	f1a5 0520 	sub.w	r5, r5, #32
 800031a:	f10e 0e20 	add.w	lr, lr, #32
 800031e:	2a01      	cmp	r2, #1
 8000320:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000324:	bf28      	it	cs
 8000326:	f04c 0c02 	orrcs.w	ip, ip, #2
 800032a:	fa43 f305 	asr.w	r3, r3, r5
 800032e:	18c0      	adds	r0, r0, r3
 8000330:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000334:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000338:	d507      	bpl.n	800034a <__adddf3+0xe6>
 800033a:	f04f 0e00 	mov.w	lr, #0
 800033e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000342:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000346:	eb6e 0101 	sbc.w	r1, lr, r1
 800034a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800034e:	d31b      	bcc.n	8000388 <__adddf3+0x124>
 8000350:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000354:	d30c      	bcc.n	8000370 <__adddf3+0x10c>
 8000356:	0849      	lsrs	r1, r1, #1
 8000358:	ea5f 0030 	movs.w	r0, r0, rrx
 800035c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000360:	f104 0401 	add.w	r4, r4, #1
 8000364:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000368:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800036c:	f080 809a 	bcs.w	80004a4 <__adddf3+0x240>
 8000370:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000374:	bf08      	it	eq
 8000376:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800037a:	f150 0000 	adcs.w	r0, r0, #0
 800037e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000382:	ea41 0105 	orr.w	r1, r1, r5
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800038c:	4140      	adcs	r0, r0
 800038e:	eb41 0101 	adc.w	r1, r1, r1
 8000392:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000396:	f1a4 0401 	sub.w	r4, r4, #1
 800039a:	d1e9      	bne.n	8000370 <__adddf3+0x10c>
 800039c:	f091 0f00 	teq	r1, #0
 80003a0:	bf04      	itt	eq
 80003a2:	4601      	moveq	r1, r0
 80003a4:	2000      	moveq	r0, #0
 80003a6:	fab1 f381 	clz	r3, r1
 80003aa:	bf08      	it	eq
 80003ac:	3320      	addeq	r3, #32
 80003ae:	f1a3 030b 	sub.w	r3, r3, #11
 80003b2:	f1b3 0220 	subs.w	r2, r3, #32
 80003b6:	da0c      	bge.n	80003d2 <__adddf3+0x16e>
 80003b8:	320c      	adds	r2, #12
 80003ba:	dd08      	ble.n	80003ce <__adddf3+0x16a>
 80003bc:	f102 0c14 	add.w	ip, r2, #20
 80003c0:	f1c2 020c 	rsb	r2, r2, #12
 80003c4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003c8:	fa21 f102 	lsr.w	r1, r1, r2
 80003cc:	e00c      	b.n	80003e8 <__adddf3+0x184>
 80003ce:	f102 0214 	add.w	r2, r2, #20
 80003d2:	bfd8      	it	le
 80003d4:	f1c2 0c20 	rsble	ip, r2, #32
 80003d8:	fa01 f102 	lsl.w	r1, r1, r2
 80003dc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003e0:	bfdc      	itt	le
 80003e2:	ea41 010c 	orrle.w	r1, r1, ip
 80003e6:	4090      	lslle	r0, r2
 80003e8:	1ae4      	subs	r4, r4, r3
 80003ea:	bfa2      	ittt	ge
 80003ec:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003f0:	4329      	orrge	r1, r5
 80003f2:	bd30      	popge	{r4, r5, pc}
 80003f4:	ea6f 0404 	mvn.w	r4, r4
 80003f8:	3c1f      	subs	r4, #31
 80003fa:	da1c      	bge.n	8000436 <__adddf3+0x1d2>
 80003fc:	340c      	adds	r4, #12
 80003fe:	dc0e      	bgt.n	800041e <__adddf3+0x1ba>
 8000400:	f104 0414 	add.w	r4, r4, #20
 8000404:	f1c4 0220 	rsb	r2, r4, #32
 8000408:	fa20 f004 	lsr.w	r0, r0, r4
 800040c:	fa01 f302 	lsl.w	r3, r1, r2
 8000410:	ea40 0003 	orr.w	r0, r0, r3
 8000414:	fa21 f304 	lsr.w	r3, r1, r4
 8000418:	ea45 0103 	orr.w	r1, r5, r3
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f1c4 040c 	rsb	r4, r4, #12
 8000422:	f1c4 0220 	rsb	r2, r4, #32
 8000426:	fa20 f002 	lsr.w	r0, r0, r2
 800042a:	fa01 f304 	lsl.w	r3, r1, r4
 800042e:	ea40 0003 	orr.w	r0, r0, r3
 8000432:	4629      	mov	r1, r5
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	fa21 f004 	lsr.w	r0, r1, r4
 800043a:	4629      	mov	r1, r5
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	f094 0f00 	teq	r4, #0
 8000442:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000446:	bf06      	itte	eq
 8000448:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800044c:	3401      	addeq	r4, #1
 800044e:	3d01      	subne	r5, #1
 8000450:	e74e      	b.n	80002f0 <__adddf3+0x8c>
 8000452:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000456:	bf18      	it	ne
 8000458:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800045c:	d029      	beq.n	80004b2 <__adddf3+0x24e>
 800045e:	ea94 0f05 	teq	r4, r5
 8000462:	bf08      	it	eq
 8000464:	ea90 0f02 	teqeq	r0, r2
 8000468:	d005      	beq.n	8000476 <__adddf3+0x212>
 800046a:	ea54 0c00 	orrs.w	ip, r4, r0
 800046e:	bf04      	itt	eq
 8000470:	4619      	moveq	r1, r3
 8000472:	4610      	moveq	r0, r2
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	ea91 0f03 	teq	r1, r3
 800047a:	bf1e      	ittt	ne
 800047c:	2100      	movne	r1, #0
 800047e:	2000      	movne	r0, #0
 8000480:	bd30      	popne	{r4, r5, pc}
 8000482:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000486:	d105      	bne.n	8000494 <__adddf3+0x230>
 8000488:	0040      	lsls	r0, r0, #1
 800048a:	4149      	adcs	r1, r1
 800048c:	bf28      	it	cs
 800048e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000492:	bd30      	pop	{r4, r5, pc}
 8000494:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000498:	bf3c      	itt	cc
 800049a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800049e:	bd30      	popcc	{r4, r5, pc}
 80004a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004a4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004ac:	f04f 0000 	mov.w	r0, #0
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b6:	bf1a      	itte	ne
 80004b8:	4619      	movne	r1, r3
 80004ba:	4610      	movne	r0, r2
 80004bc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004c0:	bf1c      	itt	ne
 80004c2:	460b      	movne	r3, r1
 80004c4:	4602      	movne	r2, r0
 80004c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004ca:	bf06      	itte	eq
 80004cc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004d0:	ea91 0f03 	teqeq	r1, r3
 80004d4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	bf00      	nop

080004dc <__aeabi_ui2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f04f 0500 	mov.w	r5, #0
 80004f4:	f04f 0100 	mov.w	r1, #0
 80004f8:	e750      	b.n	800039c <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_i2d>:
 80004fc:	f090 0f00 	teq	r0, #0
 8000500:	bf04      	itt	eq
 8000502:	2100      	moveq	r1, #0
 8000504:	4770      	bxeq	lr
 8000506:	b530      	push	{r4, r5, lr}
 8000508:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000510:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000514:	bf48      	it	mi
 8000516:	4240      	negmi	r0, r0
 8000518:	f04f 0100 	mov.w	r1, #0
 800051c:	e73e      	b.n	800039c <__adddf3+0x138>
 800051e:	bf00      	nop

08000520 <__aeabi_f2d>:
 8000520:	0042      	lsls	r2, r0, #1
 8000522:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000526:	ea4f 0131 	mov.w	r1, r1, rrx
 800052a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800052e:	bf1f      	itttt	ne
 8000530:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000534:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000538:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800053c:	4770      	bxne	lr
 800053e:	f092 0f00 	teq	r2, #0
 8000542:	bf14      	ite	ne
 8000544:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000548:	4770      	bxeq	lr
 800054a:	b530      	push	{r4, r5, lr}
 800054c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000550:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000554:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000558:	e720      	b.n	800039c <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_ul2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f04f 0500 	mov.w	r5, #0
 800056a:	e00a      	b.n	8000582 <__aeabi_l2d+0x16>

0800056c <__aeabi_l2d>:
 800056c:	ea50 0201 	orrs.w	r2, r0, r1
 8000570:	bf08      	it	eq
 8000572:	4770      	bxeq	lr
 8000574:	b530      	push	{r4, r5, lr}
 8000576:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800057a:	d502      	bpl.n	8000582 <__aeabi_l2d+0x16>
 800057c:	4240      	negs	r0, r0
 800057e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000582:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000586:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800058a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800058e:	f43f aedc 	beq.w	800034a <__adddf3+0xe6>
 8000592:	f04f 0203 	mov.w	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a2:	bf18      	it	ne
 80005a4:	3203      	addne	r2, #3
 80005a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005aa:	f1c2 0320 	rsb	r3, r2, #32
 80005ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80005b2:	fa20 f002 	lsr.w	r0, r0, r2
 80005b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ba:	ea40 000e 	orr.w	r0, r0, lr
 80005be:	fa21 f102 	lsr.w	r1, r1, r2
 80005c2:	4414      	add	r4, r2
 80005c4:	e6c1      	b.n	800034a <__adddf3+0xe6>
 80005c6:	bf00      	nop

080005c8 <__aeabi_dmul>:
 80005c8:	b570      	push	{r4, r5, r6, lr}
 80005ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005d6:	bf1d      	ittte	ne
 80005d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005dc:	ea94 0f0c 	teqne	r4, ip
 80005e0:	ea95 0f0c 	teqne	r5, ip
 80005e4:	f000 f8de 	bleq	80007a4 <__aeabi_dmul+0x1dc>
 80005e8:	442c      	add	r4, r5
 80005ea:	ea81 0603 	eor.w	r6, r1, r3
 80005ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005fa:	bf18      	it	ne
 80005fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000600:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000604:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000608:	d038      	beq.n	800067c <__aeabi_dmul+0xb4>
 800060a:	fba0 ce02 	umull	ip, lr, r0, r2
 800060e:	f04f 0500 	mov.w	r5, #0
 8000612:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000616:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800061a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800061e:	f04f 0600 	mov.w	r6, #0
 8000622:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000626:	f09c 0f00 	teq	ip, #0
 800062a:	bf18      	it	ne
 800062c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000630:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000634:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000638:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800063c:	d204      	bcs.n	8000648 <__aeabi_dmul+0x80>
 800063e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000642:	416d      	adcs	r5, r5
 8000644:	eb46 0606 	adc.w	r6, r6, r6
 8000648:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800064c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000650:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000654:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000658:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800065c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000660:	bf88      	it	hi
 8000662:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000666:	d81e      	bhi.n	80006a6 <__aeabi_dmul+0xde>
 8000668:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800066c:	bf08      	it	eq
 800066e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000672:	f150 0000 	adcs.w	r0, r0, #0
 8000676:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000680:	ea46 0101 	orr.w	r1, r6, r1
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	ea81 0103 	eor.w	r1, r1, r3
 800068c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000690:	bfc2      	ittt	gt
 8000692:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000696:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800069a:	bd70      	popgt	{r4, r5, r6, pc}
 800069c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a0:	f04f 0e00 	mov.w	lr, #0
 80006a4:	3c01      	subs	r4, #1
 80006a6:	f300 80ab 	bgt.w	8000800 <__aeabi_dmul+0x238>
 80006aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ae:	bfde      	ittt	le
 80006b0:	2000      	movle	r0, #0
 80006b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006b6:	bd70      	pople	{r4, r5, r6, pc}
 80006b8:	f1c4 0400 	rsb	r4, r4, #0
 80006bc:	3c20      	subs	r4, #32
 80006be:	da35      	bge.n	800072c <__aeabi_dmul+0x164>
 80006c0:	340c      	adds	r4, #12
 80006c2:	dc1b      	bgt.n	80006fc <__aeabi_dmul+0x134>
 80006c4:	f104 0414 	add.w	r4, r4, #20
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f305 	lsl.w	r3, r0, r5
 80006d0:	fa20 f004 	lsr.w	r0, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ec:	eb42 0106 	adc.w	r1, r2, r6
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 040c 	rsb	r4, r4, #12
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f304 	lsl.w	r3, r0, r4
 8000708:	fa20 f005 	lsr.w	r0, r0, r5
 800070c:	fa01 f204 	lsl.w	r2, r1, r4
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000718:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800071c:	f141 0100 	adc.w	r1, r1, #0
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f205 	lsl.w	r2, r0, r5
 8000734:	ea4e 0e02 	orr.w	lr, lr, r2
 8000738:	fa20 f304 	lsr.w	r3, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea43 0302 	orr.w	r3, r3, r2
 8000744:	fa21 f004 	lsr.w	r0, r1, r4
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800074c:	fa21 f204 	lsr.w	r2, r1, r4
 8000750:	ea20 0002 	bic.w	r0, r0, r2
 8000754:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f094 0f00 	teq	r4, #0
 8000768:	d10f      	bne.n	800078a <__aeabi_dmul+0x1c2>
 800076a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800076e:	0040      	lsls	r0, r0, #1
 8000770:	eb41 0101 	adc.w	r1, r1, r1
 8000774:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3c01      	subeq	r4, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1a6>
 800077e:	ea41 0106 	orr.w	r1, r1, r6
 8000782:	f095 0f00 	teq	r5, #0
 8000786:	bf18      	it	ne
 8000788:	4770      	bxne	lr
 800078a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800078e:	0052      	lsls	r2, r2, #1
 8000790:	eb43 0303 	adc.w	r3, r3, r3
 8000794:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3d01      	subeq	r5, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1c6>
 800079e:	ea43 0306 	orr.w	r3, r3, r6
 80007a2:	4770      	bx	lr
 80007a4:	ea94 0f0c 	teq	r4, ip
 80007a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ac:	bf18      	it	ne
 80007ae:	ea95 0f0c 	teqne	r5, ip
 80007b2:	d00c      	beq.n	80007ce <__aeabi_dmul+0x206>
 80007b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007be:	d1d1      	bne.n	8000764 <__aeabi_dmul+0x19c>
 80007c0:	ea81 0103 	eor.w	r1, r1, r3
 80007c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c8:	f04f 0000 	mov.w	r0, #0
 80007cc:	bd70      	pop	{r4, r5, r6, pc}
 80007ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d2:	bf06      	itte	eq
 80007d4:	4610      	moveq	r0, r2
 80007d6:	4619      	moveq	r1, r3
 80007d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007dc:	d019      	beq.n	8000812 <__aeabi_dmul+0x24a>
 80007de:	ea94 0f0c 	teq	r4, ip
 80007e2:	d102      	bne.n	80007ea <__aeabi_dmul+0x222>
 80007e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e8:	d113      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007ea:	ea95 0f0c 	teq	r5, ip
 80007ee:	d105      	bne.n	80007fc <__aeabi_dmul+0x234>
 80007f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f4:	bf1c      	itt	ne
 80007f6:	4610      	movne	r0, r2
 80007f8:	4619      	movne	r1, r3
 80007fa:	d10a      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007fc:	ea81 0103 	eor.w	r1, r1, r3
 8000800:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000804:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000808:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000816:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800081a:	bd70      	pop	{r4, r5, r6, pc}

0800081c <__aeabi_ddiv>:
 800081c:	b570      	push	{r4, r5, r6, lr}
 800081e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000822:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000826:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800082a:	bf1d      	ittte	ne
 800082c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000830:	ea94 0f0c 	teqne	r4, ip
 8000834:	ea95 0f0c 	teqne	r5, ip
 8000838:	f000 f8a7 	bleq	800098a <__aeabi_ddiv+0x16e>
 800083c:	eba4 0405 	sub.w	r4, r4, r5
 8000840:	ea81 0e03 	eor.w	lr, r1, r3
 8000844:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000848:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800084c:	f000 8088 	beq.w	8000960 <__aeabi_ddiv+0x144>
 8000850:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000854:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000858:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800085c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000860:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000864:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000868:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800086c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000870:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000874:	429d      	cmp	r5, r3
 8000876:	bf08      	it	eq
 8000878:	4296      	cmpeq	r6, r2
 800087a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800087e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000882:	d202      	bcs.n	800088a <__aeabi_ddiv+0x6e>
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	1ab6      	subs	r6, r6, r2
 800088c:	eb65 0503 	sbc.w	r5, r5, r3
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800089a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008fc:	d018      	beq.n	8000930 <__aeabi_ddiv+0x114>
 80008fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000902:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000906:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800090a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800090e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000912:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000916:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800091a:	d1c0      	bne.n	800089e <__aeabi_ddiv+0x82>
 800091c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000920:	d10b      	bne.n	800093a <__aeabi_ddiv+0x11e>
 8000922:	ea41 0100 	orr.w	r1, r1, r0
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800092e:	e7b6      	b.n	800089e <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000934:	bf04      	itt	eq
 8000936:	4301      	orreq	r1, r0
 8000938:	2000      	moveq	r0, #0
 800093a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800093e:	bf88      	it	hi
 8000940:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000944:	f63f aeaf 	bhi.w	80006a6 <__aeabi_dmul+0xde>
 8000948:	ebb5 0c03 	subs.w	ip, r5, r3
 800094c:	bf04      	itt	eq
 800094e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000952:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000956:	f150 0000 	adcs.w	r0, r0, #0
 800095a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800095e:	bd70      	pop	{r4, r5, r6, pc}
 8000960:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000964:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000968:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800096c:	bfc2      	ittt	gt
 800096e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000972:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000976:	bd70      	popgt	{r4, r5, r6, pc}
 8000978:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800097c:	f04f 0e00 	mov.w	lr, #0
 8000980:	3c01      	subs	r4, #1
 8000982:	e690      	b.n	80006a6 <__aeabi_dmul+0xde>
 8000984:	ea45 0e06 	orr.w	lr, r5, r6
 8000988:	e68d      	b.n	80006a6 <__aeabi_dmul+0xde>
 800098a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800098e:	ea94 0f0c 	teq	r4, ip
 8000992:	bf08      	it	eq
 8000994:	ea95 0f0c 	teqeq	r5, ip
 8000998:	f43f af3b 	beq.w	8000812 <__aeabi_dmul+0x24a>
 800099c:	ea94 0f0c 	teq	r4, ip
 80009a0:	d10a      	bne.n	80009b8 <__aeabi_ddiv+0x19c>
 80009a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009a6:	f47f af34 	bne.w	8000812 <__aeabi_dmul+0x24a>
 80009aa:	ea95 0f0c 	teq	r5, ip
 80009ae:	f47f af25 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009b2:	4610      	mov	r0, r2
 80009b4:	4619      	mov	r1, r3
 80009b6:	e72c      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009b8:	ea95 0f0c 	teq	r5, ip
 80009bc:	d106      	bne.n	80009cc <__aeabi_ddiv+0x1b0>
 80009be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009c2:	f43f aefd 	beq.w	80007c0 <__aeabi_dmul+0x1f8>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e722      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009d6:	f47f aec5 	bne.w	8000764 <__aeabi_dmul+0x19c>
 80009da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009de:	f47f af0d 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009e6:	f47f aeeb 	bne.w	80007c0 <__aeabi_dmul+0x1f8>
 80009ea:	e712      	b.n	8000812 <__aeabi_dmul+0x24a>

080009ec <__gedf2>:
 80009ec:	f04f 3cff 	mov.w	ip, #4294967295
 80009f0:	e006      	b.n	8000a00 <__cmpdf2+0x4>
 80009f2:	bf00      	nop

080009f4 <__ledf2>:
 80009f4:	f04f 0c01 	mov.w	ip, #1
 80009f8:	e002      	b.n	8000a00 <__cmpdf2+0x4>
 80009fa:	bf00      	nop

080009fc <__cmpdf2>:
 80009fc:	f04f 0c01 	mov.w	ip, #1
 8000a00:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a16:	d01b      	beq.n	8000a50 <__cmpdf2+0x54>
 8000a18:	b001      	add	sp, #4
 8000a1a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a1e:	bf0c      	ite	eq
 8000a20:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a24:	ea91 0f03 	teqne	r1, r3
 8000a28:	bf02      	ittt	eq
 8000a2a:	ea90 0f02 	teqeq	r0, r2
 8000a2e:	2000      	moveq	r0, #0
 8000a30:	4770      	bxeq	lr
 8000a32:	f110 0f00 	cmn.w	r0, #0
 8000a36:	ea91 0f03 	teq	r1, r3
 8000a3a:	bf58      	it	pl
 8000a3c:	4299      	cmppl	r1, r3
 8000a3e:	bf08      	it	eq
 8000a40:	4290      	cmpeq	r0, r2
 8000a42:	bf2c      	ite	cs
 8000a44:	17d8      	asrcs	r0, r3, #31
 8000a46:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a4a:	f040 0001 	orr.w	r0, r0, #1
 8000a4e:	4770      	bx	lr
 8000a50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__cmpdf2+0x64>
 8000a5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5e:	d107      	bne.n	8000a70 <__cmpdf2+0x74>
 8000a60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a68:	d1d6      	bne.n	8000a18 <__cmpdf2+0x1c>
 8000a6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6e:	d0d3      	beq.n	8000a18 <__cmpdf2+0x1c>
 8000a70:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdrcmple>:
 8000a78:	4684      	mov	ip, r0
 8000a7a:	4610      	mov	r0, r2
 8000a7c:	4662      	mov	r2, ip
 8000a7e:	468c      	mov	ip, r1
 8000a80:	4619      	mov	r1, r3
 8000a82:	4663      	mov	r3, ip
 8000a84:	e000      	b.n	8000a88 <__aeabi_cdcmpeq>
 8000a86:	bf00      	nop

08000a88 <__aeabi_cdcmpeq>:
 8000a88:	b501      	push	{r0, lr}
 8000a8a:	f7ff ffb7 	bl	80009fc <__cmpdf2>
 8000a8e:	2800      	cmp	r0, #0
 8000a90:	bf48      	it	mi
 8000a92:	f110 0f00 	cmnmi.w	r0, #0
 8000a96:	bd01      	pop	{r0, pc}

08000a98 <__aeabi_dcmpeq>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff fff4 	bl	8000a88 <__aeabi_cdcmpeq>
 8000aa0:	bf0c      	ite	eq
 8000aa2:	2001      	moveq	r0, #1
 8000aa4:	2000      	movne	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmplt>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffea 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ab4:	bf34      	ite	cc
 8000ab6:	2001      	movcc	r0, #1
 8000ab8:	2000      	movcs	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmple>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffe0 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ac8:	bf94      	ite	ls
 8000aca:	2001      	movls	r0, #1
 8000acc:	2000      	movhi	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpge>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffce 	bl	8000a78 <__aeabi_cdrcmple>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmpgt>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffc4 	bl	8000a78 <__aeabi_cdrcmple>
 8000af0:	bf34      	ite	cc
 8000af2:	2001      	movcc	r0, #1
 8000af4:	2000      	movcs	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpun>:
 8000afc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x10>
 8000b06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b0a:	d10a      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b14:	d102      	bne.n	8000b1c <__aeabi_dcmpun+0x20>
 8000b16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b1a:	d102      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	f04f 0001 	mov.w	r0, #1
 8000b26:	4770      	bx	lr

08000b28 <__aeabi_d2iz>:
 8000b28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b30:	d215      	bcs.n	8000b5e <__aeabi_d2iz+0x36>
 8000b32:	d511      	bpl.n	8000b58 <__aeabi_d2iz+0x30>
 8000b34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b3c:	d912      	bls.n	8000b64 <__aeabi_d2iz+0x3c>
 8000b3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	bf18      	it	ne
 8000b54:	4240      	negne	r0, r0
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b62:	d105      	bne.n	8000b70 <__aeabi_d2iz+0x48>
 8000b64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b68:	bf08      	it	eq
 8000b6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <__aeabi_frsub>:
 8000b78:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b7c:	e002      	b.n	8000b84 <__addsf3>
 8000b7e:	bf00      	nop

08000b80 <__aeabi_fsub>:
 8000b80:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b84 <__addsf3>:
 8000b84:	0042      	lsls	r2, r0, #1
 8000b86:	bf1f      	itttt	ne
 8000b88:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b8c:	ea92 0f03 	teqne	r2, r3
 8000b90:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b94:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b98:	d06a      	beq.n	8000c70 <__addsf3+0xec>
 8000b9a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b9e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ba2:	bfc1      	itttt	gt
 8000ba4:	18d2      	addgt	r2, r2, r3
 8000ba6:	4041      	eorgt	r1, r0
 8000ba8:	4048      	eorgt	r0, r1
 8000baa:	4041      	eorgt	r1, r0
 8000bac:	bfb8      	it	lt
 8000bae:	425b      	neglt	r3, r3
 8000bb0:	2b19      	cmp	r3, #25
 8000bb2:	bf88      	it	hi
 8000bb4:	4770      	bxhi	lr
 8000bb6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bbe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bca:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bce:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bd2:	bf18      	it	ne
 8000bd4:	4249      	negne	r1, r1
 8000bd6:	ea92 0f03 	teq	r2, r3
 8000bda:	d03f      	beq.n	8000c5c <__addsf3+0xd8>
 8000bdc:	f1a2 0201 	sub.w	r2, r2, #1
 8000be0:	fa41 fc03 	asr.w	ip, r1, r3
 8000be4:	eb10 000c 	adds.w	r0, r0, ip
 8000be8:	f1c3 0320 	rsb	r3, r3, #32
 8000bec:	fa01 f103 	lsl.w	r1, r1, r3
 8000bf0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bf4:	d502      	bpl.n	8000bfc <__addsf3+0x78>
 8000bf6:	4249      	negs	r1, r1
 8000bf8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bfc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c00:	d313      	bcc.n	8000c2a <__addsf3+0xa6>
 8000c02:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c06:	d306      	bcc.n	8000c16 <__addsf3+0x92>
 8000c08:	0840      	lsrs	r0, r0, #1
 8000c0a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c0e:	f102 0201 	add.w	r2, r2, #1
 8000c12:	2afe      	cmp	r2, #254	; 0xfe
 8000c14:	d251      	bcs.n	8000cba <__addsf3+0x136>
 8000c16:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c1a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c1e:	bf08      	it	eq
 8000c20:	f020 0001 	biceq.w	r0, r0, #1
 8000c24:	ea40 0003 	orr.w	r0, r0, r3
 8000c28:	4770      	bx	lr
 8000c2a:	0049      	lsls	r1, r1, #1
 8000c2c:	eb40 0000 	adc.w	r0, r0, r0
 8000c30:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c34:	f1a2 0201 	sub.w	r2, r2, #1
 8000c38:	d1ed      	bne.n	8000c16 <__addsf3+0x92>
 8000c3a:	fab0 fc80 	clz	ip, r0
 8000c3e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c42:	ebb2 020c 	subs.w	r2, r2, ip
 8000c46:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c4a:	bfaa      	itet	ge
 8000c4c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c50:	4252      	neglt	r2, r2
 8000c52:	4318      	orrge	r0, r3
 8000c54:	bfbc      	itt	lt
 8000c56:	40d0      	lsrlt	r0, r2
 8000c58:	4318      	orrlt	r0, r3
 8000c5a:	4770      	bx	lr
 8000c5c:	f092 0f00 	teq	r2, #0
 8000c60:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c64:	bf06      	itte	eq
 8000c66:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c6a:	3201      	addeq	r2, #1
 8000c6c:	3b01      	subne	r3, #1
 8000c6e:	e7b5      	b.n	8000bdc <__addsf3+0x58>
 8000c70:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c74:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c78:	bf18      	it	ne
 8000c7a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c7e:	d021      	beq.n	8000cc4 <__addsf3+0x140>
 8000c80:	ea92 0f03 	teq	r2, r3
 8000c84:	d004      	beq.n	8000c90 <__addsf3+0x10c>
 8000c86:	f092 0f00 	teq	r2, #0
 8000c8a:	bf08      	it	eq
 8000c8c:	4608      	moveq	r0, r1
 8000c8e:	4770      	bx	lr
 8000c90:	ea90 0f01 	teq	r0, r1
 8000c94:	bf1c      	itt	ne
 8000c96:	2000      	movne	r0, #0
 8000c98:	4770      	bxne	lr
 8000c9a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c9e:	d104      	bne.n	8000caa <__addsf3+0x126>
 8000ca0:	0040      	lsls	r0, r0, #1
 8000ca2:	bf28      	it	cs
 8000ca4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ca8:	4770      	bx	lr
 8000caa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cae:	bf3c      	itt	cc
 8000cb0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bxcc	lr
 8000cb6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cba:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc2:	4770      	bx	lr
 8000cc4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cc8:	bf16      	itet	ne
 8000cca:	4608      	movne	r0, r1
 8000ccc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cd0:	4601      	movne	r1, r0
 8000cd2:	0242      	lsls	r2, r0, #9
 8000cd4:	bf06      	itte	eq
 8000cd6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cda:	ea90 0f01 	teqeq	r0, r1
 8000cde:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_ui2f>:
 8000ce4:	f04f 0300 	mov.w	r3, #0
 8000ce8:	e004      	b.n	8000cf4 <__aeabi_i2f+0x8>
 8000cea:	bf00      	nop

08000cec <__aeabi_i2f>:
 8000cec:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cf0:	bf48      	it	mi
 8000cf2:	4240      	negmi	r0, r0
 8000cf4:	ea5f 0c00 	movs.w	ip, r0
 8000cf8:	bf08      	it	eq
 8000cfa:	4770      	bxeq	lr
 8000cfc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d00:	4601      	mov	r1, r0
 8000d02:	f04f 0000 	mov.w	r0, #0
 8000d06:	e01c      	b.n	8000d42 <__aeabi_l2f+0x2a>

08000d08 <__aeabi_ul2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f04f 0300 	mov.w	r3, #0
 8000d14:	e00a      	b.n	8000d2c <__aeabi_l2f+0x14>
 8000d16:	bf00      	nop

08000d18 <__aeabi_l2f>:
 8000d18:	ea50 0201 	orrs.w	r2, r0, r1
 8000d1c:	bf08      	it	eq
 8000d1e:	4770      	bxeq	lr
 8000d20:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d24:	d502      	bpl.n	8000d2c <__aeabi_l2f+0x14>
 8000d26:	4240      	negs	r0, r0
 8000d28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d2c:	ea5f 0c01 	movs.w	ip, r1
 8000d30:	bf02      	ittt	eq
 8000d32:	4684      	moveq	ip, r0
 8000d34:	4601      	moveq	r1, r0
 8000d36:	2000      	moveq	r0, #0
 8000d38:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d3c:	bf08      	it	eq
 8000d3e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d42:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d46:	fabc f28c 	clz	r2, ip
 8000d4a:	3a08      	subs	r2, #8
 8000d4c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d50:	db10      	blt.n	8000d74 <__aeabi_l2f+0x5c>
 8000d52:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d56:	4463      	add	r3, ip
 8000d58:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d5c:	f1c2 0220 	rsb	r2, r2, #32
 8000d60:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d64:	fa20 f202 	lsr.w	r2, r0, r2
 8000d68:	eb43 0002 	adc.w	r0, r3, r2
 8000d6c:	bf08      	it	eq
 8000d6e:	f020 0001 	biceq.w	r0, r0, #1
 8000d72:	4770      	bx	lr
 8000d74:	f102 0220 	add.w	r2, r2, #32
 8000d78:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d7c:	f1c2 0220 	rsb	r2, r2, #32
 8000d80:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d84:	fa21 f202 	lsr.w	r2, r1, r2
 8000d88:	eb43 0002 	adc.w	r0, r3, r2
 8000d8c:	bf08      	it	eq
 8000d8e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d92:	4770      	bx	lr

08000d94 <__aeabi_fmul>:
 8000d94:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d98:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d9c:	bf1e      	ittt	ne
 8000d9e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000da2:	ea92 0f0c 	teqne	r2, ip
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d06f      	beq.n	8000e8c <__aeabi_fmul+0xf8>
 8000dac:	441a      	add	r2, r3
 8000dae:	ea80 0c01 	eor.w	ip, r0, r1
 8000db2:	0240      	lsls	r0, r0, #9
 8000db4:	bf18      	it	ne
 8000db6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dba:	d01e      	beq.n	8000dfa <__aeabi_fmul+0x66>
 8000dbc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000dc0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dc4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dc8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dcc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dd0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dd4:	bf3e      	ittt	cc
 8000dd6:	0049      	lslcc	r1, r1, #1
 8000dd8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ddc:	005b      	lslcc	r3, r3, #1
 8000dde:	ea40 0001 	orr.w	r0, r0, r1
 8000de2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000de6:	2afd      	cmp	r2, #253	; 0xfd
 8000de8:	d81d      	bhi.n	8000e26 <__aeabi_fmul+0x92>
 8000dea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000df2:	bf08      	it	eq
 8000df4:	f020 0001 	biceq.w	r0, r0, #1
 8000df8:	4770      	bx	lr
 8000dfa:	f090 0f00 	teq	r0, #0
 8000dfe:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e02:	bf08      	it	eq
 8000e04:	0249      	lsleq	r1, r1, #9
 8000e06:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e0a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e0e:	3a7f      	subs	r2, #127	; 0x7f
 8000e10:	bfc2      	ittt	gt
 8000e12:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e16:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e1a:	4770      	bxgt	lr
 8000e1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e20:	f04f 0300 	mov.w	r3, #0
 8000e24:	3a01      	subs	r2, #1
 8000e26:	dc5d      	bgt.n	8000ee4 <__aeabi_fmul+0x150>
 8000e28:	f112 0f19 	cmn.w	r2, #25
 8000e2c:	bfdc      	itt	le
 8000e2e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e32:	4770      	bxle	lr
 8000e34:	f1c2 0200 	rsb	r2, r2, #0
 8000e38:	0041      	lsls	r1, r0, #1
 8000e3a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e3e:	f1c2 0220 	rsb	r2, r2, #32
 8000e42:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e46:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e4a:	f140 0000 	adc.w	r0, r0, #0
 8000e4e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e52:	bf08      	it	eq
 8000e54:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e58:	4770      	bx	lr
 8000e5a:	f092 0f00 	teq	r2, #0
 8000e5e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e62:	bf02      	ittt	eq
 8000e64:	0040      	lsleq	r0, r0, #1
 8000e66:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e6a:	3a01      	subeq	r2, #1
 8000e6c:	d0f9      	beq.n	8000e62 <__aeabi_fmul+0xce>
 8000e6e:	ea40 000c 	orr.w	r0, r0, ip
 8000e72:	f093 0f00 	teq	r3, #0
 8000e76:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e7a:	bf02      	ittt	eq
 8000e7c:	0049      	lsleq	r1, r1, #1
 8000e7e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e82:	3b01      	subeq	r3, #1
 8000e84:	d0f9      	beq.n	8000e7a <__aeabi_fmul+0xe6>
 8000e86:	ea41 010c 	orr.w	r1, r1, ip
 8000e8a:	e78f      	b.n	8000dac <__aeabi_fmul+0x18>
 8000e8c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e90:	ea92 0f0c 	teq	r2, ip
 8000e94:	bf18      	it	ne
 8000e96:	ea93 0f0c 	teqne	r3, ip
 8000e9a:	d00a      	beq.n	8000eb2 <__aeabi_fmul+0x11e>
 8000e9c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ea0:	bf18      	it	ne
 8000ea2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ea6:	d1d8      	bne.n	8000e5a <__aeabi_fmul+0xc6>
 8000ea8:	ea80 0001 	eor.w	r0, r0, r1
 8000eac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eb0:	4770      	bx	lr
 8000eb2:	f090 0f00 	teq	r0, #0
 8000eb6:	bf17      	itett	ne
 8000eb8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ebc:	4608      	moveq	r0, r1
 8000ebe:	f091 0f00 	teqne	r1, #0
 8000ec2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ec6:	d014      	beq.n	8000ef2 <__aeabi_fmul+0x15e>
 8000ec8:	ea92 0f0c 	teq	r2, ip
 8000ecc:	d101      	bne.n	8000ed2 <__aeabi_fmul+0x13e>
 8000ece:	0242      	lsls	r2, r0, #9
 8000ed0:	d10f      	bne.n	8000ef2 <__aeabi_fmul+0x15e>
 8000ed2:	ea93 0f0c 	teq	r3, ip
 8000ed6:	d103      	bne.n	8000ee0 <__aeabi_fmul+0x14c>
 8000ed8:	024b      	lsls	r3, r1, #9
 8000eda:	bf18      	it	ne
 8000edc:	4608      	movne	r0, r1
 8000ede:	d108      	bne.n	8000ef2 <__aeabi_fmul+0x15e>
 8000ee0:	ea80 0001 	eor.w	r0, r0, r1
 8000ee4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ee8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000eec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ef0:	4770      	bx	lr
 8000ef2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ef6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000efa:	4770      	bx	lr

08000efc <__aeabi_fdiv>:
 8000efc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f00:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f04:	bf1e      	ittt	ne
 8000f06:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f0a:	ea92 0f0c 	teqne	r2, ip
 8000f0e:	ea93 0f0c 	teqne	r3, ip
 8000f12:	d069      	beq.n	8000fe8 <__aeabi_fdiv+0xec>
 8000f14:	eba2 0203 	sub.w	r2, r2, r3
 8000f18:	ea80 0c01 	eor.w	ip, r0, r1
 8000f1c:	0249      	lsls	r1, r1, #9
 8000f1e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f22:	d037      	beq.n	8000f94 <__aeabi_fdiv+0x98>
 8000f24:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f28:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f2c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f30:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f34:	428b      	cmp	r3, r1
 8000f36:	bf38      	it	cc
 8000f38:	005b      	lslcc	r3, r3, #1
 8000f3a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f3e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f42:	428b      	cmp	r3, r1
 8000f44:	bf24      	itt	cs
 8000f46:	1a5b      	subcs	r3, r3, r1
 8000f48:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f4c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f50:	bf24      	itt	cs
 8000f52:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f56:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f5a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f5e:	bf24      	itt	cs
 8000f60:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f64:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f68:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f6c:	bf24      	itt	cs
 8000f6e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f72:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f76:	011b      	lsls	r3, r3, #4
 8000f78:	bf18      	it	ne
 8000f7a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f7e:	d1e0      	bne.n	8000f42 <__aeabi_fdiv+0x46>
 8000f80:	2afd      	cmp	r2, #253	; 0xfd
 8000f82:	f63f af50 	bhi.w	8000e26 <__aeabi_fmul+0x92>
 8000f86:	428b      	cmp	r3, r1
 8000f88:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f8c:	bf08      	it	eq
 8000f8e:	f020 0001 	biceq.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f98:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f9c:	327f      	adds	r2, #127	; 0x7f
 8000f9e:	bfc2      	ittt	gt
 8000fa0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fa4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fa8:	4770      	bxgt	lr
 8000faa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fae:	f04f 0300 	mov.w	r3, #0
 8000fb2:	3a01      	subs	r2, #1
 8000fb4:	e737      	b.n	8000e26 <__aeabi_fmul+0x92>
 8000fb6:	f092 0f00 	teq	r2, #0
 8000fba:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fbe:	bf02      	ittt	eq
 8000fc0:	0040      	lsleq	r0, r0, #1
 8000fc2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fc6:	3a01      	subeq	r2, #1
 8000fc8:	d0f9      	beq.n	8000fbe <__aeabi_fdiv+0xc2>
 8000fca:	ea40 000c 	orr.w	r0, r0, ip
 8000fce:	f093 0f00 	teq	r3, #0
 8000fd2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fd6:	bf02      	ittt	eq
 8000fd8:	0049      	lsleq	r1, r1, #1
 8000fda:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fde:	3b01      	subeq	r3, #1
 8000fe0:	d0f9      	beq.n	8000fd6 <__aeabi_fdiv+0xda>
 8000fe2:	ea41 010c 	orr.w	r1, r1, ip
 8000fe6:	e795      	b.n	8000f14 <__aeabi_fdiv+0x18>
 8000fe8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fec:	ea92 0f0c 	teq	r2, ip
 8000ff0:	d108      	bne.n	8001004 <__aeabi_fdiv+0x108>
 8000ff2:	0242      	lsls	r2, r0, #9
 8000ff4:	f47f af7d 	bne.w	8000ef2 <__aeabi_fmul+0x15e>
 8000ff8:	ea93 0f0c 	teq	r3, ip
 8000ffc:	f47f af70 	bne.w	8000ee0 <__aeabi_fmul+0x14c>
 8001000:	4608      	mov	r0, r1
 8001002:	e776      	b.n	8000ef2 <__aeabi_fmul+0x15e>
 8001004:	ea93 0f0c 	teq	r3, ip
 8001008:	d104      	bne.n	8001014 <__aeabi_fdiv+0x118>
 800100a:	024b      	lsls	r3, r1, #9
 800100c:	f43f af4c 	beq.w	8000ea8 <__aeabi_fmul+0x114>
 8001010:	4608      	mov	r0, r1
 8001012:	e76e      	b.n	8000ef2 <__aeabi_fmul+0x15e>
 8001014:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001018:	bf18      	it	ne
 800101a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800101e:	d1ca      	bne.n	8000fb6 <__aeabi_fdiv+0xba>
 8001020:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001024:	f47f af5c 	bne.w	8000ee0 <__aeabi_fmul+0x14c>
 8001028:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800102c:	f47f af3c 	bne.w	8000ea8 <__aeabi_fmul+0x114>
 8001030:	e75f      	b.n	8000ef2 <__aeabi_fmul+0x15e>
 8001032:	bf00      	nop

08001034 <__aeabi_f2iz>:
 8001034:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001038:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800103c:	d30f      	bcc.n	800105e <__aeabi_f2iz+0x2a>
 800103e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001042:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001046:	d90d      	bls.n	8001064 <__aeabi_f2iz+0x30>
 8001048:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800104c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001050:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001054:	fa23 f002 	lsr.w	r0, r3, r2
 8001058:	bf18      	it	ne
 800105a:	4240      	negne	r0, r0
 800105c:	4770      	bx	lr
 800105e:	f04f 0000 	mov.w	r0, #0
 8001062:	4770      	bx	lr
 8001064:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001068:	d101      	bne.n	800106e <__aeabi_f2iz+0x3a>
 800106a:	0242      	lsls	r2, r0, #9
 800106c:	d105      	bne.n	800107a <__aeabi_f2iz+0x46>
 800106e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001072:	bf08      	it	eq
 8001074:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001078:	4770      	bx	lr
 800107a:	f04f 0000 	mov.w	r0, #0
 800107e:	4770      	bx	lr

08001080 <__aeabi_uldivmod>:
 8001080:	b953      	cbnz	r3, 8001098 <__aeabi_uldivmod+0x18>
 8001082:	b94a      	cbnz	r2, 8001098 <__aeabi_uldivmod+0x18>
 8001084:	2900      	cmp	r1, #0
 8001086:	bf08      	it	eq
 8001088:	2800      	cmpeq	r0, #0
 800108a:	bf1c      	itt	ne
 800108c:	f04f 31ff 	movne.w	r1, #4294967295
 8001090:	f04f 30ff 	movne.w	r0, #4294967295
 8001094:	f000 b97a 	b.w	800138c <__aeabi_idiv0>
 8001098:	f1ad 0c08 	sub.w	ip, sp, #8
 800109c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80010a0:	f000 f806 	bl	80010b0 <__udivmoddi4>
 80010a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80010a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80010ac:	b004      	add	sp, #16
 80010ae:	4770      	bx	lr

080010b0 <__udivmoddi4>:
 80010b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010b4:	468c      	mov	ip, r1
 80010b6:	460e      	mov	r6, r1
 80010b8:	4604      	mov	r4, r0
 80010ba:	9d08      	ldr	r5, [sp, #32]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d150      	bne.n	8001162 <__udivmoddi4+0xb2>
 80010c0:	428a      	cmp	r2, r1
 80010c2:	4617      	mov	r7, r2
 80010c4:	d96c      	bls.n	80011a0 <__udivmoddi4+0xf0>
 80010c6:	fab2 fe82 	clz	lr, r2
 80010ca:	f1be 0f00 	cmp.w	lr, #0
 80010ce:	d00b      	beq.n	80010e8 <__udivmoddi4+0x38>
 80010d0:	f1ce 0c20 	rsb	ip, lr, #32
 80010d4:	fa01 f60e 	lsl.w	r6, r1, lr
 80010d8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80010dc:	fa02 f70e 	lsl.w	r7, r2, lr
 80010e0:	ea4c 0c06 	orr.w	ip, ip, r6
 80010e4:	fa00 f40e 	lsl.w	r4, r0, lr
 80010e8:	0c3a      	lsrs	r2, r7, #16
 80010ea:	fbbc f9f2 	udiv	r9, ip, r2
 80010ee:	b2bb      	uxth	r3, r7
 80010f0:	fb02 cc19 	mls	ip, r2, r9, ip
 80010f4:	fb09 fa03 	mul.w	sl, r9, r3
 80010f8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80010fc:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
 8001100:	45b2      	cmp	sl, r6
 8001102:	d90a      	bls.n	800111a <__udivmoddi4+0x6a>
 8001104:	19f6      	adds	r6, r6, r7
 8001106:	f109 31ff 	add.w	r1, r9, #4294967295
 800110a:	f080 8125 	bcs.w	8001358 <__udivmoddi4+0x2a8>
 800110e:	45b2      	cmp	sl, r6
 8001110:	f240 8122 	bls.w	8001358 <__udivmoddi4+0x2a8>
 8001114:	f1a9 0902 	sub.w	r9, r9, #2
 8001118:	443e      	add	r6, r7
 800111a:	eba6 060a 	sub.w	r6, r6, sl
 800111e:	fbb6 f0f2 	udiv	r0, r6, r2
 8001122:	fb02 6610 	mls	r6, r2, r0, r6
 8001126:	fb00 f303 	mul.w	r3, r0, r3
 800112a:	b2a4      	uxth	r4, r4
 800112c:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8001130:	42a3      	cmp	r3, r4
 8001132:	d909      	bls.n	8001148 <__udivmoddi4+0x98>
 8001134:	19e4      	adds	r4, r4, r7
 8001136:	f100 32ff 	add.w	r2, r0, #4294967295
 800113a:	f080 810b 	bcs.w	8001354 <__udivmoddi4+0x2a4>
 800113e:	42a3      	cmp	r3, r4
 8001140:	f240 8108 	bls.w	8001354 <__udivmoddi4+0x2a4>
 8001144:	3802      	subs	r0, #2
 8001146:	443c      	add	r4, r7
 8001148:	2100      	movs	r1, #0
 800114a:	1ae4      	subs	r4, r4, r3
 800114c:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001150:	2d00      	cmp	r5, #0
 8001152:	d062      	beq.n	800121a <__udivmoddi4+0x16a>
 8001154:	2300      	movs	r3, #0
 8001156:	fa24 f40e 	lsr.w	r4, r4, lr
 800115a:	602c      	str	r4, [r5, #0]
 800115c:	606b      	str	r3, [r5, #4]
 800115e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001162:	428b      	cmp	r3, r1
 8001164:	d907      	bls.n	8001176 <__udivmoddi4+0xc6>
 8001166:	2d00      	cmp	r5, #0
 8001168:	d055      	beq.n	8001216 <__udivmoddi4+0x166>
 800116a:	2100      	movs	r1, #0
 800116c:	e885 0041 	stmia.w	r5, {r0, r6}
 8001170:	4608      	mov	r0, r1
 8001172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001176:	fab3 f183 	clz	r1, r3
 800117a:	2900      	cmp	r1, #0
 800117c:	f040 808f 	bne.w	800129e <__udivmoddi4+0x1ee>
 8001180:	42b3      	cmp	r3, r6
 8001182:	d302      	bcc.n	800118a <__udivmoddi4+0xda>
 8001184:	4282      	cmp	r2, r0
 8001186:	f200 80fc 	bhi.w	8001382 <__udivmoddi4+0x2d2>
 800118a:	1a84      	subs	r4, r0, r2
 800118c:	eb66 0603 	sbc.w	r6, r6, r3
 8001190:	2001      	movs	r0, #1
 8001192:	46b4      	mov	ip, r6
 8001194:	2d00      	cmp	r5, #0
 8001196:	d040      	beq.n	800121a <__udivmoddi4+0x16a>
 8001198:	e885 1010 	stmia.w	r5, {r4, ip}
 800119c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011a0:	b912      	cbnz	r2, 80011a8 <__udivmoddi4+0xf8>
 80011a2:	2701      	movs	r7, #1
 80011a4:	fbb7 f7f2 	udiv	r7, r7, r2
 80011a8:	fab7 fe87 	clz	lr, r7
 80011ac:	f1be 0f00 	cmp.w	lr, #0
 80011b0:	d135      	bne.n	800121e <__udivmoddi4+0x16e>
 80011b2:	2101      	movs	r1, #1
 80011b4:	1bf6      	subs	r6, r6, r7
 80011b6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80011ba:	fa1f f887 	uxth.w	r8, r7
 80011be:	fbb6 f2fc 	udiv	r2, r6, ip
 80011c2:	fb0c 6612 	mls	r6, ip, r2, r6
 80011c6:	fb08 f002 	mul.w	r0, r8, r2
 80011ca:	0c23      	lsrs	r3, r4, #16
 80011cc:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
 80011d0:	42b0      	cmp	r0, r6
 80011d2:	d907      	bls.n	80011e4 <__udivmoddi4+0x134>
 80011d4:	19f6      	adds	r6, r6, r7
 80011d6:	f102 33ff 	add.w	r3, r2, #4294967295
 80011da:	d202      	bcs.n	80011e2 <__udivmoddi4+0x132>
 80011dc:	42b0      	cmp	r0, r6
 80011de:	f200 80d2 	bhi.w	8001386 <__udivmoddi4+0x2d6>
 80011e2:	461a      	mov	r2, r3
 80011e4:	1a36      	subs	r6, r6, r0
 80011e6:	fbb6 f0fc 	udiv	r0, r6, ip
 80011ea:	fb0c 6610 	mls	r6, ip, r0, r6
 80011ee:	fb08 f800 	mul.w	r8, r8, r0
 80011f2:	b2a3      	uxth	r3, r4
 80011f4:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
 80011f8:	45a0      	cmp	r8, r4
 80011fa:	d907      	bls.n	800120c <__udivmoddi4+0x15c>
 80011fc:	19e4      	adds	r4, r4, r7
 80011fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8001202:	d202      	bcs.n	800120a <__udivmoddi4+0x15a>
 8001204:	45a0      	cmp	r8, r4
 8001206:	f200 80b9 	bhi.w	800137c <__udivmoddi4+0x2cc>
 800120a:	4618      	mov	r0, r3
 800120c:	eba4 0408 	sub.w	r4, r4, r8
 8001210:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8001214:	e79c      	b.n	8001150 <__udivmoddi4+0xa0>
 8001216:	4629      	mov	r1, r5
 8001218:	4628      	mov	r0, r5
 800121a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800121e:	fa07 f70e 	lsl.w	r7, r7, lr
 8001222:	f1ce 0320 	rsb	r3, lr, #32
 8001226:	fa26 f203 	lsr.w	r2, r6, r3
 800122a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800122e:	fbb2 f1fc 	udiv	r1, r2, ip
 8001232:	fa1f f887 	uxth.w	r8, r7
 8001236:	fb0c 2211 	mls	r2, ip, r1, r2
 800123a:	fa06 f60e 	lsl.w	r6, r6, lr
 800123e:	fa20 f303 	lsr.w	r3, r0, r3
 8001242:	fb01 f908 	mul.w	r9, r1, r8
 8001246:	4333      	orrs	r3, r6
 8001248:	0c1e      	lsrs	r6, r3, #16
 800124a:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 800124e:	45b1      	cmp	r9, r6
 8001250:	fa00 f40e 	lsl.w	r4, r0, lr
 8001254:	d909      	bls.n	800126a <__udivmoddi4+0x1ba>
 8001256:	19f6      	adds	r6, r6, r7
 8001258:	f101 32ff 	add.w	r2, r1, #4294967295
 800125c:	f080 808c 	bcs.w	8001378 <__udivmoddi4+0x2c8>
 8001260:	45b1      	cmp	r9, r6
 8001262:	f240 8089 	bls.w	8001378 <__udivmoddi4+0x2c8>
 8001266:	3902      	subs	r1, #2
 8001268:	443e      	add	r6, r7
 800126a:	eba6 0609 	sub.w	r6, r6, r9
 800126e:	fbb6 f0fc 	udiv	r0, r6, ip
 8001272:	fb0c 6210 	mls	r2, ip, r0, r6
 8001276:	fb00 f908 	mul.w	r9, r0, r8
 800127a:	b29e      	uxth	r6, r3
 800127c:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 8001280:	45b1      	cmp	r9, r6
 8001282:	d907      	bls.n	8001294 <__udivmoddi4+0x1e4>
 8001284:	19f6      	adds	r6, r6, r7
 8001286:	f100 33ff 	add.w	r3, r0, #4294967295
 800128a:	d271      	bcs.n	8001370 <__udivmoddi4+0x2c0>
 800128c:	45b1      	cmp	r9, r6
 800128e:	d96f      	bls.n	8001370 <__udivmoddi4+0x2c0>
 8001290:	3802      	subs	r0, #2
 8001292:	443e      	add	r6, r7
 8001294:	eba6 0609 	sub.w	r6, r6, r9
 8001298:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800129c:	e78f      	b.n	80011be <__udivmoddi4+0x10e>
 800129e:	f1c1 0720 	rsb	r7, r1, #32
 80012a2:	fa22 f807 	lsr.w	r8, r2, r7
 80012a6:	408b      	lsls	r3, r1
 80012a8:	ea48 0303 	orr.w	r3, r8, r3
 80012ac:	fa26 f407 	lsr.w	r4, r6, r7
 80012b0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80012b4:	fbb4 f9fe 	udiv	r9, r4, lr
 80012b8:	fa1f fc83 	uxth.w	ip, r3
 80012bc:	fb0e 4419 	mls	r4, lr, r9, r4
 80012c0:	408e      	lsls	r6, r1
 80012c2:	fa20 f807 	lsr.w	r8, r0, r7
 80012c6:	fb09 fa0c 	mul.w	sl, r9, ip
 80012ca:	ea48 0806 	orr.w	r8, r8, r6
 80012ce:	ea4f 4618 	mov.w	r6, r8, lsr #16
 80012d2:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
 80012d6:	45a2      	cmp	sl, r4
 80012d8:	fa02 f201 	lsl.w	r2, r2, r1
 80012dc:	fa00 f601 	lsl.w	r6, r0, r1
 80012e0:	d908      	bls.n	80012f4 <__udivmoddi4+0x244>
 80012e2:	18e4      	adds	r4, r4, r3
 80012e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80012e8:	d244      	bcs.n	8001374 <__udivmoddi4+0x2c4>
 80012ea:	45a2      	cmp	sl, r4
 80012ec:	d942      	bls.n	8001374 <__udivmoddi4+0x2c4>
 80012ee:	f1a9 0902 	sub.w	r9, r9, #2
 80012f2:	441c      	add	r4, r3
 80012f4:	eba4 040a 	sub.w	r4, r4, sl
 80012f8:	fbb4 f0fe 	udiv	r0, r4, lr
 80012fc:	fb0e 4410 	mls	r4, lr, r0, r4
 8001300:	fb00 fc0c 	mul.w	ip, r0, ip
 8001304:	fa1f f888 	uxth.w	r8, r8
 8001308:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 800130c:	45a4      	cmp	ip, r4
 800130e:	d907      	bls.n	8001320 <__udivmoddi4+0x270>
 8001310:	18e4      	adds	r4, r4, r3
 8001312:	f100 3eff 	add.w	lr, r0, #4294967295
 8001316:	d229      	bcs.n	800136c <__udivmoddi4+0x2bc>
 8001318:	45a4      	cmp	ip, r4
 800131a:	d927      	bls.n	800136c <__udivmoddi4+0x2bc>
 800131c:	3802      	subs	r0, #2
 800131e:	441c      	add	r4, r3
 8001320:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001324:	fba0 8902 	umull	r8, r9, r0, r2
 8001328:	eba4 0c0c 	sub.w	ip, r4, ip
 800132c:	45cc      	cmp	ip, r9
 800132e:	46c2      	mov	sl, r8
 8001330:	46ce      	mov	lr, r9
 8001332:	d315      	bcc.n	8001360 <__udivmoddi4+0x2b0>
 8001334:	d012      	beq.n	800135c <__udivmoddi4+0x2ac>
 8001336:	b155      	cbz	r5, 800134e <__udivmoddi4+0x29e>
 8001338:	ebb6 030a 	subs.w	r3, r6, sl
 800133c:	eb6c 060e 	sbc.w	r6, ip, lr
 8001340:	fa06 f707 	lsl.w	r7, r6, r7
 8001344:	40cb      	lsrs	r3, r1
 8001346:	431f      	orrs	r7, r3
 8001348:	40ce      	lsrs	r6, r1
 800134a:	602f      	str	r7, [r5, #0]
 800134c:	606e      	str	r6, [r5, #4]
 800134e:	2100      	movs	r1, #0
 8001350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001354:	4610      	mov	r0, r2
 8001356:	e6f7      	b.n	8001148 <__udivmoddi4+0x98>
 8001358:	4689      	mov	r9, r1
 800135a:	e6de      	b.n	800111a <__udivmoddi4+0x6a>
 800135c:	4546      	cmp	r6, r8
 800135e:	d2ea      	bcs.n	8001336 <__udivmoddi4+0x286>
 8001360:	ebb8 0a02 	subs.w	sl, r8, r2
 8001364:	eb69 0e03 	sbc.w	lr, r9, r3
 8001368:	3801      	subs	r0, #1
 800136a:	e7e4      	b.n	8001336 <__udivmoddi4+0x286>
 800136c:	4670      	mov	r0, lr
 800136e:	e7d7      	b.n	8001320 <__udivmoddi4+0x270>
 8001370:	4618      	mov	r0, r3
 8001372:	e78f      	b.n	8001294 <__udivmoddi4+0x1e4>
 8001374:	4681      	mov	r9, r0
 8001376:	e7bd      	b.n	80012f4 <__udivmoddi4+0x244>
 8001378:	4611      	mov	r1, r2
 800137a:	e776      	b.n	800126a <__udivmoddi4+0x1ba>
 800137c:	3802      	subs	r0, #2
 800137e:	443c      	add	r4, r7
 8001380:	e744      	b.n	800120c <__udivmoddi4+0x15c>
 8001382:	4608      	mov	r0, r1
 8001384:	e706      	b.n	8001194 <__udivmoddi4+0xe4>
 8001386:	3a02      	subs	r2, #2
 8001388:	443e      	add	r6, r7
 800138a:	e72b      	b.n	80011e4 <__udivmoddi4+0x134>

0800138c <__aeabi_idiv0>:
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop

08001390 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001390:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001392:	4b0e      	ldr	r3, [pc, #56]	; (80013cc <HAL_InitTick+0x3c>)
{
 8001394:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001396:	7818      	ldrb	r0, [r3, #0]
 8001398:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800139c:	fbb3 f3f0 	udiv	r3, r3, r0
 80013a0:	4a0b      	ldr	r2, [pc, #44]	; (80013d0 <HAL_InitTick+0x40>)
 80013a2:	6810      	ldr	r0, [r2, #0]
 80013a4:	fbb0 f0f3 	udiv	r0, r0, r3
 80013a8:	f000 fbda 	bl	8001b60 <HAL_SYSTICK_Config>
 80013ac:	4604      	mov	r4, r0
 80013ae:	b958      	cbnz	r0, 80013c8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013b0:	2d0f      	cmp	r5, #15
 80013b2:	d809      	bhi.n	80013c8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013b4:	4602      	mov	r2, r0
 80013b6:	4629      	mov	r1, r5
 80013b8:	f04f 30ff 	mov.w	r0, #4294967295
 80013bc:	f000 fb90 	bl	8001ae0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013c0:	4b04      	ldr	r3, [pc, #16]	; (80013d4 <HAL_InitTick+0x44>)
 80013c2:	4620      	mov	r0, r4
 80013c4:	601d      	str	r5, [r3, #0]
 80013c6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80013c8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80013ca:	bd38      	pop	{r3, r4, r5, pc}
 80013cc:	20000000 	.word	0x20000000
 80013d0:	20000050 	.word	0x20000050
 80013d4:	20000004 	.word	0x20000004

080013d8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013d8:	4a07      	ldr	r2, [pc, #28]	; (80013f8 <HAL_Init+0x20>)
{
 80013da:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013dc:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013de:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013e0:	f043 0310 	orr.w	r3, r3, #16
 80013e4:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013e6:	f000 fb69 	bl	8001abc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80013ea:	200f      	movs	r0, #15
 80013ec:	f7ff ffd0 	bl	8001390 <HAL_InitTick>
  HAL_MspInit();
 80013f0:	f004 fc64 	bl	8005cbc <HAL_MspInit>
}
 80013f4:	2000      	movs	r0, #0
 80013f6:	bd08      	pop	{r3, pc}
 80013f8:	40022000 	.word	0x40022000

080013fc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80013fc:	4a03      	ldr	r2, [pc, #12]	; (800140c <HAL_IncTick+0x10>)
 80013fe:	4b04      	ldr	r3, [pc, #16]	; (8001410 <HAL_IncTick+0x14>)
 8001400:	6811      	ldr	r1, [r2, #0]
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	440b      	add	r3, r1
 8001406:	6013      	str	r3, [r2, #0]
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	200052d8 	.word	0x200052d8
 8001410:	20000000 	.word	0x20000000

08001414 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001414:	4b01      	ldr	r3, [pc, #4]	; (800141c <HAL_GetTick+0x8>)
 8001416:	6818      	ldr	r0, [r3, #0]
}
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	200052d8 	.word	0x200052d8

08001420 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001420:	b538      	push	{r3, r4, r5, lr}
 8001422:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001424:	f7ff fff6 	bl	8001414 <HAL_GetTick>
 8001428:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800142a:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800142c:	bf1e      	ittt	ne
 800142e:	4b04      	ldrne	r3, [pc, #16]	; (8001440 <HAL_Delay+0x20>)
 8001430:	781b      	ldrbne	r3, [r3, #0]
 8001432:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001434:	f7ff ffee 	bl	8001414 <HAL_GetTick>
 8001438:	1b40      	subs	r0, r0, r5
 800143a:	4284      	cmp	r4, r0
 800143c:	d8fa      	bhi.n	8001434 <HAL_Delay+0x14>
  {
  }
}
 800143e:	bd38      	pop	{r3, r4, r5, pc}
 8001440:	20000000 	.word	0x20000000

08001444 <HAL_GetUID>:
  * @param UID pointer to 3 words array.
  * @retval Device identifier
  */
void HAL_GetUID(uint32_t *UID)
{
  UID[0] = (uint32_t)(READ_REG(*((uint32_t *)UID_BASE)));
 8001444:	4b04      	ldr	r3, [pc, #16]	; (8001458 <HAL_GetUID+0x14>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	6003      	str	r3, [r0, #0]
  UID[1] = (uint32_t)(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 800144a:	4b04      	ldr	r3, [pc, #16]	; (800145c <HAL_GetUID+0x18>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	6043      	str	r3, [r0, #4]
  UID[2] = (uint32_t)(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8001450:	4b03      	ldr	r3, [pc, #12]	; (8001460 <HAL_GetUID+0x1c>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	6083      	str	r3, [r0, #8]
 8001456:	4770      	bx	lr
 8001458:	1ffff7e8 	.word	0x1ffff7e8
 800145c:	1ffff7ec 	.word	0x1ffff7ec
 8001460:	1ffff7f0 	.word	0x1ffff7f0

08001464 <HAL_ADC_ConvCpltCallback>:
 8001464:	4770      	bx	lr

08001466 <HAL_ADC_LevelOutOfWindowCallback>:
 8001466:	4770      	bx	lr

08001468 <HAL_ADC_IRQHandler>:
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8001468:	6803      	ldr	r3, [r0, #0]
{
 800146a:	b510      	push	{r4, lr}
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 800146c:	685a      	ldr	r2, [r3, #4]
{
 800146e:	4604      	mov	r4, r0
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8001470:	0690      	lsls	r0, r2, #26
 8001472:	d527      	bpl.n	80014c4 <HAL_ADC_IRQHandler+0x5c>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	0791      	lsls	r1, r2, #30
 8001478:	d524      	bpl.n	80014c4 <HAL_ADC_IRQHandler+0x5c>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800147a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800147c:	06d2      	lsls	r2, r2, #27
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800147e:	bf5e      	ittt	pl
 8001480:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 8001482:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 8001486:	62a2      	strpl	r2, [r4, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001488:	689a      	ldr	r2, [r3, #8]
 800148a:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 800148e:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8001492:	d110      	bne.n	80014b6 <HAL_ADC_IRQHandler+0x4e>
 8001494:	68e2      	ldr	r2, [r4, #12]
 8001496:	b972      	cbnz	r2, 80014b6 <HAL_ADC_IRQHandler+0x4e>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001498:	685a      	ldr	r2, [r3, #4]
 800149a:	f022 0220 	bic.w	r2, r2, #32
 800149e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80014a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80014a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014a6:	62a3      	str	r3, [r4, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014a8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80014aa:	04db      	lsls	r3, r3, #19
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80014ac:	bf5e      	ittt	pl
 80014ae:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 80014b0:	f043 0301 	orrpl.w	r3, r3, #1
 80014b4:	62a3      	strpl	r3, [r4, #40]	; 0x28
        }
      }

      /* Conversion complete callback */
      HAL_ADC_ConvCpltCallback(hadc);
 80014b6:	4620      	mov	r0, r4
 80014b8:	f7ff ffd4 	bl	8001464 <HAL_ADC_ConvCpltCallback>
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80014bc:	f06f 0212 	mvn.w	r2, #18
 80014c0:	6823      	ldr	r3, [r4, #0]
 80014c2:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 80014c4:	6823      	ldr	r3, [r4, #0]
 80014c6:	685a      	ldr	r2, [r3, #4]
 80014c8:	0610      	lsls	r0, r2, #24
 80014ca:	d530      	bpl.n	800152e <HAL_ADC_IRQHandler+0xc6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	0751      	lsls	r1, r2, #29
 80014d0:	d52d      	bpl.n	800152e <HAL_ADC_IRQHandler+0xc6>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80014d2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80014d4:	06d2      	lsls	r2, r2, #27
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80014d6:	bf5e      	ittt	pl
 80014d8:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 80014da:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 80014de:	62a2      	strpl	r2, [r4, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80014e0:	689a      	ldr	r2, [r3, #8]
 80014e2:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
 80014e6:	f5b2 4fe0 	cmp.w	r2, #28672	; 0x7000
 80014ea:	d00a      	beq.n	8001502 <HAL_ADC_IRQHandler+0x9a>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80014ec:	685a      	ldr	r2, [r3, #4]
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80014ee:	0550      	lsls	r0, r2, #21
 80014f0:	d416      	bmi.n	8001520 <HAL_ADC_IRQHandler+0xb8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80014f2:	689a      	ldr	r2, [r3, #8]
 80014f4:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80014f8:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 80014fc:	d110      	bne.n	8001520 <HAL_ADC_IRQHandler+0xb8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80014fe:	68e2      	ldr	r2, [r4, #12]
 8001500:	b972      	cbnz	r2, 8001520 <HAL_ADC_IRQHandler+0xb8>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001502:	685a      	ldr	r2, [r3, #4]
 8001504:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001508:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800150a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800150c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001510:	62a3      	str	r3, [r4, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001512:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001514:	05d9      	lsls	r1, r3, #23
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001516:	bf5e      	ittt	pl
 8001518:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 800151a:	f043 0301 	orrpl.w	r3, r3, #1
 800151e:	62a3      	strpl	r3, [r4, #40]	; 0x28
        }
      }

      /* Conversion complete callback */ 
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001520:	4620      	mov	r0, r4
 8001522:	f004 f9a9 	bl	8005878 <HAL_ADCEx_InjectedConvCpltCallback>
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001526:	f06f 020c 	mvn.w	r2, #12
 800152a:	6823      	ldr	r3, [r4, #0]
 800152c:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800152e:	6823      	ldr	r3, [r4, #0]
 8001530:	685a      	ldr	r2, [r3, #4]
 8001532:	0652      	lsls	r2, r2, #25
 8001534:	d50d      	bpl.n	8001552 <HAL_ADC_IRQHandler+0xea>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	07db      	lsls	r3, r3, #31
 800153a:	d50a      	bpl.n	8001552 <HAL_ADC_IRQHandler+0xea>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800153c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      
      /* Level out of window callback */ 
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800153e:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001544:	62a3      	str	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001546:	f7ff ff8e 	bl	8001466 <HAL_ADC_LevelOutOfWindowCallback>
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800154a:	f06f 0201 	mvn.w	r2, #1
 800154e:	6823      	ldr	r3, [r4, #0]
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	bd10      	pop	{r4, pc}

08001554 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8001554:	2300      	movs	r3, #0
{ 
 8001556:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8001558:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800155a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800155e:	2b01      	cmp	r3, #1
 8001560:	d074      	beq.n	800164c <HAL_ADC_ConfigChannel+0xf8>
 8001562:	2301      	movs	r3, #1
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001564:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 8001566:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 800156a:	2d06      	cmp	r5, #6
 800156c:	6802      	ldr	r2, [r0, #0]
 800156e:	ea4f 0385 	mov.w	r3, r5, lsl #2
 8001572:	680c      	ldr	r4, [r1, #0]
 8001574:	d825      	bhi.n	80015c2 <HAL_ADC_ConfigChannel+0x6e>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001576:	442b      	add	r3, r5
 8001578:	251f      	movs	r5, #31
 800157a:	6b56      	ldr	r6, [r2, #52]	; 0x34
 800157c:	3b05      	subs	r3, #5
 800157e:	409d      	lsls	r5, r3
 8001580:	ea26 0505 	bic.w	r5, r6, r5
 8001584:	fa04 f303 	lsl.w	r3, r4, r3
 8001588:	432b      	orrs	r3, r5
 800158a:	6353      	str	r3, [r2, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800158c:	2c09      	cmp	r4, #9
 800158e:	ea4f 0344 	mov.w	r3, r4, lsl #1
 8001592:	688d      	ldr	r5, [r1, #8]
 8001594:	d92f      	bls.n	80015f6 <HAL_ADC_ConfigChannel+0xa2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001596:	2607      	movs	r6, #7
 8001598:	4423      	add	r3, r4
 800159a:	68d1      	ldr	r1, [r2, #12]
 800159c:	3b1e      	subs	r3, #30
 800159e:	409e      	lsls	r6, r3
 80015a0:	ea21 0106 	bic.w	r1, r1, r6
 80015a4:	fa05 f303 	lsl.w	r3, r5, r3
 80015a8:	430b      	orrs	r3, r1
 80015aa:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80015ac:	f1a4 0310 	sub.w	r3, r4, #16
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d92b      	bls.n	800160c <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015b4:	2300      	movs	r3, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015b6:	2200      	movs	r2, #0
 80015b8:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 80015bc:	4618      	mov	r0, r3
 80015be:	b002      	add	sp, #8
 80015c0:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 80015c2:	2d0c      	cmp	r5, #12
 80015c4:	d80b      	bhi.n	80015de <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80015c6:	442b      	add	r3, r5
 80015c8:	251f      	movs	r5, #31
 80015ca:	6b16      	ldr	r6, [r2, #48]	; 0x30
 80015cc:	3b23      	subs	r3, #35	; 0x23
 80015ce:	409d      	lsls	r5, r3
 80015d0:	ea26 0505 	bic.w	r5, r6, r5
 80015d4:	fa04 f303 	lsl.w	r3, r4, r3
 80015d8:	432b      	orrs	r3, r5
 80015da:	6313      	str	r3, [r2, #48]	; 0x30
 80015dc:	e7d6      	b.n	800158c <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80015de:	442b      	add	r3, r5
 80015e0:	251f      	movs	r5, #31
 80015e2:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 80015e4:	3b41      	subs	r3, #65	; 0x41
 80015e6:	409d      	lsls	r5, r3
 80015e8:	ea26 0505 	bic.w	r5, r6, r5
 80015ec:	fa04 f303 	lsl.w	r3, r4, r3
 80015f0:	432b      	orrs	r3, r5
 80015f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80015f4:	e7ca      	b.n	800158c <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80015f6:	2607      	movs	r6, #7
 80015f8:	6911      	ldr	r1, [r2, #16]
 80015fa:	4423      	add	r3, r4
 80015fc:	409e      	lsls	r6, r3
 80015fe:	ea21 0106 	bic.w	r1, r1, r6
 8001602:	fa05 f303 	lsl.w	r3, r5, r3
 8001606:	430b      	orrs	r3, r1
 8001608:	6113      	str	r3, [r2, #16]
 800160a:	e7cf      	b.n	80015ac <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 800160c:	4b10      	ldr	r3, [pc, #64]	; (8001650 <HAL_ADC_ConfigChannel+0xfc>)
 800160e:	429a      	cmp	r2, r3
 8001610:	d116      	bne.n	8001640 <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001612:	6893      	ldr	r3, [r2, #8]
 8001614:	021b      	lsls	r3, r3, #8
 8001616:	d4cd      	bmi.n	80015b4 <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001618:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800161a:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800161c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001620:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001622:	d1c7      	bne.n	80015b4 <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001624:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <HAL_ADC_ConfigChannel+0x100>)
 8001626:	4a0c      	ldr	r2, [pc, #48]	; (8001658 <HAL_ADC_ConfigChannel+0x104>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	fbb3 f2f2 	udiv	r2, r3, r2
 800162e:	230a      	movs	r3, #10
 8001630:	4353      	muls	r3, r2
            wait_loop_index--;
 8001632:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8001634:	9b01      	ldr	r3, [sp, #4]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d0bc      	beq.n	80015b4 <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 800163a:	9b01      	ldr	r3, [sp, #4]
 800163c:	3b01      	subs	r3, #1
 800163e:	e7f8      	b.n	8001632 <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001640:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001642:	f043 0320 	orr.w	r3, r3, #32
 8001646:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e7b4      	b.n	80015b6 <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 800164c:	2302      	movs	r3, #2
 800164e:	e7b5      	b.n	80015bc <HAL_ADC_ConfigChannel+0x68>
 8001650:	40012400 	.word	0x40012400
 8001654:	20000050 	.word	0x20000050
 8001658:	000f4240 	.word	0x000f4240

0800165c <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 800165c:	2300      	movs	r3, #0
{
 800165e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8001660:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001662:	6803      	ldr	r3, [r0, #0]
{
 8001664:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001666:	689a      	ldr	r2, [r3, #8]
 8001668:	07d2      	lsls	r2, r2, #31
 800166a:	d502      	bpl.n	8001672 <ADC_Enable+0x16>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800166c:	2000      	movs	r0, #0
}
 800166e:	b002      	add	sp, #8
 8001670:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 8001672:	689a      	ldr	r2, [r3, #8]
 8001674:	f042 0201 	orr.w	r2, r2, #1
 8001678:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800167a:	4b12      	ldr	r3, [pc, #72]	; (80016c4 <ADC_Enable+0x68>)
 800167c:	4a12      	ldr	r2, [pc, #72]	; (80016c8 <ADC_Enable+0x6c>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8001684:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8001686:	9b01      	ldr	r3, [sp, #4]
 8001688:	b9c3      	cbnz	r3, 80016bc <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 800168a:	f7ff fec3 	bl	8001414 <HAL_GetTick>
 800168e:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001690:	6823      	ldr	r3, [r4, #0]
 8001692:	689d      	ldr	r5, [r3, #8]
 8001694:	f015 0501 	ands.w	r5, r5, #1
 8001698:	d1e8      	bne.n	800166c <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800169a:	f7ff febb 	bl	8001414 <HAL_GetTick>
 800169e:	1b80      	subs	r0, r0, r6
 80016a0:	2802      	cmp	r0, #2
 80016a2:	d9f5      	bls.n	8001690 <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016a4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 80016a6:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016aa:	f043 0310 	orr.w	r3, r3, #16
 80016ae:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 80016b2:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016b4:	f043 0301 	orr.w	r3, r3, #1
 80016b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80016ba:	e7d8      	b.n	800166e <ADC_Enable+0x12>
      wait_loop_index--;
 80016bc:	9b01      	ldr	r3, [sp, #4]
 80016be:	3b01      	subs	r3, #1
 80016c0:	e7e0      	b.n	8001684 <ADC_Enable+0x28>
 80016c2:	bf00      	nop
 80016c4:	20000050 	.word	0x20000050
 80016c8:	000f4240 	.word	0x000f4240

080016cc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80016cc:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80016ce:	6803      	ldr	r3, [r0, #0]
{
 80016d0:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 80016d2:	689a      	ldr	r2, [r3, #8]
 80016d4:	07d2      	lsls	r2, r2, #31
 80016d6:	d401      	bmi.n	80016dc <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80016d8:	2000      	movs	r0, #0
 80016da:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 80016dc:	689a      	ldr	r2, [r3, #8]
 80016de:	f022 0201 	bic.w	r2, r2, #1
 80016e2:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80016e4:	f7ff fe96 	bl	8001414 <HAL_GetTick>
 80016e8:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 80016ea:	6823      	ldr	r3, [r4, #0]
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	07db      	lsls	r3, r3, #31
 80016f0:	d5f2      	bpl.n	80016d8 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80016f2:	f7ff fe8f 	bl	8001414 <HAL_GetTick>
 80016f6:	1b40      	subs	r0, r0, r5
 80016f8:	2802      	cmp	r0, #2
 80016fa:	d9f6      	bls.n	80016ea <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016fe:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001700:	f043 0310 	orr.w	r3, r3, #16
 8001704:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001706:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800170e:	bd38      	pop	{r3, r4, r5, pc}

08001710 <HAL_ADC_Init>:
{
 8001710:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 8001712:	4604      	mov	r4, r0
 8001714:	2800      	cmp	r0, #0
 8001716:	d071      	beq.n	80017fc <HAL_ADC_Init+0xec>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001718:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800171a:	b923      	cbnz	r3, 8001726 <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 800171c:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 800171e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8001722:	f004 faf3 	bl	8005d0c <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001726:	4620      	mov	r0, r4
 8001728:	f7ff ffd0 	bl	80016cc <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800172c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800172e:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 8001732:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001734:	d164      	bne.n	8001800 <HAL_ADC_Init+0xf0>
 8001736:	2800      	cmp	r0, #0
 8001738:	d162      	bne.n	8001800 <HAL_ADC_Init+0xf0>
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 800173a:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 800173c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8001740:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8001742:	f023 0302 	bic.w	r3, r3, #2
 8001746:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 800174a:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800174c:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 800174e:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 8001750:	68e3      	ldr	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001752:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 8001756:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800175a:	d038      	beq.n	80017ce <HAL_ADC_Init+0xbe>
 800175c:	2901      	cmp	r1, #1
 800175e:	bf14      	ite	ne
 8001760:	4606      	movne	r6, r0
 8001762:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001766:	6965      	ldr	r5, [r4, #20]
 8001768:	2d01      	cmp	r5, #1
 800176a:	d107      	bne.n	800177c <HAL_ADC_Init+0x6c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800176c:	2b00      	cmp	r3, #0
 800176e:	d130      	bne.n	80017d2 <HAL_ADC_Init+0xc2>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001770:	69a3      	ldr	r3, [r4, #24]
 8001772:	3b01      	subs	r3, #1
 8001774:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 8001778:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 800177c:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800177e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8001782:	685d      	ldr	r5, [r3, #4]
 8001784:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 8001788:	ea45 0506 	orr.w	r5, r5, r6
 800178c:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 800178e:	689e      	ldr	r6, [r3, #8]
 8001790:	4d1d      	ldr	r5, [pc, #116]	; (8001808 <HAL_ADC_Init+0xf8>)
 8001792:	ea05 0506 	and.w	r5, r5, r6
 8001796:	ea45 0502 	orr.w	r5, r5, r2
 800179a:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800179c:	d001      	beq.n	80017a2 <HAL_ADC_Init+0x92>
 800179e:	2901      	cmp	r1, #1
 80017a0:	d120      	bne.n	80017e4 <HAL_ADC_Init+0xd4>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80017a2:	6921      	ldr	r1, [r4, #16]
 80017a4:	3901      	subs	r1, #1
 80017a6:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 80017a8:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80017aa:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 80017ae:	4329      	orrs	r1, r5
 80017b0:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80017b2:	6899      	ldr	r1, [r3, #8]
 80017b4:	4b15      	ldr	r3, [pc, #84]	; (800180c <HAL_ADC_Init+0xfc>)
 80017b6:	400b      	ands	r3, r1
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d115      	bne.n	80017e8 <HAL_ADC_Init+0xd8>
      ADC_CLEAR_ERRORCODE(hadc);
 80017bc:	2300      	movs	r3, #0
 80017be:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 80017c0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80017c2:	f023 0303 	bic.w	r3, r3, #3
 80017c6:	f043 0301 	orr.w	r3, r3, #1
 80017ca:	62a3      	str	r3, [r4, #40]	; 0x28
 80017cc:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80017ce:	460e      	mov	r6, r1
 80017d0:	e7c9      	b.n	8001766 <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80017d4:	f043 0320 	orr.w	r3, r3, #32
 80017d8:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017da:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80017dc:	f043 0301 	orr.w	r3, r3, #1
 80017e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80017e2:	e7cb      	b.n	800177c <HAL_ADC_Init+0x6c>
  uint32_t tmp_sqr1 = 0U;
 80017e4:	2100      	movs	r1, #0
 80017e6:	e7df      	b.n	80017a8 <HAL_ADC_Init+0x98>
      ADC_STATE_CLR_SET(hadc->State,
 80017e8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80017ea:	f023 0312 	bic.w	r3, r3, #18
 80017ee:	f043 0310 	orr.w	r3, r3, #16
 80017f2:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017f4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80017f6:	f043 0301 	orr.w	r3, r3, #1
 80017fa:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 80017fc:	2001      	movs	r0, #1
}
 80017fe:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001800:	f043 0310 	orr.w	r3, r3, #16
 8001804:	62a3      	str	r3, [r4, #40]	; 0x28
 8001806:	e7f9      	b.n	80017fc <HAL_ADC_Init+0xec>
 8001808:	ffe1f7fd 	.word	0xffe1f7fd
 800180c:	ff1f0efe 	.word	0xff1f0efe

08001810 <HAL_ADCEx_InjectedStart_IT>:
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001810:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8001814:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8001816:	2b01      	cmp	r3, #1
{
 8001818:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 800181a:	d04e      	beq.n	80018ba <HAL_ADCEx_InjectedStart_IT+0xaa>
 800181c:	2301      	movs	r3, #1
 800181e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001822:	f7ff ff1b 	bl	800165c <ADC_Enable>
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001826:	2800      	cmp	r0, #0
 8001828:	d143      	bne.n	80018b2 <HAL_ADCEx_InjectedStart_IT+0xa2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 800182a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_INJ_EOC,
                      HAL_ADC_STATE_INJ_BUSY);
    
    /* Case of independent mode or multimode (for devices with several ADCs): */
    /* Set multimode state.                                                   */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800182c:	4a24      	ldr	r2, [pc, #144]	; (80018c0 <HAL_ADCEx_InjectedStart_IT+0xb0>)
    ADC_STATE_CLR_SET(hadc->State,
 800182e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001832:	f023 0301 	bic.w	r3, r3, #1
 8001836:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800183a:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800183c:	6823      	ldr	r3, [r4, #0]
 800183e:	4293      	cmp	r3, r2
 8001840:	d105      	bne.n	800184e <HAL_ADCEx_InjectedStart_IT+0x3e>
 8001842:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8001846:	6852      	ldr	r2, [r2, #4]
 8001848:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 800184c:	d129      	bne.n	80018a2 <HAL_ADCEx_InjectedStart_IT+0x92>
    {
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800184e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001850:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
    }
    else
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001854:	62a2      	str	r2, [r4, #40]	; 0x28
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001856:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001858:	f412 7280 	ands.w	r2, r2, #256	; 0x100
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800185c:	bf08      	it	eq
 800185e:	62e2      	streq	r2, [r4, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001860:	2200      	movs	r2, #0
 8001862:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8001866:	f06f 0204 	mvn.w	r2, #4
 800186a:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for injected channels */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800186c:	685a      	ldr	r2, [r3, #4]
 800186e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001872:	605a      	str	r2, [r3, #4]
    /* and if automatic injected conversion is disabled.                      */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* If automatic injected conversion is enabled, conversion will start     */
    /* after next regular group conversion.                                   */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO))
 8001874:	685a      	ldr	r2, [r3, #4]
 8001876:	0552      	lsls	r2, r2, #21
 8001878:	d420      	bmi.n	80018bc <HAL_ADCEx_InjectedStart_IT+0xac>
    {
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 800187a:	689a      	ldr	r2, [r3, #8]
 800187c:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
 8001880:	f5b2 4fe0 	cmp.w	r2, #28672	; 0x7000
 8001884:	d111      	bne.n	80018aa <HAL_ADCEx_InjectedStart_IT+0x9a>
 8001886:	4a0e      	ldr	r2, [pc, #56]	; (80018c0 <HAL_ADCEx_InjectedStart_IT+0xb0>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d105      	bne.n	8001898 <HAL_ADCEx_InjectedStart_IT+0x88>
          ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800188c:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8001890:	6852      	ldr	r2, [r2, #4]
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 8001892:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 8001896:	d108      	bne.n	80018aa <HAL_ADCEx_InjectedStart_IT+0x9a>
      {
        /* Start ADC conversion on injected group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_JSWSTART | ADC_CR2_JEXTTRIG));
 8001898:	689a      	ldr	r2, [r3, #8]
 800189a:	f442 1202 	orr.w	r2, r2, #2129920	; 0x208000
      }
      else
      {
        /* Start ADC conversion on injected group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_JEXTTRIG);
 800189e:	609a      	str	r2, [r3, #8]
 80018a0:	bd10      	pop	{r4, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80018a2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80018a4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80018a8:	e7d4      	b.n	8001854 <HAL_ADCEx_InjectedStart_IT+0x44>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_JEXTTRIG);
 80018aa:	689a      	ldr	r2, [r3, #8]
 80018ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80018b0:	e7f5      	b.n	800189e <HAL_ADCEx_InjectedStart_IT+0x8e>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80018b2:	2300      	movs	r3, #0
 80018b4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80018b8:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 80018ba:	2002      	movs	r0, #2
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 80018bc:	bd10      	pop	{r4, pc}
 80018be:	bf00      	nop
 80018c0:	40012800 	.word	0x40012800

080018c4 <HAL_ADCEx_InjectedGetValue>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Get ADC converted value */ 
  switch(InjectedRank)
 80018c4:	2903      	cmp	r1, #3
 80018c6:	6803      	ldr	r3, [r0, #0]
 80018c8:	d007      	beq.n	80018da <HAL_ADCEx_InjectedGetValue+0x16>
 80018ca:	2904      	cmp	r1, #4
 80018cc:	d003      	beq.n	80018d6 <HAL_ADCEx_InjectedGetValue+0x12>
 80018ce:	2902      	cmp	r1, #2
 80018d0:	d105      	bne.n	80018de <HAL_ADCEx_InjectedGetValue+0x1a>
      break;
    case ADC_INJECTED_RANK_3: 
      tmp_jdr = hadc->Instance->JDR3;
      break;
    case ADC_INJECTED_RANK_2: 
      tmp_jdr = hadc->Instance->JDR2;
 80018d2:	6c18      	ldr	r0, [r3, #64]	; 0x40
      break;
 80018d4:	4770      	bx	lr
      tmp_jdr = hadc->Instance->JDR4;
 80018d6:	6c98      	ldr	r0, [r3, #72]	; 0x48
      break;
 80018d8:	4770      	bx	lr
      tmp_jdr = hadc->Instance->JDR3;
 80018da:	6c58      	ldr	r0, [r3, #68]	; 0x44
      break;
 80018dc:	4770      	bx	lr
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 80018de:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
      break;
  }
  
  /* Return ADC converted value */ 
  return tmp_jdr;
}
 80018e0:	4770      	bx	lr
	...

080018e4 <HAL_ADCEx_InjectedConfigChannel>:
  * @param  sConfigInjected: Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 80018e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80018e6:	4602      	mov	r2, r0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 80018e8:	2000      	movs	r0, #0
    assert_param(IS_ADC_INJECTED_NB_CONV(sConfigInjected->InjectedNbrOfConversion));
    assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->InjectedDiscontinuousConvMode));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018ea:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
  __IO uint32_t wait_loop_index = 0U;
 80018ee:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	f000 80d8 	beq.w	8001aa6 <HAL_ADCEx_InjectedConfigChannel+0x1c2>
 80018f6:	2701      	movs	r7, #1
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80018f8:	f8d2 e008 	ldr.w	lr, [r2, #8]
  __HAL_LOCK(hadc);
 80018fc:	f882 7024 	strb.w	r7, [r2, #36]	; 0x24
 8001900:	684e      	ldr	r6, [r1, #4]
 8001902:	6813      	ldr	r3, [r2, #0]
 8001904:	680d      	ldr	r5, [r1, #0]
  /*   Note: Scan mode is present by hardware on this device and, if          */
  /*   disabled, discards automatically nb of conversions. Anyway, nb of      */
  /*   conversions is forced to 0x00 for alignment over all STM32 devices.    */
  /* - if scan mode is enabled, injected channels sequence length is set to   */
  /*   parameter "InjectedNbrOfConversion".                                   */
  if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001906:	f1be 0f00 	cmp.w	lr, #0
 800190a:	d17b      	bne.n	8001a04 <HAL_ADCEx_InjectedConfigChannel+0x120>
  {
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 800190c:	42be      	cmp	r6, r7
 800190e:	d173      	bne.n	80019f8 <HAL_ADCEx_InjectedConfigChannel+0x114>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001910:	4670      	mov	r0, lr
    {
      /* Clear the old SQx bits for all injected ranks */
      MODIFY_REG(hadc->Instance->JSQR                             ,
 8001912:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8001914:	0da4      	lsrs	r4, r4, #22
 8001916:	05a4      	lsls	r4, r4, #22
 8001918:	ea44 34c5 	orr.w	r4, r4, r5, lsl #15
 800191c:	639c      	str	r4, [r3, #56]	; 0x38
  /* Parameters update not conditioned to ADC state:                          */
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  /* Note: In case of ADC already enabled, caution to not launch an unwanted  */
  /*       conversion while modifying register CR2 by writing 1 to bit ADON.  */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800191e:	689c      	ldr	r4, [r3, #8]
 8001920:	07e4      	lsls	r4, r4, #31
 8001922:	d407      	bmi.n	8001934 <HAL_ADCEx_InjectedConfigChannel+0x50>
  {    
    MODIFY_REG(hadc->Instance->CR2                                           ,
 8001924:	689c      	ldr	r4, [r3, #8]
 8001926:	69cf      	ldr	r7, [r1, #28]
 8001928:	f424 44e0 	bic.w	r4, r4, #28672	; 0x7000
 800192c:	f024 0401 	bic.w	r4, r4, #1
 8001930:	433c      	orrs	r4, r7
 8001932:	609c      	str	r4, [r3, #8]
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  
    /* Automatic injected conversion can be enabled if injected group         */
    /* external triggers are disabled.                                        */
    if (sConfigInjected->AutoInjectedConv == ENABLE)
 8001934:	698c      	ldr	r4, [r1, #24]
 8001936:	2c01      	cmp	r4, #1
 8001938:	d10d      	bne.n	8001956 <HAL_ADCEx_InjectedConfigChannel+0x72>
    {
      if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 800193a:	69cf      	ldr	r7, [r1, #28]
 800193c:	f5b7 4fe0 	cmp.w	r7, #28672	; 0x7000
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO);
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001940:	bf17      	itett	ne
 8001942:	6a90      	ldrne	r0, [r2, #40]	; 0x28
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8001944:	685f      	ldreq	r7, [r3, #4]
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001946:	f040 0020 	orrne.w	r0, r0, #32
 800194a:	6290      	strne	r0, [r2, #40]	; 0x28
        
        tmp_hal_status = HAL_ERROR;
 800194c:	bf12      	itee	ne
 800194e:	4620      	movne	r0, r4
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8001950:	f447 6780 	orreq.w	r7, r7, #1024	; 0x400
 8001954:	605f      	streq	r7, [r3, #4]
      }
    }
    
    /* Injected discontinuous can be enabled only if auto-injected mode is    */
    /* disabled.                                                              */  
    if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 8001956:	694f      	ldr	r7, [r1, #20]
 8001958:	2f01      	cmp	r7, #1
 800195a:	d105      	bne.n	8001968 <HAL_ADCEx_InjectedConfigChannel+0x84>
    {
      if (sConfigInjected->AutoInjectedConv == DISABLE)
 800195c:	2c00      	cmp	r4, #0
 800195e:	d174      	bne.n	8001a4a <HAL_ADCEx_InjectedConfigChannel+0x166>
      {
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JDISCEN);
 8001960:	685c      	ldr	r4, [r3, #4]
 8001962:	f444 5480 	orr.w	r4, r4, #4096	; 0x1000
 8001966:	605c      	str	r4, [r3, #4]
    }


  /* InjectedChannel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8001968:	2d09      	cmp	r5, #9
 800196a:	ea4f 0445 	mov.w	r4, r5, lsl #1
 800196e:	f8d1 e008 	ldr.w	lr, [r1, #8]
 8001972:	d970      	bls.n	8001a56 <HAL_ADCEx_InjectedConfigChannel+0x172>
  {
    MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 8001974:	f04f 0c07 	mov.w	ip, #7
 8001978:	442c      	add	r4, r5
 800197a:	68df      	ldr	r7, [r3, #12]
 800197c:	3c1e      	subs	r4, #30
 800197e:	fa0c fc04 	lsl.w	ip, ip, r4
 8001982:	ea27 070c 	bic.w	r7, r7, ip
 8001986:	fa0e f404 	lsl.w	r4, lr, r4
 800198a:	433c      	orrs	r4, r7
 800198c:	60dc      	str	r4, [r3, #12]
               ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  
  /* If ADC1 InjectedChannel_16 or InjectedChannel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 800198e:	f1a5 0410 	sub.w	r4, r5, #16
 8001992:	2c01      	cmp	r4, #1
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
  {
    SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001994:	bf98      	it	ls
 8001996:	689f      	ldrls	r7, [r3, #8]
 8001998:	f8df e11c 	ldr.w	lr, [pc, #284]	; 8001ab8 <HAL_ADCEx_InjectedConfigChannel+0x1d4>
 800199c:	bf9c      	itt	ls
 800199e:	f447 0700 	orrls.w	r7, r7, #8388608	; 0x800000
 80019a2:	609f      	strls	r7, [r3, #8]
  }
  
  
  /* Configure the offset: offset enable/disable, InjectedChannel, offset value */
  switch(sConfigInjected->InjectedRank)
 80019a4:	2e02      	cmp	r6, #2
 80019a6:	68cf      	ldr	r7, [r1, #12]
 80019a8:	d062      	beq.n	8001a70 <HAL_ADCEx_InjectedConfigChannel+0x18c>
 80019aa:	2e03      	cmp	r6, #3
 80019ac:	d066      	beq.n	8001a7c <HAL_ADCEx_InjectedConfigChannel+0x198>
 80019ae:	2e01      	cmp	r6, #1
 80019b0:	d16a      	bne.n	8001a88 <HAL_ADCEx_InjectedConfigChannel+0x1a4>
  {
    case 1:
      /* Set injected channel 1 offset */
      MODIFY_REG(hadc->Instance->JOFR1,
 80019b2:	6959      	ldr	r1, [r3, #20]
 80019b4:	ea01 010e 	and.w	r1, r1, lr
 80019b8:	4339      	orrs	r1, r7
 80019ba:	6159      	str	r1, [r3, #20]
      break;
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 80019bc:	2c01      	cmp	r4, #1
 80019be:	d816      	bhi.n	80019ee <HAL_ADCEx_InjectedConfigChannel+0x10a>
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80019c0:	493a      	ldr	r1, [pc, #232]	; (8001aac <HAL_ADCEx_InjectedConfigChannel+0x1c8>)
 80019c2:	428b      	cmp	r3, r1
 80019c4:	d169      	bne.n	8001a9a <HAL_ADCEx_InjectedConfigChannel+0x1b6>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80019c6:	6899      	ldr	r1, [r3, #8]
 80019c8:	0209      	lsls	r1, r1, #8
 80019ca:	d410      	bmi.n	80019ee <HAL_ADCEx_InjectedConfigChannel+0x10a>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80019cc:	6899      	ldr	r1, [r3, #8]
        
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR))
 80019ce:	2d10      	cmp	r5, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80019d0:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80019d4:	6099      	str	r1, [r3, #8]
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR))
 80019d6:	d10a      	bne.n	80019ee <HAL_ADCEx_InjectedConfigChannel+0x10a>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80019d8:	4b35      	ldr	r3, [pc, #212]	; (8001ab0 <HAL_ADCEx_InjectedConfigChannel+0x1cc>)
 80019da:	4936      	ldr	r1, [pc, #216]	; (8001ab4 <HAL_ADCEx_InjectedConfigChannel+0x1d0>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	fbb3 f1f1 	udiv	r1, r3, r1
 80019e2:	230a      	movs	r3, #10
 80019e4:	434b      	muls	r3, r1
          while(wait_loop_index != 0U)
          {
            wait_loop_index--;
 80019e6:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80019e8:	9b01      	ldr	r3, [sp, #4]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d152      	bne.n	8001a94 <HAL_ADCEx_InjectedConfigChannel+0x1b0>
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019ee:	2300      	movs	r3, #0
 80019f0:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 80019f4:	b003      	add	sp, #12
 80019f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019f8:	6a94      	ldr	r4, [r2, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 80019fa:	4638      	mov	r0, r7
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019fc:	f044 0420 	orr.w	r4, r4, #32
 8001a00:	6294      	str	r4, [r2, #40]	; 0x28
 8001a02:	e78c      	b.n	800191e <HAL_ADCEx_InjectedConfigChannel+0x3a>
    if (sConfigInjected->InjectedRank <= sConfigInjected->InjectedNbrOfConversion)
 8001a04:	690f      	ldr	r7, [r1, #16]
      MODIFY_REG(hadc->Instance->JSQR                                         ,
 8001a06:	f8d3 e038 	ldr.w	lr, [r3, #56]	; 0x38
 8001a0a:	1bf4      	subs	r4, r6, r7
 8001a0c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    if (sConfigInjected->InjectedRank <= sConfigInjected->InjectedNbrOfConversion)
 8001a10:	42be      	cmp	r6, r7
      MODIFY_REG(hadc->Instance->JSQR                                         ,
 8001a12:	f104 040f 	add.w	r4, r4, #15
    if (sConfigInjected->InjectedRank <= sConfigInjected->InjectedNbrOfConversion)
 8001a16:	d810      	bhi.n	8001a3a <HAL_ADCEx_InjectedConfigChannel+0x156>
      MODIFY_REG(hadc->Instance->JSQR                                         ,
 8001a18:	f107 3cff 	add.w	ip, r7, #4294967295
 8001a1c:	fa05 f704 	lsl.w	r7, r5, r4
 8001a20:	ea47 570c 	orr.w	r7, r7, ip, lsl #20
 8001a24:	f04f 0c1f 	mov.w	ip, #31
 8001a28:	fa0c f404 	lsl.w	r4, ip, r4
 8001a2c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8001a30:	ea2e 0404 	bic.w	r4, lr, r4
 8001a34:	433c      	orrs	r4, r7
      MODIFY_REG(hadc->Instance->JSQR                                       ,
 8001a36:	639c      	str	r4, [r3, #56]	; 0x38
 8001a38:	e771      	b.n	800191e <HAL_ADCEx_InjectedConfigChannel+0x3a>
 8001a3a:	271f      	movs	r7, #31
 8001a3c:	fa07 f404 	lsl.w	r4, r7, r4
 8001a40:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8001a44:	ea2e 0404 	bic.w	r4, lr, r4
 8001a48:	e7f5      	b.n	8001a36 <HAL_ADCEx_InjectedConfigChannel+0x152>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a4a:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8001a4c:	f040 0020 	orr.w	r0, r0, #32
 8001a50:	6290      	str	r0, [r2, #40]	; 0x28
        tmp_hal_status = HAL_ERROR;
 8001a52:	4638      	mov	r0, r7
 8001a54:	e788      	b.n	8001968 <HAL_ADCEx_InjectedConfigChannel+0x84>
    MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 8001a56:	f04f 0c07 	mov.w	ip, #7
 8001a5a:	691f      	ldr	r7, [r3, #16]
 8001a5c:	442c      	add	r4, r5
 8001a5e:	fa0c fc04 	lsl.w	ip, ip, r4
 8001a62:	ea27 070c 	bic.w	r7, r7, ip
 8001a66:	fa0e f404 	lsl.w	r4, lr, r4
 8001a6a:	433c      	orrs	r4, r7
 8001a6c:	611c      	str	r4, [r3, #16]
 8001a6e:	e78e      	b.n	800198e <HAL_ADCEx_InjectedConfigChannel+0xaa>
      MODIFY_REG(hadc->Instance->JOFR2,
 8001a70:	6999      	ldr	r1, [r3, #24]
 8001a72:	ea01 010e 	and.w	r1, r1, lr
 8001a76:	4339      	orrs	r1, r7
 8001a78:	6199      	str	r1, [r3, #24]
      break;
 8001a7a:	e79f      	b.n	80019bc <HAL_ADCEx_InjectedConfigChannel+0xd8>
      MODIFY_REG(hadc->Instance->JOFR3,
 8001a7c:	69d9      	ldr	r1, [r3, #28]
 8001a7e:	ea01 010e 	and.w	r1, r1, lr
 8001a82:	4339      	orrs	r1, r7
 8001a84:	61d9      	str	r1, [r3, #28]
      break;
 8001a86:	e799      	b.n	80019bc <HAL_ADCEx_InjectedConfigChannel+0xd8>
      MODIFY_REG(hadc->Instance->JOFR4,
 8001a88:	6a19      	ldr	r1, [r3, #32]
 8001a8a:	ea01 010e 	and.w	r1, r1, lr
 8001a8e:	4339      	orrs	r1, r7
 8001a90:	6219      	str	r1, [r3, #32]
      break;
 8001a92:	e793      	b.n	80019bc <HAL_ADCEx_InjectedConfigChannel+0xd8>
            wait_loop_index--;
 8001a94:	9b01      	ldr	r3, [sp, #4]
 8001a96:	3b01      	subs	r3, #1
 8001a98:	e7a5      	b.n	80019e6 <HAL_ADCEx_InjectedConfigChannel+0x102>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a9a:	6a93      	ldr	r3, [r2, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8001a9c:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a9e:	f043 0320 	orr.w	r3, r3, #32
 8001aa2:	6293      	str	r3, [r2, #40]	; 0x28
 8001aa4:	e7a3      	b.n	80019ee <HAL_ADCEx_InjectedConfigChannel+0x10a>
  __HAL_LOCK(hadc);
 8001aa6:	2002      	movs	r0, #2
 8001aa8:	e7a4      	b.n	80019f4 <HAL_ADCEx_InjectedConfigChannel+0x110>
 8001aaa:	bf00      	nop
 8001aac:	40012400 	.word	0x40012400
 8001ab0:	20000050 	.word	0x20000050
 8001ab4:	000f4240 	.word	0x000f4240
 8001ab8:	fffff000 	.word	0xfffff000

08001abc <HAL_NVIC_SetPriorityGrouping>:
 8001abc:	4a07      	ldr	r2, [pc, #28]	; (8001adc <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001abe:	0200      	lsls	r0, r0, #8
 8001ac0:	68d3      	ldr	r3, [r2, #12]
 8001ac2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8001ac6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001aca:	041b      	lsls	r3, r3, #16
 8001acc:	0c1b      	lsrs	r3, r3, #16
 8001ace:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ad2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ad6:	4303      	orrs	r3, r0
 8001ad8:	60d3      	str	r3, [r2, #12]
 8001ada:	4770      	bx	lr
 8001adc:	e000ed00 	.word	0xe000ed00

08001ae0 <HAL_NVIC_SetPriority>:
 8001ae0:	4b17      	ldr	r3, [pc, #92]	; (8001b40 <HAL_NVIC_SetPriority+0x60>)
 8001ae2:	b530      	push	{r4, r5, lr}
 8001ae4:	68dc      	ldr	r4, [r3, #12]
 8001ae6:	f3c4 2402 	ubfx	r4, r4, #8, #3
 8001aea:	f1c4 0307 	rsb	r3, r4, #7
 8001aee:	1d25      	adds	r5, r4, #4
 8001af0:	2b04      	cmp	r3, #4
 8001af2:	bf28      	it	cs
 8001af4:	2304      	movcs	r3, #4
 8001af6:	2d06      	cmp	r5, #6
 8001af8:	f04f 0501 	mov.w	r5, #1
 8001afc:	bf98      	it	ls
 8001afe:	2400      	movls	r4, #0
 8001b00:	fa05 f303 	lsl.w	r3, r5, r3
 8001b04:	f103 33ff 	add.w	r3, r3, #4294967295
 8001b08:	bf88      	it	hi
 8001b0a:	3c03      	subhi	r4, #3
 8001b0c:	4019      	ands	r1, r3
 8001b0e:	40a1      	lsls	r1, r4
 8001b10:	fa05 f404 	lsl.w	r4, r5, r4
 8001b14:	3c01      	subs	r4, #1
 8001b16:	4022      	ands	r2, r4
 8001b18:	2800      	cmp	r0, #0
 8001b1a:	ea42 0201 	orr.w	r2, r2, r1
 8001b1e:	ea4f 1202 	mov.w	r2, r2, lsl #4
 8001b22:	bfaf      	iteee	ge
 8001b24:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 8001b28:	4b06      	ldrlt	r3, [pc, #24]	; (8001b44 <HAL_NVIC_SetPriority+0x64>)
 8001b2a:	f000 000f 	andlt.w	r0, r0, #15
 8001b2e:	b2d2      	uxtblt	r2, r2
 8001b30:	bfa5      	ittet	ge
 8001b32:	b2d2      	uxtbge	r2, r2
 8001b34:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8001b38:	541a      	strblt	r2, [r3, r0]
 8001b3a:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001b3e:	bd30      	pop	{r4, r5, pc}
 8001b40:	e000ed00 	.word	0xe000ed00
 8001b44:	e000ed14 	.word	0xe000ed14

08001b48 <HAL_NVIC_EnableIRQ>:
 8001b48:	2301      	movs	r3, #1
 8001b4a:	0942      	lsrs	r2, r0, #5
 8001b4c:	f000 001f 	and.w	r0, r0, #31
 8001b50:	fa03 f000 	lsl.w	r0, r3, r0
 8001b54:	4b01      	ldr	r3, [pc, #4]	; (8001b5c <HAL_NVIC_EnableIRQ+0x14>)
 8001b56:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001b5a:	4770      	bx	lr
 8001b5c:	e000e100 	.word	0xe000e100

08001b60 <HAL_SYSTICK_Config>:
 8001b60:	3801      	subs	r0, #1
 8001b62:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001b66:	d20a      	bcs.n	8001b7e <HAL_SYSTICK_Config+0x1e>
 8001b68:	21f0      	movs	r1, #240	; 0xf0
 8001b6a:	4b06      	ldr	r3, [pc, #24]	; (8001b84 <HAL_SYSTICK_Config+0x24>)
 8001b6c:	4a06      	ldr	r2, [pc, #24]	; (8001b88 <HAL_SYSTICK_Config+0x28>)
 8001b6e:	6058      	str	r0, [r3, #4]
 8001b70:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
 8001b74:	2000      	movs	r0, #0
 8001b76:	2207      	movs	r2, #7
 8001b78:	6098      	str	r0, [r3, #8]
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	4770      	bx	lr
 8001b7e:	2001      	movs	r0, #1
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	e000e010 	.word	0xe000e010
 8001b88:	e000ed00 	.word	0xe000ed00

08001b8c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b8c:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001b8e:	2800      	cmp	r0, #0
 8001b90:	d032      	beq.n	8001bf8 <HAL_DMA_Init+0x6c>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (STM32F101xE) || defined (STM32F101xG) || defined (STM32F103xE) || defined (STM32F103xG) || defined (STM32F100xE) || defined (STM32F105xC) || defined (STM32F107xC)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001b92:	6801      	ldr	r1, [r0, #0]
 8001b94:	4b19      	ldr	r3, [pc, #100]	; (8001bfc <HAL_DMA_Init+0x70>)
 8001b96:	2414      	movs	r4, #20
 8001b98:	4299      	cmp	r1, r3
 8001b9a:	d825      	bhi.n	8001be8 <HAL_DMA_Init+0x5c>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001b9c:	4a18      	ldr	r2, [pc, #96]	; (8001c00 <HAL_DMA_Init+0x74>)
    hdma->DmaBaseAddress = DMA1;
 8001b9e:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001ba2:	440a      	add	r2, r1
 8001ba4:	fbb2 f2f4 	udiv	r2, r2, r4
 8001ba8:	0092      	lsls	r2, r2, #2
 8001baa:	6402      	str	r2, [r0, #64]	; 0x40
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001bac:	6884      	ldr	r4, [r0, #8]
    hdma->DmaBaseAddress = DMA2;
 8001bae:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp |=  hdma->Init.Direction        |
 8001bb0:	6843      	ldr	r3, [r0, #4]
  tmp = hdma->Instance->CCR;
 8001bb2:	680a      	ldr	r2, [r1, #0]
  tmp |=  hdma->Init.Direction        |
 8001bb4:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bb6:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001bb8:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bbc:	4323      	orrs	r3, r4
 8001bbe:	6904      	ldr	r4, [r0, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001bc0:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bc4:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bc6:	6944      	ldr	r4, [r0, #20]
 8001bc8:	4323      	orrs	r3, r4
 8001bca:	6984      	ldr	r4, [r0, #24]
 8001bcc:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bce:	69c4      	ldr	r4, [r0, #28]
 8001bd0:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8001bd2:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001bd4:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001bd6:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bd8:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001bda:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bde:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001be0:	f880 3020 	strb.w	r3, [r0, #32]

  return HAL_OK;
 8001be4:	4618      	mov	r0, r3
 8001be6:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001be8:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <HAL_DMA_Init+0x78>)
 8001bea:	440b      	add	r3, r1
 8001bec:	fbb3 f3f4 	udiv	r3, r3, r4
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	6403      	str	r3, [r0, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8001bf4:	4b04      	ldr	r3, [pc, #16]	; (8001c08 <HAL_DMA_Init+0x7c>)
 8001bf6:	e7d9      	b.n	8001bac <HAL_DMA_Init+0x20>
    return HAL_ERROR;
 8001bf8:	2001      	movs	r0, #1
}
 8001bfa:	bd10      	pop	{r4, pc}
 8001bfc:	40020407 	.word	0x40020407
 8001c00:	bffdfff8 	.word	0xbffdfff8
 8001c04:	bffdfbf8 	.word	0xbffdfbf8
 8001c08:	40020400 	.word	0x40020400

08001c0c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c0c:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001c0e:	f890 4020 	ldrb.w	r4, [r0, #32]
 8001c12:	2c01      	cmp	r4, #1
 8001c14:	d035      	beq.n	8001c82 <HAL_DMA_Start_IT+0x76>
 8001c16:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c18:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8001c1c:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c20:	42a5      	cmp	r5, r4
 8001c22:	f04f 0600 	mov.w	r6, #0
 8001c26:	f04f 0402 	mov.w	r4, #2
 8001c2a:	d128      	bne.n	8001c7e <HAL_DMA_Start_IT+0x72>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c2c:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001c30:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c32:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8001c34:	6826      	ldr	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001c36:	6c07      	ldr	r7, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 8001c38:	f026 0601 	bic.w	r6, r6, #1
 8001c3c:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001c3e:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 8001c40:	40bd      	lsls	r5, r7
 8001c42:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001c44:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c46:	6843      	ldr	r3, [r0, #4]
 8001c48:	6805      	ldr	r5, [r0, #0]
 8001c4a:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8001c4c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001c4e:	bf0b      	itete	eq
 8001c50:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001c52:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001c54:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001c56:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8001c58:	b14b      	cbz	r3, 8001c6e <HAL_DMA_Start_IT+0x62>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c5a:	6823      	ldr	r3, [r4, #0]
 8001c5c:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001c60:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8001c62:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c64:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8001c66:	f043 0301 	orr.w	r3, r3, #1
 8001c6a:	602b      	str	r3, [r5, #0]
 8001c6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c6e:	6823      	ldr	r3, [r4, #0]
 8001c70:	f023 0304 	bic.w	r3, r3, #4
 8001c74:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001c76:	6823      	ldr	r3, [r4, #0]
 8001c78:	f043 030a 	orr.w	r3, r3, #10
 8001c7c:	e7f0      	b.n	8001c60 <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 8001c7e:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 8001c82:	2002      	movs	r0, #2
}
 8001c84:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001c88 <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c88:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 8001c8c:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d003      	beq.n	8001c9a <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c92:	2304      	movs	r3, #4
 8001c94:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8001c96:	2001      	movs	r0, #1
 8001c98:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c9a:	6803      	ldr	r3, [r0, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	f022 020e 	bic.w	r2, r2, #14
 8001ca2:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	f022 0201 	bic.w	r2, r2, #1
 8001caa:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001cac:	4a29      	ldr	r2, [pc, #164]	; (8001d54 <HAL_DMA_Abort_IT+0xcc>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d924      	bls.n	8001cfc <HAL_DMA_Abort_IT+0x74>
 8001cb2:	f502 7262 	add.w	r2, r2, #904	; 0x388
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d019      	beq.n	8001cee <HAL_DMA_Abort_IT+0x66>
 8001cba:	3214      	adds	r2, #20
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d018      	beq.n	8001cf2 <HAL_DMA_Abort_IT+0x6a>
 8001cc0:	3214      	adds	r2, #20
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d017      	beq.n	8001cf6 <HAL_DMA_Abort_IT+0x6e>
 8001cc6:	3214      	adds	r2, #20
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	bf0c      	ite	eq
 8001ccc:	f44f 5380 	moveq.w	r3, #4096	; 0x1000
 8001cd0:	f44f 3380 	movne.w	r3, #65536	; 0x10000
 8001cd4:	4a20      	ldr	r2, [pc, #128]	; (8001d58 <HAL_DMA_Abort_IT+0xd0>)
 8001cd6:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001cd8:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 8001cda:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 8001cdc:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    if(hdma->XferAbortCallback != NULL)
 8001ce0:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 8001ce2:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8001ce6:	b39b      	cbz	r3, 8001d50 <HAL_DMA_Abort_IT+0xc8>
      hdma->XferAbortCallback(hdma);
 8001ce8:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001cea:	4620      	mov	r0, r4
 8001cec:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e7f0      	b.n	8001cd4 <HAL_DMA_Abort_IT+0x4c>
 8001cf2:	2310      	movs	r3, #16
 8001cf4:	e7ee      	b.n	8001cd4 <HAL_DMA_Abort_IT+0x4c>
 8001cf6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cfa:	e7eb      	b.n	8001cd4 <HAL_DMA_Abort_IT+0x4c>
 8001cfc:	4917      	ldr	r1, [pc, #92]	; (8001d5c <HAL_DMA_Abort_IT+0xd4>)
 8001cfe:	428b      	cmp	r3, r1
 8001d00:	d016      	beq.n	8001d30 <HAL_DMA_Abort_IT+0xa8>
 8001d02:	3114      	adds	r1, #20
 8001d04:	428b      	cmp	r3, r1
 8001d06:	d015      	beq.n	8001d34 <HAL_DMA_Abort_IT+0xac>
 8001d08:	3114      	adds	r1, #20
 8001d0a:	428b      	cmp	r3, r1
 8001d0c:	d014      	beq.n	8001d38 <HAL_DMA_Abort_IT+0xb0>
 8001d0e:	3114      	adds	r1, #20
 8001d10:	428b      	cmp	r3, r1
 8001d12:	d014      	beq.n	8001d3e <HAL_DMA_Abort_IT+0xb6>
 8001d14:	3114      	adds	r1, #20
 8001d16:	428b      	cmp	r3, r1
 8001d18:	d014      	beq.n	8001d44 <HAL_DMA_Abort_IT+0xbc>
 8001d1a:	3114      	adds	r1, #20
 8001d1c:	428b      	cmp	r3, r1
 8001d1e:	d014      	beq.n	8001d4a <HAL_DMA_Abort_IT+0xc2>
 8001d20:	4293      	cmp	r3, r2
 8001d22:	bf14      	ite	ne
 8001d24:	f44f 3380 	movne.w	r3, #65536	; 0x10000
 8001d28:	f04f 7380 	moveq.w	r3, #16777216	; 0x1000000
 8001d2c:	4a0c      	ldr	r2, [pc, #48]	; (8001d60 <HAL_DMA_Abort_IT+0xd8>)
 8001d2e:	e7d2      	b.n	8001cd6 <HAL_DMA_Abort_IT+0x4e>
 8001d30:	2301      	movs	r3, #1
 8001d32:	e7fb      	b.n	8001d2c <HAL_DMA_Abort_IT+0xa4>
 8001d34:	2310      	movs	r3, #16
 8001d36:	e7f9      	b.n	8001d2c <HAL_DMA_Abort_IT+0xa4>
 8001d38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d3c:	e7f6      	b.n	8001d2c <HAL_DMA_Abort_IT+0xa4>
 8001d3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d42:	e7f3      	b.n	8001d2c <HAL_DMA_Abort_IT+0xa4>
 8001d44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d48:	e7f0      	b.n	8001d2c <HAL_DMA_Abort_IT+0xa4>
 8001d4a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001d4e:	e7ed      	b.n	8001d2c <HAL_DMA_Abort_IT+0xa4>
  HAL_StatusTypeDef status = HAL_OK;
 8001d50:	4618      	mov	r0, r3
}
 8001d52:	bd10      	pop	{r4, pc}
 8001d54:	40020080 	.word	0x40020080
 8001d58:	40020400 	.word	0x40020400
 8001d5c:	40020008 	.word	0x40020008
 8001d60:	40020000 	.word	0x40020000

08001d64 <HAL_DMA_IRQHandler>:
{
 8001d64:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001d66:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001d68:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001d6a:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001d6c:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001d6e:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001d70:	4095      	lsls	r5, r2
 8001d72:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8001d74:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001d76:	d055      	beq.n	8001e24 <HAL_DMA_IRQHandler+0xc0>
 8001d78:	074d      	lsls	r5, r1, #29
 8001d7a:	d553      	bpl.n	8001e24 <HAL_DMA_IRQHandler+0xc0>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d80:	bf5e      	ittt	pl
 8001d82:	681a      	ldrpl	r2, [r3, #0]
 8001d84:	f022 0204 	bicpl.w	r2, r2, #4
 8001d88:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001d8a:	4a60      	ldr	r2, [pc, #384]	; (8001f0c <HAL_DMA_IRQHandler+0x1a8>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d91f      	bls.n	8001dd0 <HAL_DMA_IRQHandler+0x6c>
 8001d90:	f502 7262 	add.w	r2, r2, #904	; 0x388
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d014      	beq.n	8001dc2 <HAL_DMA_IRQHandler+0x5e>
 8001d98:	3214      	adds	r2, #20
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d013      	beq.n	8001dc6 <HAL_DMA_IRQHandler+0x62>
 8001d9e:	3214      	adds	r2, #20
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d012      	beq.n	8001dca <HAL_DMA_IRQHandler+0x66>
 8001da4:	3214      	adds	r2, #20
 8001da6:	4293      	cmp	r3, r2
 8001da8:	bf0c      	ite	eq
 8001daa:	f44f 4380 	moveq.w	r3, #16384	; 0x4000
 8001dae:	f44f 2380 	movne.w	r3, #262144	; 0x40000
 8001db2:	4a57      	ldr	r2, [pc, #348]	; (8001f10 <HAL_DMA_IRQHandler+0x1ac>)
 8001db4:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8001db6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	f000 80a5 	beq.w	8001f08 <HAL_DMA_IRQHandler+0x1a4>
}
 8001dbe:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8001dc0:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001dc2:	2304      	movs	r3, #4
 8001dc4:	e7f5      	b.n	8001db2 <HAL_DMA_IRQHandler+0x4e>
 8001dc6:	2340      	movs	r3, #64	; 0x40
 8001dc8:	e7f3      	b.n	8001db2 <HAL_DMA_IRQHandler+0x4e>
 8001dca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001dce:	e7f0      	b.n	8001db2 <HAL_DMA_IRQHandler+0x4e>
 8001dd0:	4950      	ldr	r1, [pc, #320]	; (8001f14 <HAL_DMA_IRQHandler+0x1b0>)
 8001dd2:	428b      	cmp	r3, r1
 8001dd4:	d016      	beq.n	8001e04 <HAL_DMA_IRQHandler+0xa0>
 8001dd6:	3114      	adds	r1, #20
 8001dd8:	428b      	cmp	r3, r1
 8001dda:	d015      	beq.n	8001e08 <HAL_DMA_IRQHandler+0xa4>
 8001ddc:	3114      	adds	r1, #20
 8001dde:	428b      	cmp	r3, r1
 8001de0:	d014      	beq.n	8001e0c <HAL_DMA_IRQHandler+0xa8>
 8001de2:	3114      	adds	r1, #20
 8001de4:	428b      	cmp	r3, r1
 8001de6:	d014      	beq.n	8001e12 <HAL_DMA_IRQHandler+0xae>
 8001de8:	3114      	adds	r1, #20
 8001dea:	428b      	cmp	r3, r1
 8001dec:	d014      	beq.n	8001e18 <HAL_DMA_IRQHandler+0xb4>
 8001dee:	3114      	adds	r1, #20
 8001df0:	428b      	cmp	r3, r1
 8001df2:	d014      	beq.n	8001e1e <HAL_DMA_IRQHandler+0xba>
 8001df4:	4293      	cmp	r3, r2
 8001df6:	bf14      	ite	ne
 8001df8:	f44f 2380 	movne.w	r3, #262144	; 0x40000
 8001dfc:	f04f 6380 	moveq.w	r3, #67108864	; 0x4000000
 8001e00:	4a45      	ldr	r2, [pc, #276]	; (8001f18 <HAL_DMA_IRQHandler+0x1b4>)
 8001e02:	e7d7      	b.n	8001db4 <HAL_DMA_IRQHandler+0x50>
 8001e04:	2304      	movs	r3, #4
 8001e06:	e7fb      	b.n	8001e00 <HAL_DMA_IRQHandler+0x9c>
 8001e08:	2340      	movs	r3, #64	; 0x40
 8001e0a:	e7f9      	b.n	8001e00 <HAL_DMA_IRQHandler+0x9c>
 8001e0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e10:	e7f6      	b.n	8001e00 <HAL_DMA_IRQHandler+0x9c>
 8001e12:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e16:	e7f3      	b.n	8001e00 <HAL_DMA_IRQHandler+0x9c>
 8001e18:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001e1c:	e7f0      	b.n	8001e00 <HAL_DMA_IRQHandler+0x9c>
 8001e1e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e22:	e7ed      	b.n	8001e00 <HAL_DMA_IRQHandler+0x9c>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001e24:	2502      	movs	r5, #2
 8001e26:	4095      	lsls	r5, r2
 8001e28:	4225      	tst	r5, r4
 8001e2a:	d057      	beq.n	8001edc <HAL_DMA_IRQHandler+0x178>
 8001e2c:	078d      	lsls	r5, r1, #30
 8001e2e:	d555      	bpl.n	8001edc <HAL_DMA_IRQHandler+0x178>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	0694      	lsls	r4, r2, #26
 8001e34:	d406      	bmi.n	8001e44 <HAL_DMA_IRQHandler+0xe0>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	f022 020a 	bic.w	r2, r2, #10
 8001e3c:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001e3e:	2201      	movs	r2, #1
 8001e40:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001e44:	4a31      	ldr	r2, [pc, #196]	; (8001f0c <HAL_DMA_IRQHandler+0x1a8>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d91e      	bls.n	8001e88 <HAL_DMA_IRQHandler+0x124>
 8001e4a:	f502 7262 	add.w	r2, r2, #904	; 0x388
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d013      	beq.n	8001e7a <HAL_DMA_IRQHandler+0x116>
 8001e52:	3214      	adds	r2, #20
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d012      	beq.n	8001e7e <HAL_DMA_IRQHandler+0x11a>
 8001e58:	3214      	adds	r2, #20
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d011      	beq.n	8001e82 <HAL_DMA_IRQHandler+0x11e>
 8001e5e:	3214      	adds	r2, #20
 8001e60:	4293      	cmp	r3, r2
 8001e62:	bf0c      	ite	eq
 8001e64:	f44f 5300 	moveq.w	r3, #8192	; 0x2000
 8001e68:	f44f 3300 	movne.w	r3, #131072	; 0x20000
 8001e6c:	4a28      	ldr	r2, [pc, #160]	; (8001f10 <HAL_DMA_IRQHandler+0x1ac>)
 8001e6e:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8001e70:	2300      	movs	r3, #0
 8001e72:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8001e76:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001e78:	e79e      	b.n	8001db8 <HAL_DMA_IRQHandler+0x54>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	e7f6      	b.n	8001e6c <HAL_DMA_IRQHandler+0x108>
 8001e7e:	2320      	movs	r3, #32
 8001e80:	e7f4      	b.n	8001e6c <HAL_DMA_IRQHandler+0x108>
 8001e82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e86:	e7f1      	b.n	8001e6c <HAL_DMA_IRQHandler+0x108>
 8001e88:	4922      	ldr	r1, [pc, #136]	; (8001f14 <HAL_DMA_IRQHandler+0x1b0>)
 8001e8a:	428b      	cmp	r3, r1
 8001e8c:	d016      	beq.n	8001ebc <HAL_DMA_IRQHandler+0x158>
 8001e8e:	3114      	adds	r1, #20
 8001e90:	428b      	cmp	r3, r1
 8001e92:	d015      	beq.n	8001ec0 <HAL_DMA_IRQHandler+0x15c>
 8001e94:	3114      	adds	r1, #20
 8001e96:	428b      	cmp	r3, r1
 8001e98:	d014      	beq.n	8001ec4 <HAL_DMA_IRQHandler+0x160>
 8001e9a:	3114      	adds	r1, #20
 8001e9c:	428b      	cmp	r3, r1
 8001e9e:	d014      	beq.n	8001eca <HAL_DMA_IRQHandler+0x166>
 8001ea0:	3114      	adds	r1, #20
 8001ea2:	428b      	cmp	r3, r1
 8001ea4:	d014      	beq.n	8001ed0 <HAL_DMA_IRQHandler+0x16c>
 8001ea6:	3114      	adds	r1, #20
 8001ea8:	428b      	cmp	r3, r1
 8001eaa:	d014      	beq.n	8001ed6 <HAL_DMA_IRQHandler+0x172>
 8001eac:	4293      	cmp	r3, r2
 8001eae:	bf14      	ite	ne
 8001eb0:	f44f 3300 	movne.w	r3, #131072	; 0x20000
 8001eb4:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8001eb8:	4a17      	ldr	r2, [pc, #92]	; (8001f18 <HAL_DMA_IRQHandler+0x1b4>)
 8001eba:	e7d8      	b.n	8001e6e <HAL_DMA_IRQHandler+0x10a>
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	e7fb      	b.n	8001eb8 <HAL_DMA_IRQHandler+0x154>
 8001ec0:	2320      	movs	r3, #32
 8001ec2:	e7f9      	b.n	8001eb8 <HAL_DMA_IRQHandler+0x154>
 8001ec4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ec8:	e7f6      	b.n	8001eb8 <HAL_DMA_IRQHandler+0x154>
 8001eca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ece:	e7f3      	b.n	8001eb8 <HAL_DMA_IRQHandler+0x154>
 8001ed0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ed4:	e7f0      	b.n	8001eb8 <HAL_DMA_IRQHandler+0x154>
 8001ed6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001eda:	e7ed      	b.n	8001eb8 <HAL_DMA_IRQHandler+0x154>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001edc:	2508      	movs	r5, #8
 8001ede:	4095      	lsls	r5, r2
 8001ee0:	4225      	tst	r5, r4
 8001ee2:	d011      	beq.n	8001f08 <HAL_DMA_IRQHandler+0x1a4>
 8001ee4:	0709      	lsls	r1, r1, #28
 8001ee6:	d50f      	bpl.n	8001f08 <HAL_DMA_IRQHandler+0x1a4>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ee8:	6819      	ldr	r1, [r3, #0]
 8001eea:	f021 010e 	bic.w	r1, r1, #14
 8001eee:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	fa03 f202 	lsl.w	r2, r3, r2
 8001ef6:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001ef8:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8001efa:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8001efe:	2300      	movs	r3, #0
 8001f00:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8001f04:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001f06:	e757      	b.n	8001db8 <HAL_DMA_IRQHandler+0x54>
}
 8001f08:	bc70      	pop	{r4, r5, r6}
 8001f0a:	4770      	bx	lr
 8001f0c:	40020080 	.word	0x40020080
 8001f10:	40020400 	.word	0x40020400
 8001f14:	40020008 	.word	0x40020008
 8001f18:	40020000 	.word	0x40020000

08001f1c <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001f1c:	4a11      	ldr	r2, [pc, #68]	; (8001f64 <FLASH_SetErrorCode+0x48>)
 8001f1e:	68d3      	ldr	r3, [r2, #12]
 8001f20:	f013 0310 	ands.w	r3, r3, #16
 8001f24:	d005      	beq.n	8001f32 <FLASH_SetErrorCode+0x16>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001f26:	4910      	ldr	r1, [pc, #64]	; (8001f68 <FLASH_SetErrorCode+0x4c>)
 8001f28:	69cb      	ldr	r3, [r1, #28]
 8001f2a:	f043 0302 	orr.w	r3, r3, #2
 8001f2e:	61cb      	str	r3, [r1, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8001f30:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001f32:	68d2      	ldr	r2, [r2, #12]
 8001f34:	0750      	lsls	r0, r2, #29
 8001f36:	d506      	bpl.n	8001f46 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001f38:	490b      	ldr	r1, [pc, #44]	; (8001f68 <FLASH_SetErrorCode+0x4c>)
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8001f3a:	f043 0304 	orr.w	r3, r3, #4
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001f3e:	69ca      	ldr	r2, [r1, #28]
 8001f40:	f042 0201 	orr.w	r2, r2, #1
 8001f44:	61ca      	str	r2, [r1, #28]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8001f46:	4a07      	ldr	r2, [pc, #28]	; (8001f64 <FLASH_SetErrorCode+0x48>)
 8001f48:	69d1      	ldr	r1, [r2, #28]
 8001f4a:	07c9      	lsls	r1, r1, #31
 8001f4c:	d508      	bpl.n	8001f60 <FLASH_SetErrorCode+0x44>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8001f4e:	4806      	ldr	r0, [pc, #24]	; (8001f68 <FLASH_SetErrorCode+0x4c>)
 8001f50:	69c1      	ldr	r1, [r0, #28]
 8001f52:	f041 0104 	orr.w	r1, r1, #4
 8001f56:	61c1      	str	r1, [r0, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001f58:	69d1      	ldr	r1, [r2, #28]
 8001f5a:	f021 0101 	bic.w	r1, r1, #1
 8001f5e:	61d1      	str	r1, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001f60:	60d3      	str	r3, [r2, #12]
 8001f62:	4770      	bx	lr
 8001f64:	40022000 	.word	0x40022000
 8001f68:	200052e0 	.word	0x200052e0

08001f6c <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001f6c:	4b06      	ldr	r3, [pc, #24]	; (8001f88 <HAL_FLASH_Unlock+0x1c>)
 8001f6e:	6918      	ldr	r0, [r3, #16]
 8001f70:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001f74:	d007      	beq.n	8001f86 <HAL_FLASH_Unlock+0x1a>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001f76:	4a05      	ldr	r2, [pc, #20]	; (8001f8c <HAL_FLASH_Unlock+0x20>)
 8001f78:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001f7a:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8001f7e:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001f80:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 8001f82:	f3c0 10c0 	ubfx	r0, r0, #7, #1
}
 8001f86:	4770      	bx	lr
 8001f88:	40022000 	.word	0x40022000
 8001f8c:	45670123 	.word	0x45670123

08001f90 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001f90:	4a03      	ldr	r2, [pc, #12]	; (8001fa0 <HAL_FLASH_Lock+0x10>)
}
 8001f92:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001f94:	6913      	ldr	r3, [r2, #16]
 8001f96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f9a:	6113      	str	r3, [r2, #16]
}
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	40022000 	.word	0x40022000

08001fa4 <FLASH_WaitForLastOperation>:
{
 8001fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fa6:	4606      	mov	r6, r0
  uint32_t tickstart = HAL_GetTick();
 8001fa8:	f7ff fa34 	bl	8001414 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001fac:	4c11      	ldr	r4, [pc, #68]	; (8001ff4 <FLASH_WaitForLastOperation+0x50>)
  uint32_t tickstart = HAL_GetTick();
 8001fae:	4607      	mov	r7, r0
 8001fb0:	4625      	mov	r5, r4
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001fb2:	68e3      	ldr	r3, [r4, #12]
 8001fb4:	07d8      	lsls	r0, r3, #31
 8001fb6:	d412      	bmi.n	8001fde <FLASH_WaitForLastOperation+0x3a>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001fb8:	68e3      	ldr	r3, [r4, #12]
 8001fba:	0699      	lsls	r1, r3, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001fbc:	bf44      	itt	mi
 8001fbe:	2320      	movmi	r3, #32
 8001fc0:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001fc2:	68eb      	ldr	r3, [r5, #12]
 8001fc4:	06da      	lsls	r2, r3, #27
 8001fc6:	d406      	bmi.n	8001fd6 <FLASH_WaitForLastOperation+0x32>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001fc8:	69eb      	ldr	r3, [r5, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001fca:	07db      	lsls	r3, r3, #31
 8001fcc:	d403      	bmi.n	8001fd6 <FLASH_WaitForLastOperation+0x32>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001fce:	68e8      	ldr	r0, [r5, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001fd0:	f010 0004 	ands.w	r0, r0, #4
 8001fd4:	d002      	beq.n	8001fdc <FLASH_WaitForLastOperation+0x38>
    FLASH_SetErrorCode();
 8001fd6:	f7ff ffa1 	bl	8001f1c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001fda:	2001      	movs	r0, #1
}
 8001fdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001fde:	1c73      	adds	r3, r6, #1
 8001fe0:	d0e7      	beq.n	8001fb2 <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001fe2:	b90e      	cbnz	r6, 8001fe8 <FLASH_WaitForLastOperation+0x44>
        return HAL_TIMEOUT;
 8001fe4:	2003      	movs	r0, #3
 8001fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001fe8:	f7ff fa14 	bl	8001414 <HAL_GetTick>
 8001fec:	1bc0      	subs	r0, r0, r7
 8001fee:	4286      	cmp	r6, r0
 8001ff0:	d2df      	bcs.n	8001fb2 <FLASH_WaitForLastOperation+0xe>
 8001ff2:	e7f7      	b.n	8001fe4 <FLASH_WaitForLastOperation+0x40>
 8001ff4:	40022000 	.word	0x40022000

08001ff8 <HAL_FLASH_Program>:
{
 8001ff8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_LOCK(&pFlash);
 8001ffc:	4c1f      	ldr	r4, [pc, #124]	; (800207c <HAL_FLASH_Program+0x84>)
{
 8001ffe:	4699      	mov	r9, r3
  __HAL_LOCK(&pFlash);
 8002000:	7e23      	ldrb	r3, [r4, #24]
{
 8002002:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 8002004:	2b01      	cmp	r3, #1
{
 8002006:	460f      	mov	r7, r1
 8002008:	4690      	mov	r8, r2
  __HAL_LOCK(&pFlash);
 800200a:	d033      	beq.n	8002074 <HAL_FLASH_Program+0x7c>
 800200c:	2301      	movs	r3, #1
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800200e:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 8002012:	7623      	strb	r3, [r4, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002014:	f7ff ffc6 	bl	8001fa4 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8002018:	bb40      	cbnz	r0, 800206c <HAL_FLASH_Program+0x74>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800201a:	2d01      	cmp	r5, #1
 800201c:	d003      	beq.n	8002026 <HAL_FLASH_Program+0x2e>
      nbiterations = 4U;
 800201e:	2d02      	cmp	r5, #2
 8002020:	bf0c      	ite	eq
 8002022:	2502      	moveq	r5, #2
 8002024:	2504      	movne	r5, #4
 8002026:	2600      	movs	r6, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002028:	46b2      	mov	sl, r6
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800202a:	f8df b054 	ldr.w	fp, [pc, #84]	; 8002080 <HAL_FLASH_Program+0x88>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800202e:	0132      	lsls	r2, r6, #4
 8002030:	4640      	mov	r0, r8
 8002032:	4649      	mov	r1, r9
 8002034:	f7fe f904 	bl	8000240 <__aeabi_llsr>
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002038:	f8c4 a01c 	str.w	sl, [r4, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800203c:	f8db 3010 	ldr.w	r3, [fp, #16]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8002040:	b280      	uxth	r0, r0
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002042:	f043 0301 	orr.w	r3, r3, #1
 8002046:	f8cb 3010 	str.w	r3, [fp, #16]
  *(__IO uint16_t*)Address = Data;
 800204a:	f827 0016 	strh.w	r0, [r7, r6, lsl #1]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800204e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002052:	f7ff ffa7 	bl	8001fa4 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002056:	f8db 3010 	ldr.w	r3, [fp, #16]
 800205a:	f023 0301 	bic.w	r3, r3, #1
 800205e:	f8cb 3010 	str.w	r3, [fp, #16]
      if (status != HAL_OK)
 8002062:	b918      	cbnz	r0, 800206c <HAL_FLASH_Program+0x74>
 8002064:	3601      	adds	r6, #1
    for (index = 0U; index < nbiterations; index++)
 8002066:	b2f3      	uxtb	r3, r6
 8002068:	429d      	cmp	r5, r3
 800206a:	d8e0      	bhi.n	800202e <HAL_FLASH_Program+0x36>
  __HAL_UNLOCK(&pFlash);
 800206c:	2300      	movs	r3, #0
 800206e:	7623      	strb	r3, [r4, #24]
  return status;
 8002070:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(&pFlash);
 8002074:	2002      	movs	r0, #2
}
 8002076:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800207a:	bf00      	nop
 800207c:	200052e0 	.word	0x200052e0
 8002080:	40022000 	.word	0x40022000

08002084 <FLASH_MassErase.isra.0>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002084:	2200      	movs	r2, #0
 8002086:	4b06      	ldr	r3, [pc, #24]	; (80020a0 <FLASH_MassErase.isra.0+0x1c>)
 8002088:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800208a:	4b06      	ldr	r3, [pc, #24]	; (80020a4 <FLASH_MassErase.isra.0+0x20>)
 800208c:	691a      	ldr	r2, [r3, #16]
 800208e:	f042 0204 	orr.w	r2, r2, #4
 8002092:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002094:	691a      	ldr	r2, [r3, #16]
 8002096:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800209a:	611a      	str	r2, [r3, #16]
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	200052e0 	.word	0x200052e0
 80020a4:	40022000 	.word	0x40022000

080020a8 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80020a8:	2200      	movs	r2, #0
 80020aa:	4b06      	ldr	r3, [pc, #24]	; (80020c4 <FLASH_PageErase+0x1c>)
 80020ac:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80020ae:	4b06      	ldr	r3, [pc, #24]	; (80020c8 <FLASH_PageErase+0x20>)
 80020b0:	691a      	ldr	r2, [r3, #16]
 80020b2:	f042 0202 	orr.w	r2, r2, #2
 80020b6:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80020b8:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80020ba:	691a      	ldr	r2, [r3, #16]
 80020bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020c0:	611a      	str	r2, [r3, #16]
 80020c2:	4770      	bx	lr
 80020c4:	200052e0 	.word	0x200052e0
 80020c8:	40022000 	.word	0x40022000

080020cc <HAL_FLASHEx_Erase>:
{
 80020cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 80020d0:	4d23      	ldr	r5, [pc, #140]	; (8002160 <HAL_FLASHEx_Erase+0x94>)
{
 80020d2:	4607      	mov	r7, r0
  __HAL_LOCK(&pFlash);
 80020d4:	7e2b      	ldrb	r3, [r5, #24]
{
 80020d6:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d03d      	beq.n	8002158 <HAL_FLASHEx_Erase+0x8c>
 80020dc:	2401      	movs	r4, #1
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80020de:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(&pFlash);
 80020e0:	762c      	strb	r4, [r5, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80020e2:	2b02      	cmp	r3, #2
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80020e4:	f24c 3050 	movw	r0, #50000	; 0xc350
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80020e8:	d113      	bne.n	8002112 <HAL_FLASHEx_Erase+0x46>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80020ea:	f7ff ff5b 	bl	8001fa4 <FLASH_WaitForLastOperation>
 80020ee:	b120      	cbz	r0, 80020fa <HAL_FLASHEx_Erase+0x2e>
  HAL_StatusTypeDef status = HAL_ERROR;
 80020f0:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 80020f2:	2300      	movs	r3, #0
 80020f4:	762b      	strb	r3, [r5, #24]
  return status;
 80020f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        FLASH_MassErase(FLASH_BANK_1);
 80020fa:	f7ff ffc3 	bl	8002084 <FLASH_MassErase.isra.0>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80020fe:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002102:	f7ff ff4f 	bl	8001fa4 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002106:	4a17      	ldr	r2, [pc, #92]	; (8002164 <HAL_FLASHEx_Erase+0x98>)
 8002108:	6913      	ldr	r3, [r2, #16]
 800210a:	f023 0304 	bic.w	r3, r3, #4
 800210e:	6113      	str	r3, [r2, #16]
 8002110:	e7ef      	b.n	80020f2 <HAL_FLASHEx_Erase+0x26>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002112:	f7ff ff47 	bl	8001fa4 <FLASH_WaitForLastOperation>
 8002116:	2800      	cmp	r0, #0
 8002118:	d1ea      	bne.n	80020f0 <HAL_FLASHEx_Erase+0x24>
        *PageError = 0xFFFFFFFFU;
 800211a:	f04f 33ff 	mov.w	r3, #4294967295
 800211e:	f8c8 3000 	str.w	r3, [r8]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002122:	4620      	mov	r0, r4
        for(address = pEraseInit->PageAddress;
 8002124:	68be      	ldr	r6, [r7, #8]
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002126:	4c0f      	ldr	r4, [pc, #60]	; (8002164 <HAL_FLASHEx_Erase+0x98>)
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8002128:	68fa      	ldr	r2, [r7, #12]
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	eb03 23c2 	add.w	r3, r3, r2, lsl #11
        for(address = pEraseInit->PageAddress;
 8002130:	429e      	cmp	r6, r3
 8002132:	d2de      	bcs.n	80020f2 <HAL_FLASHEx_Erase+0x26>
          FLASH_PageErase(address);
 8002134:	4630      	mov	r0, r6
 8002136:	f7ff ffb7 	bl	80020a8 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800213a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800213e:	f7ff ff31 	bl	8001fa4 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002142:	6923      	ldr	r3, [r4, #16]
 8002144:	f023 0302 	bic.w	r3, r3, #2
 8002148:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 800214a:	b110      	cbz	r0, 8002152 <HAL_FLASHEx_Erase+0x86>
            *PageError = address;
 800214c:	f8c8 6000 	str.w	r6, [r8]
            break;
 8002150:	e7cf      	b.n	80020f2 <HAL_FLASHEx_Erase+0x26>
            address += FLASH_PAGE_SIZE)
 8002152:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8002156:	e7e7      	b.n	8002128 <HAL_FLASHEx_Erase+0x5c>
  __HAL_LOCK(&pFlash);
 8002158:	2002      	movs	r0, #2
}
 800215a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800215e:	bf00      	nop
 8002160:	200052e0 	.word	0x200052e0
 8002164:	40022000 	.word	0x40022000

08002168 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002168:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 800216c:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 800216e:	4616      	mov	r6, r2
 8002170:	4b65      	ldr	r3, [pc, #404]	; (8002308 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002172:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8002318 <HAL_GPIO_Init+0x1b0>
 8002176:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 800231c <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 800217a:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800217e:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8002180:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002184:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8002188:	45a0      	cmp	r8, r4
 800218a:	d17f      	bne.n	800228c <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 800218c:	684d      	ldr	r5, [r1, #4]
 800218e:	2d12      	cmp	r5, #18
 8002190:	f000 80af 	beq.w	80022f2 <HAL_GPIO_Init+0x18a>
 8002194:	f200 8088 	bhi.w	80022a8 <HAL_GPIO_Init+0x140>
 8002198:	2d02      	cmp	r5, #2
 800219a:	f000 80a7 	beq.w	80022ec <HAL_GPIO_Init+0x184>
 800219e:	d87c      	bhi.n	800229a <HAL_GPIO_Init+0x132>
 80021a0:	2d00      	cmp	r5, #0
 80021a2:	f000 808e 	beq.w	80022c2 <HAL_GPIO_Init+0x15a>
 80021a6:	2d01      	cmp	r5, #1
 80021a8:	f000 809e 	beq.w	80022e8 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80021ac:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80021b0:	2cff      	cmp	r4, #255	; 0xff
 80021b2:	bf93      	iteet	ls
 80021b4:	4682      	movls	sl, r0
 80021b6:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 80021ba:	3d08      	subhi	r5, #8
 80021bc:	f8d0 b000 	ldrls.w	fp, [r0]
 80021c0:	bf92      	itee	ls
 80021c2:	00b5      	lslls	r5, r6, #2
 80021c4:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 80021c8:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80021ca:	fa09 f805 	lsl.w	r8, r9, r5
 80021ce:	ea2b 0808 	bic.w	r8, fp, r8
 80021d2:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80021d6:	bf88      	it	hi
 80021d8:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80021dc:	ea48 0505 	orr.w	r5, r8, r5
 80021e0:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021e4:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80021e8:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80021ec:	d04e      	beq.n	800228c <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80021ee:	4d47      	ldr	r5, [pc, #284]	; (800230c <HAL_GPIO_Init+0x1a4>)
 80021f0:	4f46      	ldr	r7, [pc, #280]	; (800230c <HAL_GPIO_Init+0x1a4>)
 80021f2:	69ad      	ldr	r5, [r5, #24]
 80021f4:	f026 0803 	bic.w	r8, r6, #3
 80021f8:	f045 0501 	orr.w	r5, r5, #1
 80021fc:	61bd      	str	r5, [r7, #24]
 80021fe:	69bd      	ldr	r5, [r7, #24]
 8002200:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8002204:	f005 0501 	and.w	r5, r5, #1
 8002208:	9501      	str	r5, [sp, #4]
 800220a:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800220e:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002212:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8002214:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8002218:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800221c:	fa09 f90b 	lsl.w	r9, r9, fp
 8002220:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002224:	4d3a      	ldr	r5, [pc, #232]	; (8002310 <HAL_GPIO_Init+0x1a8>)
 8002226:	42a8      	cmp	r0, r5
 8002228:	d068      	beq.n	80022fc <HAL_GPIO_Init+0x194>
 800222a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800222e:	42a8      	cmp	r0, r5
 8002230:	d066      	beq.n	8002300 <HAL_GPIO_Init+0x198>
 8002232:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002236:	42a8      	cmp	r0, r5
 8002238:	d064      	beq.n	8002304 <HAL_GPIO_Init+0x19c>
 800223a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800223e:	42a8      	cmp	r0, r5
 8002240:	bf0c      	ite	eq
 8002242:	2503      	moveq	r5, #3
 8002244:	2504      	movne	r5, #4
 8002246:	fa05 f50b 	lsl.w	r5, r5, fp
 800224a:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 800224e:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002252:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002254:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8002258:	bf14      	ite	ne
 800225a:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800225c:	43a5      	biceq	r5, r4
 800225e:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002260:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002262:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8002266:	bf14      	ite	ne
 8002268:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800226a:	43a5      	biceq	r5, r4
 800226c:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800226e:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002270:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8002274:	bf14      	ite	ne
 8002276:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002278:	43a5      	biceq	r5, r4
 800227a:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800227c:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800227e:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8002282:	bf14      	ite	ne
 8002284:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002286:	ea25 0404 	biceq.w	r4, r5, r4
 800228a:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 800228c:	3601      	adds	r6, #1
 800228e:	2e10      	cmp	r6, #16
 8002290:	f47f af73 	bne.w	800217a <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8002294:	b003      	add	sp, #12
 8002296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 800229a:	2d03      	cmp	r5, #3
 800229c:	d022      	beq.n	80022e4 <HAL_GPIO_Init+0x17c>
 800229e:	2d11      	cmp	r5, #17
 80022a0:	d184      	bne.n	80021ac <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80022a2:	68ca      	ldr	r2, [r1, #12]
 80022a4:	3204      	adds	r2, #4
          break;
 80022a6:	e781      	b.n	80021ac <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80022a8:	4f1a      	ldr	r7, [pc, #104]	; (8002314 <HAL_GPIO_Init+0x1ac>)
 80022aa:	42bd      	cmp	r5, r7
 80022ac:	d009      	beq.n	80022c2 <HAL_GPIO_Init+0x15a>
 80022ae:	d812      	bhi.n	80022d6 <HAL_GPIO_Init+0x16e>
 80022b0:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8002320 <HAL_GPIO_Init+0x1b8>
 80022b4:	454d      	cmp	r5, r9
 80022b6:	d004      	beq.n	80022c2 <HAL_GPIO_Init+0x15a>
 80022b8:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80022bc:	454d      	cmp	r5, r9
 80022be:	f47f af75 	bne.w	80021ac <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80022c2:	688a      	ldr	r2, [r1, #8]
 80022c4:	b1c2      	cbz	r2, 80022f8 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80022c6:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 80022c8:	bf0c      	ite	eq
 80022ca:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 80022ce:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022d2:	2208      	movs	r2, #8
 80022d4:	e76a      	b.n	80021ac <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80022d6:	4575      	cmp	r5, lr
 80022d8:	d0f3      	beq.n	80022c2 <HAL_GPIO_Init+0x15a>
 80022da:	4565      	cmp	r5, ip
 80022dc:	d0f1      	beq.n	80022c2 <HAL_GPIO_Init+0x15a>
 80022de:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8002324 <HAL_GPIO_Init+0x1bc>
 80022e2:	e7eb      	b.n	80022bc <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80022e4:	2200      	movs	r2, #0
 80022e6:	e761      	b.n	80021ac <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80022e8:	68ca      	ldr	r2, [r1, #12]
          break;
 80022ea:	e75f      	b.n	80021ac <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80022ec:	68ca      	ldr	r2, [r1, #12]
 80022ee:	3208      	adds	r2, #8
          break;
 80022f0:	e75c      	b.n	80021ac <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80022f2:	68ca      	ldr	r2, [r1, #12]
 80022f4:	320c      	adds	r2, #12
          break;
 80022f6:	e759      	b.n	80021ac <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80022f8:	2204      	movs	r2, #4
 80022fa:	e757      	b.n	80021ac <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022fc:	2500      	movs	r5, #0
 80022fe:	e7a2      	b.n	8002246 <HAL_GPIO_Init+0xde>
 8002300:	2501      	movs	r5, #1
 8002302:	e7a0      	b.n	8002246 <HAL_GPIO_Init+0xde>
 8002304:	2502      	movs	r5, #2
 8002306:	e79e      	b.n	8002246 <HAL_GPIO_Init+0xde>
 8002308:	40010400 	.word	0x40010400
 800230c:	40021000 	.word	0x40021000
 8002310:	40010800 	.word	0x40010800
 8002314:	10210000 	.word	0x10210000
 8002318:	10310000 	.word	0x10310000
 800231c:	10320000 	.word	0x10320000
 8002320:	10110000 	.word	0x10110000
 8002324:	10220000 	.word	0x10220000

08002328 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002328:	6883      	ldr	r3, [r0, #8]
 800232a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800232c:	bf14      	ite	ne
 800232e:	2001      	movne	r0, #1
 8002330:	2000      	moveq	r0, #0
 8002332:	4770      	bx	lr

08002334 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002334:	b10a      	cbz	r2, 800233a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002336:	6101      	str	r1, [r0, #16]
 8002338:	4770      	bx	lr
 800233a:	0409      	lsls	r1, r1, #16
 800233c:	e7fb      	b.n	8002336 <HAL_GPIO_WritePin+0x2>
	...

08002340 <HAL_RCC_OscConfig>:
 8002340:	6803      	ldr	r3, [r0, #0]
 8002342:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002346:	07db      	lsls	r3, r3, #31
 8002348:	4605      	mov	r5, r0
 800234a:	d414      	bmi.n	8002376 <HAL_RCC_OscConfig+0x36>
 800234c:	682b      	ldr	r3, [r5, #0]
 800234e:	079f      	lsls	r7, r3, #30
 8002350:	d462      	bmi.n	8002418 <HAL_RCC_OscConfig+0xd8>
 8002352:	682b      	ldr	r3, [r5, #0]
 8002354:	0719      	lsls	r1, r3, #28
 8002356:	f100 8099 	bmi.w	800248c <HAL_RCC_OscConfig+0x14c>
 800235a:	682b      	ldr	r3, [r5, #0]
 800235c:	075a      	lsls	r2, r3, #29
 800235e:	f100 80c3 	bmi.w	80024e8 <HAL_RCC_OscConfig+0x1a8>
 8002362:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8002364:	2a00      	cmp	r2, #0
 8002366:	f040 8131 	bne.w	80025cc <HAL_RCC_OscConfig+0x28c>
 800236a:	6a2a      	ldr	r2, [r5, #32]
 800236c:	2a00      	cmp	r2, #0
 800236e:	f040 8184 	bne.w	800267a <HAL_RCC_OscConfig+0x33a>
 8002372:	2000      	movs	r0, #0
 8002374:	e014      	b.n	80023a0 <HAL_RCC_OscConfig+0x60>
 8002376:	4c90      	ldr	r4, [pc, #576]	; (80025b8 <HAL_RCC_OscConfig+0x278>)
 8002378:	6863      	ldr	r3, [r4, #4]
 800237a:	f003 030c 	and.w	r3, r3, #12
 800237e:	2b04      	cmp	r3, #4
 8002380:	d007      	beq.n	8002392 <HAL_RCC_OscConfig+0x52>
 8002382:	6863      	ldr	r3, [r4, #4]
 8002384:	f003 030c 	and.w	r3, r3, #12
 8002388:	2b08      	cmp	r3, #8
 800238a:	d10c      	bne.n	80023a6 <HAL_RCC_OscConfig+0x66>
 800238c:	6863      	ldr	r3, [r4, #4]
 800238e:	03de      	lsls	r6, r3, #15
 8002390:	d509      	bpl.n	80023a6 <HAL_RCC_OscConfig+0x66>
 8002392:	6823      	ldr	r3, [r4, #0]
 8002394:	039c      	lsls	r4, r3, #14
 8002396:	d5d9      	bpl.n	800234c <HAL_RCC_OscConfig+0xc>
 8002398:	68ab      	ldr	r3, [r5, #8]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d1d6      	bne.n	800234c <HAL_RCC_OscConfig+0xc>
 800239e:	2001      	movs	r0, #1
 80023a0:	b002      	add	sp, #8
 80023a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80023a6:	68ab      	ldr	r3, [r5, #8]
 80023a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023ac:	d110      	bne.n	80023d0 <HAL_RCC_OscConfig+0x90>
 80023ae:	6823      	ldr	r3, [r4, #0]
 80023b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023b4:	6023      	str	r3, [r4, #0]
 80023b6:	f7ff f82d 	bl	8001414 <HAL_GetTick>
 80023ba:	4606      	mov	r6, r0
 80023bc:	6823      	ldr	r3, [r4, #0]
 80023be:	0398      	lsls	r0, r3, #14
 80023c0:	d4c4      	bmi.n	800234c <HAL_RCC_OscConfig+0xc>
 80023c2:	f7ff f827 	bl	8001414 <HAL_GetTick>
 80023c6:	1b80      	subs	r0, r0, r6
 80023c8:	2864      	cmp	r0, #100	; 0x64
 80023ca:	d9f7      	bls.n	80023bc <HAL_RCC_OscConfig+0x7c>
 80023cc:	2003      	movs	r0, #3
 80023ce:	e7e7      	b.n	80023a0 <HAL_RCC_OscConfig+0x60>
 80023d0:	b99b      	cbnz	r3, 80023fa <HAL_RCC_OscConfig+0xba>
 80023d2:	6823      	ldr	r3, [r4, #0]
 80023d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023d8:	6023      	str	r3, [r4, #0]
 80023da:	6823      	ldr	r3, [r4, #0]
 80023dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023e0:	6023      	str	r3, [r4, #0]
 80023e2:	f7ff f817 	bl	8001414 <HAL_GetTick>
 80023e6:	4606      	mov	r6, r0
 80023e8:	6823      	ldr	r3, [r4, #0]
 80023ea:	0399      	lsls	r1, r3, #14
 80023ec:	d5ae      	bpl.n	800234c <HAL_RCC_OscConfig+0xc>
 80023ee:	f7ff f811 	bl	8001414 <HAL_GetTick>
 80023f2:	1b80      	subs	r0, r0, r6
 80023f4:	2864      	cmp	r0, #100	; 0x64
 80023f6:	d9f7      	bls.n	80023e8 <HAL_RCC_OscConfig+0xa8>
 80023f8:	e7e8      	b.n	80023cc <HAL_RCC_OscConfig+0x8c>
 80023fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023fe:	6823      	ldr	r3, [r4, #0]
 8002400:	d103      	bne.n	800240a <HAL_RCC_OscConfig+0xca>
 8002402:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002406:	6023      	str	r3, [r4, #0]
 8002408:	e7d1      	b.n	80023ae <HAL_RCC_OscConfig+0x6e>
 800240a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800240e:	6023      	str	r3, [r4, #0]
 8002410:	6823      	ldr	r3, [r4, #0]
 8002412:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002416:	e7cd      	b.n	80023b4 <HAL_RCC_OscConfig+0x74>
 8002418:	4c67      	ldr	r4, [pc, #412]	; (80025b8 <HAL_RCC_OscConfig+0x278>)
 800241a:	6863      	ldr	r3, [r4, #4]
 800241c:	f013 0f0c 	tst.w	r3, #12
 8002420:	d007      	beq.n	8002432 <HAL_RCC_OscConfig+0xf2>
 8002422:	6863      	ldr	r3, [r4, #4]
 8002424:	f003 030c 	and.w	r3, r3, #12
 8002428:	2b08      	cmp	r3, #8
 800242a:	d110      	bne.n	800244e <HAL_RCC_OscConfig+0x10e>
 800242c:	6863      	ldr	r3, [r4, #4]
 800242e:	03da      	lsls	r2, r3, #15
 8002430:	d40d      	bmi.n	800244e <HAL_RCC_OscConfig+0x10e>
 8002432:	6823      	ldr	r3, [r4, #0]
 8002434:	079b      	lsls	r3, r3, #30
 8002436:	d502      	bpl.n	800243e <HAL_RCC_OscConfig+0xfe>
 8002438:	696b      	ldr	r3, [r5, #20]
 800243a:	2b01      	cmp	r3, #1
 800243c:	d1af      	bne.n	800239e <HAL_RCC_OscConfig+0x5e>
 800243e:	6823      	ldr	r3, [r4, #0]
 8002440:	69aa      	ldr	r2, [r5, #24]
 8002442:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002446:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800244a:	6023      	str	r3, [r4, #0]
 800244c:	e781      	b.n	8002352 <HAL_RCC_OscConfig+0x12>
 800244e:	696a      	ldr	r2, [r5, #20]
 8002450:	4b5a      	ldr	r3, [pc, #360]	; (80025bc <HAL_RCC_OscConfig+0x27c>)
 8002452:	b16a      	cbz	r2, 8002470 <HAL_RCC_OscConfig+0x130>
 8002454:	2201      	movs	r2, #1
 8002456:	601a      	str	r2, [r3, #0]
 8002458:	f7fe ffdc 	bl	8001414 <HAL_GetTick>
 800245c:	4606      	mov	r6, r0
 800245e:	6823      	ldr	r3, [r4, #0]
 8002460:	079f      	lsls	r7, r3, #30
 8002462:	d4ec      	bmi.n	800243e <HAL_RCC_OscConfig+0xfe>
 8002464:	f7fe ffd6 	bl	8001414 <HAL_GetTick>
 8002468:	1b80      	subs	r0, r0, r6
 800246a:	2802      	cmp	r0, #2
 800246c:	d9f7      	bls.n	800245e <HAL_RCC_OscConfig+0x11e>
 800246e:	e7ad      	b.n	80023cc <HAL_RCC_OscConfig+0x8c>
 8002470:	601a      	str	r2, [r3, #0]
 8002472:	f7fe ffcf 	bl	8001414 <HAL_GetTick>
 8002476:	4606      	mov	r6, r0
 8002478:	6823      	ldr	r3, [r4, #0]
 800247a:	0798      	lsls	r0, r3, #30
 800247c:	f57f af69 	bpl.w	8002352 <HAL_RCC_OscConfig+0x12>
 8002480:	f7fe ffc8 	bl	8001414 <HAL_GetTick>
 8002484:	1b80      	subs	r0, r0, r6
 8002486:	2802      	cmp	r0, #2
 8002488:	d9f6      	bls.n	8002478 <HAL_RCC_OscConfig+0x138>
 800248a:	e79f      	b.n	80023cc <HAL_RCC_OscConfig+0x8c>
 800248c:	69ea      	ldr	r2, [r5, #28]
 800248e:	4c4a      	ldr	r4, [pc, #296]	; (80025b8 <HAL_RCC_OscConfig+0x278>)
 8002490:	4b4b      	ldr	r3, [pc, #300]	; (80025c0 <HAL_RCC_OscConfig+0x280>)
 8002492:	b1da      	cbz	r2, 80024cc <HAL_RCC_OscConfig+0x18c>
 8002494:	2201      	movs	r2, #1
 8002496:	601a      	str	r2, [r3, #0]
 8002498:	f7fe ffbc 	bl	8001414 <HAL_GetTick>
 800249c:	4606      	mov	r6, r0
 800249e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80024a0:	079b      	lsls	r3, r3, #30
 80024a2:	d50d      	bpl.n	80024c0 <HAL_RCC_OscConfig+0x180>
 80024a4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80024a8:	4b46      	ldr	r3, [pc, #280]	; (80025c4 <HAL_RCC_OscConfig+0x284>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80024b0:	9301      	str	r3, [sp, #4]
 80024b2:	bf00      	nop
 80024b4:	9b01      	ldr	r3, [sp, #4]
 80024b6:	1e5a      	subs	r2, r3, #1
 80024b8:	9201      	str	r2, [sp, #4]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1f9      	bne.n	80024b2 <HAL_RCC_OscConfig+0x172>
 80024be:	e74c      	b.n	800235a <HAL_RCC_OscConfig+0x1a>
 80024c0:	f7fe ffa8 	bl	8001414 <HAL_GetTick>
 80024c4:	1b80      	subs	r0, r0, r6
 80024c6:	2802      	cmp	r0, #2
 80024c8:	d9e9      	bls.n	800249e <HAL_RCC_OscConfig+0x15e>
 80024ca:	e77f      	b.n	80023cc <HAL_RCC_OscConfig+0x8c>
 80024cc:	601a      	str	r2, [r3, #0]
 80024ce:	f7fe ffa1 	bl	8001414 <HAL_GetTick>
 80024d2:	4606      	mov	r6, r0
 80024d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80024d6:	079f      	lsls	r7, r3, #30
 80024d8:	f57f af3f 	bpl.w	800235a <HAL_RCC_OscConfig+0x1a>
 80024dc:	f7fe ff9a 	bl	8001414 <HAL_GetTick>
 80024e0:	1b80      	subs	r0, r0, r6
 80024e2:	2802      	cmp	r0, #2
 80024e4:	d9f6      	bls.n	80024d4 <HAL_RCC_OscConfig+0x194>
 80024e6:	e771      	b.n	80023cc <HAL_RCC_OscConfig+0x8c>
 80024e8:	4c33      	ldr	r4, [pc, #204]	; (80025b8 <HAL_RCC_OscConfig+0x278>)
 80024ea:	69e3      	ldr	r3, [r4, #28]
 80024ec:	00de      	lsls	r6, r3, #3
 80024ee:	d424      	bmi.n	800253a <HAL_RCC_OscConfig+0x1fa>
 80024f0:	2701      	movs	r7, #1
 80024f2:	69e3      	ldr	r3, [r4, #28]
 80024f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024f8:	61e3      	str	r3, [r4, #28]
 80024fa:	69e3      	ldr	r3, [r4, #28]
 80024fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002500:	9300      	str	r3, [sp, #0]
 8002502:	9b00      	ldr	r3, [sp, #0]
 8002504:	4e30      	ldr	r6, [pc, #192]	; (80025c8 <HAL_RCC_OscConfig+0x288>)
 8002506:	6833      	ldr	r3, [r6, #0]
 8002508:	05d8      	lsls	r0, r3, #23
 800250a:	d518      	bpl.n	800253e <HAL_RCC_OscConfig+0x1fe>
 800250c:	692b      	ldr	r3, [r5, #16]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d126      	bne.n	8002560 <HAL_RCC_OscConfig+0x220>
 8002512:	6a23      	ldr	r3, [r4, #32]
 8002514:	f043 0301 	orr.w	r3, r3, #1
 8002518:	6223      	str	r3, [r4, #32]
 800251a:	f7fe ff7b 	bl	8001414 <HAL_GetTick>
 800251e:	f241 3688 	movw	r6, #5000	; 0x1388
 8002522:	4680      	mov	r8, r0
 8002524:	6a23      	ldr	r3, [r4, #32]
 8002526:	079a      	lsls	r2, r3, #30
 8002528:	d53f      	bpl.n	80025aa <HAL_RCC_OscConfig+0x26a>
 800252a:	2f00      	cmp	r7, #0
 800252c:	f43f af19 	beq.w	8002362 <HAL_RCC_OscConfig+0x22>
 8002530:	69e3      	ldr	r3, [r4, #28]
 8002532:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002536:	61e3      	str	r3, [r4, #28]
 8002538:	e713      	b.n	8002362 <HAL_RCC_OscConfig+0x22>
 800253a:	2700      	movs	r7, #0
 800253c:	e7e2      	b.n	8002504 <HAL_RCC_OscConfig+0x1c4>
 800253e:	6833      	ldr	r3, [r6, #0]
 8002540:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002544:	6033      	str	r3, [r6, #0]
 8002546:	f7fe ff65 	bl	8001414 <HAL_GetTick>
 800254a:	4680      	mov	r8, r0
 800254c:	6833      	ldr	r3, [r6, #0]
 800254e:	05d9      	lsls	r1, r3, #23
 8002550:	d4dc      	bmi.n	800250c <HAL_RCC_OscConfig+0x1cc>
 8002552:	f7fe ff5f 	bl	8001414 <HAL_GetTick>
 8002556:	eba0 0008 	sub.w	r0, r0, r8
 800255a:	2864      	cmp	r0, #100	; 0x64
 800255c:	d9f6      	bls.n	800254c <HAL_RCC_OscConfig+0x20c>
 800255e:	e735      	b.n	80023cc <HAL_RCC_OscConfig+0x8c>
 8002560:	b9ab      	cbnz	r3, 800258e <HAL_RCC_OscConfig+0x24e>
 8002562:	6a23      	ldr	r3, [r4, #32]
 8002564:	f241 3888 	movw	r8, #5000	; 0x1388
 8002568:	f023 0301 	bic.w	r3, r3, #1
 800256c:	6223      	str	r3, [r4, #32]
 800256e:	6a23      	ldr	r3, [r4, #32]
 8002570:	f023 0304 	bic.w	r3, r3, #4
 8002574:	6223      	str	r3, [r4, #32]
 8002576:	f7fe ff4d 	bl	8001414 <HAL_GetTick>
 800257a:	4606      	mov	r6, r0
 800257c:	6a23      	ldr	r3, [r4, #32]
 800257e:	079b      	lsls	r3, r3, #30
 8002580:	d5d3      	bpl.n	800252a <HAL_RCC_OscConfig+0x1ea>
 8002582:	f7fe ff47 	bl	8001414 <HAL_GetTick>
 8002586:	1b80      	subs	r0, r0, r6
 8002588:	4540      	cmp	r0, r8
 800258a:	d9f7      	bls.n	800257c <HAL_RCC_OscConfig+0x23c>
 800258c:	e71e      	b.n	80023cc <HAL_RCC_OscConfig+0x8c>
 800258e:	2b05      	cmp	r3, #5
 8002590:	6a23      	ldr	r3, [r4, #32]
 8002592:	d103      	bne.n	800259c <HAL_RCC_OscConfig+0x25c>
 8002594:	f043 0304 	orr.w	r3, r3, #4
 8002598:	6223      	str	r3, [r4, #32]
 800259a:	e7ba      	b.n	8002512 <HAL_RCC_OscConfig+0x1d2>
 800259c:	f023 0301 	bic.w	r3, r3, #1
 80025a0:	6223      	str	r3, [r4, #32]
 80025a2:	6a23      	ldr	r3, [r4, #32]
 80025a4:	f023 0304 	bic.w	r3, r3, #4
 80025a8:	e7b6      	b.n	8002518 <HAL_RCC_OscConfig+0x1d8>
 80025aa:	f7fe ff33 	bl	8001414 <HAL_GetTick>
 80025ae:	eba0 0008 	sub.w	r0, r0, r8
 80025b2:	42b0      	cmp	r0, r6
 80025b4:	d9b6      	bls.n	8002524 <HAL_RCC_OscConfig+0x1e4>
 80025b6:	e709      	b.n	80023cc <HAL_RCC_OscConfig+0x8c>
 80025b8:	40021000 	.word	0x40021000
 80025bc:	42420000 	.word	0x42420000
 80025c0:	42420480 	.word	0x42420480
 80025c4:	20000050 	.word	0x20000050
 80025c8:	40007000 	.word	0x40007000
 80025cc:	4c4f      	ldr	r4, [pc, #316]	; (800270c <HAL_RCC_OscConfig+0x3cc>)
 80025ce:	6863      	ldr	r3, [r4, #4]
 80025d0:	03d8      	lsls	r0, r3, #15
 80025d2:	d508      	bpl.n	80025e6 <HAL_RCC_OscConfig+0x2a6>
 80025d4:	6863      	ldr	r3, [r4, #4]
 80025d6:	f003 030c 	and.w	r3, r3, #12
 80025da:	2b08      	cmp	r3, #8
 80025dc:	d103      	bne.n	80025e6 <HAL_RCC_OscConfig+0x2a6>
 80025de:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80025e0:	03d9      	lsls	r1, r3, #15
 80025e2:	f53f aedc 	bmi.w	800239e <HAL_RCC_OscConfig+0x5e>
 80025e6:	2a02      	cmp	r2, #2
 80025e8:	d133      	bne.n	8002652 <HAL_RCC_OscConfig+0x312>
 80025ea:	6823      	ldr	r3, [r4, #0]
 80025ec:	00da      	lsls	r2, r3, #3
 80025ee:	d506      	bpl.n	80025fe <HAL_RCC_OscConfig+0x2be>
 80025f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80025f2:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80025f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025f8:	4293      	cmp	r3, r2
 80025fa:	f47f aed0 	bne.w	800239e <HAL_RCC_OscConfig+0x5e>
 80025fe:	2300      	movs	r3, #0
 8002600:	4e43      	ldr	r6, [pc, #268]	; (8002710 <HAL_RCC_OscConfig+0x3d0>)
 8002602:	6033      	str	r3, [r6, #0]
 8002604:	f7fe ff06 	bl	8001414 <HAL_GetTick>
 8002608:	4607      	mov	r7, r0
 800260a:	6823      	ldr	r3, [r4, #0]
 800260c:	011b      	lsls	r3, r3, #4
 800260e:	d41a      	bmi.n	8002646 <HAL_RCC_OscConfig+0x306>
 8002610:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002612:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8002614:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002618:	4313      	orrs	r3, r2
 800261a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800261c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800261e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8002620:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002624:	4313      	orrs	r3, r2
 8002626:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002628:	2301      	movs	r3, #1
 800262a:	6033      	str	r3, [r6, #0]
 800262c:	f7fe fef2 	bl	8001414 <HAL_GetTick>
 8002630:	4606      	mov	r6, r0
 8002632:	6823      	ldr	r3, [r4, #0]
 8002634:	011f      	lsls	r7, r3, #4
 8002636:	f53f ae98 	bmi.w	800236a <HAL_RCC_OscConfig+0x2a>
 800263a:	f7fe feeb 	bl	8001414 <HAL_GetTick>
 800263e:	1b80      	subs	r0, r0, r6
 8002640:	2864      	cmp	r0, #100	; 0x64
 8002642:	d9f6      	bls.n	8002632 <HAL_RCC_OscConfig+0x2f2>
 8002644:	e6c2      	b.n	80023cc <HAL_RCC_OscConfig+0x8c>
 8002646:	f7fe fee5 	bl	8001414 <HAL_GetTick>
 800264a:	1bc0      	subs	r0, r0, r7
 800264c:	2864      	cmp	r0, #100	; 0x64
 800264e:	d9dc      	bls.n	800260a <HAL_RCC_OscConfig+0x2ca>
 8002650:	e6bc      	b.n	80023cc <HAL_RCC_OscConfig+0x8c>
 8002652:	2200      	movs	r2, #0
 8002654:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002656:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800265a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800265c:	4b2c      	ldr	r3, [pc, #176]	; (8002710 <HAL_RCC_OscConfig+0x3d0>)
 800265e:	601a      	str	r2, [r3, #0]
 8002660:	f7fe fed8 	bl	8001414 <HAL_GetTick>
 8002664:	4606      	mov	r6, r0
 8002666:	6823      	ldr	r3, [r4, #0]
 8002668:	0118      	lsls	r0, r3, #4
 800266a:	f57f ae7e 	bpl.w	800236a <HAL_RCC_OscConfig+0x2a>
 800266e:	f7fe fed1 	bl	8001414 <HAL_GetTick>
 8002672:	1b80      	subs	r0, r0, r6
 8002674:	2864      	cmp	r0, #100	; 0x64
 8002676:	d9f6      	bls.n	8002666 <HAL_RCC_OscConfig+0x326>
 8002678:	e6a8      	b.n	80023cc <HAL_RCC_OscConfig+0x8c>
 800267a:	4c24      	ldr	r4, [pc, #144]	; (800270c <HAL_RCC_OscConfig+0x3cc>)
 800267c:	6863      	ldr	r3, [r4, #4]
 800267e:	f003 030c 	and.w	r3, r3, #12
 8002682:	2b08      	cmp	r3, #8
 8002684:	f43f ae8b 	beq.w	800239e <HAL_RCC_OscConfig+0x5e>
 8002688:	2300      	movs	r3, #0
 800268a:	4e22      	ldr	r6, [pc, #136]	; (8002714 <HAL_RCC_OscConfig+0x3d4>)
 800268c:	2a02      	cmp	r2, #2
 800268e:	6033      	str	r3, [r6, #0]
 8002690:	d12f      	bne.n	80026f2 <HAL_RCC_OscConfig+0x3b2>
 8002692:	f7fe febf 	bl	8001414 <HAL_GetTick>
 8002696:	4607      	mov	r7, r0
 8002698:	6823      	ldr	r3, [r4, #0]
 800269a:	0199      	lsls	r1, r3, #6
 800269c:	d423      	bmi.n	80026e6 <HAL_RCC_OscConfig+0x3a6>
 800269e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80026a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026a4:	d109      	bne.n	80026ba <HAL_RCC_OscConfig+0x37a>
 80026a6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80026a8:	6869      	ldr	r1, [r5, #4]
 80026aa:	430a      	orrs	r2, r1
 80026ac:	62e2      	str	r2, [r4, #44]	; 0x2c
 80026ae:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80026b0:	68e9      	ldr	r1, [r5, #12]
 80026b2:	f022 020f 	bic.w	r2, r2, #15
 80026b6:	430a      	orrs	r2, r1
 80026b8:	62e2      	str	r2, [r4, #44]	; 0x2c
 80026ba:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 80026bc:	6862      	ldr	r2, [r4, #4]
 80026be:	430b      	orrs	r3, r1
 80026c0:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80026c4:	4313      	orrs	r3, r2
 80026c6:	6063      	str	r3, [r4, #4]
 80026c8:	2301      	movs	r3, #1
 80026ca:	6033      	str	r3, [r6, #0]
 80026cc:	f7fe fea2 	bl	8001414 <HAL_GetTick>
 80026d0:	4605      	mov	r5, r0
 80026d2:	6823      	ldr	r3, [r4, #0]
 80026d4:	019a      	lsls	r2, r3, #6
 80026d6:	f53f ae4c 	bmi.w	8002372 <HAL_RCC_OscConfig+0x32>
 80026da:	f7fe fe9b 	bl	8001414 <HAL_GetTick>
 80026de:	1b40      	subs	r0, r0, r5
 80026e0:	2802      	cmp	r0, #2
 80026e2:	d9f6      	bls.n	80026d2 <HAL_RCC_OscConfig+0x392>
 80026e4:	e672      	b.n	80023cc <HAL_RCC_OscConfig+0x8c>
 80026e6:	f7fe fe95 	bl	8001414 <HAL_GetTick>
 80026ea:	1bc0      	subs	r0, r0, r7
 80026ec:	2802      	cmp	r0, #2
 80026ee:	d9d3      	bls.n	8002698 <HAL_RCC_OscConfig+0x358>
 80026f0:	e66c      	b.n	80023cc <HAL_RCC_OscConfig+0x8c>
 80026f2:	f7fe fe8f 	bl	8001414 <HAL_GetTick>
 80026f6:	4605      	mov	r5, r0
 80026f8:	6823      	ldr	r3, [r4, #0]
 80026fa:	019b      	lsls	r3, r3, #6
 80026fc:	f57f ae39 	bpl.w	8002372 <HAL_RCC_OscConfig+0x32>
 8002700:	f7fe fe88 	bl	8001414 <HAL_GetTick>
 8002704:	1b40      	subs	r0, r0, r5
 8002706:	2802      	cmp	r0, #2
 8002708:	d9f6      	bls.n	80026f8 <HAL_RCC_OscConfig+0x3b8>
 800270a:	e65f      	b.n	80023cc <HAL_RCC_OscConfig+0x8c>
 800270c:	40021000 	.word	0x40021000
 8002710:	42420068 	.word	0x42420068
 8002714:	42420060 	.word	0x42420060

08002718 <HAL_RCC_GetSysClockFreq>:
 8002718:	b5f0      	push	{r4, r5, r6, r7, lr}
 800271a:	b089      	sub	sp, #36	; 0x24
 800271c:	466a      	mov	r2, sp
 800271e:	4b2a      	ldr	r3, [pc, #168]	; (80027c8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002720:	f103 0508 	add.w	r5, r3, #8
 8002724:	4614      	mov	r4, r2
 8002726:	6818      	ldr	r0, [r3, #0]
 8002728:	6859      	ldr	r1, [r3, #4]
 800272a:	3308      	adds	r3, #8
 800272c:	c403      	stmia	r4!, {r0, r1}
 800272e:	42ab      	cmp	r3, r5
 8002730:	4622      	mov	r2, r4
 8002732:	d1f7      	bne.n	8002724 <HAL_RCC_GetSysClockFreq+0xc>
 8002734:	6818      	ldr	r0, [r3, #0]
 8002736:	889b      	ldrh	r3, [r3, #4]
 8002738:	6020      	str	r0, [r4, #0]
 800273a:	80a3      	strh	r3, [r4, #4]
 800273c:	4b23      	ldr	r3, [pc, #140]	; (80027cc <HAL_RCC_GetSysClockFreq+0xb4>)
 800273e:	ac04      	add	r4, sp, #16
 8002740:	f103 0510 	add.w	r5, r3, #16
 8002744:	4622      	mov	r2, r4
 8002746:	6818      	ldr	r0, [r3, #0]
 8002748:	6859      	ldr	r1, [r3, #4]
 800274a:	3308      	adds	r3, #8
 800274c:	c203      	stmia	r2!, {r0, r1}
 800274e:	42ab      	cmp	r3, r5
 8002750:	4614      	mov	r4, r2
 8002752:	d1f7      	bne.n	8002744 <HAL_RCC_GetSysClockFreq+0x2c>
 8002754:	491e      	ldr	r1, [pc, #120]	; (80027d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002756:	684b      	ldr	r3, [r1, #4]
 8002758:	f003 020c 	and.w	r2, r3, #12
 800275c:	2a08      	cmp	r2, #8
 800275e:	d131      	bne.n	80027c4 <HAL_RCC_GetSysClockFreq+0xac>
 8002760:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8002764:	a808      	add	r0, sp, #32
 8002766:	4402      	add	r2, r0
 8002768:	03db      	lsls	r3, r3, #15
 800276a:	f812 6c20 	ldrb.w	r6, [r2, #-32]
 800276e:	d526      	bpl.n	80027be <HAL_RCC_GetSysClockFreq+0xa6>
 8002770:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8002772:	f003 030f 	and.w	r3, r3, #15
 8002776:	4403      	add	r3, r0
 8002778:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 800277c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800277e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002782:	4b14      	ldr	r3, [pc, #80]	; (80027d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002784:	d016      	beq.n	80027b4 <HAL_RCC_GetSysClockFreq+0x9c>
 8002786:	6acf      	ldr	r7, [r1, #44]	; 0x2c
 8002788:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 800278a:	f3c4 2403 	ubfx	r4, r4, #8, #4
 800278e:	3402      	adds	r4, #2
 8002790:	fba4 4506 	umull	r4, r5, r4, r6
 8002794:	fba4 0103 	umull	r0, r1, r4, r3
 8002798:	fb03 1105 	mla	r1, r3, r5, r1
 800279c:	f3c7 1303 	ubfx	r3, r7, #4, #4
 80027a0:	3301      	adds	r3, #1
 80027a2:	fba3 2302 	umull	r2, r3, r3, r2
 80027a6:	f7fe fc6b 	bl	8001080 <__aeabi_uldivmod>
 80027aa:	2e0d      	cmp	r6, #13
 80027ac:	d100      	bne.n	80027b0 <HAL_RCC_GetSysClockFreq+0x98>
 80027ae:	0840      	lsrs	r0, r0, #1
 80027b0:	b009      	add	sp, #36	; 0x24
 80027b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027b4:	fb03 f006 	mul.w	r0, r3, r6
 80027b8:	fbb0 f0f2 	udiv	r0, r0, r2
 80027bc:	e7f5      	b.n	80027aa <HAL_RCC_GetSysClockFreq+0x92>
 80027be:	4806      	ldr	r0, [pc, #24]	; (80027d8 <HAL_RCC_GetSysClockFreq+0xc0>)
 80027c0:	4370      	muls	r0, r6
 80027c2:	e7f5      	b.n	80027b0 <HAL_RCC_GetSysClockFreq+0x98>
 80027c4:	4803      	ldr	r0, [pc, #12]	; (80027d4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80027c6:	e7f3      	b.n	80027b0 <HAL_RCC_GetSysClockFreq+0x98>
 80027c8:	08008ab8 	.word	0x08008ab8
 80027cc:	08008ac6 	.word	0x08008ac6
 80027d0:	40021000 	.word	0x40021000
 80027d4:	007a1200 	.word	0x007a1200
 80027d8:	003d0900 	.word	0x003d0900

080027dc <HAL_RCC_ClockConfig>:
 80027dc:	4a54      	ldr	r2, [pc, #336]	; (8002930 <HAL_RCC_ClockConfig+0x154>)
 80027de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027e2:	6813      	ldr	r3, [r2, #0]
 80027e4:	4605      	mov	r5, r0
 80027e6:	f003 0307 	and.w	r3, r3, #7
 80027ea:	428b      	cmp	r3, r1
 80027ec:	460e      	mov	r6, r1
 80027ee:	d32a      	bcc.n	8002846 <HAL_RCC_ClockConfig+0x6a>
 80027f0:	6829      	ldr	r1, [r5, #0]
 80027f2:	078c      	lsls	r4, r1, #30
 80027f4:	d434      	bmi.n	8002860 <HAL_RCC_ClockConfig+0x84>
 80027f6:	07ca      	lsls	r2, r1, #31
 80027f8:	d447      	bmi.n	800288a <HAL_RCC_ClockConfig+0xae>
 80027fa:	4a4d      	ldr	r2, [pc, #308]	; (8002930 <HAL_RCC_ClockConfig+0x154>)
 80027fc:	6813      	ldr	r3, [r2, #0]
 80027fe:	f003 0307 	and.w	r3, r3, #7
 8002802:	429e      	cmp	r6, r3
 8002804:	f0c0 8082 	bcc.w	800290c <HAL_RCC_ClockConfig+0x130>
 8002808:	682a      	ldr	r2, [r5, #0]
 800280a:	4c4a      	ldr	r4, [pc, #296]	; (8002934 <HAL_RCC_ClockConfig+0x158>)
 800280c:	f012 0f04 	tst.w	r2, #4
 8002810:	f040 8087 	bne.w	8002922 <HAL_RCC_ClockConfig+0x146>
 8002814:	0713      	lsls	r3, r2, #28
 8002816:	d506      	bpl.n	8002826 <HAL_RCC_ClockConfig+0x4a>
 8002818:	6863      	ldr	r3, [r4, #4]
 800281a:	692a      	ldr	r2, [r5, #16]
 800281c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002820:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002824:	6063      	str	r3, [r4, #4]
 8002826:	f7ff ff77 	bl	8002718 <HAL_RCC_GetSysClockFreq>
 800282a:	6863      	ldr	r3, [r4, #4]
 800282c:	4a42      	ldr	r2, [pc, #264]	; (8002938 <HAL_RCC_ClockConfig+0x15c>)
 800282e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002832:	5cd3      	ldrb	r3, [r2, r3]
 8002834:	40d8      	lsrs	r0, r3
 8002836:	4b41      	ldr	r3, [pc, #260]	; (800293c <HAL_RCC_ClockConfig+0x160>)
 8002838:	6018      	str	r0, [r3, #0]
 800283a:	200f      	movs	r0, #15
 800283c:	f7fe fda8 	bl	8001390 <HAL_InitTick>
 8002840:	2000      	movs	r0, #0
 8002842:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002846:	6813      	ldr	r3, [r2, #0]
 8002848:	f023 0307 	bic.w	r3, r3, #7
 800284c:	430b      	orrs	r3, r1
 800284e:	6013      	str	r3, [r2, #0]
 8002850:	6813      	ldr	r3, [r2, #0]
 8002852:	f003 0307 	and.w	r3, r3, #7
 8002856:	4299      	cmp	r1, r3
 8002858:	d0ca      	beq.n	80027f0 <HAL_RCC_ClockConfig+0x14>
 800285a:	2001      	movs	r0, #1
 800285c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002860:	4b34      	ldr	r3, [pc, #208]	; (8002934 <HAL_RCC_ClockConfig+0x158>)
 8002862:	f011 0f04 	tst.w	r1, #4
 8002866:	bf1e      	ittt	ne
 8002868:	685a      	ldrne	r2, [r3, #4]
 800286a:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 800286e:	605a      	strne	r2, [r3, #4]
 8002870:	0708      	lsls	r0, r1, #28
 8002872:	bf42      	ittt	mi
 8002874:	685a      	ldrmi	r2, [r3, #4]
 8002876:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 800287a:	605a      	strmi	r2, [r3, #4]
 800287c:	685a      	ldr	r2, [r3, #4]
 800287e:	68a8      	ldr	r0, [r5, #8]
 8002880:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002884:	4302      	orrs	r2, r0
 8002886:	605a      	str	r2, [r3, #4]
 8002888:	e7b5      	b.n	80027f6 <HAL_RCC_ClockConfig+0x1a>
 800288a:	686a      	ldr	r2, [r5, #4]
 800288c:	4c29      	ldr	r4, [pc, #164]	; (8002934 <HAL_RCC_ClockConfig+0x158>)
 800288e:	2a01      	cmp	r2, #1
 8002890:	6823      	ldr	r3, [r4, #0]
 8002892:	d11c      	bne.n	80028ce <HAL_RCC_ClockConfig+0xf2>
 8002894:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002898:	d0df      	beq.n	800285a <HAL_RCC_ClockConfig+0x7e>
 800289a:	6863      	ldr	r3, [r4, #4]
 800289c:	f241 3888 	movw	r8, #5000	; 0x1388
 80028a0:	f023 0303 	bic.w	r3, r3, #3
 80028a4:	4313      	orrs	r3, r2
 80028a6:	6063      	str	r3, [r4, #4]
 80028a8:	f7fe fdb4 	bl	8001414 <HAL_GetTick>
 80028ac:	686b      	ldr	r3, [r5, #4]
 80028ae:	4607      	mov	r7, r0
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d114      	bne.n	80028de <HAL_RCC_ClockConfig+0x102>
 80028b4:	6863      	ldr	r3, [r4, #4]
 80028b6:	f003 030c 	and.w	r3, r3, #12
 80028ba:	2b04      	cmp	r3, #4
 80028bc:	d09d      	beq.n	80027fa <HAL_RCC_ClockConfig+0x1e>
 80028be:	f7fe fda9 	bl	8001414 <HAL_GetTick>
 80028c2:	1bc0      	subs	r0, r0, r7
 80028c4:	4540      	cmp	r0, r8
 80028c6:	d9f5      	bls.n	80028b4 <HAL_RCC_ClockConfig+0xd8>
 80028c8:	2003      	movs	r0, #3
 80028ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80028ce:	2a02      	cmp	r2, #2
 80028d0:	d102      	bne.n	80028d8 <HAL_RCC_ClockConfig+0xfc>
 80028d2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80028d6:	e7df      	b.n	8002898 <HAL_RCC_ClockConfig+0xbc>
 80028d8:	f013 0f02 	tst.w	r3, #2
 80028dc:	e7dc      	b.n	8002898 <HAL_RCC_ClockConfig+0xbc>
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d10f      	bne.n	8002902 <HAL_RCC_ClockConfig+0x126>
 80028e2:	6863      	ldr	r3, [r4, #4]
 80028e4:	f003 030c 	and.w	r3, r3, #12
 80028e8:	2b08      	cmp	r3, #8
 80028ea:	d086      	beq.n	80027fa <HAL_RCC_ClockConfig+0x1e>
 80028ec:	f7fe fd92 	bl	8001414 <HAL_GetTick>
 80028f0:	1bc0      	subs	r0, r0, r7
 80028f2:	4540      	cmp	r0, r8
 80028f4:	d9f5      	bls.n	80028e2 <HAL_RCC_ClockConfig+0x106>
 80028f6:	e7e7      	b.n	80028c8 <HAL_RCC_ClockConfig+0xec>
 80028f8:	f7fe fd8c 	bl	8001414 <HAL_GetTick>
 80028fc:	1bc0      	subs	r0, r0, r7
 80028fe:	4540      	cmp	r0, r8
 8002900:	d8e2      	bhi.n	80028c8 <HAL_RCC_ClockConfig+0xec>
 8002902:	6863      	ldr	r3, [r4, #4]
 8002904:	f013 0f0c 	tst.w	r3, #12
 8002908:	d1f6      	bne.n	80028f8 <HAL_RCC_ClockConfig+0x11c>
 800290a:	e776      	b.n	80027fa <HAL_RCC_ClockConfig+0x1e>
 800290c:	6813      	ldr	r3, [r2, #0]
 800290e:	f023 0307 	bic.w	r3, r3, #7
 8002912:	4333      	orrs	r3, r6
 8002914:	6013      	str	r3, [r2, #0]
 8002916:	6813      	ldr	r3, [r2, #0]
 8002918:	f003 0307 	and.w	r3, r3, #7
 800291c:	429e      	cmp	r6, r3
 800291e:	d19c      	bne.n	800285a <HAL_RCC_ClockConfig+0x7e>
 8002920:	e772      	b.n	8002808 <HAL_RCC_ClockConfig+0x2c>
 8002922:	6863      	ldr	r3, [r4, #4]
 8002924:	68e9      	ldr	r1, [r5, #12]
 8002926:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800292a:	430b      	orrs	r3, r1
 800292c:	6063      	str	r3, [r4, #4]
 800292e:	e771      	b.n	8002814 <HAL_RCC_ClockConfig+0x38>
 8002930:	40022000 	.word	0x40022000
 8002934:	40021000 	.word	0x40021000
 8002938:	08008d9a 	.word	0x08008d9a
 800293c:	20000050 	.word	0x20000050

08002940 <HAL_RCC_GetPCLK1Freq>:
 8002940:	4b04      	ldr	r3, [pc, #16]	; (8002954 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002942:	4a05      	ldr	r2, [pc, #20]	; (8002958 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800294a:	5cd3      	ldrb	r3, [r2, r3]
 800294c:	4a03      	ldr	r2, [pc, #12]	; (800295c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800294e:	6810      	ldr	r0, [r2, #0]
 8002950:	40d8      	lsrs	r0, r3
 8002952:	4770      	bx	lr
 8002954:	40021000 	.word	0x40021000
 8002958:	08008daa 	.word	0x08008daa
 800295c:	20000050 	.word	0x20000050

08002960 <HAL_RCC_GetPCLK2Freq>:
 8002960:	4b04      	ldr	r3, [pc, #16]	; (8002974 <HAL_RCC_GetPCLK2Freq+0x14>)
 8002962:	4a05      	ldr	r2, [pc, #20]	; (8002978 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800296a:	5cd3      	ldrb	r3, [r2, r3]
 800296c:	4a03      	ldr	r2, [pc, #12]	; (800297c <HAL_RCC_GetPCLK2Freq+0x1c>)
 800296e:	6810      	ldr	r0, [r2, #0]
 8002970:	40d8      	lsrs	r0, r3
 8002972:	4770      	bx	lr
 8002974:	40021000 	.word	0x40021000
 8002978:	08008daa 	.word	0x08008daa
 800297c:	20000050 	.word	0x20000050

08002980 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002980:	6803      	ldr	r3, [r0, #0]
{
 8002982:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002986:	f013 0f01 	tst.w	r3, #1
{
 800298a:	4605      	mov	r5, r0
 800298c:	4c57      	ldr	r4, [pc, #348]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x16c>)
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800298e:	d01f      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x50>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002990:	69e3      	ldr	r3, [r4, #28]
 8002992:	00da      	lsls	r2, r3, #3
 8002994:	d447      	bmi.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8002996:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 8002998:	69e3      	ldr	r3, [r4, #28]
 800299a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800299e:	61e3      	str	r3, [r4, #28]
 80029a0:	69e3      	ldr	r3, [r4, #28]
 80029a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029a6:	9301      	str	r3, [sp, #4]
 80029a8:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029aa:	4e51      	ldr	r6, [pc, #324]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 80029ac:	6833      	ldr	r3, [r6, #0]
 80029ae:	05db      	lsls	r3, r3, #23
 80029b0:	d53b      	bpl.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0xaa>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80029b2:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80029b4:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80029b8:	d14b      	bne.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0xd2>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80029ba:	6a23      	ldr	r3, [r4, #32]
 80029bc:	686a      	ldr	r2, [r5, #4]
 80029be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029c2:	4313      	orrs	r3, r2
 80029c4:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80029c6:	b11f      	cbz	r7, 80029d0 <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029c8:	69e3      	ldr	r3, [r4, #28]
 80029ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029ce:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80029d0:	682a      	ldr	r2, [r5, #0]
 80029d2:	0793      	lsls	r3, r2, #30
 80029d4:	d505      	bpl.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80029d6:	6863      	ldr	r3, [r4, #4]
 80029d8:	68a9      	ldr	r1, [r5, #8]
 80029da:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80029de:	430b      	orrs	r3, r1
 80029e0:	6063      	str	r3, [r4, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 80029e2:	0757      	lsls	r7, r2, #29
 80029e4:	d505      	bpl.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80029e6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80029e8:	68e9      	ldr	r1, [r5, #12]
 80029ea:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80029ee:	430b      	orrs	r3, r1
 80029f0:	62e3      	str	r3, [r4, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 80029f2:	0716      	lsls	r6, r2, #28
 80029f4:	d505      	bpl.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));
    
    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 80029f6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80029f8:	692a      	ldr	r2, [r5, #16]
 80029fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029fe:	4313      	orrs	r3, r2
 8002a00:	62e3      	str	r3, [r4, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/ 
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 8002a02:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002a04:	0398      	lsls	r0, r3, #14
 8002a06:	d466      	bmi.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x156>
 8002a08:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002a0a:	0359      	lsls	r1, r3, #13
 8002a0c:	d463      	bmi.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x156>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002a0e:	6828      	ldr	r0, [r5, #0]
 8002a10:	f010 0010 	ands.w	r0, r0, #16
 8002a14:	d01a      	beq.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a16:	6863      	ldr	r3, [r4, #4]
 8002a18:	69ea      	ldr	r2, [r5, #28]
 8002a1a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	6063      	str	r3, [r4, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002a22:	2000      	movs	r0, #0
 8002a24:	e012      	b.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0xcc>
    FlagStatus       pwrclkchanged = RESET;
 8002a26:	2700      	movs	r7, #0
 8002a28:	e7bf      	b.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a2a:	6833      	ldr	r3, [r6, #0]
 8002a2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a30:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002a32:	f7fe fcef 	bl	8001414 <HAL_GetTick>
 8002a36:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a38:	6833      	ldr	r3, [r6, #0]
 8002a3a:	05d8      	lsls	r0, r3, #23
 8002a3c:	d4b9      	bmi.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x32>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a3e:	f7fe fce9 	bl	8001414 <HAL_GetTick>
 8002a42:	eba0 0008 	sub.w	r0, r0, r8
 8002a46:	2864      	cmp	r0, #100	; 0x64
 8002a48:	d9f6      	bls.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0xb8>
          return HAL_TIMEOUT;
 8002a4a:	2003      	movs	r0, #3
}
 8002a4c:	b002      	add	sp, #8
 8002a4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a52:	686a      	ldr	r2, [r5, #4]
 8002a54:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d0ae      	beq.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x3a>
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a5c:	2001      	movs	r0, #1
 8002a5e:	4a25      	ldr	r2, [pc, #148]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x174>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a60:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a62:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a64:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a66:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a6a:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8002a6c:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002a6e:	07d9      	lsls	r1, r3, #31
 8002a70:	d5a3      	bpl.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x3a>
        tickstart = HAL_GetTick();
 8002a72:	f7fe fccf 	bl	8001414 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a76:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002a7a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a7c:	6a23      	ldr	r3, [r4, #32]
 8002a7e:	079a      	lsls	r2, r3, #30
 8002a80:	d49b      	bmi.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x3a>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a82:	f7fe fcc7 	bl	8001414 <HAL_GetTick>
 8002a86:	1b80      	subs	r0, r0, r6
 8002a88:	4540      	cmp	r0, r8
 8002a8a:	d9f7      	bls.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8002a8c:	e7dd      	b.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0xca>
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLL2ON) && \
 8002a8e:	6823      	ldr	r3, [r4, #0]
 8002a90:	69a9      	ldr	r1, [r5, #24]
 8002a92:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8002a96:	d004      	beq.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x122>
        (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 8002a98:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002a9a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLL2ON) && \
 8002a9e:	428a      	cmp	r2, r1
 8002aa0:	d122      	bne.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x168>
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 8002aa2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002aa4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002aa8:	430b      	orrs	r3, r1
 8002aaa:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 8002aac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002aae:	696a      	ldr	r2, [r5, #20]
 8002ab0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ab4:	4313      	orrs	r3, r2
      __HAL_RCC_PLLI2S_ENABLE();
 8002ab6:	2201      	movs	r2, #1
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 8002ab8:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_RCC_PLLI2S_ENABLE();
 8002aba:	4b0f      	ldr	r3, [pc, #60]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8002abc:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002abe:	f7fe fca9 	bl	8001414 <HAL_GetTick>
 8002ac2:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ac4:	6823      	ldr	r3, [r4, #0]
 8002ac6:	009a      	lsls	r2, r3, #2
 8002ac8:	d4a1      	bmi.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002aca:	f7fe fca3 	bl	8001414 <HAL_GetTick>
 8002ace:	1b80      	subs	r0, r0, r6
 8002ad0:	2864      	cmp	r0, #100	; 0x64
 8002ad2:	d9f7      	bls.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x144>
 8002ad4:	e7b9      	b.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0xca>
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 8002ad6:	6823      	ldr	r3, [r4, #0]
 8002ad8:	00db      	lsls	r3, r3, #3
 8002ada:	d5d8      	bpl.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 8002adc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002ade:	696a      	ldr	r2, [r5, #20]
 8002ae0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d092      	beq.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x8e>
        return HAL_ERROR;
 8002ae8:	2001      	movs	r0, #1
 8002aea:	e7af      	b.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002aec:	40021000 	.word	0x40021000
 8002af0:	40007000 	.word	0x40007000
 8002af4:	42420440 	.word	0x42420440
 8002af8:	42420070 	.word	0x42420070

08002afc <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002afc:	6a03      	ldr	r3, [r0, #32]
{
 8002afe:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b00:	f023 0301 	bic.w	r3, r3, #1
 8002b04:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b06:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b08:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b0a:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b0c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002b0e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002b12:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002b14:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8002b16:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8002b1a:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002b1c:	4d0a      	ldr	r5, [pc, #40]	; (8002b48 <TIM_OC1_SetConfig+0x4c>)
 8002b1e:	42a8      	cmp	r0, r5
 8002b20:	d10b      	bne.n	8002b3a <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002b22:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8002b24:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8002b28:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002b2a:	698e      	ldr	r6, [r1, #24]
 8002b2c:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002b2e:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8002b32:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8002b34:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8002b38:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b3a:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b3c:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002b3e:	684a      	ldr	r2, [r1, #4]
 8002b40:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b42:	6203      	str	r3, [r0, #32]
 8002b44:	bd70      	pop	{r4, r5, r6, pc}
 8002b46:	bf00      	nop
 8002b48:	40012c00 	.word	0x40012c00

08002b4c <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b4c:	6a03      	ldr	r3, [r0, #32]
{
 8002b4e:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b54:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b56:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b58:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b5a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b5c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002b5e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002b62:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002b64:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8002b66:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002b6a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002b6e:	4d0b      	ldr	r5, [pc, #44]	; (8002b9c <TIM_OC3_SetConfig+0x50>)
 8002b70:	42a8      	cmp	r0, r5
 8002b72:	d10d      	bne.n	8002b90 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002b74:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8002b76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002b7a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002b7e:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002b80:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002b82:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002b86:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8002b88:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002b8c:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b90:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b92:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002b94:	684a      	ldr	r2, [r1, #4]
 8002b96:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b98:	6203      	str	r3, [r0, #32]
 8002b9a:	bd70      	pop	{r4, r5, r6, pc}
 8002b9c:	40012c00 	.word	0x40012c00

08002ba0 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002ba0:	6a03      	ldr	r3, [r0, #32]
{
 8002ba2:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002ba4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ba8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002baa:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bac:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002bae:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002bb0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002bb2:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002bb6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002bba:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8002bbc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002bc0:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002bc4:	4d06      	ldr	r5, [pc, #24]	; (8002be0 <TIM_OC4_SetConfig+0x40>)
 8002bc6:	42a8      	cmp	r0, r5
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8002bc8:	bf02      	ittt	eq
 8002bca:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002bcc:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8002bd0:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bd4:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002bd6:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002bd8:	684a      	ldr	r2, [r1, #4]
 8002bda:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bdc:	6203      	str	r3, [r0, #32]
 8002bde:	bd30      	pop	{r4, r5, pc}
 8002be0:	40012c00 	.word	0x40012c00

08002be4 <HAL_TIM_PWM_MspInit>:
 8002be4:	4770      	bx	lr

08002be6 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002be6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002bea:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	f04f 0302 	mov.w	r3, #2
 8002bf2:	d01c      	beq.n	8002c2e <HAL_TIM_ConfigClockSource+0x48>
 8002bf4:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8002bf6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8002bfa:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8002bfc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8002c00:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c02:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002c06:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002c0a:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8002c0c:	680a      	ldr	r2, [r1, #0]
 8002c0e:	2a40      	cmp	r2, #64	; 0x40
 8002c10:	d079      	beq.n	8002d06 <HAL_TIM_ConfigClockSource+0x120>
 8002c12:	d819      	bhi.n	8002c48 <HAL_TIM_ConfigClockSource+0x62>
 8002c14:	2a10      	cmp	r2, #16
 8002c16:	f000 8093 	beq.w	8002d40 <HAL_TIM_ConfigClockSource+0x15a>
 8002c1a:	d80a      	bhi.n	8002c32 <HAL_TIM_ConfigClockSource+0x4c>
 8002c1c:	2a00      	cmp	r2, #0
 8002c1e:	f000 8089 	beq.w	8002d34 <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 8002c22:	2301      	movs	r3, #1
 8002c24:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002c28:	2300      	movs	r3, #0
 8002c2a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8002c2e:	4618      	mov	r0, r3
}
 8002c30:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8002c32:	2a20      	cmp	r2, #32
 8002c34:	f000 808a 	beq.w	8002d4c <HAL_TIM_ConfigClockSource+0x166>
 8002c38:	2a30      	cmp	r2, #48	; 0x30
 8002c3a:	d1f2      	bne.n	8002c22 <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8002c3c:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8002c3e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002c42:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8002c46:	e036      	b.n	8002cb6 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8002c48:	2a70      	cmp	r2, #112	; 0x70
 8002c4a:	d036      	beq.n	8002cba <HAL_TIM_ConfigClockSource+0xd4>
 8002c4c:	d81b      	bhi.n	8002c86 <HAL_TIM_ConfigClockSource+0xa0>
 8002c4e:	2a50      	cmp	r2, #80	; 0x50
 8002c50:	d042      	beq.n	8002cd8 <HAL_TIM_ConfigClockSource+0xf2>
 8002c52:	2a60      	cmp	r2, #96	; 0x60
 8002c54:	d1e5      	bne.n	8002c22 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c56:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c58:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c5a:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c5e:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c60:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c62:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8002c64:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c66:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c6a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c6e:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c72:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8002c76:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c78:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8002c7a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002c7c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002c80:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8002c84:	e017      	b.n	8002cb6 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8002c86:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002c8a:	d011      	beq.n	8002cb0 <HAL_TIM_ConfigClockSource+0xca>
 8002c8c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002c90:	d1c7      	bne.n	8002c22 <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c92:	688a      	ldr	r2, [r1, #8]
 8002c94:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8002c96:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c98:	68c9      	ldr	r1, [r1, #12]
 8002c9a:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c9c:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ca0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002ca4:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ca6:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002ca8:	689a      	ldr	r2, [r3, #8]
 8002caa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cae:	e002      	b.n	8002cb6 <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002cb0:	689a      	ldr	r2, [r3, #8]
 8002cb2:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8002cb6:	609a      	str	r2, [r3, #8]
 8002cb8:	e7b3      	b.n	8002c22 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002cba:	688a      	ldr	r2, [r1, #8]
 8002cbc:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8002cbe:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002cc0:	68c9      	ldr	r1, [r1, #12]
 8002cc2:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cc4:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002cc8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002ccc:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8002cce:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8002cd0:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002cd2:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8002cd6:	e7ee      	b.n	8002cb6 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cd8:	684c      	ldr	r4, [r1, #4]
 8002cda:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002cdc:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cde:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ce0:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ce4:	f025 0501 	bic.w	r5, r5, #1
 8002ce8:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cea:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8002cec:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002cee:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002cf2:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002cf6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cf8:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8002cfa:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002cfc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002d00:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8002d04:	e7d7      	b.n	8002cb6 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d06:	684c      	ldr	r4, [r1, #4]
 8002d08:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002d0a:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d0c:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d0e:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d12:	f025 0501 	bic.w	r5, r5, #1
 8002d16:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d18:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8002d1a:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d1c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d20:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002d24:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d26:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8002d28:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002d2a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002d2e:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8002d32:	e7c0      	b.n	8002cb6 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8002d34:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002d36:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002d3a:	f042 0207 	orr.w	r2, r2, #7
 8002d3e:	e7ba      	b.n	8002cb6 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8002d40:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002d42:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002d46:	f042 0217 	orr.w	r2, r2, #23
 8002d4a:	e7b4      	b.n	8002cb6 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8002d4c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002d4e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002d52:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8002d56:	e7ae      	b.n	8002cb6 <HAL_TIM_ConfigClockSource+0xd0>

08002d58 <HAL_TIM_PeriodElapsedCallback>:
 8002d58:	4770      	bx	lr

08002d5a <HAL_TIM_OC_DelayElapsedCallback>:
 8002d5a:	4770      	bx	lr

08002d5c <HAL_TIM_IC_CaptureCallback>:
 8002d5c:	4770      	bx	lr

08002d5e <HAL_TIM_PWM_PulseFinishedCallback>:
 8002d5e:	4770      	bx	lr

08002d60 <HAL_TIM_TriggerCallback>:
 8002d60:	4770      	bx	lr

08002d62 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d62:	6803      	ldr	r3, [r0, #0]
{
 8002d64:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d66:	691a      	ldr	r2, [r3, #16]
{
 8002d68:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d6a:	0791      	lsls	r1, r2, #30
 8002d6c:	d50e      	bpl.n	8002d8c <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002d6e:	68da      	ldr	r2, [r3, #12]
 8002d70:	0792      	lsls	r2, r2, #30
 8002d72:	d50b      	bpl.n	8002d8c <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d74:	f06f 0202 	mvn.w	r2, #2
 8002d78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d7a:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d7c:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d7e:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d80:	079b      	lsls	r3, r3, #30
 8002d82:	d077      	beq.n	8002e74 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8002d84:	f7ff ffea 	bl	8002d5c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d8c:	6823      	ldr	r3, [r4, #0]
 8002d8e:	691a      	ldr	r2, [r3, #16]
 8002d90:	0750      	lsls	r0, r2, #29
 8002d92:	d510      	bpl.n	8002db6 <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002d94:	68da      	ldr	r2, [r3, #12]
 8002d96:	0751      	lsls	r1, r2, #29
 8002d98:	d50d      	bpl.n	8002db6 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d9a:	f06f 0204 	mvn.w	r2, #4
 8002d9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002da0:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002da2:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002da4:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002da6:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8002daa:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002dac:	d068      	beq.n	8002e80 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8002dae:	f7ff ffd5 	bl	8002d5c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002db2:	2300      	movs	r3, #0
 8002db4:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002db6:	6823      	ldr	r3, [r4, #0]
 8002db8:	691a      	ldr	r2, [r3, #16]
 8002dba:	0712      	lsls	r2, r2, #28
 8002dbc:	d50f      	bpl.n	8002dde <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002dbe:	68da      	ldr	r2, [r3, #12]
 8002dc0:	0710      	lsls	r0, r2, #28
 8002dc2:	d50c      	bpl.n	8002dde <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002dc4:	f06f 0208 	mvn.w	r2, #8
 8002dc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002dca:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002dcc:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002dce:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002dd0:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8002dd2:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002dd4:	d05a      	beq.n	8002e8c <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002dd6:	f7ff ffc1 	bl	8002d5c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002dde:	6823      	ldr	r3, [r4, #0]
 8002de0:	691a      	ldr	r2, [r3, #16]
 8002de2:	06d2      	lsls	r2, r2, #27
 8002de4:	d510      	bpl.n	8002e08 <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002de6:	68da      	ldr	r2, [r3, #12]
 8002de8:	06d0      	lsls	r0, r2, #27
 8002dea:	d50d      	bpl.n	8002e08 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002dec:	f06f 0210 	mvn.w	r2, #16
 8002df0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002df2:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002df4:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002df6:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002df8:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8002dfc:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002dfe:	d04b      	beq.n	8002e98 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8002e00:	f7ff ffac 	bl	8002d5c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e04:	2300      	movs	r3, #0
 8002e06:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e08:	6823      	ldr	r3, [r4, #0]
 8002e0a:	691a      	ldr	r2, [r3, #16]
 8002e0c:	07d1      	lsls	r1, r2, #31
 8002e0e:	d508      	bpl.n	8002e22 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002e10:	68da      	ldr	r2, [r3, #12]
 8002e12:	07d2      	lsls	r2, r2, #31
 8002e14:	d505      	bpl.n	8002e22 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e16:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e1a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e1c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e1e:	f7ff ff9b 	bl	8002d58 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e22:	6823      	ldr	r3, [r4, #0]
 8002e24:	691a      	ldr	r2, [r3, #16]
 8002e26:	0610      	lsls	r0, r2, #24
 8002e28:	d508      	bpl.n	8002e3c <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002e2a:	68da      	ldr	r2, [r3, #12]
 8002e2c:	0611      	lsls	r1, r2, #24
 8002e2e:	d505      	bpl.n	8002e3c <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e30:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8002e34:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e36:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002e38:	f000 f97d 	bl	8003136 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e3c:	6823      	ldr	r3, [r4, #0]
 8002e3e:	691a      	ldr	r2, [r3, #16]
 8002e40:	0652      	lsls	r2, r2, #25
 8002e42:	d508      	bpl.n	8002e56 <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002e44:	68da      	ldr	r2, [r3, #12]
 8002e46:	0650      	lsls	r0, r2, #25
 8002e48:	d505      	bpl.n	8002e56 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e4a:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8002e4e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e50:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002e52:	f7ff ff85 	bl	8002d60 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e56:	6823      	ldr	r3, [r4, #0]
 8002e58:	691a      	ldr	r2, [r3, #16]
 8002e5a:	0691      	lsls	r1, r2, #26
 8002e5c:	d522      	bpl.n	8002ea4 <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002e5e:	68da      	ldr	r2, [r3, #12]
 8002e60:	0692      	lsls	r2, r2, #26
 8002e62:	d51f      	bpl.n	8002ea4 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e64:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8002e68:	4620      	mov	r0, r4
}
 8002e6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e6e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8002e70:	f000 b960 	b.w	8003134 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e74:	f7ff ff71 	bl	8002d5a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e78:	4620      	mov	r0, r4
 8002e7a:	f7ff ff70 	bl	8002d5e <HAL_TIM_PWM_PulseFinishedCallback>
 8002e7e:	e783      	b.n	8002d88 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e80:	f7ff ff6b 	bl	8002d5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e84:	4620      	mov	r0, r4
 8002e86:	f7ff ff6a 	bl	8002d5e <HAL_TIM_PWM_PulseFinishedCallback>
 8002e8a:	e792      	b.n	8002db2 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e8c:	f7ff ff65 	bl	8002d5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e90:	4620      	mov	r0, r4
 8002e92:	f7ff ff64 	bl	8002d5e <HAL_TIM_PWM_PulseFinishedCallback>
 8002e96:	e7a0      	b.n	8002dda <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e98:	f7ff ff5f 	bl	8002d5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e9c:	4620      	mov	r0, r4
 8002e9e:	f7ff ff5e 	bl	8002d5e <HAL_TIM_PWM_PulseFinishedCallback>
 8002ea2:	e7af      	b.n	8002e04 <HAL_TIM_IRQHandler+0xa2>
 8002ea4:	bd10      	pop	{r4, pc}
	...

08002ea8 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ea8:	4a1e      	ldr	r2, [pc, #120]	; (8002f24 <TIM_Base_SetConfig+0x7c>)
  tmpcr1 = TIMx->CR1;
 8002eaa:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002eac:	4290      	cmp	r0, r2
 8002eae:	d00e      	beq.n	8002ece <TIM_Base_SetConfig+0x26>
 8002eb0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002eb4:	d00b      	beq.n	8002ece <TIM_Base_SetConfig+0x26>
 8002eb6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002eba:	4290      	cmp	r0, r2
 8002ebc:	d007      	beq.n	8002ece <TIM_Base_SetConfig+0x26>
 8002ebe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002ec2:	4290      	cmp	r0, r2
 8002ec4:	d003      	beq.n	8002ece <TIM_Base_SetConfig+0x26>
 8002ec6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002eca:	4290      	cmp	r0, r2
 8002ecc:	d119      	bne.n	8002f02 <TIM_Base_SetConfig+0x5a>
    tmpcr1 |= Structure->CounterMode;
 8002ece:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ed0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002ed4:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ed6:	4a13      	ldr	r2, [pc, #76]	; (8002f24 <TIM_Base_SetConfig+0x7c>)
 8002ed8:	4290      	cmp	r0, r2
 8002eda:	d00e      	beq.n	8002efa <TIM_Base_SetConfig+0x52>
 8002edc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002ee0:	d00b      	beq.n	8002efa <TIM_Base_SetConfig+0x52>
 8002ee2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002ee6:	4290      	cmp	r0, r2
 8002ee8:	d007      	beq.n	8002efa <TIM_Base_SetConfig+0x52>
 8002eea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002eee:	4290      	cmp	r0, r2
 8002ef0:	d003      	beq.n	8002efa <TIM_Base_SetConfig+0x52>
 8002ef2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002ef6:	4290      	cmp	r0, r2
 8002ef8:	d103      	bne.n	8002f02 <TIM_Base_SetConfig+0x5a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002efa:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002efc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f00:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8002f02:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8002f04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8002f08:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002f0a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f0c:	688b      	ldr	r3, [r1, #8]
 8002f0e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002f10:	680b      	ldr	r3, [r1, #0]
 8002f12:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f14:	4b03      	ldr	r3, [pc, #12]	; (8002f24 <TIM_Base_SetConfig+0x7c>)
 8002f16:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8002f18:	bf04      	itt	eq
 8002f1a:	690b      	ldreq	r3, [r1, #16]
 8002f1c:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	6143      	str	r3, [r0, #20]
 8002f22:	4770      	bx	lr
 8002f24:	40012c00 	.word	0x40012c00

08002f28 <HAL_TIM_Base_Init>:
{
 8002f28:	b510      	push	{r4, lr}
  if(htim == NULL)
 8002f2a:	4604      	mov	r4, r0
 8002f2c:	b1a0      	cbz	r0, 8002f58 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002f2e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002f32:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002f36:	b91b      	cbnz	r3, 8002f40 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002f38:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002f3c:	f002 ff1c 	bl	8005d78 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002f40:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f42:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8002f44:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f48:	1d21      	adds	r1, r4, #4
 8002f4a:	f7ff ffad 	bl	8002ea8 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002f4e:	2301      	movs	r3, #1
  return HAL_OK;
 8002f50:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8002f52:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002f56:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002f58:	2001      	movs	r0, #1
}
 8002f5a:	bd10      	pop	{r4, pc}

08002f5c <HAL_TIM_PWM_Init>:
{
 8002f5c:	b510      	push	{r4, lr}
  if(htim == NULL)
 8002f5e:	4604      	mov	r4, r0
 8002f60:	b1a0      	cbz	r0, 8002f8c <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002f62:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002f66:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002f6a:	b91b      	cbnz	r3, 8002f74 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002f6c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8002f70:	f7ff fe38 	bl	8002be4 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002f74:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f76:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8002f78:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f7c:	1d21      	adds	r1, r4, #4
 8002f7e:	f7ff ff93 	bl	8002ea8 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002f82:	2301      	movs	r3, #1
  return HAL_OK;
 8002f84:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8002f86:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002f8a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002f8c:	2001      	movs	r0, #1
}
 8002f8e:	bd10      	pop	{r4, pc}

08002f90 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f90:	6a03      	ldr	r3, [r0, #32]
{
 8002f92:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f94:	f023 0310 	bic.w	r3, r3, #16
 8002f98:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002f9a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002f9c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002f9e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002fa0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002fa2:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002fa6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002faa:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8002fac:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002fb0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002fb4:	4d0b      	ldr	r5, [pc, #44]	; (8002fe4 <TIM_OC2_SetConfig+0x54>)
 8002fb6:	42a8      	cmp	r0, r5
 8002fb8:	d10d      	bne.n	8002fd6 <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002fba:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8002fbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002fc0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8002fc4:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8002fc6:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002fc8:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8002fcc:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8002fce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8002fd2:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8002fd6:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002fd8:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002fda:	684a      	ldr	r2, [r1, #4]
 8002fdc:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002fde:	6203      	str	r3, [r0, #32]
 8002fe0:	bd70      	pop	{r4, r5, r6, pc}
 8002fe2:	bf00      	nop
 8002fe4:	40012c00 	.word	0x40012c00

08002fe8 <HAL_TIM_PWM_ConfigChannel>:
{
 8002fe8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002fea:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002fee:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	f04f 0002 	mov.w	r0, #2
 8002ff6:	d025      	beq.n	8003044 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8002ff8:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8002ffa:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8002ffe:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 8003002:	2a0c      	cmp	r2, #12
 8003004:	d818      	bhi.n	8003038 <HAL_TIM_PWM_ConfigChannel+0x50>
 8003006:	e8df f002 	tbb	[pc, r2]
 800300a:	1707      	.short	0x1707
 800300c:	171e1717 	.word	0x171e1717
 8003010:	172f1717 	.word	0x172f1717
 8003014:	1717      	.short	0x1717
 8003016:	40          	.byte	0x40
 8003017:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003018:	6820      	ldr	r0, [r4, #0]
 800301a:	f7ff fd6f 	bl	8002afc <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800301e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003020:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003022:	699a      	ldr	r2, [r3, #24]
 8003024:	f042 0208 	orr.w	r2, r2, #8
 8003028:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800302a:	699a      	ldr	r2, [r3, #24]
 800302c:	f022 0204 	bic.w	r2, r2, #4
 8003030:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003032:	699a      	ldr	r2, [r3, #24]
 8003034:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8003036:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8003038:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800303a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800303c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003040:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8003044:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003046:	6820      	ldr	r0, [r4, #0]
 8003048:	f7ff ffa2 	bl	8002f90 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800304c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 800304e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003050:	699a      	ldr	r2, [r3, #24]
 8003052:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003056:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003058:	699a      	ldr	r2, [r3, #24]
 800305a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800305e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8003060:	699a      	ldr	r2, [r3, #24]
 8003062:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003066:	e7e6      	b.n	8003036 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003068:	6820      	ldr	r0, [r4, #0]
 800306a:	f7ff fd6f 	bl	8002b4c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800306e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003070:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003072:	69da      	ldr	r2, [r3, #28]
 8003074:	f042 0208 	orr.w	r2, r2, #8
 8003078:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800307a:	69da      	ldr	r2, [r3, #28]
 800307c:	f022 0204 	bic.w	r2, r2, #4
 8003080:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003082:	69da      	ldr	r2, [r3, #28]
 8003084:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8003086:	61da      	str	r2, [r3, #28]
    break;
 8003088:	e7d6      	b.n	8003038 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800308a:	6820      	ldr	r0, [r4, #0]
 800308c:	f7ff fd88 	bl	8002ba0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003090:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8003092:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003094:	69da      	ldr	r2, [r3, #28]
 8003096:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800309a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800309c:	69da      	ldr	r2, [r3, #28]
 800309e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030a2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 80030a4:	69da      	ldr	r2, [r3, #28]
 80030a6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80030aa:	e7ec      	b.n	8003086 <HAL_TIM_PWM_ConfigChannel+0x9e>

080030ac <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80030ac:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 80030ae:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80030b0:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << Channel;
 80030b2:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 80030b4:	ea23 0304 	bic.w	r3, r3, r4
 80030b8:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 80030ba:	6a03      	ldr	r3, [r0, #32]
 80030bc:	408a      	lsls	r2, r1
 80030be:	431a      	orrs	r2, r3
 80030c0:	6202      	str	r2, [r0, #32]
 80030c2:	bd10      	pop	{r4, pc}

080030c4 <HAL_TIM_PWM_Start>:
{
 80030c4:	b510      	push	{r4, lr}
 80030c6:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80030c8:	2201      	movs	r2, #1
 80030ca:	6800      	ldr	r0, [r0, #0]
 80030cc:	f7ff ffee 	bl	80030ac <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80030d0:	6823      	ldr	r3, [r4, #0]
 80030d2:	4a06      	ldr	r2, [pc, #24]	; (80030ec <HAL_TIM_PWM_Start+0x28>)
}
 80030d4:	2000      	movs	r0, #0
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80030d6:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 80030d8:	bf02      	ittt	eq
 80030da:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 80030dc:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 80030e0:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	f042 0201 	orr.w	r2, r2, #1
 80030e8:	601a      	str	r2, [r3, #0]
}
 80030ea:	bd10      	pop	{r4, pc}
 80030ec:	40012c00 	.word	0x40012c00

080030f0 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 80030f0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80030f4:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	f04f 0302 	mov.w	r3, #2
 80030fc:	d018      	beq.n	8003130 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 80030fe:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8003102:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8003104:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8003106:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8003108:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800310a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800310e:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8003110:	685a      	ldr	r2, [r3, #4]
 8003112:	4322      	orrs	r2, r4
 8003114:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8003116:	689a      	ldr	r2, [r3, #8]
 8003118:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800311c:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800311e:	689a      	ldr	r2, [r3, #8]
 8003120:	430a      	orrs	r2, r1
 8003122:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8003124:	2301      	movs	r3, #1
 8003126:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800312a:	2300      	movs	r3, #0
 800312c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8003130:	4618      	mov	r0, r3

  return HAL_OK;
}
 8003132:	bd10      	pop	{r4, pc}

08003134 <HAL_TIMEx_CommutationCallback>:
 8003134:	4770      	bx	lr

08003136 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003136:	4770      	bx	lr

08003138 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003138:	6803      	ldr	r3, [r0, #0]
 800313a:	68da      	ldr	r2, [r3, #12]
 800313c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003140:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003142:	695a      	ldr	r2, [r3, #20]
 8003144:	f022 0201 	bic.w	r2, r2, #1
 8003148:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800314a:	2320      	movs	r3, #32
 800314c:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8003150:	4770      	bx	lr
	...

08003154 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003158:	6805      	ldr	r5, [r0, #0]
 800315a:	68c2      	ldr	r2, [r0, #12]
 800315c:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800315e:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003160:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003164:	4313      	orrs	r3, r2
 8003166:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003168:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 800316a:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800316c:	430b      	orrs	r3, r1
 800316e:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8003170:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8003174:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003178:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 800317a:	4313      	orrs	r3, r2
 800317c:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800317e:	696b      	ldr	r3, [r5, #20]
 8003180:	6982      	ldr	r2, [r0, #24]
 8003182:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003186:	4313      	orrs	r3, r2
 8003188:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800318a:	4b40      	ldr	r3, [pc, #256]	; (800328c <UART_SetConfig+0x138>)
{
 800318c:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 800318e:	429d      	cmp	r5, r3
 8003190:	f04f 0419 	mov.w	r4, #25
 8003194:	d146      	bne.n	8003224 <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003196:	f7ff fbe3 	bl	8002960 <HAL_RCC_GetPCLK2Freq>
 800319a:	fb04 f300 	mul.w	r3, r4, r0
 800319e:	f8d9 6004 	ldr.w	r6, [r9, #4]
 80031a2:	f04f 0864 	mov.w	r8, #100	; 0x64
 80031a6:	00b6      	lsls	r6, r6, #2
 80031a8:	fbb3 f3f6 	udiv	r3, r3, r6
 80031ac:	fbb3 f3f8 	udiv	r3, r3, r8
 80031b0:	011e      	lsls	r6, r3, #4
 80031b2:	f7ff fbd5 	bl	8002960 <HAL_RCC_GetPCLK2Freq>
 80031b6:	4360      	muls	r0, r4
 80031b8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	fbb0 f7f3 	udiv	r7, r0, r3
 80031c2:	f7ff fbcd 	bl	8002960 <HAL_RCC_GetPCLK2Freq>
 80031c6:	4360      	muls	r0, r4
 80031c8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80031d2:	fbb3 f3f8 	udiv	r3, r3, r8
 80031d6:	fb08 7313 	mls	r3, r8, r3, r7
 80031da:	011b      	lsls	r3, r3, #4
 80031dc:	3332      	adds	r3, #50	; 0x32
 80031de:	fbb3 f3f8 	udiv	r3, r3, r8
 80031e2:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 80031e6:	f7ff fbbb 	bl	8002960 <HAL_RCC_GetPCLK2Freq>
 80031ea:	4360      	muls	r0, r4
 80031ec:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80031f0:	0092      	lsls	r2, r2, #2
 80031f2:	fbb0 faf2 	udiv	sl, r0, r2
 80031f6:	f7ff fbb3 	bl	8002960 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80031fa:	4360      	muls	r0, r4
 80031fc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	fbb0 f3f3 	udiv	r3, r0, r3
 8003206:	fbb3 f3f8 	udiv	r3, r3, r8
 800320a:	fb08 a313 	mls	r3, r8, r3, sl
 800320e:	011b      	lsls	r3, r3, #4
 8003210:	3332      	adds	r3, #50	; 0x32
 8003212:	fbb3 f3f8 	udiv	r3, r3, r8
 8003216:	f003 030f 	and.w	r3, r3, #15
 800321a:	433b      	orrs	r3, r7
 800321c:	4433      	add	r3, r6
 800321e:	60ab      	str	r3, [r5, #8]
 8003220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003224:	f7ff fb8c 	bl	8002940 <HAL_RCC_GetPCLK1Freq>
 8003228:	fb04 f300 	mul.w	r3, r4, r0
 800322c:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8003230:	f04f 0864 	mov.w	r8, #100	; 0x64
 8003234:	00b6      	lsls	r6, r6, #2
 8003236:	fbb3 f3f6 	udiv	r3, r3, r6
 800323a:	fbb3 f3f8 	udiv	r3, r3, r8
 800323e:	011e      	lsls	r6, r3, #4
 8003240:	f7ff fb7e 	bl	8002940 <HAL_RCC_GetPCLK1Freq>
 8003244:	4360      	muls	r0, r4
 8003246:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	fbb0 f7f3 	udiv	r7, r0, r3
 8003250:	f7ff fb76 	bl	8002940 <HAL_RCC_GetPCLK1Freq>
 8003254:	4360      	muls	r0, r4
 8003256:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003260:	fbb3 f3f8 	udiv	r3, r3, r8
 8003264:	fb08 7313 	mls	r3, r8, r3, r7
 8003268:	011b      	lsls	r3, r3, #4
 800326a:	3332      	adds	r3, #50	; 0x32
 800326c:	fbb3 f3f8 	udiv	r3, r3, r8
 8003270:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8003274:	f7ff fb64 	bl	8002940 <HAL_RCC_GetPCLK1Freq>
 8003278:	4360      	muls	r0, r4
 800327a:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800327e:	0092      	lsls	r2, r2, #2
 8003280:	fbb0 faf2 	udiv	sl, r0, r2
 8003284:	f7ff fb5c 	bl	8002940 <HAL_RCC_GetPCLK1Freq>
 8003288:	e7b7      	b.n	80031fa <UART_SetConfig+0xa6>
 800328a:	bf00      	nop
 800328c:	40013800 	.word	0x40013800

08003290 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8003290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003292:	4604      	mov	r4, r0
 8003294:	460e      	mov	r6, r1
 8003296:	4617      	mov	r7, r2
 8003298:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 800329a:	6821      	ldr	r1, [r4, #0]
 800329c:	680b      	ldr	r3, [r1, #0]
 800329e:	ea36 0303 	bics.w	r3, r6, r3
 80032a2:	d101      	bne.n	80032a8 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 80032a4:	2000      	movs	r0, #0
}
 80032a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 80032a8:	1c6b      	adds	r3, r5, #1
 80032aa:	d0f7      	beq.n	800329c <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80032ac:	b995      	cbnz	r5, 80032d4 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80032ae:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 80032b0:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80032b2:	68da      	ldr	r2, [r3, #12]
 80032b4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80032b8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032ba:	695a      	ldr	r2, [r3, #20]
 80032bc:	f022 0201 	bic.w	r2, r2, #1
 80032c0:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80032c2:	2320      	movs	r3, #32
 80032c4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80032c8:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 80032cc:	2300      	movs	r3, #0
 80032ce:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 80032d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80032d4:	f7fe f89e 	bl	8001414 <HAL_GetTick>
 80032d8:	1bc0      	subs	r0, r0, r7
 80032da:	4285      	cmp	r5, r0
 80032dc:	d2dd      	bcs.n	800329a <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 80032de:	e7e6      	b.n	80032ae <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

080032e0 <HAL_UART_Init>:
{
 80032e0:	b510      	push	{r4, lr}
  if(huart == NULL)
 80032e2:	4604      	mov	r4, r0
 80032e4:	b340      	cbz	r0, 8003338 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 80032e6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80032ea:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80032ee:	b91b      	cbnz	r3, 80032f8 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80032f0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80032f4:	f002 fd98 	bl	8005e28 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80032f8:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80032fa:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80032fc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8003300:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8003302:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8003304:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003308:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800330a:	f7ff ff23 	bl	8003154 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800330e:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003310:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003312:	691a      	ldr	r2, [r3, #16]
 8003314:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003318:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800331a:	695a      	ldr	r2, [r3, #20]
 800331c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003320:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8003322:	68da      	ldr	r2, [r3, #12]
 8003324:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003328:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 800332a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800332c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800332e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8003332:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8003336:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003338:	2001      	movs	r0, #1
}
 800333a:	bd10      	pop	{r4, pc}

0800333c <HAL_UART_Transmit>:
{
 800333c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003340:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8003342:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8003346:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_READY)
 8003348:	2b20      	cmp	r3, #32
{
 800334a:	460d      	mov	r5, r1
 800334c:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 800334e:	d14e      	bne.n	80033ee <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0U))
 8003350:	2900      	cmp	r1, #0
 8003352:	d049      	beq.n	80033e8 <HAL_UART_Transmit+0xac>
 8003354:	2a00      	cmp	r2, #0
 8003356:	d047      	beq.n	80033e8 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8003358:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800335c:	2b01      	cmp	r3, #1
 800335e:	d046      	beq.n	80033ee <HAL_UART_Transmit+0xb2>
 8003360:	2301      	movs	r3, #1
 8003362:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003366:	2300      	movs	r3, #0
 8003368:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800336a:	2321      	movs	r3, #33	; 0x21
 800336c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8003370:	f7fe f850 	bl	8001414 <HAL_GetTick>
 8003374:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 8003376:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 800337a:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 800337e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8003380:	b29b      	uxth	r3, r3
 8003382:	b96b      	cbnz	r3, 80033a0 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003384:	463b      	mov	r3, r7
 8003386:	4632      	mov	r2, r6
 8003388:	2140      	movs	r1, #64	; 0x40
 800338a:	4620      	mov	r0, r4
 800338c:	f7ff ff80 	bl	8003290 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8003390:	b9a8      	cbnz	r0, 80033be <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8003392:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8003394:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8003398:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 800339c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 80033a0:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033a2:	4632      	mov	r2, r6
      huart->TxXferCount--;
 80033a4:	3b01      	subs	r3, #1
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80033aa:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033ac:	2180      	movs	r1, #128	; 0x80
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80033ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033b2:	4620      	mov	r0, r4
 80033b4:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80033b6:	d10e      	bne.n	80033d6 <HAL_UART_Transmit+0x9a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033b8:	f7ff ff6a 	bl	8003290 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80033bc:	b110      	cbz	r0, 80033c4 <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 80033be:	2003      	movs	r0, #3
 80033c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80033c4:	882b      	ldrh	r3, [r5, #0]
 80033c6:	6822      	ldr	r2, [r4, #0]
 80033c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033cc:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80033ce:	6923      	ldr	r3, [r4, #16]
 80033d0:	b943      	cbnz	r3, 80033e4 <HAL_UART_Transmit+0xa8>
          pData +=2U;
 80033d2:	3502      	adds	r5, #2
 80033d4:	e7d3      	b.n	800337e <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033d6:	f7ff ff5b 	bl	8003290 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80033da:	2800      	cmp	r0, #0
 80033dc:	d1ef      	bne.n	80033be <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80033de:	6823      	ldr	r3, [r4, #0]
 80033e0:	782a      	ldrb	r2, [r5, #0]
 80033e2:	605a      	str	r2, [r3, #4]
 80033e4:	3501      	adds	r5, #1
 80033e6:	e7ca      	b.n	800337e <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 80033e8:	2001      	movs	r0, #1
 80033ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80033ee:	2002      	movs	r0, #2
}
 80033f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080033f4 <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 80033f4:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80033f8:	2b20      	cmp	r3, #32
 80033fa:	d120      	bne.n	800343e <HAL_UART_Receive_IT+0x4a>
    if((pData == NULL) || (Size == 0U))
 80033fc:	b1e9      	cbz	r1, 800343a <HAL_UART_Receive_IT+0x46>
 80033fe:	b1e2      	cbz	r2, 800343a <HAL_UART_Receive_IT+0x46>
    __HAL_LOCK(huart);
 8003400:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003404:	2b01      	cmp	r3, #1
 8003406:	d01a      	beq.n	800343e <HAL_UART_Receive_IT+0x4a>
    huart->RxXferCount = Size;
 8003408:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 800340a:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800340c:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800340e:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003410:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003412:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003416:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 8003418:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800341a:	68d1      	ldr	r1, [r2, #12]
    __HAL_UNLOCK(huart);
 800341c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003420:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8003424:	60d1      	str	r1, [r2, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003426:	6951      	ldr	r1, [r2, #20]
    return HAL_OK;
 8003428:	4618      	mov	r0, r3
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800342a:	f041 0101 	orr.w	r1, r1, #1
 800342e:	6151      	str	r1, [r2, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003430:	68d1      	ldr	r1, [r2, #12]
 8003432:	f041 0120 	orr.w	r1, r1, #32
 8003436:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 8003438:	4770      	bx	lr
      return HAL_ERROR;
 800343a:	2001      	movs	r0, #1
 800343c:	4770      	bx	lr
    return HAL_BUSY;
 800343e:	2002      	movs	r0, #2
}
 8003440:	4770      	bx	lr
	...

08003444 <HAL_UART_Transmit_DMA>:
{
 8003444:	b538      	push	{r3, r4, r5, lr}
 8003446:	4604      	mov	r4, r0
 8003448:	4613      	mov	r3, r2
  if(huart->gState == HAL_UART_STATE_READY)
 800344a:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 800344e:	2a20      	cmp	r2, #32
 8003450:	d12a      	bne.n	80034a8 <HAL_UART_Transmit_DMA+0x64>
    if((pData == NULL) || (Size == 0U))
 8003452:	b339      	cbz	r1, 80034a4 <HAL_UART_Transmit_DMA+0x60>
 8003454:	b333      	cbz	r3, 80034a4 <HAL_UART_Transmit_DMA+0x60>
    __HAL_LOCK(huart);
 8003456:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 800345a:	2a01      	cmp	r2, #1
 800345c:	d024      	beq.n	80034a8 <HAL_UART_Transmit_DMA+0x64>
 800345e:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003460:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 8003462:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003466:	2221      	movs	r2, #33	; 0x21
    huart->TxXferCount = Size;
 8003468:	84e3      	strh	r3, [r4, #38]	; 0x26
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800346a:	6b20      	ldr	r0, [r4, #48]	; 0x30
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800346c:	63e5      	str	r5, [r4, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800346e:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003472:	4a0e      	ldr	r2, [pc, #56]	; (80034ac <HAL_UART_Transmit_DMA+0x68>)
    huart->TxXferSize = Size;
 8003474:	84a3      	strh	r3, [r4, #36]	; 0x24
    huart->pTxBuffPtr = pData;
 8003476:	6221      	str	r1, [r4, #32]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003478:	6282      	str	r2, [r0, #40]	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800347a:	4a0d      	ldr	r2, [pc, #52]	; (80034b0 <HAL_UART_Transmit_DMA+0x6c>)
    huart->hdmatx->XferAbortCallback = NULL;
 800347c:	6345      	str	r5, [r0, #52]	; 0x34
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800347e:	62c2      	str	r2, [r0, #44]	; 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003480:	4a0c      	ldr	r2, [pc, #48]	; (80034b4 <HAL_UART_Transmit_DMA+0x70>)
 8003482:	6302      	str	r2, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003484:	6822      	ldr	r2, [r4, #0]
 8003486:	3204      	adds	r2, #4
 8003488:	f7fe fbc0 	bl	8001c0c <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800348c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003490:	6823      	ldr	r3, [r4, #0]
    return HAL_OK;
 8003492:	4628      	mov	r0, r5
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003494:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003496:	695a      	ldr	r2, [r3, #20]
    __HAL_UNLOCK(huart);
 8003498:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800349c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80034a0:	615a      	str	r2, [r3, #20]
    return HAL_OK;
 80034a2:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 80034a4:	2001      	movs	r0, #1
 80034a6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 80034a8:	2002      	movs	r0, #2
}
 80034aa:	bd38      	pop	{r3, r4, r5, pc}
 80034ac:	080034bb 	.word	0x080034bb
 80034b0:	080034e9 	.word	0x080034e9
 80034b4:	08003571 	.word	0x08003571

080034b8 <HAL_UART_TxCpltCallback>:
 80034b8:	4770      	bx	lr

080034ba <UART_DMATransmitCplt>:
{
 80034ba:	b508      	push	{r3, lr}
  if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80034bc:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80034be:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f013 0320 	ands.w	r3, r3, #32
 80034c6:	d10a      	bne.n	80034de <UART_DMATransmitCplt+0x24>
    huart->TxXferCount = 0U;
 80034c8:	84d3      	strh	r3, [r2, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80034ca:	6813      	ldr	r3, [r2, #0]
 80034cc:	695a      	ldr	r2, [r3, #20]
 80034ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034d2:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80034d4:	68da      	ldr	r2, [r3, #12]
 80034d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034da:	60da      	str	r2, [r3, #12]
 80034dc:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 80034de:	4610      	mov	r0, r2
 80034e0:	f7ff ffea 	bl	80034b8 <HAL_UART_TxCpltCallback>
 80034e4:	bd08      	pop	{r3, pc}

080034e6 <HAL_UART_TxHalfCpltCallback>:
 80034e6:	4770      	bx	lr

080034e8 <UART_DMATxHalfCplt>:
{
 80034e8:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 80034ea:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80034ec:	f7ff fffb 	bl	80034e6 <HAL_UART_TxHalfCpltCallback>
 80034f0:	bd08      	pop	{r3, pc}

080034f2 <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 80034f2:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 80034f6:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 80034f8:	2b22      	cmp	r3, #34	; 0x22
 80034fa:	d136      	bne.n	800356a <UART_Receive_IT+0x78>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80034fc:	6883      	ldr	r3, [r0, #8]
 80034fe:	6901      	ldr	r1, [r0, #16]
 8003500:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003504:	6802      	ldr	r2, [r0, #0]
 8003506:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003508:	d123      	bne.n	8003552 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800350a:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800350c:	b9e9      	cbnz	r1, 800354a <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800350e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003512:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8003516:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 8003518:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 800351a:	3c01      	subs	r4, #1
 800351c:	b2a4      	uxth	r4, r4
 800351e:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8003520:	b98c      	cbnz	r4, 8003546 <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003522:	6803      	ldr	r3, [r0, #0]
 8003524:	68da      	ldr	r2, [r3, #12]
 8003526:	f022 0220 	bic.w	r2, r2, #32
 800352a:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800352c:	68da      	ldr	r2, [r3, #12]
 800352e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003532:	60da      	str	r2, [r3, #12]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003534:	695a      	ldr	r2, [r3, #20]
 8003536:	f022 0201 	bic.w	r2, r2, #1
 800353a:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800353c:	2320      	movs	r3, #32
 800353e:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8003542:	f002 f95d 	bl	8005800 <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 8003546:	2000      	movs	r0, #0
}
 8003548:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800354a:	b2d2      	uxtb	r2, r2
 800354c:	f823 2b01 	strh.w	r2, [r3], #1
 8003550:	e7e1      	b.n	8003516 <UART_Receive_IT+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8003552:	b921      	cbnz	r1, 800355e <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003554:	1c59      	adds	r1, r3, #1
 8003556:	6852      	ldr	r2, [r2, #4]
 8003558:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800355a:	701a      	strb	r2, [r3, #0]
 800355c:	e7dc      	b.n	8003518 <UART_Receive_IT+0x26>
 800355e:	6852      	ldr	r2, [r2, #4]
 8003560:	1c59      	adds	r1, r3, #1
 8003562:	6281      	str	r1, [r0, #40]	; 0x28
 8003564:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003568:	e7f7      	b.n	800355a <UART_Receive_IT+0x68>
    return HAL_BUSY;
 800356a:	2002      	movs	r0, #2
 800356c:	bd10      	pop	{r4, pc}

0800356e <HAL_UART_ErrorCallback>:
 800356e:	4770      	bx	lr

08003570 <UART_DMAError>:
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003570:	6a41      	ldr	r1, [r0, #36]	; 0x24
{
 8003572:	b508      	push	{r3, lr}
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003574:	680b      	ldr	r3, [r1, #0]
 8003576:	695a      	ldr	r2, [r3, #20]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003578:	f891 0039 	ldrb.w	r0, [r1, #57]	; 0x39
 800357c:	2821      	cmp	r0, #33	; 0x21
 800357e:	d10a      	bne.n	8003596 <UART_DMAError+0x26>
 8003580:	0612      	lsls	r2, r2, #24
 8003582:	d508      	bpl.n	8003596 <UART_DMAError+0x26>
    huart->TxXferCount = 0U;
 8003584:	2200      	movs	r2, #0
 8003586:	84ca      	strh	r2, [r1, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003588:	68da      	ldr	r2, [r3, #12]
 800358a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800358e:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8003590:	2220      	movs	r2, #32
 8003592:	f881 2039 	strb.w	r2, [r1, #57]	; 0x39
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 8003596:	695b      	ldr	r3, [r3, #20]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003598:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
 800359c:	2a22      	cmp	r2, #34	; 0x22
 800359e:	d106      	bne.n	80035ae <UART_DMAError+0x3e>
 80035a0:	065b      	lsls	r3, r3, #25
 80035a2:	d504      	bpl.n	80035ae <UART_DMAError+0x3e>
    huart->RxXferCount = 0U;
 80035a4:	2300      	movs	r3, #0
    UART_EndRxTransfer(huart);
 80035a6:	4608      	mov	r0, r1
    huart->RxXferCount = 0U;
 80035a8:	85cb      	strh	r3, [r1, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80035aa:	f7ff fdc5 	bl	8003138 <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80035ae:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 80035b0:	4608      	mov	r0, r1
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80035b2:	f043 0310 	orr.w	r3, r3, #16
 80035b6:	63cb      	str	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 80035b8:	f7ff ffd9 	bl	800356e <HAL_UART_ErrorCallback>
 80035bc:	bd08      	pop	{r3, pc}
	...

080035c0 <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80035c0:	6803      	ldr	r3, [r0, #0]
{
 80035c2:	b570      	push	{r4, r5, r6, lr}
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80035c4:	681a      	ldr	r2, [r3, #0]
{
 80035c6:	4604      	mov	r4, r0
  if(errorflags == RESET)
 80035c8:	0716      	lsls	r6, r2, #28
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80035ca:	68d9      	ldr	r1, [r3, #12]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80035cc:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 80035ce:	d107      	bne.n	80035e0 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80035d0:	0696      	lsls	r6, r2, #26
 80035d2:	d55a      	bpl.n	800368a <HAL_UART_IRQHandler+0xca>
 80035d4:	068d      	lsls	r5, r1, #26
 80035d6:	d558      	bpl.n	800368a <HAL_UART_IRQHandler+0xca>
}
 80035d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 80035dc:	f7ff bf89 	b.w	80034f2 <UART_Receive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80035e0:	f015 0501 	ands.w	r5, r5, #1
 80035e4:	d102      	bne.n	80035ec <HAL_UART_IRQHandler+0x2c>
 80035e6:	f411 7f90 	tst.w	r1, #288	; 0x120
 80035ea:	d04e      	beq.n	800368a <HAL_UART_IRQHandler+0xca>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80035ec:	07d3      	lsls	r3, r2, #31
 80035ee:	d505      	bpl.n	80035fc <HAL_UART_IRQHandler+0x3c>
 80035f0:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80035f2:	bf42      	ittt	mi
 80035f4:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 80035f6:	f043 0301 	orrmi.w	r3, r3, #1
 80035fa:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80035fc:	0750      	lsls	r0, r2, #29
 80035fe:	d504      	bpl.n	800360a <HAL_UART_IRQHandler+0x4a>
 8003600:	b11d      	cbz	r5, 800360a <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003602:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003604:	f043 0302 	orr.w	r3, r3, #2
 8003608:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800360a:	0793      	lsls	r3, r2, #30
 800360c:	d504      	bpl.n	8003618 <HAL_UART_IRQHandler+0x58>
 800360e:	b11d      	cbz	r5, 8003618 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003610:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003612:	f043 0304 	orr.w	r3, r3, #4
 8003616:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003618:	0716      	lsls	r6, r2, #28
 800361a:	d504      	bpl.n	8003626 <HAL_UART_IRQHandler+0x66>
 800361c:	b11d      	cbz	r5, 8003626 <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800361e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003620:	f043 0308 	orr.w	r3, r3, #8
 8003624:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003626:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003628:	2b00      	cmp	r3, #0
 800362a:	d066      	beq.n	80036fa <HAL_UART_IRQHandler+0x13a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800362c:	0695      	lsls	r5, r2, #26
 800362e:	d504      	bpl.n	800363a <HAL_UART_IRQHandler+0x7a>
 8003630:	0688      	lsls	r0, r1, #26
 8003632:	d502      	bpl.n	800363a <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8003634:	4620      	mov	r0, r4
 8003636:	f7ff ff5c 	bl	80034f2 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800363a:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 800363c:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800363e:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003640:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003642:	0711      	lsls	r1, r2, #28
 8003644:	d402      	bmi.n	800364c <HAL_UART_IRQHandler+0x8c>
 8003646:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 800364a:	d01a      	beq.n	8003682 <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 800364c:	f7ff fd74 	bl	8003138 <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003650:	6823      	ldr	r3, [r4, #0]
 8003652:	695a      	ldr	r2, [r3, #20]
 8003654:	0652      	lsls	r2, r2, #25
 8003656:	d510      	bpl.n	800367a <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003658:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 800365a:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800365c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003660:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8003662:	b150      	cbz	r0, 800367a <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003664:	4b25      	ldr	r3, [pc, #148]	; (80036fc <HAL_UART_IRQHandler+0x13c>)
 8003666:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003668:	f7fe fb0e 	bl	8001c88 <HAL_DMA_Abort_IT>
 800366c:	2800      	cmp	r0, #0
 800366e:	d044      	beq.n	80036fa <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003670:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8003672:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003676:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003678:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 800367a:	4620      	mov	r0, r4
 800367c:	f7ff ff77 	bl	800356e <HAL_UART_ErrorCallback>
 8003680:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8003682:	f7ff ff74 	bl	800356e <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003686:	63e5      	str	r5, [r4, #60]	; 0x3c
 8003688:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800368a:	0616      	lsls	r6, r2, #24
 800368c:	d527      	bpl.n	80036de <HAL_UART_IRQHandler+0x11e>
 800368e:	060d      	lsls	r5, r1, #24
 8003690:	d525      	bpl.n	80036de <HAL_UART_IRQHandler+0x11e>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8003692:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8003696:	2a21      	cmp	r2, #33	; 0x21
 8003698:	d12f      	bne.n	80036fa <HAL_UART_IRQHandler+0x13a>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800369a:	68a2      	ldr	r2, [r4, #8]
 800369c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80036a0:	6a22      	ldr	r2, [r4, #32]
 80036a2:	d117      	bne.n	80036d4 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80036a4:	8811      	ldrh	r1, [r2, #0]
 80036a6:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80036aa:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80036ac:	6921      	ldr	r1, [r4, #16]
 80036ae:	b979      	cbnz	r1, 80036d0 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 80036b0:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 80036b2:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 80036b4:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80036b6:	3a01      	subs	r2, #1
 80036b8:	b292      	uxth	r2, r2
 80036ba:	84e2      	strh	r2, [r4, #38]	; 0x26
 80036bc:	b9ea      	cbnz	r2, 80036fa <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80036be:	68da      	ldr	r2, [r3, #12]
 80036c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036c4:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80036c6:	68da      	ldr	r2, [r3, #12]
 80036c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036cc:	60da      	str	r2, [r3, #12]
 80036ce:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 80036d0:	3201      	adds	r2, #1
 80036d2:	e7ee      	b.n	80036b2 <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80036d4:	1c51      	adds	r1, r2, #1
 80036d6:	6221      	str	r1, [r4, #32]
 80036d8:	7812      	ldrb	r2, [r2, #0]
 80036da:	605a      	str	r2, [r3, #4]
 80036dc:	e7ea      	b.n	80036b4 <HAL_UART_IRQHandler+0xf4>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80036de:	0650      	lsls	r0, r2, #25
 80036e0:	d50b      	bpl.n	80036fa <HAL_UART_IRQHandler+0x13a>
 80036e2:	064a      	lsls	r2, r1, #25
 80036e4:	d509      	bpl.n	80036fa <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80036e6:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 80036e8:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80036ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036ee:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80036f0:	2320      	movs	r3, #32
 80036f2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80036f6:	f7ff fedf 	bl	80034b8 <HAL_UART_TxCpltCallback>
 80036fa:	bd70      	pop	{r4, r5, r6, pc}
 80036fc:	08003701 	.word	0x08003701

08003700 <UART_DMAAbortOnError>:
{
 8003700:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8003702:	2300      	movs	r3, #0
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003704:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8003706:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003708:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800370a:	f7ff ff30 	bl	800356e <HAL_UART_ErrorCallback>
 800370e:	bd08      	pop	{r3, pc}

08003710 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003710:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8003712:	f000 fe79 	bl	8004408 <vTaskStartScheduler>
  
  return osOK;
}
 8003716:	2000      	movs	r0, #0
 8003718:	bd08      	pop	{r3, pc}

0800371a <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 800371a:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800371c:	f001 f90c 	bl	8004938 <xTaskGetSchedulerState>
 8003720:	2801      	cmp	r0, #1
 8003722:	d003      	beq.n	800372c <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8003724:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8003728:	f000 b8ec 	b.w	8003904 <xPortSysTickHandler>
 800372c:	bd08      	pop	{r3, pc}

0800372e <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800372e:	f100 0308 	add.w	r3, r0, #8
 8003732:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003734:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003738:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800373a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800373c:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800373e:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003740:	6003      	str	r3, [r0, #0]
 8003742:	4770      	bx	lr

08003744 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003744:	2300      	movs	r3, #0
 8003746:	6103      	str	r3, [r0, #16]
 8003748:	4770      	bx	lr

0800374a <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800374a:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800374c:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800374e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003750:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003752:	689a      	ldr	r2, [r3, #8]
 8003754:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003756:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8003758:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800375a:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800375c:	3301      	adds	r3, #1
 800375e:	6003      	str	r3, [r0, #0]
 8003760:	4770      	bx	lr

08003762 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003762:	680a      	ldr	r2, [r1, #0]
{
 8003764:	b530      	push	{r4, r5, lr}
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003766:	1c53      	adds	r3, r2, #1
 8003768:	d10a      	bne.n	8003780 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800376a:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800376c:	685a      	ldr	r2, [r3, #4]
 800376e:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003770:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003772:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8003774:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8003776:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003778:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800377a:	3301      	adds	r3, #1
 800377c:	6003      	str	r3, [r0, #0]
 800377e:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003780:	f100 0308 	add.w	r3, r0, #8
 8003784:	685c      	ldr	r4, [r3, #4]
 8003786:	6825      	ldr	r5, [r4, #0]
 8003788:	42aa      	cmp	r2, r5
 800378a:	d3ef      	bcc.n	800376c <vListInsert+0xa>
 800378c:	4623      	mov	r3, r4
 800378e:	e7f9      	b.n	8003784 <vListInsert+0x22>

08003790 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003790:	6841      	ldr	r1, [r0, #4]
 8003792:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003794:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003796:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003798:	6882      	ldr	r2, [r0, #8]
 800379a:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800379c:	6859      	ldr	r1, [r3, #4]
 800379e:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80037a0:	bf08      	it	eq
 80037a2:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80037a4:	2200      	movs	r2, #0
 80037a6:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80037a8:	6818      	ldr	r0, [r3, #0]
 80037aa:	3801      	subs	r0, #1
 80037ac:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 80037ae:	4770      	bx	lr

080037b0 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80037b0:	4b0a      	ldr	r3, [pc, #40]	; (80037dc <prvTaskExitError+0x2c>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	3301      	adds	r3, #1
 80037b6:	d008      	beq.n	80037ca <prvTaskExitError+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80037b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037bc:	f383 8811 	msr	BASEPRI, r3
 80037c0:	f3bf 8f6f 	isb	sy
 80037c4:	f3bf 8f4f 	dsb	sy
 80037c8:	e7fe      	b.n	80037c8 <prvTaskExitError+0x18>
 80037ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ce:	f383 8811 	msr	BASEPRI, r3
 80037d2:	f3bf 8f6f 	isb	sy
 80037d6:	f3bf 8f4f 	dsb	sy
 80037da:	e7fe      	b.n	80037da <prvTaskExitError+0x2a>
 80037dc:	20000008 	.word	0x20000008

080037e0 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80037e0:	4806      	ldr	r0, [pc, #24]	; (80037fc <prvPortStartFirstTask+0x1c>)
 80037e2:	6800      	ldr	r0, [r0, #0]
 80037e4:	6800      	ldr	r0, [r0, #0]
 80037e6:	f380 8808 	msr	MSP, r0
 80037ea:	b662      	cpsie	i
 80037ec:	b661      	cpsie	f
 80037ee:	f3bf 8f4f 	dsb	sy
 80037f2:	f3bf 8f6f 	isb	sy
 80037f6:	df00      	svc	0
 80037f8:	bf00      	nop
 80037fa:	0000      	.short	0x0000
 80037fc:	e000ed08 	.word	0xe000ed08

08003800 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003800:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003804:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003808:	4b05      	ldr	r3, [pc, #20]	; (8003820 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800380a:	f021 0101 	bic.w	r1, r1, #1
 800380e:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003812:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003816:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800381a:	3840      	subs	r0, #64	; 0x40
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	080037b1 	.word	0x080037b1
	...

08003830 <SVC_Handler>:
	__asm volatile (
 8003830:	4b07      	ldr	r3, [pc, #28]	; (8003850 <pxCurrentTCBConst2>)
 8003832:	6819      	ldr	r1, [r3, #0]
 8003834:	6808      	ldr	r0, [r1, #0]
 8003836:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800383a:	f380 8809 	msr	PSP, r0
 800383e:	f3bf 8f6f 	isb	sy
 8003842:	f04f 0000 	mov.w	r0, #0
 8003846:	f380 8811 	msr	BASEPRI, r0
 800384a:	f04e 0e0d 	orr.w	lr, lr, #13
 800384e:	4770      	bx	lr

08003850 <pxCurrentTCBConst2>:
 8003850:	20005084 	.word	0x20005084

08003854 <vPortEnterCritical>:
 8003854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003858:	f383 8811 	msr	BASEPRI, r3
 800385c:	f3bf 8f6f 	isb	sy
 8003860:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003864:	4a0a      	ldr	r2, [pc, #40]	; (8003890 <vPortEnterCritical+0x3c>)
 8003866:	6813      	ldr	r3, [r2, #0]
 8003868:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800386a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800386c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800386e:	d10d      	bne.n	800388c <vPortEnterCritical+0x38>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003870:	4b08      	ldr	r3, [pc, #32]	; (8003894 <vPortEnterCritical+0x40>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003878:	d008      	beq.n	800388c <vPortEnterCritical+0x38>
 800387a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800387e:	f383 8811 	msr	BASEPRI, r3
 8003882:	f3bf 8f6f 	isb	sy
 8003886:	f3bf 8f4f 	dsb	sy
 800388a:	e7fe      	b.n	800388a <vPortEnterCritical+0x36>
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop
 8003890:	20000008 	.word	0x20000008
 8003894:	e000ed04 	.word	0xe000ed04

08003898 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8003898:	4a08      	ldr	r2, [pc, #32]	; (80038bc <vPortExitCritical+0x24>)
 800389a:	6813      	ldr	r3, [r2, #0]
 800389c:	b943      	cbnz	r3, 80038b0 <vPortExitCritical+0x18>
 800389e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038a2:	f383 8811 	msr	BASEPRI, r3
 80038a6:	f3bf 8f6f 	isb	sy
 80038aa:	f3bf 8f4f 	dsb	sy
 80038ae:	e7fe      	b.n	80038ae <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80038b0:	3b01      	subs	r3, #1
 80038b2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80038b4:	b90b      	cbnz	r3, 80038ba <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80038b6:	f383 8811 	msr	BASEPRI, r3
 80038ba:	4770      	bx	lr
 80038bc:	20000008 	.word	0x20000008

080038c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80038c0:	f3ef 8009 	mrs	r0, PSP
 80038c4:	f3bf 8f6f 	isb	sy
 80038c8:	4b0d      	ldr	r3, [pc, #52]	; (8003900 <pxCurrentTCBConst>)
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80038d0:	6010      	str	r0, [r2, #0]
 80038d2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80038d6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80038da:	f380 8811 	msr	BASEPRI, r0
 80038de:	f000 ff45 	bl	800476c <vTaskSwitchContext>
 80038e2:	f04f 0000 	mov.w	r0, #0
 80038e6:	f380 8811 	msr	BASEPRI, r0
 80038ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80038ee:	6819      	ldr	r1, [r3, #0]
 80038f0:	6808      	ldr	r0, [r1, #0]
 80038f2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80038f6:	f380 8809 	msr	PSP, r0
 80038fa:	f3bf 8f6f 	isb	sy
 80038fe:	4770      	bx	lr

08003900 <pxCurrentTCBConst>:
 8003900:	20005084 	.word	0x20005084

08003904 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003904:	b508      	push	{r3, lr}
	__asm volatile
 8003906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800390a:	f383 8811 	msr	BASEPRI, r3
 800390e:	f3bf 8f6f 	isb	sy
 8003912:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003916:	f000 fdc1 	bl	800449c <xTaskIncrementTick>
 800391a:	b118      	cbz	r0, 8003924 <xPortSysTickHandler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800391c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003920:	4b02      	ldr	r3, [pc, #8]	; (800392c <xPortSysTickHandler+0x28>)
 8003922:	601a      	str	r2, [r3, #0]
	__asm volatile
 8003924:	2300      	movs	r3, #0
 8003926:	f383 8811 	msr	BASEPRI, r3
 800392a:	bd08      	pop	{r3, pc}
 800392c:	e000ed04 	.word	0xe000ed04

08003930 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003930:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003934:	4b05      	ldr	r3, [pc, #20]	; (800394c <vPortSetupTimerInterrupt+0x1c>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	fbb3 f3f2 	udiv	r3, r3, r2
 800393c:	4a04      	ldr	r2, [pc, #16]	; (8003950 <vPortSetupTimerInterrupt+0x20>)
 800393e:	3b01      	subs	r3, #1
 8003940:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003942:	2207      	movs	r2, #7
 8003944:	4b03      	ldr	r3, [pc, #12]	; (8003954 <vPortSetupTimerInterrupt+0x24>)
 8003946:	601a      	str	r2, [r3, #0]
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	20000050 	.word	0x20000050
 8003950:	e000e014 	.word	0xe000e014
 8003954:	e000e010 	.word	0xe000e010

08003958 <xPortStartScheduler>:
{
 8003958:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800395a:	4b1f      	ldr	r3, [pc, #124]	; (80039d8 <xPortStartScheduler+0x80>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800395c:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800395e:	781a      	ldrb	r2, [r3, #0]
 8003960:	b2d2      	uxtb	r2, r2
 8003962:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003964:	22ff      	movs	r2, #255	; 0xff
 8003966:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003968:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800396a:	4a1c      	ldr	r2, [pc, #112]	; (80039dc <xPortStartScheduler+0x84>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800396c:	b2db      	uxtb	r3, r3
 800396e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003972:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8003976:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800397a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800397c:	2207      	movs	r2, #7
 800397e:	4b18      	ldr	r3, [pc, #96]	; (80039e0 <xPortStartScheduler+0x88>)
 8003980:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003982:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8003986:	1e54      	subs	r4, r2, #1
 8003988:	0600      	lsls	r0, r0, #24
 800398a:	d41c      	bmi.n	80039c6 <xPortStartScheduler+0x6e>
 800398c:	b101      	cbz	r1, 8003990 <xPortStartScheduler+0x38>
 800398e:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003994:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8003998:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800399a:	9b01      	ldr	r3, [sp, #4]
 800399c:	4a0e      	ldr	r2, [pc, #56]	; (80039d8 <xPortStartScheduler+0x80>)
 800399e:	b2db      	uxtb	r3, r3
 80039a0:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80039a2:	4b10      	ldr	r3, [pc, #64]	; (80039e4 <xPortStartScheduler+0x8c>)
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80039aa:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80039b2:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 80039b4:	f7ff ffbc 	bl	8003930 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80039b8:	2200      	movs	r2, #0
 80039ba:	4b0b      	ldr	r3, [pc, #44]	; (80039e8 <xPortStartScheduler+0x90>)
 80039bc:	601a      	str	r2, [r3, #0]
	prvPortStartFirstTask();
 80039be:	f7ff ff0f 	bl	80037e0 <prvPortStartFirstTask>
	prvTaskExitError();
 80039c2:	f7ff fef5 	bl	80037b0 <prvTaskExitError>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80039c6:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80039ca:	2101      	movs	r1, #1
 80039cc:	0052      	lsls	r2, r2, #1
 80039ce:	b2d2      	uxtb	r2, r2
 80039d0:	f88d 2003 	strb.w	r2, [sp, #3]
 80039d4:	4622      	mov	r2, r4
 80039d6:	e7d4      	b.n	8003982 <xPortStartScheduler+0x2a>
 80039d8:	e000e400 	.word	0xe000e400
 80039dc:	20000244 	.word	0x20000244
 80039e0:	20000248 	.word	0x20000248
 80039e4:	e000ed20 	.word	0xe000ed20
 80039e8:	20000008 	.word	0x20000008

080039ec <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 80039ec:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80039f0:	2b0f      	cmp	r3, #15
 80039f2:	d90e      	bls.n	8003a12 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80039f4:	4a10      	ldr	r2, [pc, #64]	; (8003a38 <vPortValidateInterruptPriority+0x4c>)
 80039f6:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80039f8:	4a10      	ldr	r2, [pc, #64]	; (8003a3c <vPortValidateInterruptPriority+0x50>)
 80039fa:	7812      	ldrb	r2, [r2, #0]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d908      	bls.n	8003a12 <vPortValidateInterruptPriority+0x26>
	__asm volatile
 8003a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a04:	f383 8811 	msr	BASEPRI, r3
 8003a08:	f3bf 8f6f 	isb	sy
 8003a0c:	f3bf 8f4f 	dsb	sy
 8003a10:	e7fe      	b.n	8003a10 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003a12:	4b0b      	ldr	r3, [pc, #44]	; (8003a40 <vPortValidateInterruptPriority+0x54>)
 8003a14:	4a0b      	ldr	r2, [pc, #44]	; (8003a44 <vPortValidateInterruptPriority+0x58>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	6812      	ldr	r2, [r2, #0]
 8003a1a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d908      	bls.n	8003a34 <vPortValidateInterruptPriority+0x48>
 8003a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a26:	f383 8811 	msr	BASEPRI, r3
 8003a2a:	f3bf 8f6f 	isb	sy
 8003a2e:	f3bf 8f4f 	dsb	sy
 8003a32:	e7fe      	b.n	8003a32 <vPortValidateInterruptPriority+0x46>
 8003a34:	4770      	bx	lr
 8003a36:	bf00      	nop
 8003a38:	e000e3f0 	.word	0xe000e3f0
 8003a3c:	20000244 	.word	0x20000244
 8003a40:	e000ed0c 	.word	0xe000ed0c
 8003a44:	20000248 	.word	0x20000248

08003a48 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003a48:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003a4a:	4b0f      	ldr	r3, [pc, #60]	; (8003a88 <prvInsertBlockIntoFreeList+0x40>)
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	4282      	cmp	r2, r0
 8003a50:	d318      	bcc.n	8003a84 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003a52:	685c      	ldr	r4, [r3, #4]
 8003a54:	1919      	adds	r1, r3, r4
 8003a56:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003a58:	bf01      	itttt	eq
 8003a5a:	6841      	ldreq	r1, [r0, #4]
 8003a5c:	4618      	moveq	r0, r3
 8003a5e:	1909      	addeq	r1, r1, r4
 8003a60:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003a62:	6844      	ldr	r4, [r0, #4]
 8003a64:	1901      	adds	r1, r0, r4
 8003a66:	428a      	cmp	r2, r1
 8003a68:	d107      	bne.n	8003a7a <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003a6a:	4908      	ldr	r1, [pc, #32]	; (8003a8c <prvInsertBlockIntoFreeList+0x44>)
 8003a6c:	6809      	ldr	r1, [r1, #0]
 8003a6e:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003a70:	bf1f      	itttt	ne
 8003a72:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003a74:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003a76:	1909      	addne	r1, r1, r4
 8003a78:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003a7a:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003a7c:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003a7e:	bf18      	it	ne
 8003a80:	6018      	strne	r0, [r3, #0]
 8003a82:	bd10      	pop	{r4, pc}
 8003a84:	4613      	mov	r3, r2
 8003a86:	e7e1      	b.n	8003a4c <prvInsertBlockIntoFreeList+0x4>
 8003a88:	2000507c 	.word	0x2000507c
 8003a8c:	2000024c 	.word	0x2000024c

08003a90 <pvPortMalloc>:
{
 8003a90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a94:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8003a96:	f000 fcf3 	bl	8004480 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8003a9a:	493d      	ldr	r1, [pc, #244]	; (8003b90 <pvPortMalloc+0x100>)
 8003a9c:	4d3d      	ldr	r5, [pc, #244]	; (8003b94 <pvPortMalloc+0x104>)
 8003a9e:	680b      	ldr	r3, [r1, #0]
 8003aa0:	b9fb      	cbnz	r3, 8003ae2 <pvPortMalloc+0x52>
	uxAddress = ( size_t ) ucHeap;
 8003aa2:	4a3d      	ldr	r2, [pc, #244]	; (8003b98 <pvPortMalloc+0x108>)
	xStart.xBlockSize = ( size_t ) 0;
 8003aa4:	2000      	movs	r0, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003aa6:	0756      	lsls	r6, r2, #29
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003aa8:	bf0f      	iteee	eq
 8003aaa:	f644 6320 	movweq	r3, #20000	; 0x4e20
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003aae:	3207      	addne	r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003ab0:	4b3a      	ldrne	r3, [pc, #232]	; (8003b9c <pvPortMalloc+0x10c>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003ab2:	f022 0207 	bicne.w	r2, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003ab6:	bf18      	it	ne
 8003ab8:	1a9b      	subne	r3, r3, r2
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003aba:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003abc:	4e38      	ldr	r6, [pc, #224]	; (8003ba0 <pvPortMalloc+0x110>)
	uxAddress -= xHeapStructSize;
 8003abe:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003ac0:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 8003ac4:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003ac6:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 8003ac8:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003aca:	6018      	str	r0, [r3, #0]
	pxEnd = ( void * ) uxAddress;
 8003acc:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003ace:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003ad0:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003ad2:	4b34      	ldr	r3, [pc, #208]	; (8003ba4 <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003ad4:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003ad6:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003ad8:	4b33      	ldr	r3, [pc, #204]	; (8003ba8 <pvPortMalloc+0x118>)
 8003ada:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003adc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003ae0:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003ae2:	682f      	ldr	r7, [r5, #0]
 8003ae4:	4227      	tst	r7, r4
 8003ae6:	d116      	bne.n	8003b16 <pvPortMalloc+0x86>
			if( xWantedSize > 0 )
 8003ae8:	2c00      	cmp	r4, #0
 8003aea:	d040      	beq.n	8003b6e <pvPortMalloc+0xde>
				xWantedSize += xHeapStructSize;
 8003aec:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003af0:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003af2:	bf1c      	itt	ne
 8003af4:	f023 0307 	bicne.w	r3, r3, #7
 8003af8:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003afa:	b163      	cbz	r3, 8003b16 <pvPortMalloc+0x86>
 8003afc:	4a2a      	ldr	r2, [pc, #168]	; (8003ba8 <pvPortMalloc+0x118>)
 8003afe:	6816      	ldr	r6, [r2, #0]
 8003b00:	4690      	mov	r8, r2
 8003b02:	42b3      	cmp	r3, r6
 8003b04:	d807      	bhi.n	8003b16 <pvPortMalloc+0x86>
				pxBlock = xStart.pxNextFreeBlock;
 8003b06:	4a26      	ldr	r2, [pc, #152]	; (8003ba0 <pvPortMalloc+0x110>)
 8003b08:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003b0a:	6868      	ldr	r0, [r5, #4]
 8003b0c:	4283      	cmp	r3, r0
 8003b0e:	d804      	bhi.n	8003b1a <pvPortMalloc+0x8a>
				if( pxBlock != pxEnd )
 8003b10:	6809      	ldr	r1, [r1, #0]
 8003b12:	428d      	cmp	r5, r1
 8003b14:	d107      	bne.n	8003b26 <pvPortMalloc+0x96>
void *pvReturn = NULL;
 8003b16:	2400      	movs	r4, #0
 8003b18:	e029      	b.n	8003b6e <pvPortMalloc+0xde>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003b1a:	682c      	ldr	r4, [r5, #0]
 8003b1c:	2c00      	cmp	r4, #0
 8003b1e:	d0f7      	beq.n	8003b10 <pvPortMalloc+0x80>
 8003b20:	462a      	mov	r2, r5
 8003b22:	4625      	mov	r5, r4
 8003b24:	e7f1      	b.n	8003b0a <pvPortMalloc+0x7a>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003b26:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003b28:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003b2a:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003b2c:	1ac2      	subs	r2, r0, r3
 8003b2e:	2a10      	cmp	r2, #16
 8003b30:	d90f      	bls.n	8003b52 <pvPortMalloc+0xc2>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003b32:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003b34:	0741      	lsls	r1, r0, #29
 8003b36:	d008      	beq.n	8003b4a <pvPortMalloc+0xba>
 8003b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b3c:	f383 8811 	msr	BASEPRI, r3
 8003b40:	f3bf 8f6f 	isb	sy
 8003b44:	f3bf 8f4f 	dsb	sy
 8003b48:	e7fe      	b.n	8003b48 <pvPortMalloc+0xb8>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003b4a:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003b4c:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003b4e:	f7ff ff7b 	bl	8003a48 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003b52:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003b54:	4913      	ldr	r1, [pc, #76]	; (8003ba4 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003b56:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003b58:	431f      	orrs	r7, r3
					pxBlock->pxNextFreeBlock = NULL;
 8003b5a:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003b5c:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003b5e:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003b62:	4286      	cmp	r6, r0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003b64:	bf38      	it	cc
 8003b66:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003b68:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003b6a:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003b6c:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8003b6e:	f000 fd27 	bl	80045c0 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003b72:	0763      	lsls	r3, r4, #29
 8003b74:	d008      	beq.n	8003b88 <pvPortMalloc+0xf8>
 8003b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b7a:	f383 8811 	msr	BASEPRI, r3
 8003b7e:	f3bf 8f6f 	isb	sy
 8003b82:	f3bf 8f4f 	dsb	sy
 8003b86:	e7fe      	b.n	8003b86 <pvPortMalloc+0xf6>
}
 8003b88:	4620      	mov	r0, r4
 8003b8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b8e:	bf00      	nop
 8003b90:	2000024c 	.word	0x2000024c
 8003b94:	20005070 	.word	0x20005070
 8003b98:	20000250 	.word	0x20000250
 8003b9c:	20005070 	.word	0x20005070
 8003ba0:	2000507c 	.word	0x2000507c
 8003ba4:	20005078 	.word	0x20005078
 8003ba8:	20005074 	.word	0x20005074

08003bac <vPortFree>:
{
 8003bac:	b510      	push	{r4, lr}
	if( pv != NULL )
 8003bae:	4604      	mov	r4, r0
 8003bb0:	b370      	cbz	r0, 8003c10 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003bb2:	4a18      	ldr	r2, [pc, #96]	; (8003c14 <vPortFree+0x68>)
 8003bb4:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8003bb8:	6812      	ldr	r2, [r2, #0]
 8003bba:	4213      	tst	r3, r2
 8003bbc:	d108      	bne.n	8003bd0 <vPortFree+0x24>
 8003bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc2:	f383 8811 	msr	BASEPRI, r3
 8003bc6:	f3bf 8f6f 	isb	sy
 8003bca:	f3bf 8f4f 	dsb	sy
 8003bce:	e7fe      	b.n	8003bce <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003bd0:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8003bd4:	b141      	cbz	r1, 8003be8 <vPortFree+0x3c>
 8003bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bda:	f383 8811 	msr	BASEPRI, r3
 8003bde:	f3bf 8f6f 	isb	sy
 8003be2:	f3bf 8f4f 	dsb	sy
 8003be6:	e7fe      	b.n	8003be6 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003be8:	ea23 0302 	bic.w	r3, r3, r2
 8003bec:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8003bf0:	f000 fc46 	bl	8004480 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003bf4:	4a08      	ldr	r2, [pc, #32]	; (8003c18 <vPortFree+0x6c>)
 8003bf6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8003bfa:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003bfc:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003c00:	440b      	add	r3, r1
 8003c02:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003c04:	f7ff ff20 	bl	8003a48 <prvInsertBlockIntoFreeList>
}
 8003c08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8003c0c:	f000 bcd8 	b.w	80045c0 <xTaskResumeAll>
 8003c10:	bd10      	pop	{r4, pc}
 8003c12:	bf00      	nop
 8003c14:	20005070 	.word	0x20005070
 8003c18:	20005074 	.word	0x20005074

08003c1c <xPortGetFreeHeapSize>:
}
 8003c1c:	4b01      	ldr	r3, [pc, #4]	; (8003c24 <xPortGetFreeHeapSize+0x8>)
 8003c1e:	6818      	ldr	r0, [r3, #0]
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	20005074 	.word	0x20005074

08003c28 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003c28:	b570      	push	{r4, r5, r6, lr}
 8003c2a:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003c2c:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8003c2e:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c30:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003c32:	b942      	cbnz	r2, 8003c46 <prvCopyDataToQueue+0x1e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003c34:	6805      	ldr	r5, [r0, #0]
 8003c36:	b99d      	cbnz	r5, 8003c60 <prvCopyDataToQueue+0x38>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003c38:	6840      	ldr	r0, [r0, #4]
 8003c3a:	f000 fed5 	bl	80049e8 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8003c3e:	6065      	str	r5, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8003c40:	3601      	adds	r6, #1
 8003c42:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 8003c44:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8003c46:	b96d      	cbnz	r5, 8003c64 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003c48:	6880      	ldr	r0, [r0, #8]
 8003c4a:	f002 f9df 	bl	800600c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003c4e:	68a3      	ldr	r3, [r4, #8]
 8003c50:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003c52:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003c54:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003c56:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d301      	bcc.n	8003c60 <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003c5c:	6823      	ldr	r3, [r4, #0]
 8003c5e:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8003c60:	2000      	movs	r0, #0
 8003c62:	e7ed      	b.n	8003c40 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c64:	68c0      	ldr	r0, [r0, #12]
 8003c66:	f002 f9d1 	bl	800600c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003c6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003c6c:	68e2      	ldr	r2, [r4, #12]
 8003c6e:	425b      	negs	r3, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003c70:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003c72:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003c74:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003c76:	60e2      	str	r2, [r4, #12]
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003c78:	bf3e      	ittt	cc
 8003c7a:	6862      	ldrcc	r2, [r4, #4]
 8003c7c:	189b      	addcc	r3, r3, r2
 8003c7e:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8003c80:	2d02      	cmp	r5, #2
 8003c82:	d1ed      	bne.n	8003c60 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c84:	b10e      	cbz	r6, 8003c8a <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8003c86:	3e01      	subs	r6, #1
 8003c88:	e7ea      	b.n	8003c60 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 8003c8a:	4630      	mov	r0, r6
 8003c8c:	e7d8      	b.n	8003c40 <prvCopyDataToQueue+0x18>

08003c8e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003c8e:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003c90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8003c92:	b410      	push	{r4}
 8003c94:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003c96:	b162      	cbz	r2, 8003cb2 <prvCopyDataFromQueue+0x24>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003c98:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003c9a:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003c9c:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003c9e:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003ca0:	60d9      	str	r1, [r3, #12]
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003ca2:	bf28      	it	cs
 8003ca4:	6819      	ldrcs	r1, [r3, #0]
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
	}
}
 8003ca6:	bc10      	pop	{r4}
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003ca8:	bf28      	it	cs
 8003caa:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003cac:	68d9      	ldr	r1, [r3, #12]
 8003cae:	f002 b9ad 	b.w	800600c <memcpy>
}
 8003cb2:	bc10      	pop	{r4}
 8003cb4:	4770      	bx	lr

08003cb6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003cb6:	b570      	push	{r4, r5, r6, lr}
 8003cb8:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003cba:	f7ff fdcb 	bl	8003854 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003cbe:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003cc2:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8003cc6:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003cc8:	2d00      	cmp	r5, #0
 8003cca:	dc14      	bgt.n	8003cf6 <prvUnlockQueue+0x40>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003ccc:	23ff      	movs	r3, #255	; 0xff
 8003cce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003cd2:	f7ff fde1 	bl	8003898 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003cd6:	f7ff fdbd 	bl	8003854 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003cda:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44

		while( cRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003cde:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8003ce2:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003ce4:	2d00      	cmp	r5, #0
 8003ce6:	dc12      	bgt.n	8003d0e <prvUnlockQueue+0x58>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003ce8:	23ff      	movs	r3, #255	; 0xff
 8003cea:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 8003cee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8003cf2:	f7ff bdd1 	b.w	8003898 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003cf6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d0e7      	beq.n	8003ccc <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003cfc:	4630      	mov	r0, r6
 8003cfe:	f000 fd89 	bl	8004814 <xTaskRemoveFromEventList>
 8003d02:	b108      	cbz	r0, 8003d08 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8003d04:	f000 fe12 	bl	800492c <vTaskMissedYield>
 8003d08:	3d01      	subs	r5, #1
 8003d0a:	b26d      	sxtb	r5, r5
 8003d0c:	e7dc      	b.n	8003cc8 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d0e:	6923      	ldr	r3, [r4, #16]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d0e9      	beq.n	8003ce8 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d14:	4630      	mov	r0, r6
 8003d16:	f000 fd7d 	bl	8004814 <xTaskRemoveFromEventList>
 8003d1a:	b108      	cbz	r0, 8003d20 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8003d1c:	f000 fe06 	bl	800492c <vTaskMissedYield>
 8003d20:	3d01      	subs	r5, #1
 8003d22:	b26d      	sxtb	r5, r5
 8003d24:	e7de      	b.n	8003ce4 <prvUnlockQueue+0x2e>
	...

08003d28 <xQueueGenericReset>:
{
 8003d28:	b538      	push	{r3, r4, r5, lr}
 8003d2a:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8003d2c:	4604      	mov	r4, r0
 8003d2e:	b940      	cbnz	r0, 8003d42 <xQueueGenericReset+0x1a>
 8003d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d34:	f383 8811 	msr	BASEPRI, r3
 8003d38:	f3bf 8f6f 	isb	sy
 8003d3c:	f3bf 8f4f 	dsb	sy
 8003d40:	e7fe      	b.n	8003d40 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8003d42:	f7ff fd87 	bl	8003854 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003d46:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003d48:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003d4a:	6822      	ldr	r2, [r4, #0]
 8003d4c:	4343      	muls	r3, r0
 8003d4e:	18d1      	adds	r1, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003d50:	1a1b      	subs	r3, r3, r0
 8003d52:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003d54:	6061      	str	r1, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003d56:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003d58:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 8003d5a:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003d5c:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003d5e:	60a2      	str	r2, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
 8003d60:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003d64:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8003d68:	b995      	cbnz	r5, 8003d90 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d6a:	6923      	ldr	r3, [r4, #16]
 8003d6c:	b163      	cbz	r3, 8003d88 <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d6e:	f104 0010 	add.w	r0, r4, #16
 8003d72:	f000 fd4f 	bl	8004814 <xTaskRemoveFromEventList>
 8003d76:	b138      	cbz	r0, 8003d88 <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 8003d78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d7c:	4b09      	ldr	r3, [pc, #36]	; (8003da4 <xQueueGenericReset+0x7c>)
 8003d7e:	601a      	str	r2, [r3, #0]
 8003d80:	f3bf 8f4f 	dsb	sy
 8003d84:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8003d88:	f7ff fd86 	bl	8003898 <vPortExitCritical>
}
 8003d8c:	2001      	movs	r0, #1
 8003d8e:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003d90:	f104 0010 	add.w	r0, r4, #16
 8003d94:	f7ff fccb 	bl	800372e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003d98:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003d9c:	f7ff fcc7 	bl	800372e <vListInitialise>
 8003da0:	e7f2      	b.n	8003d88 <xQueueGenericReset+0x60>
 8003da2:	bf00      	nop
 8003da4:	e000ed04 	.word	0xe000ed04

08003da8 <xQueueGenericCreate>:
	{
 8003da8:	b570      	push	{r4, r5, r6, lr}
 8003daa:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003dac:	4606      	mov	r6, r0
 8003dae:	b940      	cbnz	r0, 8003dc2 <xQueueGenericCreate+0x1a>
 8003db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db4:	f383 8811 	msr	BASEPRI, r3
 8003db8:	f3bf 8f6f 	isb	sy
 8003dbc:	f3bf 8f4f 	dsb	sy
 8003dc0:	e7fe      	b.n	8003dc0 <xQueueGenericCreate+0x18>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dc2:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003dc4:	3048      	adds	r0, #72	; 0x48
 8003dc6:	f7ff fe63 	bl	8003a90 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8003dca:	4604      	mov	r4, r0
 8003dcc:	b138      	cbz	r0, 8003dde <xQueueGenericCreate+0x36>
	if( uxItemSize == ( UBaseType_t ) 0 )
 8003dce:	b945      	cbnz	r5, 8003de2 <xQueueGenericCreate+0x3a>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003dd0:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8003dd2:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003dd4:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003dd6:	2101      	movs	r1, #1
 8003dd8:	4620      	mov	r0, r4
 8003dda:	f7ff ffa5 	bl	8003d28 <xQueueGenericReset>
	}
 8003dde:	4620      	mov	r0, r4
 8003de0:	bd70      	pop	{r4, r5, r6, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003de2:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003de6:	6003      	str	r3, [r0, #0]
 8003de8:	e7f3      	b.n	8003dd2 <xQueueGenericCreate+0x2a>
	...

08003dec <xQueueGenericSend>:
{
 8003dec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003df0:	4689      	mov	r9, r1
 8003df2:	9201      	str	r2, [sp, #4]
 8003df4:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8003df6:	4604      	mov	r4, r0
 8003df8:	b940      	cbnz	r0, 8003e0c <xQueueGenericSend+0x20>
 8003dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dfe:	f383 8811 	msr	BASEPRI, r3
 8003e02:	f3bf 8f6f 	isb	sy
 8003e06:	f3bf 8f4f 	dsb	sy
 8003e0a:	e7fe      	b.n	8003e0a <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e0c:	2900      	cmp	r1, #0
 8003e0e:	f040 8088 	bne.w	8003f22 <xQueueGenericSend+0x136>
 8003e12:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	f000 8084 	beq.w	8003f22 <xQueueGenericSend+0x136>
 8003e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e1e:	f383 8811 	msr	BASEPRI, r3
 8003e22:	f3bf 8f6f 	isb	sy
 8003e26:	f3bf 8f4f 	dsb	sy
 8003e2a:	e7fe      	b.n	8003e2a <xQueueGenericSend+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003e2c:	9e01      	ldr	r6, [sp, #4]
 8003e2e:	2e00      	cmp	r6, #0
 8003e30:	f000 8082 	beq.w	8003f38 <xQueueGenericSend+0x14c>
 8003e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e38:	f383 8811 	msr	BASEPRI, r3
 8003e3c:	f3bf 8f6f 	isb	sy
 8003e40:	f3bf 8f4f 	dsb	sy
 8003e44:	e7fe      	b.n	8003e44 <xQueueGenericSend+0x58>
				if( xTicksToWait == ( TickType_t ) 0 )
 8003e46:	9d01      	ldr	r5, [sp, #4]
 8003e48:	b91d      	cbnz	r5, 8003e52 <xQueueGenericSend+0x66>
					taskEXIT_CRITICAL();
 8003e4a:	f7ff fd25 	bl	8003898 <vPortExitCritical>
			return errQUEUE_FULL;
 8003e4e:	2000      	movs	r0, #0
 8003e50:	e058      	b.n	8003f04 <xQueueGenericSend+0x118>
				else if( xEntryTimeSet == pdFALSE )
 8003e52:	b916      	cbnz	r6, 8003e5a <xQueueGenericSend+0x6e>
					vTaskSetTimeOutState( &xTimeOut );
 8003e54:	a802      	add	r0, sp, #8
 8003e56:	f000 fd1f 	bl	8004898 <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 8003e5a:	f7ff fd1d 	bl	8003898 <vPortExitCritical>
		vTaskSuspendAll();
 8003e5e:	f000 fb0f 	bl	8004480 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003e62:	f7ff fcf7 	bl	8003854 <vPortEnterCritical>
 8003e66:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8003e6a:	2bff      	cmp	r3, #255	; 0xff
 8003e6c:	bf08      	it	eq
 8003e6e:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 8003e72:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8003e76:	2bff      	cmp	r3, #255	; 0xff
 8003e78:	bf08      	it	eq
 8003e7a:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 8003e7e:	f7ff fd0b 	bl	8003898 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003e82:	a901      	add	r1, sp, #4
 8003e84:	a802      	add	r0, sp, #8
 8003e86:	f000 fd17 	bl	80048b8 <xTaskCheckForTimeOut>
 8003e8a:	2800      	cmp	r0, #0
 8003e8c:	d143      	bne.n	8003f16 <xQueueGenericSend+0x12a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003e8e:	f7ff fce1 	bl	8003854 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003e92:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8003e94:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8003e96:	f7ff fcff 	bl	8003898 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003e9a:	42ae      	cmp	r6, r5
 8003e9c:	d135      	bne.n	8003f0a <xQueueGenericSend+0x11e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003e9e:	9901      	ldr	r1, [sp, #4]
 8003ea0:	f104 0010 	add.w	r0, r4, #16
 8003ea4:	f000 fc9c 	bl	80047e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003ea8:	4620      	mov	r0, r4
 8003eaa:	f7ff ff04 	bl	8003cb6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003eae:	f000 fb87 	bl	80045c0 <xTaskResumeAll>
 8003eb2:	b938      	cbnz	r0, 8003ec4 <xQueueGenericSend+0xd8>
					portYIELD_WITHIN_API();
 8003eb4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003eb8:	f8ca 3000 	str.w	r3, [sl]
 8003ebc:	f3bf 8f4f 	dsb	sy
 8003ec0:	f3bf 8f6f 	isb	sy
 8003ec4:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8003ec6:	f7ff fcc5 	bl	8003854 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003eca:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003ecc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d301      	bcc.n	8003ed6 <xQueueGenericSend+0xea>
 8003ed2:	2f02      	cmp	r7, #2
 8003ed4:	d1b7      	bne.n	8003e46 <xQueueGenericSend+0x5a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003ed6:	463a      	mov	r2, r7
 8003ed8:	4649      	mov	r1, r9
 8003eda:	4620      	mov	r0, r4
 8003edc:	f7ff fea4 	bl	8003c28 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ee0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ee2:	b11b      	cbz	r3, 8003eec <xQueueGenericSend+0x100>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ee4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003ee8:	f000 fc94 	bl	8004814 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8003eec:	b138      	cbz	r0, 8003efe <xQueueGenericSend+0x112>
						queueYIELD_IF_USING_PREEMPTION();
 8003eee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ef2:	4b18      	ldr	r3, [pc, #96]	; (8003f54 <xQueueGenericSend+0x168>)
 8003ef4:	601a      	str	r2, [r3, #0]
 8003ef6:	f3bf 8f4f 	dsb	sy
 8003efa:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8003efe:	f7ff fccb 	bl	8003898 <vPortExitCritical>
				return pdPASS;
 8003f02:	2001      	movs	r0, #1
}
 8003f04:	b004      	add	sp, #16
 8003f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 8003f0a:	4620      	mov	r0, r4
 8003f0c:	f7ff fed3 	bl	8003cb6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f10:	f000 fb56 	bl	80045c0 <xTaskResumeAll>
 8003f14:	e7d6      	b.n	8003ec4 <xQueueGenericSend+0xd8>
			prvUnlockQueue( pxQueue );
 8003f16:	4620      	mov	r0, r4
 8003f18:	f7ff fecd 	bl	8003cb6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f1c:	f000 fb50 	bl	80045c0 <xTaskResumeAll>
 8003f20:	e795      	b.n	8003e4e <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003f22:	2f02      	cmp	r7, #2
 8003f24:	d102      	bne.n	8003f2c <xQueueGenericSend+0x140>
 8003f26:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d10a      	bne.n	8003f42 <xQueueGenericSend+0x156>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003f2c:	f000 fd04 	bl	8004938 <xTaskGetSchedulerState>
 8003f30:	2800      	cmp	r0, #0
 8003f32:	f43f af7b 	beq.w	8003e2c <xQueueGenericSend+0x40>
 8003f36:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8003f38:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 8003f3c:	f8df a014 	ldr.w	sl, [pc, #20]	; 8003f54 <xQueueGenericSend+0x168>
 8003f40:	e7c1      	b.n	8003ec6 <xQueueGenericSend+0xda>
 8003f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f46:	f383 8811 	msr	BASEPRI, r3
 8003f4a:	f3bf 8f6f 	isb	sy
 8003f4e:	f3bf 8f4f 	dsb	sy
 8003f52:	e7fe      	b.n	8003f52 <xQueueGenericSend+0x166>
 8003f54:	e000ed04 	.word	0xe000ed04

08003f58 <xQueueGenericSendFromISR>:
{
 8003f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f5c:	4688      	mov	r8, r1
 8003f5e:	4691      	mov	r9, r2
 8003f60:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8003f62:	4604      	mov	r4, r0
 8003f64:	b940      	cbnz	r0, 8003f78 <xQueueGenericSendFromISR+0x20>
 8003f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f6a:	f383 8811 	msr	BASEPRI, r3
 8003f6e:	f3bf 8f6f 	isb	sy
 8003f72:	f3bf 8f4f 	dsb	sy
 8003f76:	e7fe      	b.n	8003f76 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f78:	bb09      	cbnz	r1, 8003fbe <xQueueGenericSendFromISR+0x66>
 8003f7a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003f7c:	b1fb      	cbz	r3, 8003fbe <xQueueGenericSendFromISR+0x66>
 8003f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f82:	f383 8811 	msr	BASEPRI, r3
 8003f86:	f3bf 8f6f 	isb	sy
 8003f8a:	f3bf 8f4f 	dsb	sy
 8003f8e:	e7fe      	b.n	8003f8e <xQueueGenericSendFromISR+0x36>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f90:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003f94:	f000 fc3e 	bl	8004814 <xTaskRemoveFromEventList>
 8003f98:	2800      	cmp	r0, #0
 8003f9a:	d034      	beq.n	8004006 <xQueueGenericSendFromISR+0xae>
							if( pxHigherPriorityTaskWoken != NULL )
 8003f9c:	f1b9 0f00 	cmp.w	r9, #0
 8003fa0:	d031      	beq.n	8004006 <xQueueGenericSendFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003fa2:	2001      	movs	r0, #1
 8003fa4:	f8c9 0000 	str.w	r0, [r9]
	__asm volatile
 8003fa8:	f386 8811 	msr	BASEPRI, r6
}
 8003fac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003fb0:	3501      	adds	r5, #1
 8003fb2:	b26d      	sxtb	r5, r5
 8003fb4:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8003fb8:	e025      	b.n	8004006 <xQueueGenericSendFromISR+0xae>
			xReturn = errQUEUE_FULL;
 8003fba:	2000      	movs	r0, #0
 8003fbc:	e7f4      	b.n	8003fa8 <xQueueGenericSendFromISR+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003fbe:	2f02      	cmp	r7, #2
 8003fc0:	d102      	bne.n	8003fc8 <xQueueGenericSendFromISR+0x70>
 8003fc2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d120      	bne.n	800400a <xQueueGenericSendFromISR+0xb2>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003fc8:	f7ff fd10 	bl	80039ec <vPortValidateInterruptPriority>
	__asm volatile
 8003fcc:	f3ef 8611 	mrs	r6, BASEPRI
 8003fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd4:	f383 8811 	msr	BASEPRI, r3
 8003fd8:	f3bf 8f6f 	isb	sy
 8003fdc:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003fe0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003fe2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d301      	bcc.n	8003fec <xQueueGenericSendFromISR+0x94>
 8003fe8:	2f02      	cmp	r7, #2
 8003fea:	d1e6      	bne.n	8003fba <xQueueGenericSendFromISR+0x62>
			const int8_t cTxLock = pxQueue->cTxLock;
 8003fec:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003ff0:	463a      	mov	r2, r7
			const int8_t cTxLock = pxQueue->cTxLock;
 8003ff2:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003ff4:	4641      	mov	r1, r8
 8003ff6:	4620      	mov	r0, r4
 8003ff8:	f7ff fe16 	bl	8003c28 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8003ffc:	1c6b      	adds	r3, r5, #1
 8003ffe:	d1d7      	bne.n	8003fb0 <xQueueGenericSendFromISR+0x58>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004000:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004002:	2b00      	cmp	r3, #0
 8004004:	d1c4      	bne.n	8003f90 <xQueueGenericSendFromISR+0x38>
			xReturn = pdPASS;
 8004006:	2001      	movs	r0, #1
 8004008:	e7ce      	b.n	8003fa8 <xQueueGenericSendFromISR+0x50>
	__asm volatile
 800400a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800400e:	f383 8811 	msr	BASEPRI, r3
 8004012:	f3bf 8f6f 	isb	sy
 8004016:	f3bf 8f4f 	dsb	sy
 800401a:	e7fe      	b.n	800401a <xQueueGenericSendFromISR+0xc2>

0800401c <xQueueGenericReceive>:
{
 800401c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004020:	4688      	mov	r8, r1
 8004022:	9201      	str	r2, [sp, #4]
 8004024:	4699      	mov	r9, r3
	configASSERT( pxQueue );
 8004026:	4604      	mov	r4, r0
 8004028:	b940      	cbnz	r0, 800403c <xQueueGenericReceive+0x20>
 800402a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800402e:	f383 8811 	msr	BASEPRI, r3
 8004032:	f3bf 8f6f 	isb	sy
 8004036:	f3bf 8f4f 	dsb	sy
 800403a:	e7fe      	b.n	800403a <xQueueGenericReceive+0x1e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800403c:	2900      	cmp	r1, #0
 800403e:	f040 80a5 	bne.w	800418c <xQueueGenericReceive+0x170>
 8004042:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004044:	2b00      	cmp	r3, #0
 8004046:	f000 80a1 	beq.w	800418c <xQueueGenericReceive+0x170>
 800404a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800404e:	f383 8811 	msr	BASEPRI, r3
 8004052:	f3bf 8f6f 	isb	sy
 8004056:	f3bf 8f4f 	dsb	sy
 800405a:	e7fe      	b.n	800405a <xQueueGenericReceive+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800405c:	9e01      	ldr	r6, [sp, #4]
 800405e:	2e00      	cmp	r6, #0
 8004060:	f000 809a 	beq.w	8004198 <xQueueGenericReceive+0x17c>
 8004064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004068:	f383 8811 	msr	BASEPRI, r3
 800406c:	f3bf 8f6f 	isb	sy
 8004070:	f3bf 8f4f 	dsb	sy
 8004074:	e7fe      	b.n	8004074 <xQueueGenericReceive+0x58>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004076:	6a63      	ldr	r3, [r4, #36]	; 0x24
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8004078:	60e6      	str	r6, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800407a:	2b00      	cmp	r3, #0
 800407c:	d06d      	beq.n	800415a <xQueueGenericReceive+0x13e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800407e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004082:	e05f      	b.n	8004144 <xQueueGenericReceive+0x128>
				if( xTicksToWait == ( TickType_t ) 0 )
 8004084:	9d01      	ldr	r5, [sp, #4]
 8004086:	b91d      	cbnz	r5, 8004090 <xQueueGenericReceive+0x74>
					taskEXIT_CRITICAL();
 8004088:	f7ff fc06 	bl	8003898 <vPortExitCritical>
				return errQUEUE_EMPTY;
 800408c:	4628      	mov	r0, r5
 800408e:	e067      	b.n	8004160 <xQueueGenericReceive+0x144>
				else if( xEntryTimeSet == pdFALSE )
 8004090:	b916      	cbnz	r6, 8004098 <xQueueGenericReceive+0x7c>
					vTaskSetTimeOutState( &xTimeOut );
 8004092:	a802      	add	r0, sp, #8
 8004094:	f000 fc00 	bl	8004898 <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 8004098:	f7ff fbfe 	bl	8003898 <vPortExitCritical>
		vTaskSuspendAll();
 800409c:	f000 f9f0 	bl	8004480 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80040a0:	f7ff fbd8 	bl	8003854 <vPortEnterCritical>
 80040a4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80040a8:	2bff      	cmp	r3, #255	; 0xff
 80040aa:	bf08      	it	eq
 80040ac:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 80040b0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80040b4:	2bff      	cmp	r3, #255	; 0xff
 80040b6:	bf08      	it	eq
 80040b8:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 80040bc:	f7ff fbec 	bl	8003898 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80040c0:	a901      	add	r1, sp, #4
 80040c2:	a802      	add	r0, sp, #8
 80040c4:	f000 fbf8 	bl	80048b8 <xTaskCheckForTimeOut>
 80040c8:	2800      	cmp	r0, #0
 80040ca:	d152      	bne.n	8004172 <xQueueGenericReceive+0x156>
	taskENTER_CRITICAL();
 80040cc:	f7ff fbc2 	bl	8003854 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80040d0:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 80040d2:	f7ff fbe1 	bl	8003898 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80040d6:	2d00      	cmp	r5, #0
 80040d8:	d145      	bne.n	8004166 <xQueueGenericReceive+0x14a>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80040da:	6823      	ldr	r3, [r4, #0]
 80040dc:	b933      	cbnz	r3, 80040ec <xQueueGenericReceive+0xd0>
						taskENTER_CRITICAL();
 80040de:	f7ff fbb9 	bl	8003854 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80040e2:	6860      	ldr	r0, [r4, #4]
 80040e4:	f000 fc38 	bl	8004958 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 80040e8:	f7ff fbd6 	bl	8003898 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80040ec:	9901      	ldr	r1, [sp, #4]
 80040ee:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80040f2:	f000 fb75 	bl	80047e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80040f6:	4620      	mov	r0, r4
 80040f8:	f7ff fddd 	bl	8003cb6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80040fc:	f000 fa60 	bl	80045c0 <xTaskResumeAll>
 8004100:	b938      	cbnz	r0, 8004112 <xQueueGenericReceive+0xf6>
					portYIELD_WITHIN_API();
 8004102:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004106:	f8ca 3000 	str.w	r3, [sl]
 800410a:	f3bf 8f4f 	dsb	sy
 800410e:	f3bf 8f6f 	isb	sy
 8004112:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8004114:	f7ff fb9e 	bl	8003854 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004118:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800411a:	2d00      	cmp	r5, #0
 800411c:	d0b2      	beq.n	8004084 <xQueueGenericReceive+0x68>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800411e:	4641      	mov	r1, r8
 8004120:	4620      	mov	r0, r4
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8004122:	68e6      	ldr	r6, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004124:	f7ff fdb3 	bl	8003c8e <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 8004128:	f1b9 0f00 	cmp.w	r9, #0
 800412c:	d1a3      	bne.n	8004076 <xQueueGenericReceive+0x5a>
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800412e:	6823      	ldr	r3, [r4, #0]
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8004130:	3d01      	subs	r5, #1
 8004132:	63a5      	str	r5, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004134:	b913      	cbnz	r3, 800413c <xQueueGenericReceive+0x120>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8004136:	f000 fca7 	bl	8004a88 <pvTaskIncrementMutexHeldCount>
 800413a:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800413c:	6923      	ldr	r3, [r4, #16]
 800413e:	b163      	cbz	r3, 800415a <xQueueGenericReceive+0x13e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004140:	f104 0010 	add.w	r0, r4, #16
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004144:	f000 fb66 	bl	8004814 <xTaskRemoveFromEventList>
 8004148:	b138      	cbz	r0, 800415a <xQueueGenericReceive+0x13e>
							queueYIELD_IF_USING_PREEMPTION();
 800414a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800414e:	4b14      	ldr	r3, [pc, #80]	; (80041a0 <xQueueGenericReceive+0x184>)
 8004150:	601a      	str	r2, [r3, #0]
 8004152:	f3bf 8f4f 	dsb	sy
 8004156:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800415a:	f7ff fb9d 	bl	8003898 <vPortExitCritical>
				return pdPASS;
 800415e:	2001      	movs	r0, #1
}
 8004160:	b004      	add	sp, #16
 8004162:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 8004166:	4620      	mov	r0, r4
 8004168:	f7ff fda5 	bl	8003cb6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800416c:	f000 fa28 	bl	80045c0 <xTaskResumeAll>
 8004170:	e7cf      	b.n	8004112 <xQueueGenericReceive+0xf6>
			prvUnlockQueue( pxQueue );
 8004172:	4620      	mov	r0, r4
 8004174:	f7ff fd9f 	bl	8003cb6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004178:	f000 fa22 	bl	80045c0 <xTaskResumeAll>
	taskENTER_CRITICAL();
 800417c:	f7ff fb6a 	bl	8003854 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004180:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 8004182:	f7ff fb89 	bl	8003898 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004186:	2d00      	cmp	r5, #0
 8004188:	d1c3      	bne.n	8004112 <xQueueGenericReceive+0xf6>
 800418a:	e77f      	b.n	800408c <xQueueGenericReceive+0x70>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800418c:	f000 fbd4 	bl	8004938 <xTaskGetSchedulerState>
 8004190:	2800      	cmp	r0, #0
 8004192:	f43f af63 	beq.w	800405c <xQueueGenericReceive+0x40>
 8004196:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8004198:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 800419a:	f8df a004 	ldr.w	sl, [pc, #4]	; 80041a0 <xQueueGenericReceive+0x184>
 800419e:	e7b9      	b.n	8004114 <xQueueGenericReceive+0xf8>
 80041a0:	e000ed04 	.word	0xe000ed04

080041a4 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80041a4:	4a06      	ldr	r2, [pc, #24]	; (80041c0 <prvResetNextTaskUnblockTime+0x1c>)
 80041a6:	6813      	ldr	r3, [r2, #0]
 80041a8:	6819      	ldr	r1, [r3, #0]
 80041aa:	4b06      	ldr	r3, [pc, #24]	; (80041c4 <prvResetNextTaskUnblockTime+0x20>)
 80041ac:	b919      	cbnz	r1, 80041b6 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80041ae:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80041b2:	601a      	str	r2, [r3, #0]
 80041b4:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80041b6:	6812      	ldr	r2, [r2, #0]
 80041b8:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80041ba:	68d2      	ldr	r2, [r2, #12]
 80041bc:	6852      	ldr	r2, [r2, #4]
 80041be:	e7f8      	b.n	80041b2 <prvResetNextTaskUnblockTime+0xe>
 80041c0:	20005088 	.word	0x20005088
 80041c4:	20005160 	.word	0x20005160

080041c8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80041c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80041ca:	4b1b      	ldr	r3, [pc, #108]	; (8004238 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80041cc:	4e1b      	ldr	r6, [pc, #108]	; (800423c <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 80041ce:	681d      	ldr	r5, [r3, #0]
{
 80041d0:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80041d2:	6830      	ldr	r0, [r6, #0]
{
 80041d4:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80041d6:	3004      	adds	r0, #4
 80041d8:	f7ff fada 	bl	8003790 <uxListRemove>
 80041dc:	4633      	mov	r3, r6
 80041de:	b940      	cbnz	r0, 80041f2 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80041e0:	2001      	movs	r0, #1
 80041e2:	6831      	ldr	r1, [r6, #0]
 80041e4:	4e16      	ldr	r6, [pc, #88]	; (8004240 <prvAddCurrentTaskToDelayedList+0x78>)
 80041e6:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80041e8:	6832      	ldr	r2, [r6, #0]
 80041ea:	4088      	lsls	r0, r1
 80041ec:	ea22 0200 	bic.w	r2, r2, r0
 80041f0:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80041f2:	1c62      	adds	r2, r4, #1
 80041f4:	d107      	bne.n	8004206 <prvAddCurrentTaskToDelayedList+0x3e>
 80041f6:	b137      	cbz	r7, 8004206 <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041f8:	6819      	ldr	r1, [r3, #0]
 80041fa:	4812      	ldr	r0, [pc, #72]	; (8004244 <prvAddCurrentTaskToDelayedList+0x7c>)
 80041fc:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80041fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004202:	f7ff baa2 	b.w	800374a <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004206:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004208:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 800420a:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800420c:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 800420e:	d907      	bls.n	8004220 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004210:	4a0d      	ldr	r2, [pc, #52]	; (8004248 <prvAddCurrentTaskToDelayedList+0x80>)
 8004212:	6810      	ldr	r0, [r2, #0]
 8004214:	6819      	ldr	r1, [r3, #0]
}
 8004216:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800421a:	3104      	adds	r1, #4
 800421c:	f7ff baa1 	b.w	8003762 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004220:	4a0a      	ldr	r2, [pc, #40]	; (800424c <prvAddCurrentTaskToDelayedList+0x84>)
 8004222:	6810      	ldr	r0, [r2, #0]
 8004224:	6819      	ldr	r1, [r3, #0]
 8004226:	3104      	adds	r1, #4
 8004228:	f7ff fa9b 	bl	8003762 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800422c:	4b08      	ldr	r3, [pc, #32]	; (8004250 <prvAddCurrentTaskToDelayedList+0x88>)
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8004232:	bf38      	it	cc
 8004234:	601c      	strcc	r4, [r3, #0]
 8004236:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004238:	200051a8 	.word	0x200051a8
 800423c:	20005084 	.word	0x20005084
 8004240:	20005130 	.word	0x20005130
 8004244:	20005180 	.word	0x20005180
 8004248:	2000508c 	.word	0x2000508c
 800424c:	20005088 	.word	0x20005088
 8004250:	20005160 	.word	0x20005160

08004254 <prvTaskIsTaskSuspended.part.0>:
 8004254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004258:	f383 8811 	msr	BASEPRI, r3
 800425c:	f3bf 8f6f 	isb	sy
 8004260:	f3bf 8f4f 	dsb	sy
 8004264:	e7fe      	b.n	8004264 <prvTaskIsTaskSuspended.part.0+0x10>
	...

08004268 <xTaskCreate>:
	{
 8004268:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800426c:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 8004270:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004272:	4650      	mov	r0, sl
	{
 8004274:	460f      	mov	r7, r1
 8004276:	4699      	mov	r9, r3
 8004278:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800427a:	f7ff fc09 	bl	8003a90 <pvPortMalloc>
			if( pxStack != NULL )
 800427e:	4605      	mov	r5, r0
 8004280:	2800      	cmp	r0, #0
 8004282:	f000 8096 	beq.w	80043b2 <xTaskCreate+0x14a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004286:	2054      	movs	r0, #84	; 0x54
 8004288:	f7ff fc02 	bl	8003a90 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800428c:	4604      	mov	r4, r0
 800428e:	2800      	cmp	r0, #0
 8004290:	f000 808c 	beq.w	80043ac <xTaskCreate+0x144>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004294:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 8004298:	6305      	str	r5, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800429a:	4455      	add	r5, sl
 800429c:	1e7b      	subs	r3, r7, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800429e:	f025 0a07 	bic.w	sl, r5, #7
 80042a2:	f100 0234 	add.w	r2, r0, #52	; 0x34
 80042a6:	370f      	adds	r7, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80042a8:	7859      	ldrb	r1, [r3, #1]
 80042aa:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 80042ae:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80042b2:	b109      	cbz	r1, 80042b8 <xTaskCreate+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80042b4:	42bb      	cmp	r3, r7
 80042b6:	d1f7      	bne.n	80042a8 <xTaskCreate+0x40>
 80042b8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80042ba:	f04f 0b00 	mov.w	fp, #0
 80042be:	2d06      	cmp	r5, #6
 80042c0:	bf28      	it	cs
 80042c2:	2506      	movcs	r5, #6
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80042c4:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 80042c6:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80042c8:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80042ca:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80042cc:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 80042d0:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80042d4:	f7ff fa36 	bl	8003744 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042d8:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80042dc:	f104 0018 	add.w	r0, r4, #24
 80042e0:	f7ff fa30 	bl	8003744 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 80042e4:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80042e8:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042ea:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80042ec:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80042ee:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80042f2:	464a      	mov	r2, r9
 80042f4:	4641      	mov	r1, r8
 80042f6:	4650      	mov	r0, sl
 80042f8:	f7ff fa82 	bl	8003800 <pxPortInitialiseStack>
 80042fc:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 80042fe:	b106      	cbz	r6, 8004302 <xTaskCreate+0x9a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004300:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 8004302:	f7ff faa7 	bl	8003854 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8004306:	4b32      	ldr	r3, [pc, #200]	; (80043d0 <xTaskCreate+0x168>)
		if( pxCurrentTCB == NULL )
 8004308:	4e32      	ldr	r6, [pc, #200]	; (80043d4 <xTaskCreate+0x16c>)
		uxCurrentNumberOfTasks++;
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8004400 <xTaskCreate+0x198>
 8004310:	3201      	adds	r2, #1
 8004312:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8004314:	6835      	ldr	r5, [r6, #0]
 8004316:	2d00      	cmp	r5, #0
 8004318:	d14e      	bne.n	80043b8 <xTaskCreate+0x150>
			pxCurrentTCB = pxNewTCB;
 800431a:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	2b01      	cmp	r3, #1
 8004320:	d11d      	bne.n	800435e <xTaskCreate+0xf6>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004322:	eb08 0005 	add.w	r0, r8, r5
 8004326:	3514      	adds	r5, #20
 8004328:	f7ff fa01 	bl	800372e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800432c:	2d8c      	cmp	r5, #140	; 0x8c
 800432e:	d1f8      	bne.n	8004322 <xTaskCreate+0xba>
	vListInitialise( &xDelayedTaskList1 );
 8004330:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8004404 <xTaskCreate+0x19c>
	vListInitialise( &xDelayedTaskList2 );
 8004334:	4d28      	ldr	r5, [pc, #160]	; (80043d8 <xTaskCreate+0x170>)
	vListInitialise( &xDelayedTaskList1 );
 8004336:	4648      	mov	r0, r9
 8004338:	f7ff f9f9 	bl	800372e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800433c:	4628      	mov	r0, r5
 800433e:	f7ff f9f6 	bl	800372e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004342:	4826      	ldr	r0, [pc, #152]	; (80043dc <xTaskCreate+0x174>)
 8004344:	f7ff f9f3 	bl	800372e <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8004348:	4825      	ldr	r0, [pc, #148]	; (80043e0 <xTaskCreate+0x178>)
 800434a:	f7ff f9f0 	bl	800372e <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800434e:	4825      	ldr	r0, [pc, #148]	; (80043e4 <xTaskCreate+0x17c>)
 8004350:	f7ff f9ed 	bl	800372e <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8004354:	4b24      	ldr	r3, [pc, #144]	; (80043e8 <xTaskCreate+0x180>)
 8004356:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800435a:	4b24      	ldr	r3, [pc, #144]	; (80043ec <xTaskCreate+0x184>)
 800435c:	601d      	str	r5, [r3, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800435e:	2501      	movs	r5, #1
		uxTaskNumber++;
 8004360:	4a23      	ldr	r2, [pc, #140]	; (80043f0 <xTaskCreate+0x188>)
		prvAddTaskToReadyList( pxNewTCB );
 8004362:	4924      	ldr	r1, [pc, #144]	; (80043f4 <xTaskCreate+0x18c>)
		uxTaskNumber++;
 8004364:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8004366:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8004368:	3301      	adds	r3, #1
 800436a:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800436c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800436e:	fa05 f302 	lsl.w	r3, r5, r2
 8004372:	4303      	orrs	r3, r0
 8004374:	2014      	movs	r0, #20
 8004376:	600b      	str	r3, [r1, #0]
 8004378:	fb00 8002 	mla	r0, r0, r2, r8
 800437c:	4639      	mov	r1, r7
 800437e:	f7ff f9e4 	bl	800374a <vListInsertEnd>
	taskEXIT_CRITICAL();
 8004382:	f7ff fa89 	bl	8003898 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8004386:	4b1c      	ldr	r3, [pc, #112]	; (80043f8 <xTaskCreate+0x190>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	b163      	cbz	r3, 80043a6 <xTaskCreate+0x13e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800438c:	6833      	ldr	r3, [r6, #0]
 800438e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004390:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004392:	429a      	cmp	r2, r3
 8004394:	d207      	bcs.n	80043a6 <xTaskCreate+0x13e>
			taskYIELD_IF_USING_PREEMPTION();
 8004396:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800439a:	4b18      	ldr	r3, [pc, #96]	; (80043fc <xTaskCreate+0x194>)
 800439c:	601a      	str	r2, [r3, #0]
 800439e:	f3bf 8f4f 	dsb	sy
 80043a2:	f3bf 8f6f 	isb	sy
	}
 80043a6:	4628      	mov	r0, r5
 80043a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 80043ac:	4628      	mov	r0, r5
 80043ae:	f7ff fbfd 	bl	8003bac <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80043b2:	f04f 35ff 	mov.w	r5, #4294967295
 80043b6:	e7f6      	b.n	80043a6 <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
 80043b8:	4b0f      	ldr	r3, [pc, #60]	; (80043f8 <xTaskCreate+0x190>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d1ce      	bne.n	800435e <xTaskCreate+0xf6>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80043c0:	6833      	ldr	r3, [r6, #0]
 80043c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043c4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80043c6:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 80043c8:	bf98      	it	ls
 80043ca:	6034      	strls	r4, [r6, #0]
 80043cc:	e7c7      	b.n	800435e <xTaskCreate+0xf6>
 80043ce:	bf00      	nop
 80043d0:	2000511c 	.word	0x2000511c
 80043d4:	20005084 	.word	0x20005084
 80043d8:	20005148 	.word	0x20005148
 80043dc:	20005168 	.word	0x20005168
 80043e0:	20005194 	.word	0x20005194
 80043e4:	20005180 	.word	0x20005180
 80043e8:	20005088 	.word	0x20005088
 80043ec:	2000508c 	.word	0x2000508c
 80043f0:	2000512c 	.word	0x2000512c
 80043f4:	20005130 	.word	0x20005130
 80043f8:	2000517c 	.word	0x2000517c
 80043fc:	e000ed04 	.word	0xe000ed04
 8004400:	20005090 	.word	0x20005090
 8004404:	20005134 	.word	0x20005134

08004408 <vTaskStartScheduler>:
{
 8004408:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 800440a:	2400      	movs	r4, #0
 800440c:	4b16      	ldr	r3, [pc, #88]	; (8004468 <vTaskStartScheduler+0x60>)
 800440e:	9400      	str	r4, [sp, #0]
 8004410:	9301      	str	r3, [sp, #4]
 8004412:	2280      	movs	r2, #128	; 0x80
 8004414:	4623      	mov	r3, r4
 8004416:	4915      	ldr	r1, [pc, #84]	; (800446c <vTaskStartScheduler+0x64>)
 8004418:	4815      	ldr	r0, [pc, #84]	; (8004470 <vTaskStartScheduler+0x68>)
 800441a:	f7ff ff25 	bl	8004268 <xTaskCreate>
	if( xReturn == pdPASS )
 800441e:	2801      	cmp	r0, #1
 8004420:	d114      	bne.n	800444c <vTaskStartScheduler+0x44>
 8004422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004426:	f383 8811 	msr	BASEPRI, r3
 800442a:	f3bf 8f6f 	isb	sy
 800442e:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8004432:	f04f 32ff 	mov.w	r2, #4294967295
 8004436:	4b0f      	ldr	r3, [pc, #60]	; (8004474 <vTaskStartScheduler+0x6c>)
 8004438:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800443a:	4b0f      	ldr	r3, [pc, #60]	; (8004478 <vTaskStartScheduler+0x70>)
 800443c:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800443e:	4b0f      	ldr	r3, [pc, #60]	; (800447c <vTaskStartScheduler+0x74>)
 8004440:	601c      	str	r4, [r3, #0]
}
 8004442:	b002      	add	sp, #8
 8004444:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8004448:	f7ff ba86 	b.w	8003958 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800444c:	3001      	adds	r0, #1
 800444e:	d108      	bne.n	8004462 <vTaskStartScheduler+0x5a>
 8004450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004454:	f383 8811 	msr	BASEPRI, r3
 8004458:	f3bf 8f6f 	isb	sy
 800445c:	f3bf 8f4f 	dsb	sy
 8004460:	e7fe      	b.n	8004460 <vTaskStartScheduler+0x58>
}
 8004462:	b002      	add	sp, #8
 8004464:	bd10      	pop	{r4, pc}
 8004466:	bf00      	nop
 8004468:	2000515c 	.word	0x2000515c
 800446c:	08008b1c 	.word	0x08008b1c
 8004470:	080046f9 	.word	0x080046f9
 8004474:	20005160 	.word	0x20005160
 8004478:	2000517c 	.word	0x2000517c
 800447c:	200051a8 	.word	0x200051a8

08004480 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8004480:	4a02      	ldr	r2, [pc, #8]	; (800448c <vTaskSuspendAll+0xc>)
 8004482:	6813      	ldr	r3, [r2, #0]
 8004484:	3301      	adds	r3, #1
 8004486:	6013      	str	r3, [r2, #0]
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	20005128 	.word	0x20005128

08004490 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8004490:	4b01      	ldr	r3, [pc, #4]	; (8004498 <xTaskGetTickCount+0x8>)
 8004492:	6818      	ldr	r0, [r3, #0]
}
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	200051a8 	.word	0x200051a8

0800449c <xTaskIncrementTick>:
{
 800449c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044a0:	4b3c      	ldr	r3, [pc, #240]	; (8004594 <xTaskIncrementTick+0xf8>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d153      	bne.n	8004550 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + 1;
 80044a8:	4b3b      	ldr	r3, [pc, #236]	; (8004598 <xTaskIncrementTick+0xfc>)
 80044aa:	681c      	ldr	r4, [r3, #0]
 80044ac:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 80044ae:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 80044b0:	b9bc      	cbnz	r4, 80044e2 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 80044b2:	4b3a      	ldr	r3, [pc, #232]	; (800459c <xTaskIncrementTick+0x100>)
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	6812      	ldr	r2, [r2, #0]
 80044b8:	b142      	cbz	r2, 80044cc <xTaskIncrementTick+0x30>
 80044ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044be:	f383 8811 	msr	BASEPRI, r3
 80044c2:	f3bf 8f6f 	isb	sy
 80044c6:	f3bf 8f4f 	dsb	sy
 80044ca:	e7fe      	b.n	80044ca <xTaskIncrementTick+0x2e>
 80044cc:	4a34      	ldr	r2, [pc, #208]	; (80045a0 <xTaskIncrementTick+0x104>)
 80044ce:	6819      	ldr	r1, [r3, #0]
 80044d0:	6810      	ldr	r0, [r2, #0]
 80044d2:	6018      	str	r0, [r3, #0]
 80044d4:	6011      	str	r1, [r2, #0]
 80044d6:	4a33      	ldr	r2, [pc, #204]	; (80045a4 <xTaskIncrementTick+0x108>)
 80044d8:	6813      	ldr	r3, [r2, #0]
 80044da:	3301      	adds	r3, #1
 80044dc:	6013      	str	r3, [r2, #0]
 80044de:	f7ff fe61 	bl	80041a4 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80044e2:	4d31      	ldr	r5, [pc, #196]	; (80045a8 <xTaskIncrementTick+0x10c>)
 80044e4:	f04f 0b00 	mov.w	fp, #0
 80044e8:	682b      	ldr	r3, [r5, #0]
 80044ea:	4f30      	ldr	r7, [pc, #192]	; (80045ac <xTaskIncrementTick+0x110>)
 80044ec:	429c      	cmp	r4, r3
 80044ee:	d33e      	bcc.n	800456e <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80044f0:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 800459c <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 80044f4:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 80045bc <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80044f8:	f8d8 2000 	ldr.w	r2, [r8]
 80044fc:	6812      	ldr	r2, [r2, #0]
 80044fe:	bb72      	cbnz	r2, 800455e <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004500:	f04f 32ff 	mov.w	r2, #4294967295
 8004504:	602a      	str	r2, [r5, #0]
					break;
 8004506:	e032      	b.n	800456e <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004508:	f106 0a04 	add.w	sl, r6, #4
 800450c:	4650      	mov	r0, sl
 800450e:	f7ff f93f 	bl	8003790 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004512:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8004514:	b119      	cbz	r1, 800451e <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004516:	f106 0018 	add.w	r0, r6, #24
 800451a:	f7ff f939 	bl	8003790 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800451e:	2201      	movs	r2, #1
 8004520:	f04f 0e14 	mov.w	lr, #20
 8004524:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8004526:	f8d9 3000 	ldr.w	r3, [r9]
 800452a:	fa02 f100 	lsl.w	r1, r2, r0
 800452e:	4319      	orrs	r1, r3
 8004530:	4b1f      	ldr	r3, [pc, #124]	; (80045b0 <xTaskIncrementTick+0x114>)
 8004532:	f8c9 1000 	str.w	r1, [r9]
 8004536:	fb0e 3000 	mla	r0, lr, r0, r3
 800453a:	4651      	mov	r1, sl
 800453c:	f7ff f905 	bl	800374a <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004540:	6838      	ldr	r0, [r7, #0]
 8004542:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8004544:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8004546:	4291      	cmp	r1, r2
 8004548:	bf28      	it	cs
 800454a:	f04f 0b01 	movcs.w	fp, #1
 800454e:	e7d3      	b.n	80044f8 <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 8004550:	4a18      	ldr	r2, [pc, #96]	; (80045b4 <xTaskIncrementTick+0x118>)
BaseType_t xSwitchRequired = pdFALSE;
 8004552:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 8004556:	6813      	ldr	r3, [r2, #0]
 8004558:	3301      	adds	r3, #1
 800455a:	6013      	str	r3, [r2, #0]
 800455c:	e011      	b.n	8004582 <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800455e:	f8d8 2000 	ldr.w	r2, [r8]
 8004562:	68d2      	ldr	r2, [r2, #12]
 8004564:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004566:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8004568:	428c      	cmp	r4, r1
 800456a:	d2cd      	bcs.n	8004508 <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 800456c:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800456e:	683a      	ldr	r2, [r7, #0]
 8004570:	4b0f      	ldr	r3, [pc, #60]	; (80045b0 <xTaskIncrementTick+0x114>)
 8004572:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004574:	2214      	movs	r2, #20
 8004576:	434a      	muls	r2, r1
 8004578:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 800457a:	2a02      	cmp	r2, #2
 800457c:	bf28      	it	cs
 800457e:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8004582:	4a0d      	ldr	r2, [pc, #52]	; (80045b8 <xTaskIncrementTick+0x11c>)
 8004584:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8004586:	2a00      	cmp	r2, #0
 8004588:	bf18      	it	ne
 800458a:	f04f 0b01 	movne.w	fp, #1
}
 800458e:	4658      	mov	r0, fp
 8004590:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004594:	20005128 	.word	0x20005128
 8004598:	200051a8 	.word	0x200051a8
 800459c:	20005088 	.word	0x20005088
 80045a0:	2000508c 	.word	0x2000508c
 80045a4:	20005164 	.word	0x20005164
 80045a8:	20005160 	.word	0x20005160
 80045ac:	20005084 	.word	0x20005084
 80045b0:	20005090 	.word	0x20005090
 80045b4:	20005124 	.word	0x20005124
 80045b8:	200051ac 	.word	0x200051ac
 80045bc:	20005130 	.word	0x20005130

080045c0 <xTaskResumeAll>:
{
 80045c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 80045c4:	4c31      	ldr	r4, [pc, #196]	; (800468c <xTaskResumeAll+0xcc>)
 80045c6:	6823      	ldr	r3, [r4, #0]
 80045c8:	b943      	cbnz	r3, 80045dc <xTaskResumeAll+0x1c>
 80045ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ce:	f383 8811 	msr	BASEPRI, r3
 80045d2:	f3bf 8f6f 	isb	sy
 80045d6:	f3bf 8f4f 	dsb	sy
 80045da:	e7fe      	b.n	80045da <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 80045dc:	f7ff f93a 	bl	8003854 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80045e0:	6823      	ldr	r3, [r4, #0]
 80045e2:	3b01      	subs	r3, #1
 80045e4:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045e6:	6824      	ldr	r4, [r4, #0]
 80045e8:	b12c      	cbz	r4, 80045f6 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 80045ea:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80045ec:	f7ff f954 	bl	8003898 <vPortExitCritical>
}
 80045f0:	4620      	mov	r0, r4
 80045f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80045f6:	4b26      	ldr	r3, [pc, #152]	; (8004690 <xTaskResumeAll+0xd0>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d0f5      	beq.n	80045ea <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80045fe:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 80046a8 <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 8004602:	4f24      	ldr	r7, [pc, #144]	; (8004694 <xTaskResumeAll+0xd4>)
 8004604:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 80046ac <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004608:	f8d9 3000 	ldr.w	r3, [r9]
 800460c:	b9e3      	cbnz	r3, 8004648 <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 800460e:	b10c      	cbz	r4, 8004614 <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 8004610:	f7ff fdc8 	bl	80041a4 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004614:	4d20      	ldr	r5, [pc, #128]	; (8004698 <xTaskResumeAll+0xd8>)
 8004616:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004618:	b144      	cbz	r4, 800462c <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 800461a:	2701      	movs	r7, #1
 800461c:	4e1f      	ldr	r6, [pc, #124]	; (800469c <xTaskResumeAll+0xdc>)
							if( xTaskIncrementTick() != pdFALSE )
 800461e:	f7ff ff3d 	bl	800449c <xTaskIncrementTick>
 8004622:	b100      	cbz	r0, 8004626 <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 8004624:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004626:	3c01      	subs	r4, #1
 8004628:	d1f9      	bne.n	800461e <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 800462a:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800462c:	4b1b      	ldr	r3, [pc, #108]	; (800469c <xTaskResumeAll+0xdc>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d0da      	beq.n	80045ea <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8004634:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004638:	4b19      	ldr	r3, [pc, #100]	; (80046a0 <xTaskResumeAll+0xe0>)
 800463a:	601a      	str	r2, [r3, #0]
 800463c:	f3bf 8f4f 	dsb	sy
 8004640:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8004644:	2401      	movs	r4, #1
 8004646:	e7d1      	b.n	80045ec <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004648:	f8d9 300c 	ldr.w	r3, [r9, #12]
					prvAddTaskToReadyList( pxTCB );
 800464c:	2501      	movs	r5, #1
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800464e:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004650:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004652:	f104 0018 	add.w	r0, r4, #24
 8004656:	f7ff f89b 	bl	8003790 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800465a:	4630      	mov	r0, r6
 800465c:	f7ff f898 	bl	8003790 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004660:	2014      	movs	r0, #20
 8004662:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004664:	6839      	ldr	r1, [r7, #0]
 8004666:	fa05 f302 	lsl.w	r3, r5, r2
 800466a:	430b      	orrs	r3, r1
 800466c:	fb00 8002 	mla	r0, r0, r2, r8
 8004670:	4631      	mov	r1, r6
 8004672:	603b      	str	r3, [r7, #0]
 8004674:	f7ff f869 	bl	800374a <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004678:	4b0a      	ldr	r3, [pc, #40]	; (80046a4 <xTaskResumeAll+0xe4>)
 800467a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004680:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 8004682:	bf24      	itt	cs
 8004684:	4b05      	ldrcs	r3, [pc, #20]	; (800469c <xTaskResumeAll+0xdc>)
 8004686:	601d      	strcs	r5, [r3, #0]
 8004688:	e7be      	b.n	8004608 <xTaskResumeAll+0x48>
 800468a:	bf00      	nop
 800468c:	20005128 	.word	0x20005128
 8004690:	2000511c 	.word	0x2000511c
 8004694:	20005130 	.word	0x20005130
 8004698:	20005124 	.word	0x20005124
 800469c:	200051ac 	.word	0x200051ac
 80046a0:	e000ed04 	.word	0xe000ed04
 80046a4:	20005084 	.word	0x20005084
 80046a8:	20005168 	.word	0x20005168
 80046ac:	20005090 	.word	0x20005090

080046b0 <vTaskDelay>:
	{
 80046b0:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80046b2:	b940      	cbnz	r0, 80046c6 <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 80046b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046b8:	4b0d      	ldr	r3, [pc, #52]	; (80046f0 <vTaskDelay+0x40>)
 80046ba:	601a      	str	r2, [r3, #0]
 80046bc:	f3bf 8f4f 	dsb	sy
 80046c0:	f3bf 8f6f 	isb	sy
 80046c4:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 80046c6:	4b0b      	ldr	r3, [pc, #44]	; (80046f4 <vTaskDelay+0x44>)
 80046c8:	6819      	ldr	r1, [r3, #0]
 80046ca:	b141      	cbz	r1, 80046de <vTaskDelay+0x2e>
 80046cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d0:	f383 8811 	msr	BASEPRI, r3
 80046d4:	f3bf 8f6f 	isb	sy
 80046d8:	f3bf 8f4f 	dsb	sy
 80046dc:	e7fe      	b.n	80046dc <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80046de:	f7ff fecf 	bl	8004480 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80046e2:	f7ff fd71 	bl	80041c8 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80046e6:	f7ff ff6b 	bl	80045c0 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80046ea:	2800      	cmp	r0, #0
 80046ec:	d0e2      	beq.n	80046b4 <vTaskDelay+0x4>
 80046ee:	bd08      	pop	{r3, pc}
 80046f0:	e000ed04 	.word	0xe000ed04
 80046f4:	20005128 	.word	0x20005128

080046f8 <prvIdleTask>:
{
 80046f8:	b508      	push	{r3, lr}
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 80046fa:	4e17      	ldr	r6, [pc, #92]	; (8004758 <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80046fc:	4c17      	ldr	r4, [pc, #92]	; (800475c <prvIdleTask+0x64>)
 80046fe:	6823      	ldr	r3, [r4, #0]
 8004700:	b963      	cbnz	r3, 800471c <prvIdleTask+0x24>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004702:	4b17      	ldr	r3, [pc, #92]	; (8004760 <prvIdleTask+0x68>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2b01      	cmp	r3, #1
 8004708:	d9f8      	bls.n	80046fc <prvIdleTask+0x4>
				taskYIELD();
 800470a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800470e:	4b15      	ldr	r3, [pc, #84]	; (8004764 <prvIdleTask+0x6c>)
 8004710:	601a      	str	r2, [r3, #0]
 8004712:	f3bf 8f4f 	dsb	sy
 8004716:	f3bf 8f6f 	isb	sy
 800471a:	e7ef      	b.n	80046fc <prvIdleTask+0x4>
			vTaskSuspendAll();
 800471c:	f7ff feb0 	bl	8004480 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8004720:	6835      	ldr	r5, [r6, #0]
			( void ) xTaskResumeAll();
 8004722:	f7ff ff4d 	bl	80045c0 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 8004726:	2d00      	cmp	r5, #0
 8004728:	d0e9      	beq.n	80046fe <prvIdleTask+0x6>
				taskENTER_CRITICAL();
 800472a:	f7ff f893 	bl	8003854 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800472e:	68f3      	ldr	r3, [r6, #12]
 8004730:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004732:	1d28      	adds	r0, r5, #4
 8004734:	f7ff f82c 	bl	8003790 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8004738:	4a0b      	ldr	r2, [pc, #44]	; (8004768 <prvIdleTask+0x70>)
 800473a:	6813      	ldr	r3, [r2, #0]
 800473c:	3b01      	subs	r3, #1
 800473e:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8004740:	6823      	ldr	r3, [r4, #0]
 8004742:	3b01      	subs	r3, #1
 8004744:	6023      	str	r3, [r4, #0]
				taskEXIT_CRITICAL();
 8004746:	f7ff f8a7 	bl	8003898 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 800474a:	6b28      	ldr	r0, [r5, #48]	; 0x30
 800474c:	f7ff fa2e 	bl	8003bac <vPortFree>
			vPortFree( pxTCB );
 8004750:	4628      	mov	r0, r5
 8004752:	f7ff fa2b 	bl	8003bac <vPortFree>
 8004756:	e7d2      	b.n	80046fe <prvIdleTask+0x6>
 8004758:	20005194 	.word	0x20005194
 800475c:	20005120 	.word	0x20005120
 8004760:	20005090 	.word	0x20005090
 8004764:	e000ed04 	.word	0xe000ed04
 8004768:	2000511c 	.word	0x2000511c

0800476c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800476c:	4b17      	ldr	r3, [pc, #92]	; (80047cc <vTaskSwitchContext+0x60>)
{
 800476e:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	4b17      	ldr	r3, [pc, #92]	; (80047d0 <vTaskSwitchContext+0x64>)
 8004774:	b112      	cbz	r2, 800477c <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8004776:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004778:	601a      	str	r2, [r3, #0]
 800477a:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 800477c:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800477e:	4b15      	ldr	r3, [pc, #84]	; (80047d4 <vTaskSwitchContext+0x68>)
 8004780:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8004782:	fab3 f383 	clz	r3, r3
 8004786:	2214      	movs	r2, #20
 8004788:	b2db      	uxtb	r3, r3
 800478a:	f1c3 031f 	rsb	r3, r3, #31
 800478e:	435a      	muls	r2, r3
 8004790:	4911      	ldr	r1, [pc, #68]	; (80047d8 <vTaskSwitchContext+0x6c>)
 8004792:	588c      	ldr	r4, [r1, r2]
 8004794:	1888      	adds	r0, r1, r2
 8004796:	b944      	cbnz	r4, 80047aa <vTaskSwitchContext+0x3e>
	__asm volatile
 8004798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800479c:	f383 8811 	msr	BASEPRI, r3
 80047a0:	f3bf 8f6f 	isb	sy
 80047a4:	f3bf 8f4f 	dsb	sy
 80047a8:	e7fe      	b.n	80047a8 <vTaskSwitchContext+0x3c>
 80047aa:	6844      	ldr	r4, [r0, #4]
 80047ac:	3208      	adds	r2, #8
 80047ae:	6864      	ldr	r4, [r4, #4]
 80047b0:	440a      	add	r2, r1
 80047b2:	4294      	cmp	r4, r2
 80047b4:	bf08      	it	eq
 80047b6:	6862      	ldreq	r2, [r4, #4]
 80047b8:	6044      	str	r4, [r0, #4]
 80047ba:	bf08      	it	eq
 80047bc:	6042      	streq	r2, [r0, #4]
 80047be:	2214      	movs	r2, #20
 80047c0:	fb02 1303 	mla	r3, r2, r3, r1
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	68da      	ldr	r2, [r3, #12]
 80047c8:	4b04      	ldr	r3, [pc, #16]	; (80047dc <vTaskSwitchContext+0x70>)
 80047ca:	e7d5      	b.n	8004778 <vTaskSwitchContext+0xc>
 80047cc:	20005128 	.word	0x20005128
 80047d0:	200051ac 	.word	0x200051ac
 80047d4:	20005130 	.word	0x20005130
 80047d8:	20005090 	.word	0x20005090
 80047dc:	20005084 	.word	0x20005084

080047e0 <vTaskPlaceOnEventList>:
{
 80047e0:	b510      	push	{r4, lr}
 80047e2:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 80047e4:	b940      	cbnz	r0, 80047f8 <vTaskPlaceOnEventList+0x18>
 80047e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ea:	f383 8811 	msr	BASEPRI, r3
 80047ee:	f3bf 8f6f 	isb	sy
 80047f2:	f3bf 8f4f 	dsb	sy
 80047f6:	e7fe      	b.n	80047f6 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80047f8:	4b05      	ldr	r3, [pc, #20]	; (8004810 <vTaskPlaceOnEventList+0x30>)
 80047fa:	6819      	ldr	r1, [r3, #0]
 80047fc:	3118      	adds	r1, #24
 80047fe:	f7fe ffb0 	bl	8003762 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004802:	4620      	mov	r0, r4
}
 8004804:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004808:	2101      	movs	r1, #1
 800480a:	f7ff bcdd 	b.w	80041c8 <prvAddCurrentTaskToDelayedList>
 800480e:	bf00      	nop
 8004810:	20005084 	.word	0x20005084

08004814 <xTaskRemoveFromEventList>:
{
 8004814:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004816:	68c3      	ldr	r3, [r0, #12]
 8004818:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800481a:	b944      	cbnz	r4, 800482e <xTaskRemoveFromEventList+0x1a>
 800481c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004820:	f383 8811 	msr	BASEPRI, r3
 8004824:	f3bf 8f6f 	isb	sy
 8004828:	f3bf 8f4f 	dsb	sy
 800482c:	e7fe      	b.n	800482c <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800482e:	f104 0518 	add.w	r5, r4, #24
 8004832:	4628      	mov	r0, r5
 8004834:	f7fe ffac 	bl	8003790 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004838:	4b11      	ldr	r3, [pc, #68]	; (8004880 <xTaskRemoveFromEventList+0x6c>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	b9e3      	cbnz	r3, 8004878 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800483e:	1d25      	adds	r5, r4, #4
 8004840:	4628      	mov	r0, r5
 8004842:	f7fe ffa5 	bl	8003790 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004846:	2301      	movs	r3, #1
 8004848:	490e      	ldr	r1, [pc, #56]	; (8004884 <xTaskRemoveFromEventList+0x70>)
 800484a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800484c:	6808      	ldr	r0, [r1, #0]
 800484e:	4093      	lsls	r3, r2
 8004850:	4303      	orrs	r3, r0
 8004852:	2014      	movs	r0, #20
 8004854:	600b      	str	r3, [r1, #0]
 8004856:	4629      	mov	r1, r5
 8004858:	4b0b      	ldr	r3, [pc, #44]	; (8004888 <xTaskRemoveFromEventList+0x74>)
 800485a:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800485e:	f7fe ff74 	bl	800374a <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004862:	4b0a      	ldr	r3, [pc, #40]	; (800488c <xTaskRemoveFromEventList+0x78>)
 8004864:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800486a:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 800486c:	bf85      	ittet	hi
 800486e:	2001      	movhi	r0, #1
 8004870:	4b07      	ldrhi	r3, [pc, #28]	; (8004890 <xTaskRemoveFromEventList+0x7c>)
		xReturn = pdFALSE;
 8004872:	2000      	movls	r0, #0
		xYieldPending = pdTRUE;
 8004874:	6018      	strhi	r0, [r3, #0]
}
 8004876:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004878:	4629      	mov	r1, r5
 800487a:	4806      	ldr	r0, [pc, #24]	; (8004894 <xTaskRemoveFromEventList+0x80>)
 800487c:	e7ef      	b.n	800485e <xTaskRemoveFromEventList+0x4a>
 800487e:	bf00      	nop
 8004880:	20005128 	.word	0x20005128
 8004884:	20005130 	.word	0x20005130
 8004888:	20005090 	.word	0x20005090
 800488c:	20005084 	.word	0x20005084
 8004890:	200051ac 	.word	0x200051ac
 8004894:	20005168 	.word	0x20005168

08004898 <vTaskSetTimeOutState>:
{
 8004898:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
 800489a:	b908      	cbnz	r0, 80048a0 <vTaskSetTimeOutState+0x8>
 800489c:	f7ff fcda 	bl	8004254 <prvTaskIsTaskSuspended.part.0>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80048a0:	4b03      	ldr	r3, [pc, #12]	; (80048b0 <vTaskSetTimeOutState+0x18>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80048a6:	4b03      	ldr	r3, [pc, #12]	; (80048b4 <vTaskSetTimeOutState+0x1c>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	6043      	str	r3, [r0, #4]
 80048ac:	bd08      	pop	{r3, pc}
 80048ae:	bf00      	nop
 80048b0:	20005164 	.word	0x20005164
 80048b4:	200051a8 	.word	0x200051a8

080048b8 <xTaskCheckForTimeOut>:
{
 80048b8:	b538      	push	{r3, r4, r5, lr}
 80048ba:	460d      	mov	r5, r1
	configASSERT( pxTimeOut );
 80048bc:	4604      	mov	r4, r0
 80048be:	b940      	cbnz	r0, 80048d2 <xTaskCheckForTimeOut+0x1a>
 80048c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c4:	f383 8811 	msr	BASEPRI, r3
 80048c8:	f3bf 8f6f 	isb	sy
 80048cc:	f3bf 8f4f 	dsb	sy
 80048d0:	e7fe      	b.n	80048d0 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 80048d2:	b941      	cbnz	r1, 80048e6 <xTaskCheckForTimeOut+0x2e>
 80048d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d8:	f383 8811 	msr	BASEPRI, r3
 80048dc:	f3bf 8f6f 	isb	sy
 80048e0:	f3bf 8f4f 	dsb	sy
 80048e4:	e7fe      	b.n	80048e4 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 80048e6:	f7fe ffb5 	bl	8003854 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80048ea:	4b0e      	ldr	r3, [pc, #56]	; (8004924 <xTaskCheckForTimeOut+0x6c>)
 80048ec:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 80048ee:	682b      	ldr	r3, [r5, #0]
 80048f0:	1c5a      	adds	r2, r3, #1
 80048f2:	d010      	beq.n	8004916 <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80048f4:	4a0c      	ldr	r2, [pc, #48]	; (8004928 <xTaskCheckForTimeOut+0x70>)
 80048f6:	6820      	ldr	r0, [r4, #0]
 80048f8:	6812      	ldr	r2, [r2, #0]
 80048fa:	4290      	cmp	r0, r2
 80048fc:	6862      	ldr	r2, [r4, #4]
 80048fe:	d001      	beq.n	8004904 <xTaskCheckForTimeOut+0x4c>
 8004900:	4291      	cmp	r1, r2
 8004902:	d20d      	bcs.n	8004920 <xTaskCheckForTimeOut+0x68>
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004904:	1a88      	subs	r0, r1, r2
 8004906:	4283      	cmp	r3, r0
 8004908:	d90a      	bls.n	8004920 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 800490a:	1a5b      	subs	r3, r3, r1
 800490c:	4413      	add	r3, r2
 800490e:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8004910:	4620      	mov	r0, r4
 8004912:	f7ff ffc1 	bl	8004898 <vTaskSetTimeOutState>
				xReturn = pdFALSE;
 8004916:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8004918:	f7fe ffbe 	bl	8003898 <vPortExitCritical>
}
 800491c:	4620      	mov	r0, r4
 800491e:	bd38      	pop	{r3, r4, r5, pc}
			xReturn = pdTRUE;
 8004920:	2401      	movs	r4, #1
 8004922:	e7f9      	b.n	8004918 <xTaskCheckForTimeOut+0x60>
 8004924:	200051a8 	.word	0x200051a8
 8004928:	20005164 	.word	0x20005164

0800492c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800492c:	2201      	movs	r2, #1
 800492e:	4b01      	ldr	r3, [pc, #4]	; (8004934 <vTaskMissedYield+0x8>)
 8004930:	601a      	str	r2, [r3, #0]
 8004932:	4770      	bx	lr
 8004934:	200051ac 	.word	0x200051ac

08004938 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8004938:	4b05      	ldr	r3, [pc, #20]	; (8004950 <xTaskGetSchedulerState+0x18>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	b133      	cbz	r3, 800494c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800493e:	4b05      	ldr	r3, [pc, #20]	; (8004954 <xTaskGetSchedulerState+0x1c>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8004944:	bf0c      	ite	eq
 8004946:	2002      	moveq	r0, #2
 8004948:	2000      	movne	r0, #0
 800494a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800494c:	2001      	movs	r0, #1
	}
 800494e:	4770      	bx	lr
 8004950:	2000517c 	.word	0x2000517c
 8004954:	20005128 	.word	0x20005128

08004958 <vTaskPriorityInherit>:
	{
 8004958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 800495c:	4604      	mov	r4, r0
 800495e:	2800      	cmp	r0, #0
 8004960:	d039      	beq.n	80049d6 <vTaskPriorityInherit+0x7e>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004962:	4d1e      	ldr	r5, [pc, #120]	; (80049dc <vTaskPriorityInherit+0x84>)
 8004964:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004966:	682a      	ldr	r2, [r5, #0]
 8004968:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800496a:	4293      	cmp	r3, r2
 800496c:	d233      	bcs.n	80049d6 <vTaskPriorityInherit+0x7e>
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800496e:	2714      	movs	r7, #20
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004970:	6982      	ldr	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004972:	4e1b      	ldr	r6, [pc, #108]	; (80049e0 <vTaskPriorityInherit+0x88>)
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004974:	2a00      	cmp	r2, #0
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004976:	bfa8      	it	ge
 8004978:	682a      	ldrge	r2, [r5, #0]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800497a:	fb07 6303 	mla	r3, r7, r3, r6
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800497e:	bfa2      	ittt	ge
 8004980:	6ad2      	ldrge	r2, [r2, #44]	; 0x2c
 8004982:	f1c2 0207 	rsbge	r2, r2, #7
 8004986:	6182      	strge	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004988:	6942      	ldr	r2, [r0, #20]
 800498a:	429a      	cmp	r2, r3
 800498c:	d120      	bne.n	80049d0 <vTaskPriorityInherit+0x78>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800498e:	f100 0804 	add.w	r8, r0, #4
 8004992:	4640      	mov	r0, r8
 8004994:	f7fe fefc 	bl	8003790 <uxListRemove>
 8004998:	4a12      	ldr	r2, [pc, #72]	; (80049e4 <vTaskPriorityInherit+0x8c>)
 800499a:	b948      	cbnz	r0, 80049b0 <vTaskPriorityInherit+0x58>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800499c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800499e:	4347      	muls	r7, r0
 80049a0:	59f3      	ldr	r3, [r6, r7]
 80049a2:	b92b      	cbnz	r3, 80049b0 <vTaskPriorityInherit+0x58>
 80049a4:	2101      	movs	r1, #1
 80049a6:	6813      	ldr	r3, [r2, #0]
 80049a8:	4081      	lsls	r1, r0
 80049aa:	ea23 0301 	bic.w	r3, r3, r1
 80049ae:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80049b0:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxTCB );
 80049b2:	6811      	ldr	r1, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80049b4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 80049b6:	2301      	movs	r3, #1
 80049b8:	4083      	lsls	r3, r0
 80049ba:	430b      	orrs	r3, r1
 80049bc:	6013      	str	r3, [r2, #0]
 80049be:	2314      	movs	r3, #20
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80049c0:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 80049c2:	4641      	mov	r1, r8
 80049c4:	fb03 6000 	mla	r0, r3, r0, r6
	}
 80049c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					prvAddTaskToReadyList( pxTCB );
 80049cc:	f7fe bebd 	b.w	800374a <vListInsertEnd>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80049d0:	682b      	ldr	r3, [r5, #0]
 80049d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d4:	62c3      	str	r3, [r0, #44]	; 0x2c
 80049d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049da:	bf00      	nop
 80049dc:	20005084 	.word	0x20005084
 80049e0:	20005090 	.word	0x20005090
 80049e4:	20005130 	.word	0x20005130

080049e8 <xTaskPriorityDisinherit>:
	{
 80049e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 80049ea:	4604      	mov	r4, r0
 80049ec:	b908      	cbnz	r0, 80049f2 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 80049ee:	2000      	movs	r0, #0
 80049f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 80049f2:	4b22      	ldr	r3, [pc, #136]	; (8004a7c <xTaskPriorityDisinherit+0x94>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4298      	cmp	r0, r3
 80049f8:	d008      	beq.n	8004a0c <xTaskPriorityDisinherit+0x24>
 80049fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049fe:	f383 8811 	msr	BASEPRI, r3
 8004a02:	f3bf 8f6f 	isb	sy
 8004a06:	f3bf 8f4f 	dsb	sy
 8004a0a:	e7fe      	b.n	8004a0a <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8004a0c:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8004a0e:	b943      	cbnz	r3, 8004a22 <xTaskPriorityDisinherit+0x3a>
 8004a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a14:	f383 8811 	msr	BASEPRI, r3
 8004a18:	f3bf 8f6f 	isb	sy
 8004a1c:	f3bf 8f4f 	dsb	sy
 8004a20:	e7fe      	b.n	8004a20 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004a22:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8004a24:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 8004a26:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004a28:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8004a2a:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004a2c:	d0df      	beq.n	80049ee <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d1dd      	bne.n	80049ee <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a32:	1d05      	adds	r5, r0, #4
 8004a34:	4628      	mov	r0, r5
 8004a36:	f7fe feab 	bl	8003790 <uxListRemove>
 8004a3a:	4e11      	ldr	r6, [pc, #68]	; (8004a80 <xTaskPriorityDisinherit+0x98>)
 8004a3c:	4a11      	ldr	r2, [pc, #68]	; (8004a84 <xTaskPriorityDisinherit+0x9c>)
 8004a3e:	b950      	cbnz	r0, 8004a56 <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004a40:	2114      	movs	r1, #20
 8004a42:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004a44:	4379      	muls	r1, r7
 8004a46:	5873      	ldr	r3, [r6, r1]
 8004a48:	b92b      	cbnz	r3, 8004a56 <xTaskPriorityDisinherit+0x6e>
 8004a4a:	2001      	movs	r0, #1
 8004a4c:	6813      	ldr	r3, [r2, #0]
 8004a4e:	40b8      	lsls	r0, r7
 8004a50:	ea23 0300 	bic.w	r3, r3, r0
 8004a54:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004a56:	6c63      	ldr	r3, [r4, #68]	; 0x44
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a58:	f1c3 0107 	rsb	r1, r3, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004a5c:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a5e:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8004a60:	2401      	movs	r4, #1
 8004a62:	6811      	ldr	r1, [r2, #0]
 8004a64:	fa04 f003 	lsl.w	r0, r4, r3
 8004a68:	4308      	orrs	r0, r1
 8004a6a:	6010      	str	r0, [r2, #0]
 8004a6c:	2014      	movs	r0, #20
 8004a6e:	4629      	mov	r1, r5
 8004a70:	fb00 6003 	mla	r0, r0, r3, r6
 8004a74:	f7fe fe69 	bl	800374a <vListInsertEnd>
					xReturn = pdTRUE;
 8004a78:	4620      	mov	r0, r4
	}
 8004a7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a7c:	20005084 	.word	0x20005084
 8004a80:	20005090 	.word	0x20005090
 8004a84:	20005130 	.word	0x20005130

08004a88 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8004a88:	4b04      	ldr	r3, [pc, #16]	; (8004a9c <pvTaskIncrementMutexHeldCount+0x14>)
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	b11a      	cbz	r2, 8004a96 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8004a8e:	6819      	ldr	r1, [r3, #0]
 8004a90:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 8004a92:	3201      	adds	r2, #1
 8004a94:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 8004a96:	6818      	ldr	r0, [r3, #0]
	}
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	20005084 	.word	0x20005084

08004aa0 <fir_filter>:

extern uint16_t ADCRawData[4];
extern uint16_t sensorValue[4];
extern uint16_t filteredData[4];

uint16_t fir_filter(uint16_t *signal, uint16_t sample){
 8004aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004aa2:	b08b      	sub	sp, #44	; 0x2c
//	         -581
//		    };
//	uint32_t DCgain = 32768;

	//5 Hz Fcut = 1 Hz
	uint32_t FIRCoef[10] = {
 8004aa4:	466c      	mov	r4, sp
uint16_t fir_filter(uint16_t *signal, uint16_t sample){
 8004aa6:	4606      	mov	r6, r0
	uint32_t FIRCoef[10] = {
 8004aa8:	4d0f      	ldr	r5, [pc, #60]	; (8004ae8 <fir_filter+0x48>)
uint16_t fir_filter(uint16_t *signal, uint16_t sample){
 8004aaa:	460f      	mov	r7, r1
	uint32_t FIRCoef[10] = {
 8004aac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004aae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ab0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004ab2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004ab4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004ab8:	e884 0003 	stmia.w	r4, {r0, r1}
 8004abc:	f106 0312 	add.w	r3, r6, #18


	uint8_t i = 0;

	for (i = 10 - 1; i> 0; i--){
		signal[i] = signal[i-1];
 8004ac0:	f833 2d02 	ldrh.w	r2, [r3, #-2]!
	for (i = 10 - 1; i> 0; i--){
 8004ac4:	429e      	cmp	r6, r3
		signal[i] = signal[i-1];
 8004ac6:	805a      	strh	r2, [r3, #2]
	for (i = 10 - 1; i> 0; i--){
 8004ac8:	d1fa      	bne.n	8004ac0 <fir_filter+0x20>
	}

	signal[0] = sample;
 8004aca:	2300      	movs	r3, #0
	filteredSample = 0;
 8004acc:	4618      	mov	r0, r3
	signal[0] = sample;
 8004ace:	8037      	strh	r7, [r6, #0]

	for (i = 0 ; i < 10; i++){
		filteredSample += FIRCoef[i] * (uint32_t)signal[i];
 8004ad0:	f836 2013 	ldrh.w	r2, [r6, r3, lsl #1]
 8004ad4:	f85d 1023 	ldr.w	r1, [sp, r3, lsl #2]
 8004ad8:	3301      	adds	r3, #1
	for (i = 0 ; i < 10; i++){
 8004ada:	2b0a      	cmp	r3, #10
		filteredSample += FIRCoef[i] * (uint32_t)signal[i];
 8004adc:	fb01 0002 	mla	r0, r1, r2, r0
	for (i = 0 ; i < 10; i++){
 8004ae0:	d1f6      	bne.n	8004ad0 <fir_filter+0x30>
	}
	filteredSample = filteredSample / DCgain;

	return (uint16_t) filteredSample;
}
 8004ae2:	0c00      	lsrs	r0, r0, #16
 8004ae4:	b00b      	add	sp, #44	; 0x2c
 8004ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ae8:	08008ad8 	.word	0x08008ad8

08004aec <xStoreADCDataTask>:

void xStoreADCDataTask(void* arguments){
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b094      	sub	sp, #80	; 0x50

	uint16_t sens1_array[10] = {1};
 8004af0:	2214      	movs	r2, #20
 8004af2:	2100      	movs	r1, #0
 8004af4:	4668      	mov	r0, sp
 8004af6:	f001 fa94 	bl	8006022 <memset>
	uint16_t sens2_array[10] = {2};
 8004afa:	2214      	movs	r2, #20
	uint16_t sens1_array[10] = {1};
 8004afc:	2301      	movs	r3, #1
	uint16_t sens2_array[10] = {2};
 8004afe:	2100      	movs	r1, #0
 8004b00:	eb0d 0002 	add.w	r0, sp, r2
	uint16_t sens1_array[10] = {1};
 8004b04:	f8ad 3000 	strh.w	r3, [sp]
	uint16_t sens2_array[10] = {2};
 8004b08:	f001 fa8b 	bl	8006022 <memset>
 8004b0c:	2302      	movs	r3, #2
	uint16_t sens3_array[10] = {3};
 8004b0e:	2214      	movs	r2, #20
 8004b10:	2100      	movs	r1, #0
 8004b12:	a80a      	add	r0, sp, #40	; 0x28
	uint16_t sens2_array[10] = {2};
 8004b14:	f8ad 3014 	strh.w	r3, [sp, #20]
	uint16_t sens3_array[10] = {3};
 8004b18:	f001 fa83 	bl	8006022 <memset>
 8004b1c:	2303      	movs	r3, #3
	uint16_t sens4_array[10] = {4};
 8004b1e:	2214      	movs	r2, #20
 8004b20:	2100      	movs	r1, #0
 8004b22:	a80f      	add	r0, sp, #60	; 0x3c


	for(;;){

		if (lastTimeCommand > 50){
 8004b24:	4d59      	ldr	r5, [pc, #356]	; (8004c8c <xStoreADCDataTask+0x1a0>)
	uint16_t sens3_array[10] = {3};
 8004b26:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	uint16_t sens4_array[10] = {4};
 8004b2a:	f001 fa7a 	bl	8006022 <memset>
 8004b2e:	2304      	movs	r3, #4
 8004b30:	462e      	mov	r6, r5
 8004b32:	4f57      	ldr	r7, [pc, #348]	; (8004c90 <xStoreADCDataTask+0x1a4>)
 8004b34:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
		if (lastTimeCommand > 50){
 8004b38:	882b      	ldrh	r3, [r5, #0]
 8004b3a:	2b32      	cmp	r3, #50	; 0x32
 8004b3c:	d972      	bls.n	8004c24 <xStoreADCDataTask+0x138>
			if (pressureCompensation == OFF){
 8004b3e:	783c      	ldrb	r4, [r7, #0]
 8004b40:	bb4c      	cbnz	r4, 8004b96 <xStoreADCDataTask+0xaa>
				C1_UP_OFF;
 8004b42:	4622      	mov	r2, r4
 8004b44:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004b48:	4852      	ldr	r0, [pc, #328]	; (8004c94 <xStoreADCDataTask+0x1a8>)
 8004b4a:	f7fd fbf3 	bl	8002334 <HAL_GPIO_WritePin>
				C1_DOWN_OFF;
 8004b4e:	4622      	mov	r2, r4
 8004b50:	2180      	movs	r1, #128	; 0x80
 8004b52:	4850      	ldr	r0, [pc, #320]	; (8004c94 <xStoreADCDataTask+0x1a8>)
 8004b54:	f7fd fbee 	bl	8002334 <HAL_GPIO_WritePin>
				C2_UP_OFF;
 8004b58:	4622      	mov	r2, r4
 8004b5a:	2120      	movs	r1, #32
 8004b5c:	484d      	ldr	r0, [pc, #308]	; (8004c94 <xStoreADCDataTask+0x1a8>)
 8004b5e:	f7fd fbe9 	bl	8002334 <HAL_GPIO_WritePin>
				C2_DOWN_OFF;
 8004b62:	4622      	mov	r2, r4
 8004b64:	2108      	movs	r1, #8
 8004b66:	484b      	ldr	r0, [pc, #300]	; (8004c94 <xStoreADCDataTask+0x1a8>)
 8004b68:	f7fd fbe4 	bl	8002334 <HAL_GPIO_WritePin>
				C3_UP_OFF;
 8004b6c:	4622      	mov	r2, r4
 8004b6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004b72:	4848      	ldr	r0, [pc, #288]	; (8004c94 <xStoreADCDataTask+0x1a8>)
 8004b74:	f7fd fbde 	bl	8002334 <HAL_GPIO_WritePin>
				C3_DOWN_OFF;
 8004b78:	4622      	mov	r2, r4
 8004b7a:	2140      	movs	r1, #64	; 0x40
 8004b7c:	4845      	ldr	r0, [pc, #276]	; (8004c94 <xStoreADCDataTask+0x1a8>)
 8004b7e:	f7fd fbd9 	bl	8002334 <HAL_GPIO_WritePin>
				C4_UP_OFF;
 8004b82:	4622      	mov	r2, r4
 8004b84:	2110      	movs	r1, #16
 8004b86:	4843      	ldr	r0, [pc, #268]	; (8004c94 <xStoreADCDataTask+0x1a8>)
 8004b88:	f7fd fbd4 	bl	8002334 <HAL_GPIO_WritePin>
				C4_DOWN_OFF;
 8004b8c:	4622      	mov	r2, r4
 8004b8e:	2104      	movs	r1, #4
 8004b90:	4841      	ldr	r0, [pc, #260]	; (8004c98 <xStoreADCDataTask+0x1ac>)
 8004b92:	f7fd fbcf 	bl	8002334 <HAL_GPIO_WritePin>
			}

			if (indicationState != SEARCH){
 8004b96:	4a41      	ldr	r2, [pc, #260]	; (8004c9c <xStoreADCDataTask+0x1b0>)
 8004b98:	7813      	ldrb	r3, [r2, #0]
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	d03a      	beq.n	8004c14 <xStoreADCDataTask+0x128>
				indicationState = NORMAL_NC;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	7013      	strb	r3, [r2, #0]
				lastTimeCommand = 0;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	8033      	strh	r3, [r6, #0]
		}
		else{
			lastTimeCommand++;
		}

		sensorValue[SENS_1] = ADCRawData[SENS_1];
 8004ba6:	4b3e      	ldr	r3, [pc, #248]	; (8004ca0 <xStoreADCDataTask+0x1b4>)
 8004ba8:	4c3e      	ldr	r4, [pc, #248]	; (8004ca4 <xStoreADCDataTask+0x1b8>)
 8004baa:	881a      	ldrh	r2, [r3, #0]
		sensorValue[SENS_2] = ADCRawData[SENS_2];
		sensorValue[SENS_3] = ADCRawData[SENS_3];
		sensorValue[SENS_4] = ADCRawData[SENS_4];

		HAL_ADCEx_InjectedStart_IT(&hadc1);
 8004bac:	483e      	ldr	r0, [pc, #248]	; (8004ca8 <xStoreADCDataTask+0x1bc>)
		sensorValue[SENS_1] = ADCRawData[SENS_1];
 8004bae:	8022      	strh	r2, [r4, #0]
		sensorValue[SENS_2] = ADCRawData[SENS_2];
 8004bb0:	885a      	ldrh	r2, [r3, #2]


		filteredData[SENS_1] = fir_filter(sens1_array, sensorValue[SENS_1]);
 8004bb2:	f8df 8100 	ldr.w	r8, [pc, #256]	; 8004cb4 <xStoreADCDataTask+0x1c8>
		sensorValue[SENS_2] = ADCRawData[SENS_2];
 8004bb6:	8062      	strh	r2, [r4, #2]
		sensorValue[SENS_3] = ADCRawData[SENS_3];
 8004bb8:	889a      	ldrh	r2, [r3, #4]
		sensorValue[SENS_4] = ADCRawData[SENS_4];
 8004bba:	88db      	ldrh	r3, [r3, #6]
		sensorValue[SENS_3] = ADCRawData[SENS_3];
 8004bbc:	80a2      	strh	r2, [r4, #4]
		sensorValue[SENS_4] = ADCRawData[SENS_4];
 8004bbe:	80e3      	strh	r3, [r4, #6]
		HAL_ADCEx_InjectedStart_IT(&hadc1);
 8004bc0:	f7fc fe26 	bl	8001810 <HAL_ADCEx_InjectedStart_IT>
		filteredData[SENS_1] = fir_filter(sens1_array, sensorValue[SENS_1]);
 8004bc4:	8821      	ldrh	r1, [r4, #0]
 8004bc6:	4668      	mov	r0, sp
 8004bc8:	f7ff ff6a 	bl	8004aa0 <fir_filter>
		filteredData[SENS_2] = fir_filter(sens2_array, sensorValue[SENS_2]);
 8004bcc:	8861      	ldrh	r1, [r4, #2]
		filteredData[SENS_1] = fir_filter(sens1_array, sensorValue[SENS_1]);
 8004bce:	f8a8 0000 	strh.w	r0, [r8]
		filteredData[SENS_2] = fir_filter(sens2_array, sensorValue[SENS_2]);
 8004bd2:	a805      	add	r0, sp, #20
 8004bd4:	f7ff ff64 	bl	8004aa0 <fir_filter>
		filteredData[SENS_3] = fir_filter(sens3_array, sensorValue[SENS_3]);
 8004bd8:	88a1      	ldrh	r1, [r4, #4]
		filteredData[SENS_2] = fir_filter(sens2_array, sensorValue[SENS_2]);
 8004bda:	f8a8 0002 	strh.w	r0, [r8, #2]
		filteredData[SENS_3] = fir_filter(sens3_array, sensorValue[SENS_3]);
 8004bde:	a80a      	add	r0, sp, #40	; 0x28
 8004be0:	f7ff ff5e 	bl	8004aa0 <fir_filter>
		filteredData[SENS_4] = fir_filter(sens4_array, sensorValue[SENS_4]);
 8004be4:	88e1      	ldrh	r1, [r4, #6]
		filteredData[SENS_3] = fir_filter(sens3_array, sensorValue[SENS_3]);
 8004be6:	f8a8 0004 	strh.w	r0, [r8, #4]
		filteredData[SENS_4] = fir_filter(sens4_array, sensorValue[SENS_4]);
 8004bea:	a80f      	add	r0, sp, #60	; 0x3c
 8004bec:	f7ff ff58 	bl	8004aa0 <fir_filter>


		if (pressureCompensation == ON){
 8004bf0:	783b      	ldrb	r3, [r7, #0]
		filteredData[SENS_4] = fir_filter(sens4_array, sensorValue[SENS_4]);
 8004bf2:	f8a8 0006 	strh.w	r0, [r8, #6]
		if (pressureCompensation == ON){
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	4c2c      	ldr	r4, [pc, #176]	; (8004cac <xStoreADCDataTask+0x1c0>)
 8004bfa:	d116      	bne.n	8004c2a <xStoreADCDataTask+0x13e>
			prevCompensation = ON;
 8004bfc:	7023      	strb	r3, [r4, #0]
			xSemaphoreGive(xPressureCompensationSemaphore);
 8004bfe:	2300      	movs	r3, #0
 8004c00:	482b      	ldr	r0, [pc, #172]	; (8004cb0 <xStoreADCDataTask+0x1c4>)
 8004c02:	461a      	mov	r2, r3
 8004c04:	4619      	mov	r1, r3
 8004c06:	6800      	ldr	r0, [r0, #0]
 8004c08:	f7ff f8f0 	bl	8003dec <xQueueGenericSend>
				prevCompensation = OFF;
			}

		}

		vTaskDelay(ADC_DATA_PERIOD / portTICK_RATE_MS);
 8004c0c:	2032      	movs	r0, #50	; 0x32
 8004c0e:	f7ff fd4f 	bl	80046b0 <vTaskDelay>
		if (lastTimeCommand > 50){
 8004c12:	e791      	b.n	8004b38 <xStoreADCDataTask+0x4c>
				lastTimeCommand++;
 8004c14:	8833      	ldrh	r3, [r6, #0]
 8004c16:	3301      	adds	r3, #1
 8004c18:	b29b      	uxth	r3, r3
				if (lastTimeCommand > 600){
 8004c1a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
				lastTimeCommand++;
 8004c1e:	8033      	strh	r3, [r6, #0]
				if (lastTimeCommand > 600){
 8004c20:	d8bd      	bhi.n	8004b9e <xStoreADCDataTask+0xb2>
 8004c22:	e7c0      	b.n	8004ba6 <xStoreADCDataTask+0xba>
			lastTimeCommand++;
 8004c24:	3301      	adds	r3, #1
 8004c26:	802b      	strh	r3, [r5, #0]
 8004c28:	e7bd      	b.n	8004ba6 <xStoreADCDataTask+0xba>
			if (prevCompensation == ON){
 8004c2a:	7823      	ldrb	r3, [r4, #0]
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d1ed      	bne.n	8004c0c <xStoreADCDataTask+0x120>
				C1_UP_OFF;
 8004c30:	2200      	movs	r2, #0
 8004c32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004c36:	4817      	ldr	r0, [pc, #92]	; (8004c94 <xStoreADCDataTask+0x1a8>)
 8004c38:	f7fd fb7c 	bl	8002334 <HAL_GPIO_WritePin>
				C1_DOWN_OFF;
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	2180      	movs	r1, #128	; 0x80
 8004c40:	4814      	ldr	r0, [pc, #80]	; (8004c94 <xStoreADCDataTask+0x1a8>)
 8004c42:	f7fd fb77 	bl	8002334 <HAL_GPIO_WritePin>
				C2_UP_OFF;
 8004c46:	2200      	movs	r2, #0
 8004c48:	2120      	movs	r1, #32
 8004c4a:	4812      	ldr	r0, [pc, #72]	; (8004c94 <xStoreADCDataTask+0x1a8>)
 8004c4c:	f7fd fb72 	bl	8002334 <HAL_GPIO_WritePin>
				C2_DOWN_OFF;
 8004c50:	2200      	movs	r2, #0
 8004c52:	2108      	movs	r1, #8
 8004c54:	480f      	ldr	r0, [pc, #60]	; (8004c94 <xStoreADCDataTask+0x1a8>)
 8004c56:	f7fd fb6d 	bl	8002334 <HAL_GPIO_WritePin>
				C3_UP_OFF;
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004c60:	480c      	ldr	r0, [pc, #48]	; (8004c94 <xStoreADCDataTask+0x1a8>)
 8004c62:	f7fd fb67 	bl	8002334 <HAL_GPIO_WritePin>
				C3_DOWN_OFF;
 8004c66:	2200      	movs	r2, #0
 8004c68:	2140      	movs	r1, #64	; 0x40
 8004c6a:	480a      	ldr	r0, [pc, #40]	; (8004c94 <xStoreADCDataTask+0x1a8>)
 8004c6c:	f7fd fb62 	bl	8002334 <HAL_GPIO_WritePin>
				C4_UP_OFF;
 8004c70:	2200      	movs	r2, #0
 8004c72:	2110      	movs	r1, #16
 8004c74:	4807      	ldr	r0, [pc, #28]	; (8004c94 <xStoreADCDataTask+0x1a8>)
 8004c76:	f7fd fb5d 	bl	8002334 <HAL_GPIO_WritePin>
				C4_DOWN_OFF;
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	2104      	movs	r1, #4
 8004c7e:	4806      	ldr	r0, [pc, #24]	; (8004c98 <xStoreADCDataTask+0x1ac>)
 8004c80:	f7fd fb58 	bl	8002334 <HAL_GPIO_WritePin>
				prevCompensation = OFF;
 8004c84:	2300      	movs	r3, #0
 8004c86:	7023      	strb	r3, [r4, #0]
 8004c88:	e7c0      	b.n	8004c0c <xStoreADCDataTask+0x120>
 8004c8a:	bf00      	nop
 8004c8c:	200051b0 	.word	0x200051b0
 8004c90:	200052c2 	.word	0x200052c2
 8004c94:	40010c00 	.word	0x40010c00
 8004c98:	40011400 	.word	0x40011400
 8004c9c:	2000000c 	.word	0x2000000c
 8004ca0:	20005384 	.word	0x20005384
 8004ca4:	20005486 	.word	0x20005486
 8004ca8:	20005414 	.word	0x20005414
 8004cac:	200051b2 	.word	0x200051b2
 8004cb0:	200053cc 	.word	0x200053cc
 8004cb4:	20005230 	.word	0x20005230

08004cb8 <xAnalyzeTask>:
extern char message[128];
extern uint8_t messageLength;
extern UART_HandleTypeDef huart1;
extern struct controllerData controllerSettings;

void xAnalyzeTask(void *arguments){
 8004cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

	uint16_t startPressure[4];
	uint32_t impCounter = 0;
	uint32_t dCounter = 0;
	uint8_t stopImp = 0;
	int32_t impTime[4] = {0, 1, 2, 3};
 8004cbc:	4b83      	ldr	r3, [pc, #524]	; (8004ecc <xAnalyzeTask+0x214>)
void xAnalyzeTask(void *arguments){
 8004cbe:	b08f      	sub	sp, #60	; 0x3c
	int32_t impTime[4] = {0, 1, 2, 3};
 8004cc0:	ac0a      	add	r4, sp, #40	; 0x28
 8004cc2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004cc4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	float impCoeff[4] = {0.0,0.0,0.0,0.0};
	uint16_t calibrationImp = 1000;

	xStatus = xSemaphoreTake(xPressureCompensationSemaphore, portMAX_DELAY);
 8004cc8:	2300      	movs	r3, #0
 8004cca:	4c81      	ldr	r4, [pc, #516]	; (8004ed0 <xAnalyzeTask+0x218>)
 8004ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8004cd0:	4619      	mov	r1, r3
 8004cd2:	6820      	ldr	r0, [r4, #0]
 8004cd4:	f7ff f9a2 	bl	800401c <xQueueGenericReceive>
 8004cd8:	9406      	str	r4, [sp, #24]
	for(;;){
		xStatus = xSemaphoreTake(xPressureCompensationSemaphore, portMAX_DELAY);
 8004cda:	2300      	movs	r3, #0
 8004cdc:	9806      	ldr	r0, [sp, #24]
 8004cde:	f04f 32ff 	mov.w	r2, #4294967295
 8004ce2:	4619      	mov	r1, r3
 8004ce4:	6800      	ldr	r0, [r0, #0]
 8004ce6:	f7ff f999 	bl	800401c <xQueueGenericReceive>
		if (xStatus == pdPASS){
 8004cea:	2801      	cmp	r0, #1
 8004cec:	d1f5      	bne.n	8004cda <xAnalyzeTask+0x22>
			if (airSystem == RECEIVER){
 8004cee:	4b79      	ldr	r3, [pc, #484]	; (8004ed4 <xAnalyzeTask+0x21c>)
 8004cf0:	781d      	ldrb	r5, [r3, #0]
 8004cf2:	2d01      	cmp	r5, #1
 8004cf4:	d1f1      	bne.n	8004cda <xAnalyzeTask+0x22>
				workState = FREE;
 8004cf6:	2600      	movs	r6, #0

				#if DEBUG_SERIAL
					messageLength = sprintf(message, "+++NEW STEP+++ pc=%d\n", pressureCompensation);
 8004cf8:	4b77      	ldr	r3, [pc, #476]	; (8004ed8 <xAnalyzeTask+0x220>)
				workState = FREE;
 8004cfa:	4c78      	ldr	r4, [pc, #480]	; (8004edc <xAnalyzeTask+0x224>)
					messageLength = sprintf(message, "+++NEW STEP+++ pc=%d\n", pressureCompensation);
 8004cfc:	781a      	ldrb	r2, [r3, #0]
 8004cfe:	4978      	ldr	r1, [pc, #480]	; (8004ee0 <xAnalyzeTask+0x228>)
 8004d00:	4878      	ldr	r0, [pc, #480]	; (8004ee4 <xAnalyzeTask+0x22c>)
				workState = FREE;
 8004d02:	7026      	strb	r6, [r4, #0]
					messageLength = sprintf(message, "+++NEW STEP+++ pc=%d\n", pressureCompensation);
 8004d04:	f001 fdf6 	bl	80068f4 <siprintf>
 8004d08:	4b77      	ldr	r3, [pc, #476]	; (8004ee8 <xAnalyzeTask+0x230>)
 8004d0a:	b2c2      	uxtb	r2, r0
 8004d0c:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&huart1, (uint8_t*)message, messageLength, 0xFFFF);
 8004d0e:	4975      	ldr	r1, [pc, #468]	; (8004ee4 <xAnalyzeTask+0x22c>)
 8004d10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004d14:	4875      	ldr	r0, [pc, #468]	; (8004eec <xAnalyzeTask+0x234>)
 8004d16:	f7fe fb11 	bl	800333c <HAL_UART_Transmit>
						else
							pressIsLower[i] = 0;
						workState = WORKING;
					}
					else{
						pressIsLower[i] = -1;
 8004d1a:	f04f 0aff 	mov.w	sl, #255	; 0xff
					HAL_UART_Transmit(&huart1, (uint8_t*)message, messageLength, 0xFFFF);
 8004d1e:	4633      	mov	r3, r6
 8004d20:	4630      	mov	r0, r6
							pressIsLower[i] = 0;
 8004d22:	46b3      	mov	fp, r6
 8004d24:	7827      	ldrb	r7, [r4, #0]
 8004d26:	4972      	ldr	r1, [pc, #456]	; (8004ef0 <xAnalyzeTask+0x238>)
					startPressure[i] = filteredData[i];
 8004d28:	f8df e1d4 	ldr.w	lr, [pc, #468]	; 8004f00 <xAnalyzeTask+0x248>
					deltaPressure = nessPressure[i] - filteredData[i];
 8004d2c:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 8004efc <xAnalyzeTask+0x244>
					startPressure[i] = filteredData[i];
 8004d30:	f10d 0820 	add.w	r8, sp, #32
 8004d34:	f83e 6013 	ldrh.w	r6, [lr, r3, lsl #1]
					deltaPressure = nessPressure[i] - filteredData[i];
 8004d38:	f839 c013 	ldrh.w	ip, [r9, r3, lsl #1]
					startPressure[i] = filteredData[i];
 8004d3c:	f828 6013 	strh.w	r6, [r8, r3, lsl #1]
					deltaPressure = nessPressure[i] - filteredData[i];
 8004d40:	ebac 0206 	sub.w	r2, ip, r6
					deltaPressure = abs(deltaPressure);
 8004d44:	b212      	sxth	r2, r2
 8004d46:	2a00      	cmp	r2, #0
 8004d48:	bfb8      	it	lt
 8004d4a:	4252      	neglt	r2, r2
					if (deltaPressure > pressureThreshold){
 8004d4c:	b212      	sxth	r2, r2
 8004d4e:	2a28      	cmp	r2, #40	; 0x28
 8004d50:	dd16      	ble.n	8004d80 <xAnalyzeTask+0xc8>
 8004d52:	2001      	movs	r0, #1
						workState = WORKING;
 8004d54:	4607      	mov	r7, r0
						if (nessPressure[i] > filteredData[i])
 8004d56:	4566      	cmp	r6, ip
							pressIsLower[i] = 1;
 8004d58:	bf34      	ite	cc
 8004d5a:	700d      	strbcc	r5, [r1, #0]
							pressIsLower[i] = 0;
 8004d5c:	f881 b000 	strbcs.w	fp, [r1]
 8004d60:	3301      	adds	r3, #1
				for (i = 0; i < 4; i++){
 8004d62:	2b04      	cmp	r3, #4
 8004d64:	f101 0101 	add.w	r1, r1, #1
 8004d68:	d1e4      	bne.n	8004d34 <xAnalyzeTask+0x7c>
 8004d6a:	b100      	cbz	r0, 8004d6e <xAnalyzeTask+0xb6>
 8004d6c:	7027      	strb	r7, [r4, #0]
					}
				}

				//finish compensation
				if (workState == FREE){
 8004d6e:	7823      	ldrb	r3, [r4, #0]
 8004d70:	b94b      	cbnz	r3, 8004d86 <xAnalyzeTask+0xce>
					pressureCompensation = OFF;
 8004d72:	4a59      	ldr	r2, [pc, #356]	; (8004ed8 <xAnalyzeTask+0x220>)
 8004d74:	7013      	strb	r3, [r2, #0]
				if (pressureCompensation == OFF){
					for (i = 0; i < 4; i++){
						HAL_GPIO_WritePin(DOWN_PORT[i], DOWN_PIN[i], GPIO_PIN_RESET);
						HAL_GPIO_WritePin(UP_PORT[i], UP_PIN[i], GPIO_PIN_RESET);
					}
					impTime[0] = 0;
 8004d76:	930a      	str	r3, [sp, #40]	; 0x28
					impTime[1] = 0;
 8004d78:	930b      	str	r3, [sp, #44]	; 0x2c
					impTime[2] = 0;
 8004d7a:	930c      	str	r3, [sp, #48]	; 0x30
					impTime[3] = 0;
 8004d7c:	930d      	str	r3, [sp, #52]	; 0x34
					continue;
 8004d7e:	e7ac      	b.n	8004cda <xAnalyzeTask+0x22>
						pressIsLower[i] = -1;
 8004d80:	f881 a000 	strb.w	sl, [r1]
 8004d84:	e7ec      	b.n	8004d60 <xAnalyzeTask+0xa8>
					messageLength = sprintf(message, "---IMP DATA---\n");
 8004d86:	495b      	ldr	r1, [pc, #364]	; (8004ef4 <xAnalyzeTask+0x23c>)
 8004d88:	4856      	ldr	r0, [pc, #344]	; (8004ee4 <xAnalyzeTask+0x22c>)
 8004d8a:	f001 fe03 	bl	8006994 <strcpy>
 8004d8e:	220f      	movs	r2, #15
 8004d90:	4b55      	ldr	r3, [pc, #340]	; (8004ee8 <xAnalyzeTask+0x230>)
 8004d92:	4f59      	ldr	r7, [pc, #356]	; (8004ef8 <xAnalyzeTask+0x240>)
 8004d94:	701a      	strb	r2, [r3, #0]
					HAL_UART_Transmit(&huart1, (uint8_t*)message, messageLength, 0xFFFF);
 8004d96:	4953      	ldr	r1, [pc, #332]	; (8004ee4 <xAnalyzeTask+0x22c>)
 8004d98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004d9c:	4853      	ldr	r0, [pc, #332]	; (8004eec <xAnalyzeTask+0x234>)
 8004d9e:	f7fe facd 	bl	800333c <HAL_UART_Transmit>
 8004da2:	46b8      	mov	r8, r7
 8004da4:	2500      	movs	r5, #0
	messageLength = sprintf(message, "%d: down %ld\n", i,  impTime[i]);
 8004da6:	4e4f      	ldr	r6, [pc, #316]	; (8004ee4 <xAnalyzeTask+0x22c>)
	HAL_UART_Transmit(&huart1, (uint8_t*)message, messageLength, 0xFFFF);
 8004da8:	f8df b140 	ldr.w	fp, [pc, #320]	; 8004eec <xAnalyzeTask+0x234>
 8004dac:	ac0a      	add	r4, sp, #40	; 0x28
					deltaPressure = nessPressure[i] - filteredData[i];
 8004dae:	4b53      	ldr	r3, [pc, #332]	; (8004efc <xAnalyzeTask+0x244>)
 8004db0:	f833 0015 	ldrh.w	r0, [r3, r5, lsl #1]
 8004db4:	4b52      	ldr	r3, [pc, #328]	; (8004f00 <xAnalyzeTask+0x248>)
 8004db6:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 8004dba:	1ac0      	subs	r0, r0, r3
					if (pressIsLower[i] == 1){
 8004dbc:	4b4c      	ldr	r3, [pc, #304]	; (8004ef0 <xAnalyzeTask+0x238>)
					deltaPressure = nessPressure[i] - filteredData[i];
 8004dbe:	b200      	sxth	r0, r0
					if (pressIsLower[i] == 1){
 8004dc0:	f915 a003 	ldrsb.w	sl, [r5, r3]
 8004dc4:	f1ba 0f01 	cmp.w	sl, #1
 8004dc8:	d122      	bne.n	8004e10 <xAnalyzeTask+0x158>
						impTime[i] = (int32_t)(controllerSettings.impUpCoeff[i] * (float)deltaPressure);
 8004dca:	f7fb ff8f 	bl	8000cec <__aeabi_i2f>
 8004dce:	f8d8 1000 	ldr.w	r1, [r8]
 8004dd2:	f7fb ffdf 	bl	8000d94 <__aeabi_fmul>
 8004dd6:	f7fc f92d 	bl	8001034 <__aeabi_f2iz>
	messageLength = sprintf(message, "%d: up %ld\n", i, impTime[i]);
 8004dda:	462a      	mov	r2, r5
 8004ddc:	4603      	mov	r3, r0
						impTime[i] = (int32_t)(controllerSettings.impUpCoeff[i] * (float)deltaPressure);
 8004dde:	4681      	mov	r9, r0
 8004de0:	6020      	str	r0, [r4, #0]
	messageLength = sprintf(message, "%d: up %ld\n", i, impTime[i]);
 8004de2:	4948      	ldr	r1, [pc, #288]	; (8004f04 <xAnalyzeTask+0x24c>)
 8004de4:	4630      	mov	r0, r6
 8004de6:	f001 fd85 	bl	80068f4 <siprintf>
 8004dea:	4b3f      	ldr	r3, [pc, #252]	; (8004ee8 <xAnalyzeTask+0x230>)
 8004dec:	b2c2      	uxtb	r2, r0
 8004dee:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*)message, messageLength, 0xFFFF);
 8004df0:	4631      	mov	r1, r6
 8004df2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004df6:	4658      	mov	r0, fp
 8004df8:	f7fe faa0 	bl	800333c <HAL_UART_Transmit>
						if (impTime[i] < 0) impTime[i] = 0;
 8004dfc:	f1b9 0f00 	cmp.w	r9, #0
 8004e00:	da01      	bge.n	8004e06 <xAnalyzeTask+0x14e>
						impTime[i] = 0;
 8004e02:	2300      	movs	r3, #0
 8004e04:	e002      	b.n	8004e0c <xAnalyzeTask+0x154>
						else if (impTime[i] == 0) impTime[i] = 1000;
 8004e06:	d15c      	bne.n	8004ec2 <xAnalyzeTask+0x20a>
 8004e08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
						impTime[i] = 0;
 8004e0c:	6023      	str	r3, [r4, #0]
 8004e0e:	e020      	b.n	8004e52 <xAnalyzeTask+0x19a>
					else if (pressIsLower[i] == 0){
 8004e10:	f1ba 0f00 	cmp.w	sl, #0
 8004e14:	d1f5      	bne.n	8004e02 <xAnalyzeTask+0x14a>
						impTime[i] = (int32_t)(controllerSettings.impDownCoeff[i] * (float)deltaPressure);
 8004e16:	f7fb ff69 	bl	8000cec <__aeabi_i2f>
 8004e1a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8004e1e:	f7fb ffb9 	bl	8000d94 <__aeabi_fmul>
 8004e22:	f7fc f907 	bl	8001034 <__aeabi_f2iz>
	messageLength = sprintf(message, "%d: down %ld\n", i,  impTime[i]);
 8004e26:	462a      	mov	r2, r5
 8004e28:	4603      	mov	r3, r0
						impTime[i] = (int32_t)(controllerSettings.impDownCoeff[i] * (float)deltaPressure);
 8004e2a:	4681      	mov	r9, r0
 8004e2c:	6020      	str	r0, [r4, #0]
	messageLength = sprintf(message, "%d: down %ld\n", i,  impTime[i]);
 8004e2e:	4936      	ldr	r1, [pc, #216]	; (8004f08 <xAnalyzeTask+0x250>)
 8004e30:	4630      	mov	r0, r6
 8004e32:	f001 fd5f 	bl	80068f4 <siprintf>
 8004e36:	4b2c      	ldr	r3, [pc, #176]	; (8004ee8 <xAnalyzeTask+0x230>)
 8004e38:	b2c2      	uxtb	r2, r0
 8004e3a:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*)message, messageLength, 0xFFFF);
 8004e3c:	4631      	mov	r1, r6
 8004e3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004e42:	4658      	mov	r0, fp
 8004e44:	f7fe fa7a 	bl	800333c <HAL_UART_Transmit>
						if (impTime[i] < 0) impTime[i] = 0;
 8004e48:	f1b9 0f00 	cmp.w	r9, #0
 8004e4c:	da35      	bge.n	8004eba <xAnalyzeTask+0x202>
 8004e4e:	f8c4 a000 	str.w	sl, [r4]
	messageLength = sprintf(message, "%d: %ld\n", i, impTime[i]);
 8004e52:	462a      	mov	r2, r5
 8004e54:	f854 3b04 	ldr.w	r3, [r4], #4
 8004e58:	492c      	ldr	r1, [pc, #176]	; (8004f0c <xAnalyzeTask+0x254>)
 8004e5a:	4630      	mov	r0, r6
 8004e5c:	f001 fd4a 	bl	80068f4 <siprintf>
 8004e60:	4b21      	ldr	r3, [pc, #132]	; (8004ee8 <xAnalyzeTask+0x230>)
 8004e62:	b2c2      	uxtb	r2, r0
 8004e64:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*)message, messageLength, 0xFFFF);
 8004e66:	4631      	mov	r1, r6
 8004e68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004e6c:	4658      	mov	r0, fp
 8004e6e:	3501      	adds	r5, #1
 8004e70:	f7fe fa64 	bl	800333c <HAL_UART_Transmit>
				for (i = 0; i < 4; i++){
 8004e74:	2d04      	cmp	r5, #4
 8004e76:	f108 0804 	add.w	r8, r8, #4
 8004e7a:	d198      	bne.n	8004dae <xAnalyzeTask+0xf6>
				vTaskDelay(500);
 8004e7c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004e80:	f7ff fc16 	bl	80046b0 <vTaskDelay>
				if (pressureCompensation == OFF){
 8004e84:	4b14      	ldr	r3, [pc, #80]	; (8004ed8 <xAnalyzeTask+0x220>)
 8004e86:	781c      	ldrb	r4, [r3, #0]
 8004e88:	2c00      	cmp	r4, #0
 8004e8a:	d149      	bne.n	8004f20 <xAnalyzeTask+0x268>
						HAL_GPIO_WritePin(DOWN_PORT[i], DOWN_PIN[i], GPIO_PIN_RESET);
 8004e8c:	4d20      	ldr	r5, [pc, #128]	; (8004f10 <xAnalyzeTask+0x258>)
 8004e8e:	4b21      	ldr	r3, [pc, #132]	; (8004f14 <xAnalyzeTask+0x25c>)
 8004e90:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8004e94:	f833 1024 	ldrh.w	r1, [r3, r4, lsl #2]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f7fd fa4b 	bl	8002334 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(UP_PORT[i], UP_PIN[i], GPIO_PIN_RESET);
 8004e9e:	4b1e      	ldr	r3, [pc, #120]	; (8004f18 <xAnalyzeTask+0x260>)
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f833 1024 	ldrh.w	r1, [r3, r4, lsl #2]
 8004ea6:	4b1d      	ldr	r3, [pc, #116]	; (8004f1c <xAnalyzeTask+0x264>)
 8004ea8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004eac:	3401      	adds	r4, #1
 8004eae:	f7fd fa41 	bl	8002334 <HAL_GPIO_WritePin>
					for (i = 0; i < 4; i++){
 8004eb2:	2c04      	cmp	r4, #4
 8004eb4:	d1eb      	bne.n	8004e8e <xAnalyzeTask+0x1d6>
					impTime[0] = 0;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	e75d      	b.n	8004d76 <xAnalyzeTask+0xbe>
						else if (impTime[i] == 0) impTime[i] = 500;
 8004eba:	d102      	bne.n	8004ec2 <xAnalyzeTask+0x20a>
 8004ebc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004ec0:	e7a4      	b.n	8004e0c <xAnalyzeTask+0x154>
						else if (impTime[i] > 10000) impTime[i] = 10000;
 8004ec2:	f242 7310 	movw	r3, #10000	; 0x2710
 8004ec6:	4599      	cmp	r9, r3
 8004ec8:	ddc3      	ble.n	8004e52 <xAnalyzeTask+0x19a>
 8004eca:	e79f      	b.n	8004e0c <xAnalyzeTask+0x154>
 8004ecc:	08008b00 	.word	0x08008b00
 8004ed0:	200053cc 	.word	0x200053cc
 8004ed4:	20005201 	.word	0x20005201
 8004ed8:	200052c2 	.word	0x200052c2
 8004edc:	200052c6 	.word	0x200052c6
 8004ee0:	08008b21 	.word	0x08008b21
 8004ee4:	20005238 	.word	0x20005238
 8004ee8:	200052b8 	.word	0x200052b8
 8004eec:	20005444 	.word	0x20005444
 8004ef0:	200052c7 	.word	0x200052c7
 8004ef4:	08008b37 	.word	0x08008b37
 8004ef8:	20005210 	.word	0x20005210
 8004efc:	200052ba 	.word	0x200052ba
 8004f00:	20005230 	.word	0x20005230
 8004f04:	08008b47 	.word	0x08008b47
 8004f08:	08008b53 	.word	0x08008b53
 8004f0c:	08008b61 	.word	0x08008b61
 8004f10:	20000020 	.word	0x20000020
 8004f14:	20000010 	.word	0x20000010
 8004f18:	20000030 	.word	0x20000030
 8004f1c:	20000040 	.word	0x20000040
 8004f20:	2600      	movs	r6, #0
				}

				for (i = 0 ; i < 4; i++){
					if (impTime[i] > 0){
						if (pressIsLower[i] == 1){
 8004f22:	4c74      	ldr	r4, [pc, #464]	; (80050f4 <xAnalyzeTask+0x43c>)
							HAL_GPIO_WritePin(UP_PORT[i], UP_PIN[i], GPIO_PIN_SET);
						}
						else if (pressIsLower[i] == 0){
							HAL_GPIO_WritePin(DOWN_PORT[i], DOWN_PIN[i], GPIO_PIN_SET);
 8004f24:	4d74      	ldr	r5, [pc, #464]	; (80050f8 <xAnalyzeTask+0x440>)
					if (impTime[i] > 0){
 8004f26:	ab0a      	add	r3, sp, #40	; 0x28
 8004f28:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	dd0b      	ble.n	8004f48 <xAnalyzeTask+0x290>
						if (pressIsLower[i] == 1){
 8004f30:	5732      	ldrsb	r2, [r6, r4]
 8004f32:	2a01      	cmp	r2, #1
 8004f34:	f040 80d0 	bne.w	80050d8 <xAnalyzeTask+0x420>
							HAL_GPIO_WritePin(UP_PORT[i], UP_PIN[i], GPIO_PIN_SET);
 8004f38:	4b70      	ldr	r3, [pc, #448]	; (80050fc <xAnalyzeTask+0x444>)
 8004f3a:	f833 1026 	ldrh.w	r1, [r3, r6, lsl #2]
 8004f3e:	4b70      	ldr	r3, [pc, #448]	; (8005100 <xAnalyzeTask+0x448>)
 8004f40:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
							HAL_GPIO_WritePin(DOWN_PORT[i], DOWN_PIN[i], GPIO_PIN_SET);
 8004f44:	f7fd f9f6 	bl	8002334 <HAL_GPIO_WritePin>
 8004f48:	3601      	adds	r6, #1
				for (i = 0 ; i < 4; i++){
 8004f4a:	2e04      	cmp	r6, #4
 8004f4c:	d1eb      	bne.n	8004f26 <xAnalyzeTask+0x26e>
						}
					}
				}

				impCounter = xTaskGetTickCount();
 8004f4e:	f7ff fa9f 	bl	8004490 <xTaskGetTickCount>
 8004f52:	4606      	mov	r6, r0
					dCounter = xTaskGetTickCount() - impCounter;

					stopImp = 0;
					for (i = 0 ; i < 4; i++){
						if(dCounter > impTime[i]){
							HAL_GPIO_WritePin(DOWN_PORT[i], DOWN_PIN[i], GPIO_PIN_RESET);
 8004f54:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80050f8 <xAnalyzeTask+0x440>
					dCounter = xTaskGetTickCount() - impCounter;
 8004f58:	2400      	movs	r4, #0
					vTaskDelay(100);
 8004f5a:	2064      	movs	r0, #100	; 0x64
 8004f5c:	f7ff fba8 	bl	80046b0 <vTaskDelay>
					dCounter = xTaskGetTickCount() - impCounter;
 8004f60:	f7ff fa96 	bl	8004490 <xTaskGetTickCount>
					stopImp = 0;
 8004f64:	4625      	mov	r5, r4
							HAL_GPIO_WritePin(UP_PORT[i], UP_PIN[i], GPIO_PIN_RESET);
 8004f66:	f8df 9194 	ldr.w	r9, [pc, #404]	; 80050fc <xAnalyzeTask+0x444>
					dCounter = xTaskGetTickCount() - impCounter;
 8004f6a:	eba0 0a06 	sub.w	sl, r0, r6
						if(dCounter > impTime[i]){
 8004f6e:	ab0a      	add	r3, sp, #40	; 0x28
 8004f70:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8004f74:	459a      	cmp	sl, r3
 8004f76:	d911      	bls.n	8004f9c <xAnalyzeTask+0x2e4>
							HAL_GPIO_WritePin(DOWN_PORT[i], DOWN_PIN[i], GPIO_PIN_RESET);
 8004f78:	4b62      	ldr	r3, [pc, #392]	; (8005104 <xAnalyzeTask+0x44c>)
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f833 1024 	ldrh.w	r1, [r3, r4, lsl #2]
 8004f80:	f858 0024 	ldr.w	r0, [r8, r4, lsl #2]
 8004f84:	f7fd f9d6 	bl	8002334 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(UP_PORT[i], UP_PIN[i], GPIO_PIN_RESET);
 8004f88:	4b5d      	ldr	r3, [pc, #372]	; (8005100 <xAnalyzeTask+0x448>)
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f839 1024 	ldrh.w	r1, [r9, r4, lsl #2]
 8004f90:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004f94:	f7fd f9ce 	bl	8002334 <HAL_GPIO_WritePin>
							stopImp++;
 8004f98:	3501      	adds	r5, #1
 8004f9a:	b2ed      	uxtb	r5, r5
 8004f9c:	3401      	adds	r4, #1
					for (i = 0 ; i < 4; i++){
 8004f9e:	2c04      	cmp	r4, #4
 8004fa0:	d1e5      	bne.n	8004f6e <xAnalyzeTask+0x2b6>
						}
					}
					if (stopImp >= 4){
 8004fa2:	2d03      	cmp	r5, #3
 8004fa4:	d9d8      	bls.n	8004f58 <xAnalyzeTask+0x2a0>
						break;
					}
				}
#if DEBUG_SERIAL
	messageLength = sprintf(message, "all imp off after %ld\n", xTaskGetTickCount() - impCounter);
 8004fa6:	f7ff fa73 	bl	8004490 <xTaskGetTickCount>
 8004faa:	4957      	ldr	r1, [pc, #348]	; (8005108 <xAnalyzeTask+0x450>)
 8004fac:	1b82      	subs	r2, r0, r6
 8004fae:	4857      	ldr	r0, [pc, #348]	; (800510c <xAnalyzeTask+0x454>)
 8004fb0:	f001 fca0 	bl	80068f4 <siprintf>
 8004fb4:	4b56      	ldr	r3, [pc, #344]	; (8005110 <xAnalyzeTask+0x458>)
 8004fb6:	b2c2      	uxtb	r2, r0
 8004fb8:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*)message, messageLength, 0xFFFF);
 8004fba:	4954      	ldr	r1, [pc, #336]	; (800510c <xAnalyzeTask+0x454>)
 8004fbc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004fc0:	4854      	ldr	r0, [pc, #336]	; (8005114 <xAnalyzeTask+0x45c>)
 8004fc2:	f7fe f9bb 	bl	800333c <HAL_UART_Transmit>
#endif
				vTaskDelay(1000);
 8004fc6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004fca:	f7ff fb71 	bl	80046b0 <vTaskDelay>
 8004fce:	2400      	movs	r4, #0

				for (i = 0 ; i < 4; i++){
					if (impTime[i] > 500){
						deltaPressure = filteredData[i] - startPressure[i];
 8004fd0:	4e51      	ldr	r6, [pc, #324]	; (8005118 <xAnalyzeTask+0x460>)
						deltaPressure = abs(deltaPressure);
						if (deltaPressure < 10){
							pressIsLower[i] = -1;
#if DEBUG_SERIAL
	messageLength = sprintf(message, "%d change is miserable %d\t%d\t%d\t%ld\t%d\t%d\n", i, nessPressure[i], startPressure[i], filteredData[i], impTime[i],(int)controllerSettings.impUpCoeff[i],(int)controllerSettings.impDownCoeff[i]);
 8004fd2:	f8df 814c 	ldr.w	r8, [pc, #332]	; 8005120 <xAnalyzeTask+0x468>
 8004fd6:	f8df 9150 	ldr.w	r9, [pc, #336]	; 8005128 <xAnalyzeTask+0x470>
					if (impTime[i] > 500){
 8004fda:	ab0a      	add	r3, sp, #40	; 0x28
 8004fdc:	f853 b024 	ldr.w	fp, [r3, r4, lsl #2]
 8004fe0:	f5bb 7ffa 	cmp.w	fp, #500	; 0x1f4
 8004fe4:	dd2c      	ble.n	8005040 <xAnalyzeTask+0x388>
						deltaPressure = filteredData[i] - startPressure[i];
 8004fe6:	ab08      	add	r3, sp, #32
 8004fe8:	f836 a014 	ldrh.w	sl, [r6, r4, lsl #1]
 8004fec:	f833 5014 	ldrh.w	r5, [r3, r4, lsl #1]
 8004ff0:	ebaa 0305 	sub.w	r3, sl, r5
						deltaPressure = abs(deltaPressure);
 8004ff4:	b21b      	sxth	r3, r3
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	bfb8      	it	lt
 8004ffa:	425b      	neglt	r3, r3
						if (deltaPressure < 10){
 8004ffc:	b21b      	sxth	r3, r3
 8004ffe:	2b09      	cmp	r3, #9
 8005000:	dc1e      	bgt.n	8005040 <xAnalyzeTask+0x388>
							pressIsLower[i] = -1;
 8005002:	23ff      	movs	r3, #255	; 0xff
 8005004:	4a3b      	ldr	r2, [pc, #236]	; (80050f4 <xAnalyzeTask+0x43c>)
	messageLength = sprintf(message, "%d change is miserable %d\t%d\t%d\t%ld\t%d\t%d\n", i, nessPressure[i], startPressure[i], filteredData[i], impTime[i],(int)controllerSettings.impUpCoeff[i],(int)controllerSettings.impDownCoeff[i]);
 8005006:	6938      	ldr	r0, [r7, #16]
							pressIsLower[i] = -1;
 8005008:	5513      	strb	r3, [r2, r4]
	messageLength = sprintf(message, "%d change is miserable %d\t%d\t%d\t%ld\t%d\t%d\n", i, nessPressure[i], startPressure[i], filteredData[i], impTime[i],(int)controllerSettings.impUpCoeff[i],(int)controllerSettings.impDownCoeff[i]);
 800500a:	f838 3014 	ldrh.w	r3, [r8, r4, lsl #1]
 800500e:	9307      	str	r3, [sp, #28]
 8005010:	f7fc f810 	bl	8001034 <__aeabi_f2iz>
 8005014:	9004      	str	r0, [sp, #16]
 8005016:	6838      	ldr	r0, [r7, #0]
 8005018:	f7fc f80c 	bl	8001034 <__aeabi_f2iz>
 800501c:	9b07      	ldr	r3, [sp, #28]
 800501e:	9003      	str	r0, [sp, #12]
 8005020:	4622      	mov	r2, r4
 8005022:	4649      	mov	r1, r9
 8005024:	e88d 0c20 	stmia.w	sp, {r5, sl, fp}
 8005028:	4838      	ldr	r0, [pc, #224]	; (800510c <xAnalyzeTask+0x454>)
 800502a:	f001 fc63 	bl	80068f4 <siprintf>
 800502e:	4b38      	ldr	r3, [pc, #224]	; (8005110 <xAnalyzeTask+0x458>)
 8005030:	b2c2      	uxtb	r2, r0
 8005032:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*)message, messageLength, 0xFFFF);
 8005034:	4935      	ldr	r1, [pc, #212]	; (800510c <xAnalyzeTask+0x454>)
 8005036:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800503a:	4836      	ldr	r0, [pc, #216]	; (8005114 <xAnalyzeTask+0x45c>)
 800503c:	f7fe f97e 	bl	800333c <HAL_UART_Transmit>
 8005040:	3401      	adds	r4, #1
				for (i = 0 ; i < 4; i++){
 8005042:	2c04      	cmp	r4, #4
 8005044:	f107 0704 	add.w	r7, r7, #4
 8005048:	d1c7      	bne.n	8004fda <xAnalyzeTask+0x322>
 800504a:	2400      	movs	r4, #0
 800504c:	4d33      	ldr	r5, [pc, #204]	; (800511c <xAnalyzeTask+0x464>)
						}
					}
				}

				for (i = 0 ; i < 4; i++){
					if (pressIsLower[i] >=0){
 800504e:	4b29      	ldr	r3, [pc, #164]	; (80050f4 <xAnalyzeTask+0x43c>)
 8005050:	56e6      	ldrsb	r6, [r4, r3]
 8005052:	2e00      	cmp	r6, #0
 8005054:	db38      	blt.n	80050c8 <xAnalyzeTask+0x410>
						deltaPressure = filteredData[i] - startPressure[i];
 8005056:	4b30      	ldr	r3, [pc, #192]	; (8005118 <xAnalyzeTask+0x460>)
 8005058:	aa08      	add	r2, sp, #32
 800505a:	f833 8014 	ldrh.w	r8, [r3, r4, lsl #1]
						impCoeff[i] = (float)impTime[i] / (float) deltaPressure;
 800505e:	ab0a      	add	r3, sp, #40	; 0x28
 8005060:	f853 9024 	ldr.w	r9, [r3, r4, lsl #2]
						deltaPressure = filteredData[i] - startPressure[i];
 8005064:	f832 7014 	ldrh.w	r7, [r2, r4, lsl #1]
						impCoeff[i] = (float)impTime[i] / (float) deltaPressure;
 8005068:	4648      	mov	r0, r9
 800506a:	f7fb fe3f 	bl	8000cec <__aeabi_i2f>
 800506e:	4683      	mov	fp, r0
						deltaPressure = filteredData[i] - startPressure[i];
 8005070:	eba8 0007 	sub.w	r0, r8, r7
						impCoeff[i] = (float)impTime[i] / (float) deltaPressure;
 8005074:	b200      	sxth	r0, r0
 8005076:	f7fb fe39 	bl	8000cec <__aeabi_i2f>
 800507a:	4601      	mov	r1, r0
 800507c:	4658      	mov	r0, fp
 800507e:	f7fb ff3d 	bl	8000efc <__aeabi_fdiv>
						if (pressIsLower[i] == 1){
 8005082:	2e01      	cmp	r6, #1
 8005084:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 8005088:	d130      	bne.n	80050ec <xAnalyzeTask+0x434>
							controllerSettings.impUpCoeff[i] = impCoeff[i];
 800508a:	f845 0c10 	str.w	r0, [r5, #-16]
						}
						else if (pressIsLower[i] == 0){
							controllerSettings.impDownCoeff[i] = impCoeff[i];
						}
#if DEBUG_SERIAL
	messageLength = sprintf(message, "%d: %d\t%d\t%d\t%ld\t%d\t%d\n", i, nessPressure[i], startPressure[i], filteredData[i], impTime[i],(int)controllerSettings.impUpCoeff[i],(int)controllerSettings.impDownCoeff[i]);
 800508e:	4b24      	ldr	r3, [pc, #144]	; (8005120 <xAnalyzeTask+0x468>)
 8005090:	6828      	ldr	r0, [r5, #0]
 8005092:	f83a 6003 	ldrh.w	r6, [sl, r3]
 8005096:	f7fb ffcd 	bl	8001034 <__aeabi_f2iz>
 800509a:	9004      	str	r0, [sp, #16]
 800509c:	f855 0c10 	ldr.w	r0, [r5, #-16]
 80050a0:	f7fb ffc8 	bl	8001034 <__aeabi_f2iz>
 80050a4:	4633      	mov	r3, r6
 80050a6:	9003      	str	r0, [sp, #12]
 80050a8:	4622      	mov	r2, r4
 80050aa:	491e      	ldr	r1, [pc, #120]	; (8005124 <xAnalyzeTask+0x46c>)
 80050ac:	e88d 0380 	stmia.w	sp, {r7, r8, r9}
 80050b0:	4816      	ldr	r0, [pc, #88]	; (800510c <xAnalyzeTask+0x454>)
 80050b2:	f001 fc1f 	bl	80068f4 <siprintf>
 80050b6:	4b16      	ldr	r3, [pc, #88]	; (8005110 <xAnalyzeTask+0x458>)
 80050b8:	b2c2      	uxtb	r2, r0
 80050ba:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*)message, messageLength, 0xFFFF);
 80050bc:	4913      	ldr	r1, [pc, #76]	; (800510c <xAnalyzeTask+0x454>)
 80050be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80050c2:	4814      	ldr	r0, [pc, #80]	; (8005114 <xAnalyzeTask+0x45c>)
 80050c4:	f7fe f93a 	bl	800333c <HAL_UART_Transmit>
 80050c8:	3401      	adds	r4, #1
				for (i = 0 ; i < 4; i++){
 80050ca:	2c04      	cmp	r4, #4
 80050cc:	f105 0504 	add.w	r5, r5, #4
 80050d0:	d1bd      	bne.n	800504e <xAnalyzeTask+0x396>
#endif
					}
				}
				mWrite_flash();
 80050d2:	f000 f9e5 	bl	80054a0 <mWrite_flash>
 80050d6:	e600      	b.n	8004cda <xAnalyzeTask+0x22>
						else if (pressIsLower[i] == 0){
 80050d8:	2a00      	cmp	r2, #0
 80050da:	f47f af35 	bne.w	8004f48 <xAnalyzeTask+0x290>
							HAL_GPIO_WritePin(DOWN_PORT[i], DOWN_PIN[i], GPIO_PIN_SET);
 80050de:	4b09      	ldr	r3, [pc, #36]	; (8005104 <xAnalyzeTask+0x44c>)
 80050e0:	2201      	movs	r2, #1
 80050e2:	f833 1026 	ldrh.w	r1, [r3, r6, lsl #2]
 80050e6:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
 80050ea:	e72b      	b.n	8004f44 <xAnalyzeTask+0x28c>
						else if (pressIsLower[i] == 0){
 80050ec:	2e00      	cmp	r6, #0
 80050ee:	d1ce      	bne.n	800508e <xAnalyzeTask+0x3d6>
							controllerSettings.impDownCoeff[i] = impCoeff[i];
 80050f0:	6028      	str	r0, [r5, #0]
 80050f2:	e7cc      	b.n	800508e <xAnalyzeTask+0x3d6>
 80050f4:	200052c7 	.word	0x200052c7
 80050f8:	20000020 	.word	0x20000020
 80050fc:	20000030 	.word	0x20000030
 8005100:	20000040 	.word	0x20000040
 8005104:	20000010 	.word	0x20000010
 8005108:	08008b6a 	.word	0x08008b6a
 800510c:	20005238 	.word	0x20005238
 8005110:	200052b8 	.word	0x200052b8
 8005114:	20005444 	.word	0x20005444
 8005118:	20005230 	.word	0x20005230
 800511c:	20005220 	.word	0x20005220
 8005120:	200052ba 	.word	0x200052ba
 8005124:	08008bac 	.word	0x08008bac
 8005128:	08008b81 	.word	0x08008b81

0800512c <xBlynkTask>:
extern uint16_t server_UID;
uint32_t unique_ID[3] = {0};

enum IndicationState indicationState = NORMAL_NC;

void xBlynkTask(void* arguments){
 800512c:	b508      	push	{r3, lr}
	for(;;){
		if (indicationState == NORMAL_C){
 800512e:	4d13      	ldr	r5, [pc, #76]	; (800517c <xBlynkTask+0x50>)
 8005130:	4c13      	ldr	r4, [pc, #76]	; (8005180 <xBlynkTask+0x54>)
 8005132:	782b      	ldrb	r3, [r5, #0]
 8005134:	b97b      	cbnz	r3, 8005156 <xBlynkTask+0x2a>
			TIM3->CCR2 = 10000;
 8005136:	f242 7310 	movw	r3, #10000	; 0x2710
 800513a:	63a3      	str	r3, [r4, #56]	; 0x38
		else if (indicationState == COMPENSATION){
			TIM3->CCR2 = 10000;
			TIM3->CCR3 = 10000;
		}

		vTaskDelay(500 / portTICK_RATE_MS);
 800513c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005140:	f7ff fab6 	bl	80046b0 <vTaskDelay>
		TIM3->CCR1 = 0;
 8005144:	2300      	movs	r3, #0
		TIM3->CCR2 = 0;
		TIM3->CCR3 = 0;
		vTaskDelay(500 / portTICK_RATE_MS);
 8005146:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
		TIM3->CCR1 = 0;
 800514a:	6363      	str	r3, [r4, #52]	; 0x34
		TIM3->CCR2 = 0;
 800514c:	63a3      	str	r3, [r4, #56]	; 0x38
		TIM3->CCR3 = 0;
 800514e:	63e3      	str	r3, [r4, #60]	; 0x3c
		vTaskDelay(500 / portTICK_RATE_MS);
 8005150:	f7ff faae 	bl	80046b0 <vTaskDelay>
		if (indicationState == NORMAL_C){
 8005154:	e7ed      	b.n	8005132 <xBlynkTask+0x6>
		else if (indicationState == NORMAL_NC){
 8005156:	2b01      	cmp	r3, #1
 8005158:	d103      	bne.n	8005162 <xBlynkTask+0x36>
			TIM3->CCR1 = 10000;
 800515a:	f242 7310 	movw	r3, #10000	; 0x2710
 800515e:	6363      	str	r3, [r4, #52]	; 0x34
 8005160:	e7ec      	b.n	800513c <xBlynkTask+0x10>
		else if (indicationState == SEARCH){
 8005162:	2b02      	cmp	r3, #2
 8005164:	d103      	bne.n	800516e <xBlynkTask+0x42>
			TIM3->CCR3 = 10000;
 8005166:	f242 7310 	movw	r3, #10000	; 0x2710
			TIM3->CCR3 = 10000;
 800516a:	63e3      	str	r3, [r4, #60]	; 0x3c
 800516c:	e7e6      	b.n	800513c <xBlynkTask+0x10>
		else if (indicationState == COMPENSATION){
 800516e:	2b03      	cmp	r3, #3
 8005170:	d1e4      	bne.n	800513c <xBlynkTask+0x10>
			TIM3->CCR2 = 10000;
 8005172:	f242 7310 	movw	r3, #10000	; 0x2710
 8005176:	63a3      	str	r3, [r4, #56]	; 0x38
 8005178:	e7f7      	b.n	800516a <xBlynkTask+0x3e>
 800517a:	bf00      	nop
 800517c:	2000000c 	.word	0x2000000c
 8005180:	40000400 	.word	0x40000400

08005184 <controller_init>:
	}
	vTaskDelete(NULL);
}

void controller_init(){
 8005184:	b537      	push	{r0, r1, r2, r4, r5, lr}
	mRead_flash();
	if(controllerSettings.rfChannel > 120){
 8005186:	4c74      	ldr	r4, [pc, #464]	; (8005358 <controller_init+0x1d4>)
	mRead_flash();
 8005188:	f000 f9c4 	bl	8005514 <mRead_flash>
	if(controllerSettings.rfChannel > 120){
 800518c:	7823      	ldrb	r3, [r4, #0]
		controllerSettings.rfChannel = 1;
	}

	HAL_GetUID(unique_ID);
 800518e:	4d73      	ldr	r5, [pc, #460]	; (800535c <controller_init+0x1d8>)
	if(controllerSettings.rfChannel > 120){
 8005190:	2b78      	cmp	r3, #120	; 0x78
		controllerSettings.rfChannel = 1;
 8005192:	bf88      	it	hi
 8005194:	2301      	movhi	r3, #1
	HAL_GetUID(unique_ID);
 8005196:	4628      	mov	r0, r5
		controllerSettings.rfChannel = 1;
 8005198:	bf88      	it	hi
 800519a:	7023      	strbhi	r3, [r4, #0]
	HAL_GetUID(unique_ID);
 800519c:	f7fc f952 	bl	8001444 <HAL_GetUID>

	server_UID = (unique_ID[0] + unique_ID[1] + unique_ID[2]) / 65536;
 80051a0:	e895 000c 	ldmia.w	r5, {r2, r3}
 80051a4:	4413      	add	r3, r2
 80051a6:	68aa      	ldr	r2, [r5, #8]

	init_rf433(controllerSettings.rfChannel); //TODO: change to more common
 80051a8:	7820      	ldrb	r0, [r4, #0]
	server_UID = (unique_ID[0] + unique_ID[1] + unique_ID[2]) / 65536;
 80051aa:	4413      	add	r3, r2
 80051ac:	4a6c      	ldr	r2, [pc, #432]	; (8005360 <controller_init+0x1dc>)
 80051ae:	0c1b      	lsrs	r3, r3, #16
 80051b0:	8013      	strh	r3, [r2, #0]
	init_rf433(controllerSettings.rfChannel); //TODO: change to more common
 80051b2:	f000 f921 	bl	80053f8 <init_rf433>
//	sprintf(message, "ID: %ld\r\n", server_UID);
//				HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), 0xFFFF);
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80051b6:	2100      	movs	r1, #0
 80051b8:	486a      	ldr	r0, [pc, #424]	; (8005364 <controller_init+0x1e0>)
 80051ba:	f7fd ff83 	bl	80030c4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80051be:	2104      	movs	r1, #4
 80051c0:	4868      	ldr	r0, [pc, #416]	; (8005364 <controller_init+0x1e0>)
 80051c2:	f7fd ff7f 	bl	80030c4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80051c6:	2108      	movs	r1, #8
 80051c8:	4866      	ldr	r0, [pc, #408]	; (8005364 <controller_init+0x1e0>)
 80051ca:	f7fd ff7b 	bl	80030c4 <HAL_TIM_PWM_Start>
	HAL_UART_Receive_IT(&huart1, &recCommandByte, 1);
 80051ce:	2201      	movs	r2, #1
 80051d0:	4965      	ldr	r1, [pc, #404]	; (8005368 <controller_init+0x1e4>)
 80051d2:	4866      	ldr	r0, [pc, #408]	; (800536c <controller_init+0x1e8>)
 80051d4:	f7fe f90e 	bl	80033f4 <HAL_UART_Receive_IT>
	HAL_ADCEx_InjectedStart_IT(&hadc1);
 80051d8:	4865      	ldr	r0, [pc, #404]	; (8005370 <controller_init+0x1ec>)
 80051da:	f7fc fb19 	bl	8001810 <HAL_ADCEx_InjectedStart_IT>

	vSemaphoreCreateBinary(xPressureCompensationSemaphore);
 80051de:	2203      	movs	r2, #3
 80051e0:	2100      	movs	r1, #0
 80051e2:	2001      	movs	r0, #1
 80051e4:	f7fe fde0 	bl	8003da8 <xQueueGenericCreate>
 80051e8:	4a62      	ldr	r2, [pc, #392]	; (8005374 <controller_init+0x1f0>)
 80051ea:	6010      	str	r0, [r2, #0]
 80051ec:	b120      	cbz	r0, 80051f8 <controller_init+0x74>
 80051ee:	2300      	movs	r3, #0
 80051f0:	461a      	mov	r2, r3
 80051f2:	4619      	mov	r1, r3
 80051f4:	f7fe fdfa 	bl	8003dec <xQueueGenericSend>


	#if DEBUG_SERIAL
		uint32_t fre=xPortGetFreeHeapSize();
 80051f8:	f7fe fd10 	bl	8003c1c <xPortGetFreeHeapSize>
		sprintf(message, "Free heap: %ld\r\n", fre);
 80051fc:	495e      	ldr	r1, [pc, #376]	; (8005378 <controller_init+0x1f4>)
 80051fe:	4602      	mov	r2, r0
 8005200:	485e      	ldr	r0, [pc, #376]	; (800537c <controller_init+0x1f8>)
 8005202:	f001 fb77 	bl	80068f4 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), 0xFFFF);
 8005206:	485d      	ldr	r0, [pc, #372]	; (800537c <controller_init+0x1f8>)
 8005208:	f7fb f812 	bl	8000230 <strlen>
	#endif

	xTaskCreate(xBlynkTask,
 800520c:	2400      	movs	r4, #0
 800520e:	2501      	movs	r5, #1
		HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), 0xFFFF);
 8005210:	b282      	uxth	r2, r0
 8005212:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005216:	4959      	ldr	r1, [pc, #356]	; (800537c <controller_init+0x1f8>)
 8005218:	4854      	ldr	r0, [pc, #336]	; (800536c <controller_init+0x1e8>)
 800521a:	f7fe f88f 	bl	800333c <HAL_UART_Transmit>
	xTaskCreate(xBlynkTask,
 800521e:	4623      	mov	r3, r4
 8005220:	22c8      	movs	r2, #200	; 0xc8
 8005222:	4957      	ldr	r1, [pc, #348]	; (8005380 <controller_init+0x1fc>)
 8005224:	9401      	str	r4, [sp, #4]
 8005226:	9500      	str	r5, [sp, #0]
 8005228:	4856      	ldr	r0, [pc, #344]	; (8005384 <controller_init+0x200>)
 800522a:	f7ff f81d 	bl	8004268 <xTaskCreate>
				NULL,
				1,
				NULL);

	#if DEBUG_SERIAL
		fre=xPortGetFreeHeapSize();
 800522e:	f7fe fcf5 	bl	8003c1c <xPortGetFreeHeapSize>
		sprintf(message, "heap after Blynk: %ld\r\n", fre);
 8005232:	4955      	ldr	r1, [pc, #340]	; (8005388 <controller_init+0x204>)
 8005234:	4602      	mov	r2, r0
 8005236:	4851      	ldr	r0, [pc, #324]	; (800537c <controller_init+0x1f8>)
 8005238:	f001 fb5c 	bl	80068f4 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), 0xFFFF);
 800523c:	484f      	ldr	r0, [pc, #316]	; (800537c <controller_init+0x1f8>)
 800523e:	f7fa fff7 	bl	8000230 <strlen>
 8005242:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005246:	b282      	uxth	r2, r0
 8005248:	494c      	ldr	r1, [pc, #304]	; (800537c <controller_init+0x1f8>)
 800524a:	4848      	ldr	r0, [pc, #288]	; (800536c <controller_init+0x1e8>)
 800524c:	f7fe f876 	bl	800333c <HAL_UART_Transmit>
	#endif

	xTaskCreate(xScanInputTask,
 8005250:	4623      	mov	r3, r4
 8005252:	22c8      	movs	r2, #200	; 0xc8
 8005254:	494d      	ldr	r1, [pc, #308]	; (800538c <controller_init+0x208>)
 8005256:	9401      	str	r4, [sp, #4]
 8005258:	9500      	str	r5, [sp, #0]
 800525a:	484d      	ldr	r0, [pc, #308]	; (8005390 <controller_init+0x20c>)
 800525c:	f7ff f804 	bl	8004268 <xTaskCreate>
				NULL,
				1,
				NULL);

	#if DEBUG_SERIAL
		fre=xPortGetFreeHeapSize();
 8005260:	f7fe fcdc 	bl	8003c1c <xPortGetFreeHeapSize>
		sprintf(message, "heap after Scan: %ld\r\n", fre);
 8005264:	494b      	ldr	r1, [pc, #300]	; (8005394 <controller_init+0x210>)
 8005266:	4602      	mov	r2, r0
 8005268:	4844      	ldr	r0, [pc, #272]	; (800537c <controller_init+0x1f8>)
 800526a:	f001 fb43 	bl	80068f4 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), 0xFFFF);
 800526e:	4843      	ldr	r0, [pc, #268]	; (800537c <controller_init+0x1f8>)
 8005270:	f7fa ffde 	bl	8000230 <strlen>
 8005274:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005278:	b282      	uxth	r2, r0
 800527a:	4940      	ldr	r1, [pc, #256]	; (800537c <controller_init+0x1f8>)
 800527c:	483b      	ldr	r0, [pc, #236]	; (800536c <controller_init+0x1e8>)
 800527e:	f7fe f85d 	bl	800333c <HAL_UART_Transmit>
	#endif

	xTaskCreate(xStoreADCDataTask,
 8005282:	4623      	mov	r3, r4
 8005284:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005288:	4943      	ldr	r1, [pc, #268]	; (8005398 <controller_init+0x214>)
 800528a:	9401      	str	r4, [sp, #4]
 800528c:	9500      	str	r5, [sp, #0]
 800528e:	4843      	ldr	r0, [pc, #268]	; (800539c <controller_init+0x218>)
 8005290:	f7fe ffea 	bl	8004268 <xTaskCreate>
				NULL,
				1,
				NULL);

	#if DEBUG_SERIAL
		fre=xPortGetFreeHeapSize();
 8005294:	f7fe fcc2 	bl	8003c1c <xPortGetFreeHeapSize>
		sprintf(message, "heap after SADCData: %ld\r\n", fre);
 8005298:	4941      	ldr	r1, [pc, #260]	; (80053a0 <controller_init+0x21c>)
 800529a:	4602      	mov	r2, r0
 800529c:	4837      	ldr	r0, [pc, #220]	; (800537c <controller_init+0x1f8>)
 800529e:	f001 fb29 	bl	80068f4 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), 0xFFFF);
 80052a2:	4836      	ldr	r0, [pc, #216]	; (800537c <controller_init+0x1f8>)
 80052a4:	f7fa ffc4 	bl	8000230 <strlen>
 80052a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80052ac:	b282      	uxth	r2, r0
 80052ae:	4933      	ldr	r1, [pc, #204]	; (800537c <controller_init+0x1f8>)
 80052b0:	482e      	ldr	r0, [pc, #184]	; (800536c <controller_init+0x1e8>)
 80052b2:	f7fe f843 	bl	800333c <HAL_UART_Transmit>
	#endif

	xTaskCreate(xProcessCommandTask,
 80052b6:	2303      	movs	r3, #3
 80052b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052bc:	9300      	str	r3, [sp, #0]
 80052be:	4939      	ldr	r1, [pc, #228]	; (80053a4 <controller_init+0x220>)
 80052c0:	4623      	mov	r3, r4
 80052c2:	9401      	str	r4, [sp, #4]
 80052c4:	4838      	ldr	r0, [pc, #224]	; (80053a8 <controller_init+0x224>)
 80052c6:	f7fe ffcf 	bl	8004268 <xTaskCreate>
				NULL,
				3,
				NULL);

	#if DEBUG_SERIAL
		fre=xPortGetFreeHeapSize();
 80052ca:	f7fe fca7 	bl	8003c1c <xPortGetFreeHeapSize>
		sprintf(message, "heap after ProcCmd: %ld\r\n", fre);
 80052ce:	4937      	ldr	r1, [pc, #220]	; (80053ac <controller_init+0x228>)
 80052d0:	4602      	mov	r2, r0
 80052d2:	482a      	ldr	r0, [pc, #168]	; (800537c <controller_init+0x1f8>)
 80052d4:	f001 fb0e 	bl	80068f4 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), 0xFFFF);
 80052d8:	4828      	ldr	r0, [pc, #160]	; (800537c <controller_init+0x1f8>)
 80052da:	f7fa ffa9 	bl	8000230 <strlen>
 80052de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80052e2:	b282      	uxth	r2, r0
 80052e4:	4925      	ldr	r1, [pc, #148]	; (800537c <controller_init+0x1f8>)
 80052e6:	4821      	ldr	r0, [pc, #132]	; (800536c <controller_init+0x1e8>)
 80052e8:	f7fe f828 	bl	800333c <HAL_UART_Transmit>
	#endif

	xTaskCreate(xAnalyzeTask,
 80052ec:	4623      	mov	r3, r4
 80052ee:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80052f2:	492f      	ldr	r1, [pc, #188]	; (80053b0 <controller_init+0x22c>)
 80052f4:	9401      	str	r4, [sp, #4]
 80052f6:	9500      	str	r5, [sp, #0]
 80052f8:	482e      	ldr	r0, [pc, #184]	; (80053b4 <controller_init+0x230>)
 80052fa:	f7fe ffb5 	bl	8004268 <xTaskCreate>
				400,
				NULL,
				1,
				NULL);
	#if DEBUG_SERIAL
		fre=xPortGetFreeHeapSize();
 80052fe:	f7fe fc8d 	bl	8003c1c <xPortGetFreeHeapSize>
		sprintf(message, "heap after AnTask: %ld\r\n", fre);
 8005302:	492d      	ldr	r1, [pc, #180]	; (80053b8 <controller_init+0x234>)
 8005304:	4602      	mov	r2, r0
 8005306:	481d      	ldr	r0, [pc, #116]	; (800537c <controller_init+0x1f8>)
 8005308:	f001 faf4 	bl	80068f4 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) message, strlen(message), 0xFFFF);
 800530c:	481b      	ldr	r0, [pc, #108]	; (800537c <controller_init+0x1f8>)
 800530e:	f7fa ff8f 	bl	8000230 <strlen>
 8005312:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005316:	b282      	uxth	r2, r0
 8005318:	4918      	ldr	r1, [pc, #96]	; (800537c <controller_init+0x1f8>)
 800531a:	4814      	ldr	r0, [pc, #80]	; (800536c <controller_init+0x1e8>)
 800531c:	f7fe f80e 	bl	800333c <HAL_UART_Transmit>
	#endif

	xRecCommandQueue = xQueueCreate(COMMAND_QUEUE_SIZE, MAX_COMMAND_LENGTH);
 8005320:	4622      	mov	r2, r4
 8005322:	2140      	movs	r1, #64	; 0x40
 8005324:	2002      	movs	r0, #2
 8005326:	f7fe fd3f 	bl	8003da8 <xQueueGenericCreate>
 800532a:	4b24      	ldr	r3, [pc, #144]	; (80053bc <controller_init+0x238>)
 800532c:	6018      	str	r0, [r3, #0]
	//xRecCommandQueue = xQueueCreate(1, 1);

	#if DEBUG_SERIAL
		fre=xPortGetFreeHeapSize();
 800532e:	f7fe fc75 	bl	8003c1c <xPortGetFreeHeapSize>
		sprintf(message, "heap after queue: %ld\r\n", fre);
 8005332:	4923      	ldr	r1, [pc, #140]	; (80053c0 <controller_init+0x23c>)
 8005334:	4602      	mov	r2, r0
 8005336:	4811      	ldr	r0, [pc, #68]	; (800537c <controller_init+0x1f8>)
 8005338:	f001 fadc 	bl	80068f4 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), 0xFFFF);
 800533c:	480f      	ldr	r0, [pc, #60]	; (800537c <controller_init+0x1f8>)
 800533e:	f7fa ff77 	bl	8000230 <strlen>
 8005342:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005346:	b282      	uxth	r2, r0
 8005348:	490c      	ldr	r1, [pc, #48]	; (800537c <controller_init+0x1f8>)
 800534a:	4808      	ldr	r0, [pc, #32]	; (800536c <controller_init+0x1e8>)
	#endif
}
 800534c:	b003      	add	sp, #12
 800534e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), 0xFFFF);
 8005352:	f7fd bff3 	b.w	800333c <HAL_UART_Transmit>
 8005356:	bf00      	nop
 8005358:	20005204 	.word	0x20005204
 800535c:	200051b4 	.word	0x200051b4
 8005360:	200052c4 	.word	0x200052c4
 8005364:	2000538c 	.word	0x2000538c
 8005368:	20005494 	.word	0x20005494
 800536c:	20005444 	.word	0x20005444
 8005370:	20005414 	.word	0x20005414
 8005374:	200053cc 	.word	0x200053cc
 8005378:	08008bc4 	.word	0x08008bc4
 800537c:	20005238 	.word	0x20005238
 8005380:	08008bd5 	.word	0x08008bd5
 8005384:	0800512d 	.word	0x0800512d
 8005388:	08008bdb 	.word	0x08008bdb
 800538c:	08008bf3 	.word	0x08008bf3
 8005390:	08005c35 	.word	0x08005c35
 8005394:	08008bf8 	.word	0x08008bf8
 8005398:	08008c0f 	.word	0x08008c0f
 800539c:	08004aed 	.word	0x08004aed
 80053a0:	08008c18 	.word	0x08008c18
 80053a4:	08008c33 	.word	0x08008c33
 80053a8:	080058b1 	.word	0x080058b1
 80053ac:	08008c3b 	.word	0x08008c3b
 80053b0:	08008c55 	.word	0x08008c55
 80053b4:	08004cb9 	.word	0x08004cb9
 80053b8:	08008c5b 	.word	0x08008c5b
 80053bc:	20005490 	.word	0x20005490
 80053c0:	08008c74 	.word	0x08008c74

080053c4 <print_debug>:
extern UART_HandleTypeDef huart1;

char debugMessage[64] = {};
uint8_t debugMessageLength = 0;

void print_debug(char* msg){
 80053c4:	b510      	push	{r4, lr}
	#if DEBUG_SERIAL
		debugMessageLength = sprintf(debugMessage, "%s", msg);
 80053c6:	4c08      	ldr	r4, [pc, #32]	; (80053e8 <print_debug+0x24>)
 80053c8:	4602      	mov	r2, r0
 80053ca:	4908      	ldr	r1, [pc, #32]	; (80053ec <print_debug+0x28>)
 80053cc:	4620      	mov	r0, r4
 80053ce:	f001 fa91 	bl	80068f4 <siprintf>
 80053d2:	4b07      	ldr	r3, [pc, #28]	; (80053f0 <print_debug+0x2c>)
 80053d4:	b2c2      	uxtb	r2, r0
 80053d6:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, (uint8_t*) debugMessage, debugMessageLength, 0x2000);
 80053d8:	4621      	mov	r1, r4
	#endif
}
 80053da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_UART_Transmit(&huart1, (uint8_t*) debugMessage, debugMessageLength, 0x2000);
 80053de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80053e2:	4804      	ldr	r0, [pc, #16]	; (80053f4 <print_debug+0x30>)
 80053e4:	f7fd bfaa 	b.w	800333c <HAL_UART_Transmit>
 80053e8:	200051c0 	.word	0x200051c0
 80053ec:	08008ca9 	.word	0x08008ca9
 80053f0:	20005200 	.word	0x20005200
 80053f4:	20005444 	.word	0x20005444

080053f8 <init_rf433>:

void init_rf433(uint8_t channel){
 80053f8:	b538      	push	{r3, r4, r5, lr}
 80053fa:	4605      	mov	r5, r0
	CMD_RF_ON;
	HAL_Delay(50);

	HAL_UART_Transmit(&huart1, (uint8_t*) "AT+FU1\r", 7, 0x2000);
 80053fc:	4c21      	ldr	r4, [pc, #132]	; (8005484 <init_rf433+0x8c>)
	CMD_RF_ON;
 80053fe:	2200      	movs	r2, #0
 8005400:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005404:	4820      	ldr	r0, [pc, #128]	; (8005488 <init_rf433+0x90>)
 8005406:	f7fc ff95 	bl	8002334 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800540a:	2032      	movs	r0, #50	; 0x32
 800540c:	f7fc f808 	bl	8001420 <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*) "AT+FU1\r", 7, 0x2000);
 8005410:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005414:	2207      	movs	r2, #7
 8005416:	491d      	ldr	r1, [pc, #116]	; (800548c <init_rf433+0x94>)
 8005418:	4620      	mov	r0, r4
 800541a:	f7fd ff8f 	bl	800333c <HAL_UART_Transmit>
	HAL_Delay(200);
 800541e:	20c8      	movs	r0, #200	; 0xc8
 8005420:	f7fb fffe 	bl	8001420 <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*) "AT+B19200\r", 7, 0x2000);
 8005424:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005428:	2207      	movs	r2, #7
 800542a:	4919      	ldr	r1, [pc, #100]	; (8005490 <init_rf433+0x98>)
 800542c:	4620      	mov	r0, r4
 800542e:	f7fd ff85 	bl	800333c <HAL_UART_Transmit>
	HAL_Delay(200);
 8005432:	20c8      	movs	r0, #200	; 0xc8
 8005434:	f7fb fff4 	bl	8001420 <HAL_Delay>
	debugMessageLength = sprintf(debugMessage, "AT+C%03d\r", channel);
 8005438:	462a      	mov	r2, r5
 800543a:	4916      	ldr	r1, [pc, #88]	; (8005494 <init_rf433+0x9c>)
 800543c:	4816      	ldr	r0, [pc, #88]	; (8005498 <init_rf433+0xa0>)
 800543e:	f001 fa59 	bl	80068f4 <siprintf>
 8005442:	4b16      	ldr	r3, [pc, #88]	; (800549c <init_rf433+0xa4>)
 8005444:	b2c2      	uxtb	r2, r0
 8005446:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*) debugMessage, debugMessageLength, 0x2000);
 8005448:	4913      	ldr	r1, [pc, #76]	; (8005498 <init_rf433+0xa0>)
 800544a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800544e:	4620      	mov	r0, r4
 8005450:	f7fd ff74 	bl	800333c <HAL_UART_Transmit>
	HAL_Delay(200);
 8005454:	20c8      	movs	r0, #200	; 0xc8
 8005456:	f7fb ffe3 	bl	8001420 <HAL_Delay>

	CMD_RF_OFF;
 800545a:	2201      	movs	r2, #1
 800545c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005460:	4809      	ldr	r0, [pc, #36]	; (8005488 <init_rf433+0x90>)
 8005462:	f7fc ff67 	bl	8002334 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8005466:	2032      	movs	r0, #50	; 0x32
 8005468:	f7fb ffda 	bl	8001420 <HAL_Delay>

	huart1.Init.BaudRate = 19200;
 800546c:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
	if (HAL_UART_Init(&huart1) != HAL_OK){
 8005470:	4620      	mov	r0, r4
	huart1.Init.BaudRate = 19200;
 8005472:	6063      	str	r3, [r4, #4]
	if (HAL_UART_Init(&huart1) != HAL_OK){
 8005474:	f7fd ff34 	bl	80032e0 <HAL_UART_Init>
 8005478:	b118      	cbz	r0, 8005482 <init_rf433+0x8a>
		Error_Handler();
	}
}
 800547a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		Error_Handler();
 800547e:	f000 ba15 	b.w	80058ac <Error_Handler>
 8005482:	bd38      	pop	{r3, r4, r5, pc}
 8005484:	20005444 	.word	0x20005444
 8005488:	40010800 	.word	0x40010800
 800548c:	08008c8c 	.word	0x08008c8c
 8005490:	08008c94 	.word	0x08008c94
 8005494:	08008c9f 	.word	0x08008c9f
 8005498:	200051c0 	.word	0x200051c0
 800549c:	20005200 	.word	0x20005200

080054a0 <mWrite_flash>:

#define CONTROLLER_LENGTH_WORDS		(sizeof(controllerSettings)	/ 4)

extern struct controllerData controllerSettings;

void mWrite_flash(void){
 80054a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054a2:	b087      	sub	sp, #28
	FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t pageError;
	uint16_t i;

	HAL_FLASH_Unlock();
 80054a4:	f7fc fd62 	bl	8001f6c <HAL_FLASH_Unlock>

	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 80054a8:	2300      	movs	r3, #0
 80054aa:	9302      	str	r3, [sp, #8]
	EraseInitStruct.PageAddress = SETTINGS_FLASH_PAGE_ADDR;
 80054ac:	4b13      	ldr	r3, [pc, #76]	; (80054fc <mWrite_flash+0x5c>)
	EraseInitStruct.NbPages = 1;

	if(HAL_FLASHEx_Erase(&EraseInitStruct, &pageError) != HAL_OK){
 80054ae:	a901      	add	r1, sp, #4
	EraseInitStruct.PageAddress = SETTINGS_FLASH_PAGE_ADDR;
 80054b0:	9304      	str	r3, [sp, #16]
	EraseInitStruct.NbPages = 1;
 80054b2:	2301      	movs	r3, #1
	if(HAL_FLASHEx_Erase(&EraseInitStruct, &pageError) != HAL_OK){
 80054b4:	a802      	add	r0, sp, #8
	EraseInitStruct.NbPages = 1;
 80054b6:	9305      	str	r3, [sp, #20]
	if(HAL_FLASHEx_Erase(&EraseInitStruct, &pageError) != HAL_OK){
 80054b8:	f7fc fe08 	bl	80020cc <HAL_FLASHEx_Erase>
 80054bc:	b110      	cbz	r0, 80054c4 <mWrite_flash+0x24>
		print_debug("Erase Flash Error\n");
 80054be:	4810      	ldr	r0, [pc, #64]	; (8005500 <mWrite_flash+0x60>)
 80054c0:	f7ff ff80 	bl	80053c4 <print_debug>
void mWrite_flash(void){
 80054c4:	4c0d      	ldr	r4, [pc, #52]	; (80054fc <mWrite_flash+0x5c>)
	}

	uint32_t *source_addr = (void *)&controllerSettings;
	uint32_t *dest_addr = (uint32_t *) SETTINGS_FLASH_PAGE_ADDR;
	for (i=0; i<CONTROLLER_LENGTH_WORDS; i++) {
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,(uint32_t)dest_addr, *source_addr)!= HAL_OK){
 80054c6:	4e0f      	ldr	r6, [pc, #60]	; (8005504 <mWrite_flash+0x64>)
			print_debug("Write Flash Error\n");
 80054c8:	4f0f      	ldr	r7, [pc, #60]	; (8005508 <mWrite_flash+0x68>)
	for (i=0; i<CONTROLLER_LENGTH_WORDS; i++) {
 80054ca:	4d10      	ldr	r5, [pc, #64]	; (800550c <mWrite_flash+0x6c>)
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,(uint32_t)dest_addr, *source_addr)!= HAL_OK){
 80054cc:	f104 4378 	add.w	r3, r4, #4160749568	; 0xf8000000
 80054d0:	f5a3 33fe 	sub.w	r3, r3, #130048	; 0x1fc00
 80054d4:	599a      	ldr	r2, [r3, r6]
 80054d6:	4621      	mov	r1, r4
 80054d8:	2300      	movs	r3, #0
 80054da:	2002      	movs	r0, #2
 80054dc:	f7fc fd8c 	bl	8001ff8 <HAL_FLASH_Program>
 80054e0:	b110      	cbz	r0, 80054e8 <mWrite_flash+0x48>
			print_debug("Write Flash Error\n");
 80054e2:	4638      	mov	r0, r7
 80054e4:	f7ff ff6e 	bl	80053c4 <print_debug>
		}
		source_addr++;
		dest_addr++;
 80054e8:	3404      	adds	r4, #4
	for (i=0; i<CONTROLLER_LENGTH_WORDS; i++) {
 80054ea:	42ac      	cmp	r4, r5
 80054ec:	d1ee      	bne.n	80054cc <mWrite_flash+0x2c>
	}

	HAL_FLASH_Lock();
 80054ee:	f7fc fd4f 	bl	8001f90 <HAL_FLASH_Lock>
	print_debug("Flash ok\n");
 80054f2:	4807      	ldr	r0, [pc, #28]	; (8005510 <mWrite_flash+0x70>)
 80054f4:	f7ff ff66 	bl	80053c4 <print_debug>
}
 80054f8:	b007      	add	sp, #28
 80054fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054fc:	0801fc00 	.word	0x0801fc00
 8005500:	08008cc7 	.word	0x08008cc7
 8005504:	20005204 	.word	0x20005204
 8005508:	08008cda 	.word	0x08008cda
 800550c:	0801fc2c 	.word	0x0801fc2c
 8005510:	08008ced 	.word	0x08008ced

08005514 <mRead_flash>:

void mRead_flash(void){
	print_debug("reading flash\n");
 8005514:	480a      	ldr	r0, [pc, #40]	; (8005540 <mRead_flash+0x2c>)
void mRead_flash(void){
 8005516:	b510      	push	{r4, lr}
	print_debug("reading flash\n");
 8005518:	f7ff ff54 	bl	80053c4 <print_debug>

	uint32_t *source_addr = (uint32_t *)SETTINGS_FLASH_PAGE_ADDR;
 800551c:	4b09      	ldr	r3, [pc, #36]	; (8005544 <mRead_flash+0x30>)
    uint32_t *dest_addr = (void*)&controllerSettings;

    for (uint16_t i=0; i<CONTROLLER_LENGTH_WORDS; i++) {
        *dest_addr = *(__IO uint32_t*)source_addr;
 800551e:	480a      	ldr	r0, [pc, #40]	; (8005548 <mRead_flash+0x34>)
    for (uint16_t i=0; i<CONTROLLER_LENGTH_WORDS; i++) {
 8005520:	490a      	ldr	r1, [pc, #40]	; (800554c <mRead_flash+0x38>)
        *dest_addr = *(__IO uint32_t*)source_addr;
 8005522:	681c      	ldr	r4, [r3, #0]
 8005524:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
        source_addr++;
 8005528:	3304      	adds	r3, #4
        *dest_addr = *(__IO uint32_t*)source_addr;
 800552a:	f5a2 32fe 	sub.w	r2, r2, #130048	; 0x1fc00
    for (uint16_t i=0; i<CONTROLLER_LENGTH_WORDS; i++) {
 800552e:	428b      	cmp	r3, r1
        *dest_addr = *(__IO uint32_t*)source_addr;
 8005530:	5014      	str	r4, [r2, r0]
    for (uint16_t i=0; i<CONTROLLER_LENGTH_WORDS; i++) {
 8005532:	d1f6      	bne.n	8005522 <mRead_flash+0xe>
        dest_addr++;
    }

    print_debug("Flash read\n");
 8005534:	4806      	ldr	r0, [pc, #24]	; (8005550 <mRead_flash+0x3c>)
}
 8005536:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    print_debug("Flash read\n");
 800553a:	f7ff bf43 	b.w	80053c4 <print_debug>
 800553e:	bf00      	nop
 8005540:	08008cac 	.word	0x08008cac
 8005544:	0801fc00 	.word	0x0801fc00
 8005548:	20005204 	.word	0x20005204
 800554c:	0801fc2c 	.word	0x0801fc2c
 8005550:	08008cbb 	.word	0x08008cbb

08005554 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005554:	2238      	movs	r2, #56	; 0x38
{
 8005556:	b530      	push	{r4, r5, lr}
 8005558:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800555a:	eb0d 0002 	add.w	r0, sp, r2
 800555e:	2100      	movs	r1, #0
 8005560:	f000 fd5f 	bl	8006022 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005564:	2214      	movs	r2, #20
 8005566:	2100      	movs	r1, #0
 8005568:	a801      	add	r0, sp, #4
 800556a:	f000 fd5a 	bl	8006022 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800556e:	2220      	movs	r2, #32
 8005570:	2100      	movs	r1, #0
 8005572:	a806      	add	r0, sp, #24
 8005574:	f000 fd55 	bl	8006022 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005578:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800557c:	2402      	movs	r4, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800557e:	2501      	movs	r5, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005580:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005582:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8005584:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005588:	a80e      	add	r0, sp, #56	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800558a:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800558c:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800558e:	9513      	str	r5, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005590:	9416      	str	r4, [sp, #88]	; 0x58
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005592:	f7fc fed5 	bl	8002340 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005596:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005598:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800559c:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800559e:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80055a0:	4621      	mov	r1, r4
 80055a2:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80055a4:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80055a6:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80055a8:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80055aa:	9402      	str	r4, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80055ac:	f7fd f916 	bl	80027dc <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80055b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80055b4:	a806      	add	r0, sp, #24
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80055b6:	9308      	str	r3, [sp, #32]
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80055b8:	9406      	str	r4, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80055ba:	f7fd f9e1 	bl	8002980 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
  /** Configure the Systick interrupt time 
  */
  __HAL_RCC_PLLI2S_ENABLE();
 80055be:	4b02      	ldr	r3, [pc, #8]	; (80055c8 <SystemClock_Config+0x74>)
 80055c0:	601d      	str	r5, [r3, #0]
}
 80055c2:	b01d      	add	sp, #116	; 0x74
 80055c4:	bd30      	pop	{r4, r5, pc}
 80055c6:	bf00      	nop
 80055c8:	42420070 	.word	0x42420070

080055cc <main>:
{
 80055cc:	b580      	push	{r7, lr}
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80055ce:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80055d0:	f44f 7880 	mov.w	r8, #256	; 0x100
{
 80055d4:	b092      	sub	sp, #72	; 0x48
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80055d6:	4d80      	ldr	r5, [pc, #512]	; (80057d8 <main+0x20c>)
  HAL_Init();
 80055d8:	f7fb fefe 	bl	80013d8 <HAL_Init>
  SystemClock_Config();
 80055dc:	f7ff ffba 	bl	8005554 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055e0:	2210      	movs	r2, #16
 80055e2:	2100      	movs	r1, #0
 80055e4:	a80a      	add	r0, sp, #40	; 0x28
 80055e6:	f000 fd1c 	bl	8006022 <memset>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80055ea:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80055ec:	2201      	movs	r2, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80055ee:	f043 0320 	orr.w	r3, r3, #32
 80055f2:	61ab      	str	r3, [r5, #24]
 80055f4:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80055f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80055fa:	f003 0320 	and.w	r3, r3, #32
 80055fe:	9301      	str	r3, [sp, #4]
 8005600:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005602:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8005604:	4875      	ldr	r0, [pc, #468]	; (80057dc <main+0x210>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005606:	f043 0304 	orr.w	r3, r3, #4
 800560a:	61ab      	str	r3, [r5, #24]
 800560c:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800560e:	2601      	movs	r6, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005610:	f003 0304 	and.w	r3, r3, #4
 8005614:	9302      	str	r3, [sp, #8]
 8005616:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005618:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800561a:	2704      	movs	r7, #4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800561c:	f043 0308 	orr.w	r3, r3, #8
 8005620:	61ab      	str	r3, [r5, #24]
 8005622:	69ab      	ldr	r3, [r5, #24]
 8005624:	f003 0308 	and.w	r3, r3, #8
 8005628:	9303      	str	r3, [sp, #12]
 800562a:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 800562c:	f7fc fe82 	bl	8002334 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8005630:	2200      	movs	r2, #0
 8005632:	2104      	movs	r1, #4
 8005634:	486a      	ldr	r0, [pc, #424]	; (80057e0 <main+0x214>)
 8005636:	f7fc fe7d 	bl	8002334 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
 800563a:	2200      	movs	r2, #0
 800563c:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 8005640:	4868      	ldr	r0, [pc, #416]	; (80057e4 <main+0x218>)
 8005642:	f7fc fe77 	bl	8002334 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005646:	a90a      	add	r1, sp, #40	; 0x28
 8005648:	4864      	ldr	r0, [pc, #400]	; (80057dc <main+0x210>)
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800564a:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800564e:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005650:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005652:	f7fc fd89 	bl	8002168 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8005656:	f44f 6300 	mov.w	r3, #2048	; 0x800
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800565a:	a90a      	add	r1, sp, #40	; 0x28
 800565c:	485f      	ldr	r0, [pc, #380]	; (80057dc <main+0x210>)
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800565e:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005660:	960b      	str	r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8005662:	960d      	str	r6, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005664:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005666:	f7fc fd7f 	bl	8002168 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800566a:	a90a      	add	r1, sp, #40	; 0x28
 800566c:	485c      	ldr	r0, [pc, #368]	; (80057e0 <main+0x214>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800566e:	960b      	str	r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8005670:	960d      	str	r6, [sp, #52]	; 0x34
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005672:	970a      	str	r7, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005674:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005676:	f7fc fd77 	bl	8002168 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 PB6 
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
 800567a:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800567e:	a90a      	add	r1, sp, #40	; 0x28
 8005680:	4858      	ldr	r0, [pc, #352]	; (80057e4 <main+0x218>)
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
 8005682:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005684:	960b      	str	r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8005686:	960d      	str	r6, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005688:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800568a:	f7fc fd6d 	bl	8002168 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800568e:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8005690:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005692:	4333      	orrs	r3, r6
 8005694:	616b      	str	r3, [r5, #20]
 8005696:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8005698:	2105      	movs	r1, #5
  __HAL_RCC_DMA1_CLK_ENABLE();
 800569a:	4033      	ands	r3, r6
 800569c:	9300      	str	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 800569e:	200e      	movs	r0, #14
  __HAL_RCC_DMA1_CLK_ENABLE();
 80056a0:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 80056a2:	f7fc fa1d 	bl	8001ae0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80056a6:	200e      	movs	r0, #14
 80056a8:	f7fc fa4e 	bl	8001b48 <HAL_NVIC_EnableIRQ>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80056ac:	2220      	movs	r2, #32
 80056ae:	4621      	mov	r1, r4
 80056b0:	a80a      	add	r0, sp, #40	; 0x28
  hadc1.Instance = ADC1;
 80056b2:	4d4d      	ldr	r5, [pc, #308]	; (80057e8 <main+0x21c>)
  ADC_ChannelConfTypeDef sConfig = {0};
 80056b4:	9406      	str	r4, [sp, #24]
 80056b6:	9407      	str	r4, [sp, #28]
 80056b8:	9408      	str	r4, [sp, #32]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80056ba:	f000 fcb2 	bl	8006022 <memset>
  hadc1.Instance = ADC1;
 80056be:	4b4b      	ldr	r3, [pc, #300]	; (80057ec <main+0x220>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80056c0:	4628      	mov	r0, r5
  hadc1.Instance = ADC1;
 80056c2:	602b      	str	r3, [r5, #0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80056c4:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  hadc1.Init.NbrOfConversion = 1;
 80056c8:	612e      	str	r6, [r5, #16]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80056ca:	61eb      	str	r3, [r5, #28]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80056cc:	f8c5 8008 	str.w	r8, [r5, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80056d0:	60ec      	str	r4, [r5, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80056d2:	616c      	str	r4, [r5, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80056d4:	606c      	str	r4, [r5, #4]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80056d6:	f7fc f81b 	bl	8001710 <HAL_ADC_Init>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80056da:	a906      	add	r1, sp, #24
 80056dc:	4628      	mov	r0, r5
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80056de:	9607      	str	r6, [sp, #28]
  sConfig.Channel = ADC_CHANNEL_0;
 80056e0:	9406      	str	r4, [sp, #24]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80056e2:	9408      	str	r4, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80056e4:	f7fb ff36 	bl	8001554 <HAL_ADC_ConfigChannel>
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80056e8:	2307      	movs	r3, #7
 80056ea:	930c      	str	r3, [sp, #48]	; 0x30
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 80056ec:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80056f0:	a90a      	add	r1, sp, #40	; 0x28
 80056f2:	4628      	mov	r0, r5
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 80056f4:	9311      	str	r3, [sp, #68]	; 0x44
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80056f6:	960b      	str	r6, [sp, #44]	; 0x2c
  sConfigInjected.InjectedChannel = ADC_CHANNEL_0;
 80056f8:	940a      	str	r4, [sp, #40]	; 0x28
  sConfigInjected.InjectedNbrOfConversion = 4;
 80056fa:	970e      	str	r7, [sp, #56]	; 0x38
  sConfigInjected.AutoInjectedConv = DISABLE;
 80056fc:	9410      	str	r4, [sp, #64]	; 0x40
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80056fe:	940f      	str	r4, [sp, #60]	; 0x3c
  sConfigInjected.InjectedOffset = 0;
 8005700:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8005702:	f7fc f8ef 	bl	80018e4 <HAL_ADCEx_InjectedConfigChannel>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8005706:	960a      	str	r6, [sp, #40]	; 0x28
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8005708:	2602      	movs	r6, #2
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800570a:	a90a      	add	r1, sp, #40	; 0x28
 800570c:	4628      	mov	r0, r5
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 800570e:	960b      	str	r6, [sp, #44]	; 0x2c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8005710:	f7fc f8e8 	bl	80018e4 <HAL_ADCEx_InjectedConfigChannel>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 8005714:	960a      	str	r6, [sp, #40]	; 0x28
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8005716:	2603      	movs	r6, #3
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8005718:	a90a      	add	r1, sp, #40	; 0x28
 800571a:	4628      	mov	r0, r5
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 800571c:	960b      	str	r6, [sp, #44]	; 0x2c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800571e:	f7fc f8e1 	bl	80018e4 <HAL_ADCEx_InjectedConfigChannel>
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8005722:	a90a      	add	r1, sp, #40	; 0x28
 8005724:	4628      	mov	r0, r5
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8005726:	960a      	str	r6, [sp, #40]	; 0x28
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_4;
 8005728:	970b      	str	r7, [sp, #44]	; 0x2c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800572a:	f7fc f8db 	bl	80018e4 <HAL_ADCEx_InjectedConfigChannel>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800572e:	2210      	movs	r2, #16
 8005730:	4621      	mov	r1, r4
 8005732:	a806      	add	r0, sp, #24
 8005734:	f000 fc75 	bl	8006022 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005738:	221c      	movs	r2, #28
 800573a:	4621      	mov	r1, r4
 800573c:	a80a      	add	r0, sp, #40	; 0x28
  htim3.Instance = TIM3;
 800573e:	4d2c      	ldr	r5, [pc, #176]	; (80057f0 <main+0x224>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005740:	9404      	str	r4, [sp, #16]
 8005742:	9405      	str	r4, [sp, #20]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005744:	f000 fc6d 	bl	8006022 <memset>
  htim3.Instance = TIM3;
 8005748:	4b2a      	ldr	r3, [pc, #168]	; (80057f4 <main+0x228>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800574a:	4628      	mov	r0, r5
  htim3.Init.Prescaler = 0;
 800574c:	e885 0018 	stmia.w	r5, {r3, r4}
  htim3.Init.Period = 65535;
 8005750:	f64f 73ff 	movw	r3, #65535	; 0xffff
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005754:	60ac      	str	r4, [r5, #8]
  htim3.Init.Period = 65535;
 8005756:	60eb      	str	r3, [r5, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005758:	612c      	str	r4, [r5, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800575a:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800575c:	f7fd fbe4 	bl	8002f28 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005760:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005764:	a906      	add	r1, sp, #24
 8005766:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005768:	9306      	str	r3, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800576a:	f7fd fa3c 	bl	8002be6 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800576e:	4628      	mov	r0, r5
 8005770:	f7fd fbf4 	bl	8002f5c <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005774:	a904      	add	r1, sp, #16
 8005776:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005778:	9404      	str	r4, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800577a:	9405      	str	r4, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800577c:	f7fd fcb8 	bl	80030f0 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005780:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005782:	4622      	mov	r2, r4
 8005784:	a90a      	add	r1, sp, #40	; 0x28
 8005786:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005788:	930a      	str	r3, [sp, #40]	; 0x28
  sConfigOC.Pulse = 0;
 800578a:	940b      	str	r4, [sp, #44]	; 0x2c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800578c:	940c      	str	r4, [sp, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800578e:	940e      	str	r4, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005790:	f7fd fc2a 	bl	8002fe8 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005794:	463a      	mov	r2, r7
 8005796:	a90a      	add	r1, sp, #40	; 0x28
 8005798:	4628      	mov	r0, r5
 800579a:	f7fd fc25 	bl	8002fe8 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800579e:	a90a      	add	r1, sp, #40	; 0x28
 80057a0:	2208      	movs	r2, #8
 80057a2:	4628      	mov	r0, r5
 80057a4:	f7fd fc20 	bl	8002fe8 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim3);
 80057a8:	4628      	mov	r0, r5
 80057aa:	f000 fb03 	bl	8005db4 <HAL_TIM_MspPostInit>
  huart1.Init.BaudRate = 9600;
 80057ae:	f44f 5316 	mov.w	r3, #9600	; 0x2580
  huart1.Instance = USART1;
 80057b2:	4811      	ldr	r0, [pc, #68]	; (80057f8 <main+0x22c>)
  huart1.Init.BaudRate = 9600;
 80057b4:	4a11      	ldr	r2, [pc, #68]	; (80057fc <main+0x230>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80057b6:	6084      	str	r4, [r0, #8]
  huart1.Init.BaudRate = 9600;
 80057b8:	e880 000c 	stmia.w	r0, {r2, r3}
  huart1.Init.Mode = UART_MODE_TX_RX;
 80057bc:	230c      	movs	r3, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 80057be:	60c4      	str	r4, [r0, #12]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80057c0:	6143      	str	r3, [r0, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 80057c2:	6104      	str	r4, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80057c4:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80057c6:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80057c8:	f7fd fd8a 	bl	80032e0 <HAL_UART_Init>
  controller_init();
 80057cc:	f7ff fcda 	bl	8005184 <controller_init>
  osKernelStart();
 80057d0:	f7fd ff9e 	bl	8003710 <osKernelStart>
 80057d4:	e7fe      	b.n	80057d4 <main+0x208>
 80057d6:	bf00      	nop
 80057d8:	40021000 	.word	0x40021000
 80057dc:	40010800 	.word	0x40010800
 80057e0:	40011400 	.word	0x40011400
 80057e4:	40010c00 	.word	0x40010c00
 80057e8:	20005414 	.word	0x20005414
 80057ec:	40012400 	.word	0x40012400
 80057f0:	2000538c 	.word	0x2000538c
 80057f4:	40000400 	.word	0x40000400
 80057f8:	20005444 	.word	0x20005444
 80057fc:	40013800 	.word	0x40013800

08005800 <HAL_UART_RxCpltCallback>:
}

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
	if(huart->Instance == USART1){
 8005800:	6802      	ldr	r2, [r0, #0]
 8005802:	4b16      	ldr	r3, [pc, #88]	; (800585c <HAL_UART_RxCpltCallback+0x5c>)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8005804:	b513      	push	{r0, r1, r4, lr}
	if(huart->Instance == USART1){
 8005806:	429a      	cmp	r2, r3
 8005808:	d125      	bne.n	8005856 <HAL_UART_RxCpltCallback+0x56>
		if (recCommandByte != '\r'){
 800580a:	4b15      	ldr	r3, [pc, #84]	; (8005860 <HAL_UART_RxCpltCallback+0x60>)
 800580c:	781a      	ldrb	r2, [r3, #0]
 800580e:	2a0d      	cmp	r2, #13
 8005810:	d01c      	beq.n	800584c <HAL_UART_RxCpltCallback+0x4c>
			recCommandBuffer[p_recCommandBuffer] = recCommandByte;
 8005812:	4c14      	ldr	r4, [pc, #80]	; (8005864 <HAL_UART_RxCpltCallback+0x64>)
 8005814:	4914      	ldr	r1, [pc, #80]	; (8005868 <HAL_UART_RxCpltCallback+0x68>)
 8005816:	7823      	ldrb	r3, [r4, #0]
 8005818:	54ca      	strb	r2, [r1, r3]
			p_recCommandBuffer++;
 800581a:	3301      	adds	r3, #1
 800581c:	b2db      	uxtb	r3, r3

			if (p_recCommandBuffer == MAX_COMMAND_LENGTH) p_recCommandBuffer = 0;
 800581e:	2b40      	cmp	r3, #64	; 0x40
 8005820:	bf08      	it	eq
 8005822:	2300      	moveq	r3, #0

			if(recCommandByte == '\n'){
 8005824:	2a0a      	cmp	r2, #10
			if (p_recCommandBuffer == MAX_COMMAND_LENGTH) p_recCommandBuffer = 0;
 8005826:	7023      	strb	r3, [r4, #0]
			if(recCommandByte == '\n'){
 8005828:	d10e      	bne.n	8005848 <HAL_UART_RxCpltCallback+0x48>
				memcpy(commandToProcessBuffer, recCommandBuffer, p_recCommandBuffer);
 800582a:	7822      	ldrb	r2, [r4, #0]
 800582c:	490e      	ldr	r1, [pc, #56]	; (8005868 <HAL_UART_RxCpltCallback+0x68>)
 800582e:	480f      	ldr	r0, [pc, #60]	; (800586c <HAL_UART_RxCpltCallback+0x6c>)
 8005830:	f000 fbec 	bl	800600c <memcpy>
				portBASE_TYPE r1;
				xQueueSendToBackFromISR(xRecCommandQueue, &commandToProcessBuffer, &r1);
 8005834:	480e      	ldr	r0, [pc, #56]	; (8005870 <HAL_UART_RxCpltCallback+0x70>)
 8005836:	2300      	movs	r3, #0
 8005838:	aa01      	add	r2, sp, #4
 800583a:	490c      	ldr	r1, [pc, #48]	; (800586c <HAL_UART_RxCpltCallback+0x6c>)
 800583c:	6800      	ldr	r0, [r0, #0]
 800583e:	f7fe fb8b 	bl	8003f58 <xQueueGenericSendFromISR>
				p_recCommandBuffer = 0;
			}
			else if (recCommandByte == 0xFF) {
				p_recCommandBuffer = 0;
 8005842:	2300      	movs	r3, #0
 8005844:	7023      	strb	r3, [r4, #0]
 8005846:	e001      	b.n	800584c <HAL_UART_RxCpltCallback+0x4c>
			else if (recCommandByte == 0xFF) {
 8005848:	2aff      	cmp	r2, #255	; 0xff
 800584a:	d0fa      	beq.n	8005842 <HAL_UART_RxCpltCallback+0x42>
			}
		}

		HAL_UART_Receive_IT(&huart1, &recCommandByte, 1);
 800584c:	2201      	movs	r2, #1
 800584e:	4904      	ldr	r1, [pc, #16]	; (8005860 <HAL_UART_RxCpltCallback+0x60>)
 8005850:	4808      	ldr	r0, [pc, #32]	; (8005874 <HAL_UART_RxCpltCallback+0x74>)
 8005852:	f7fd fdcf 	bl	80033f4 <HAL_UART_Receive_IT>
	}
}
 8005856:	b002      	add	sp, #8
 8005858:	bd10      	pop	{r4, pc}
 800585a:	bf00      	nop
 800585c:	40013800 	.word	0x40013800
 8005860:	20005494 	.word	0x20005494
 8005864:	2000548e 	.word	0x2000548e
 8005868:	20005300 	.word	0x20005300
 800586c:	20005340 	.word	0x20005340
 8005870:	20005490 	.word	0x20005490
 8005874:	20005444 	.word	0x20005444

08005878 <HAL_ADCEx_InjectedConvCpltCallback>:

void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc1){
 8005878:	b538      	push	{r3, r4, r5, lr}
	  ADCRawData[0]=HAL_ADCEx_InjectedGetValue(hadc1,ADC_INJECTED_RANK_1);
 800587a:	2101      	movs	r1, #1
void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc1){
 800587c:	4605      	mov	r5, r0
	  ADCRawData[0]=HAL_ADCEx_InjectedGetValue(hadc1,ADC_INJECTED_RANK_1);
 800587e:	f7fc f821 	bl	80018c4 <HAL_ADCEx_InjectedGetValue>
 8005882:	4c09      	ldr	r4, [pc, #36]	; (80058a8 <HAL_ADCEx_InjectedConvCpltCallback+0x30>)
	  ADCRawData[1]=HAL_ADCEx_InjectedGetValue(hadc1,ADC_INJECTED_RANK_2);
 8005884:	2102      	movs	r1, #2
	  ADCRawData[0]=HAL_ADCEx_InjectedGetValue(hadc1,ADC_INJECTED_RANK_1);
 8005886:	8020      	strh	r0, [r4, #0]
	  ADCRawData[1]=HAL_ADCEx_InjectedGetValue(hadc1,ADC_INJECTED_RANK_2);
 8005888:	4628      	mov	r0, r5
 800588a:	f7fc f81b 	bl	80018c4 <HAL_ADCEx_InjectedGetValue>
	  ADCRawData[2]=HAL_ADCEx_InjectedGetValue(hadc1,ADC_INJECTED_RANK_3);
 800588e:	2103      	movs	r1, #3
	  ADCRawData[1]=HAL_ADCEx_InjectedGetValue(hadc1,ADC_INJECTED_RANK_2);
 8005890:	8060      	strh	r0, [r4, #2]
	  ADCRawData[2]=HAL_ADCEx_InjectedGetValue(hadc1,ADC_INJECTED_RANK_3);
 8005892:	4628      	mov	r0, r5
 8005894:	f7fc f816 	bl	80018c4 <HAL_ADCEx_InjectedGetValue>
	  ADCRawData[3]=HAL_ADCEx_InjectedGetValue(hadc1,ADC_INJECTED_RANK_4);
 8005898:	2104      	movs	r1, #4
	  ADCRawData[2]=HAL_ADCEx_InjectedGetValue(hadc1,ADC_INJECTED_RANK_3);
 800589a:	80a0      	strh	r0, [r4, #4]
	  ADCRawData[3]=HAL_ADCEx_InjectedGetValue(hadc1,ADC_INJECTED_RANK_4);
 800589c:	4628      	mov	r0, r5
 800589e:	f7fc f811 	bl	80018c4 <HAL_ADCEx_InjectedGetValue>
 80058a2:	80e0      	strh	r0, [r4, #6]
 80058a4:	bd38      	pop	{r3, r4, r5, pc}
 80058a6:	bf00      	nop
 80058a8:	20005384 	.word	0x20005384

080058ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80058ac:	4770      	bx	lr
	...

080058b0 <xProcessCommandTask>:
extern uint8_t lastTimeCommand;

extern uint16_t server_UID;
extern enum AirSystemType airSystem;

void xProcessCommandTask(void* arguments){
 80058b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	portBASE_TYPE xStatus;
	uint8_t command[MAX_COMMAND_LENGTH] = {0};

	uint16_t id = 0;
 80058b4:	2500      	movs	r5, #0
void xProcessCommandTask(void* arguments){
 80058b6:	b097      	sub	sp, #92	; 0x5c
	uint8_t command[MAX_COMMAND_LENGTH] = {0};
 80058b8:	2240      	movs	r2, #64	; 0x40
 80058ba:	2100      	movs	r1, #0
 80058bc:	a806      	add	r0, sp, #24
#endif
							pressureCompensation = OFF;
						}
					}
					else if (command[1] == ','){
						sscanf((char*)command, "s,%hu,%hu,%hu,%hu,%hu,%c,\n", &id, 	&nessPressure[0],
 80058be:	f8df a36c 	ldr.w	sl, [pc, #876]	; 8005c2c <xProcessCommandTask+0x37c>
								mWrite_flash();
								messageLength = sprintf(message, "xc,%05d,ok,\n", controllerSettings.clientID);
								HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);

								vTaskDelay(200 / portTICK_RATE_MS);
								CMD_RF_ON;
 80058c2:	f8df 936c 	ldr.w	r9, [pc, #876]	; 8005c30 <xProcessCommandTask+0x380>
	uint8_t command[MAX_COMMAND_LENGTH] = {0};
 80058c6:	f000 fbac 	bl	8006022 <memset>
	uint16_t id = 0;
 80058ca:	f8ad 5014 	strh.w	r5, [sp, #20]
	char co = 0;
 80058ce:	f88d 5011 	strb.w	r5, [sp, #17]
	char outputState = 0;
 80058d2:	f88d 5012 	strb.w	r5, [sp, #18]
	uint16_t channel = 0;
 80058d6:	f8ad 5016 	strh.w	r5, [sp, #22]
	char systemType = 0;
 80058da:	f88d 5013 	strb.w	r5, [sp, #19]
		xStatus = xQueueReceive(xRecCommandQueue, command, portMAX_DELAY);
 80058de:	4cb8      	ldr	r4, [pc, #736]	; (8005bc0 <xProcessCommandTask+0x310>)
 80058e0:	2300      	movs	r3, #0
 80058e2:	f04f 32ff 	mov.w	r2, #4294967295
 80058e6:	a906      	add	r1, sp, #24
 80058e8:	6820      	ldr	r0, [r4, #0]
 80058ea:	f7fe fb97 	bl	800401c <xQueueGenericReceive>
		if (xStatus == pdPASS){
 80058ee:	2801      	cmp	r0, #1
		xStatus = xQueueReceive(xRecCommandQueue, command, portMAX_DELAY);
 80058f0:	4606      	mov	r6, r0
		if (xStatus == pdPASS){
 80058f2:	d1f5      	bne.n	80058e0 <xProcessCommandTask+0x30>
			lastTimeCommand = 0;
 80058f4:	2400      	movs	r4, #0
 80058f6:	4bb3      	ldr	r3, [pc, #716]	; (8005bc4 <xProcessCommandTask+0x314>)
 80058f8:	701c      	strb	r4, [r3, #0]
			switch(command[0]){
 80058fa:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80058fe:	2b73      	cmp	r3, #115	; 0x73
 8005900:	f000 808d 	beq.w	8005a1e <xProcessCommandTask+0x16e>
 8005904:	2b78      	cmp	r3, #120	; 0x78
 8005906:	f000 80e0 	beq.w	8005aca <xProcessCommandTask+0x21a>
 800590a:	2b6d      	cmp	r3, #109	; 0x6d
 800590c:	d1e7      	bne.n	80058de <xProcessCommandTask+0x2e>
					if (indicationState != SEARCH){
 800590e:	4bae      	ldr	r3, [pc, #696]	; (8005bc8 <xProcessCommandTask+0x318>)
					sscanf((char*)command, "m,%hu,%c,%c,\n", &id, &co, &outputState);
 8005910:	49ae      	ldr	r1, [pc, #696]	; (8005bcc <xProcessCommandTask+0x31c>)
					if (indicationState != SEARCH){
 8005912:	781a      	ldrb	r2, [r3, #0]
					sscanf((char*)command, "m,%hu,%c,%c,\n", &id, &co, &outputState);
 8005914:	a806      	add	r0, sp, #24
					if (indicationState != SEARCH){
 8005916:	2a02      	cmp	r2, #2
						indicationState = NORMAL_C;
 8005918:	bf18      	it	ne
 800591a:	701c      	strbne	r4, [r3, #0]
					sscanf((char*)command, "m,%hu,%c,%c,\n", &id, &co, &outputState);
 800591c:	f10d 0312 	add.w	r3, sp, #18
 8005920:	9300      	str	r3, [sp, #0]
 8005922:	aa05      	add	r2, sp, #20
 8005924:	f10d 0311 	add.w	r3, sp, #17
 8005928:	f001 f808 	bl	800693c <siscanf>
					outputState = command[10];
 800592c:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
					if (id == server_UID){
 8005930:	f8bd 2014 	ldrh.w	r2, [sp, #20]
					outputState = command[10];
 8005934:	f88d 3012 	strb.w	r3, [sp, #18]
					if (id == server_UID){
 8005938:	4ba5      	ldr	r3, [pc, #660]	; (8005bd0 <xProcessCommandTask+0x320>)
 800593a:	881b      	ldrh	r3, [r3, #0]
 800593c:	429a      	cmp	r2, r3
 800593e:	d1ce      	bne.n	80058de <xProcessCommandTask+0x2e>
																						filteredData[SENS_1],
 8005940:	49a4      	ldr	r1, [pc, #656]	; (8005bd4 <xProcessCommandTask+0x324>)
						messageLength = sprintf(message, "m,%hu,%hu,%hu,%hu,%hu,\n", 	controllerSettings.clientID,
 8005942:	4aa5      	ldr	r2, [pc, #660]	; (8005bd8 <xProcessCommandTask+0x328>)
 8005944:	88c8      	ldrh	r0, [r1, #6]
 8005946:	880b      	ldrh	r3, [r1, #0]
 8005948:	8892      	ldrh	r2, [r2, #4]
 800594a:	9002      	str	r0, [sp, #8]
 800594c:	8888      	ldrh	r0, [r1, #4]
 800594e:	9001      	str	r0, [sp, #4]
 8005950:	8849      	ldrh	r1, [r1, #2]
 8005952:	48a2      	ldr	r0, [pc, #648]	; (8005bdc <xProcessCommandTask+0x32c>)
 8005954:	9100      	str	r1, [sp, #0]
 8005956:	49a2      	ldr	r1, [pc, #648]	; (8005be0 <xProcessCommandTask+0x330>)
 8005958:	f000 ffcc 	bl	80068f4 <siprintf>
 800595c:	4ba1      	ldr	r3, [pc, #644]	; (8005be4 <xProcessCommandTask+0x334>)
 800595e:	b2c2      	uxtb	r2, r0
						HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);
 8005960:	499e      	ldr	r1, [pc, #632]	; (8005bdc <xProcessCommandTask+0x32c>)
 8005962:	48a1      	ldr	r0, [pc, #644]	; (8005be8 <xProcessCommandTask+0x338>)
						messageLength = sprintf(message, "m,%hu,%hu,%hu,%hu,%hu,\n", 	controllerSettings.clientID,
 8005964:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);
 8005966:	f7fd fd6d 	bl	8003444 <HAL_UART_Transmit_DMA>
						if (outputState != prevOutputState){
 800596a:	f89d 2012 	ldrb.w	r2, [sp, #18]
 800596e:	4295      	cmp	r5, r2
 8005970:	d0b5      	beq.n	80058de <xProcessCommandTask+0x2e>
							pressureCompensation = OFF;
 8005972:	2100      	movs	r1, #0
 8005974:	4b9d      	ldr	r3, [pc, #628]	; (8005bec <xProcessCommandTask+0x33c>)
							if (outputState & 0b00000001) 	C1_UP_ON;
 8005976:	f012 0201 	ands.w	r2, r2, #1
							pressureCompensation = OFF;
 800597a:	7019      	strb	r1, [r3, #0]
							if (outputState & 0b00000001) 	C1_UP_ON;
 800597c:	bf18      	it	ne
 800597e:	2201      	movne	r2, #1
							else 				   			C1_UP_OFF;
 8005980:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005984:	489a      	ldr	r0, [pc, #616]	; (8005bf0 <xProcessCommandTask+0x340>)
 8005986:	f7fc fcd5 	bl	8002334 <HAL_GPIO_WritePin>
							if (outputState & 0b00000010) 	C1_DOWN_ON;
 800598a:	f89d 2012 	ldrb.w	r2, [sp, #18]
							else 				   			C1_DOWN_OFF;
 800598e:	2180      	movs	r1, #128	; 0x80
							if (outputState & 0b00000010) 	C1_DOWN_ON;
 8005990:	f012 0202 	ands.w	r2, r2, #2
 8005994:	bf18      	it	ne
 8005996:	2201      	movne	r2, #1
							else 				   			C1_DOWN_OFF;
 8005998:	4895      	ldr	r0, [pc, #596]	; (8005bf0 <xProcessCommandTask+0x340>)
 800599a:	f7fc fccb 	bl	8002334 <HAL_GPIO_WritePin>
							if (outputState & 0b00000100) 	C2_UP_ON;
 800599e:	f89d 2012 	ldrb.w	r2, [sp, #18]
							else 				   			C2_UP_OFF;
 80059a2:	2120      	movs	r1, #32
							if (outputState & 0b00000100) 	C2_UP_ON;
 80059a4:	f012 0204 	ands.w	r2, r2, #4
 80059a8:	bf18      	it	ne
 80059aa:	2201      	movne	r2, #1
							else 				   			C2_UP_OFF;
 80059ac:	4890      	ldr	r0, [pc, #576]	; (8005bf0 <xProcessCommandTask+0x340>)
 80059ae:	f7fc fcc1 	bl	8002334 <HAL_GPIO_WritePin>
							if (outputState & 0b00001000) 	C2_DOWN_ON;
 80059b2:	f89d 2012 	ldrb.w	r2, [sp, #18]
							else 				   			C2_DOWN_OFF;
 80059b6:	2108      	movs	r1, #8
							if (outputState & 0b00001000) 	C2_DOWN_ON;
 80059b8:	f012 0208 	ands.w	r2, r2, #8
 80059bc:	bf18      	it	ne
 80059be:	2201      	movne	r2, #1
							else 				   			C2_DOWN_OFF;
 80059c0:	488b      	ldr	r0, [pc, #556]	; (8005bf0 <xProcessCommandTask+0x340>)
 80059c2:	f7fc fcb7 	bl	8002334 <HAL_GPIO_WritePin>
							if (outputState & 0b00010000) 	C3_UP_ON;
 80059c6:	f89d 2012 	ldrb.w	r2, [sp, #18]
							else 				   			C3_UP_OFF;
 80059ca:	f44f 7180 	mov.w	r1, #256	; 0x100
							if (outputState & 0b00010000) 	C3_UP_ON;
 80059ce:	f012 0210 	ands.w	r2, r2, #16
 80059d2:	bf18      	it	ne
 80059d4:	2201      	movne	r2, #1
							else 				   			C3_UP_OFF;
 80059d6:	4886      	ldr	r0, [pc, #536]	; (8005bf0 <xProcessCommandTask+0x340>)
 80059d8:	f7fc fcac 	bl	8002334 <HAL_GPIO_WritePin>
							if (outputState & 0b00100000) 	C3_DOWN_ON;
 80059dc:	f89d 2012 	ldrb.w	r2, [sp, #18]
							else 				   			C3_DOWN_OFF;
 80059e0:	2140      	movs	r1, #64	; 0x40
							if (outputState & 0b00100000) 	C3_DOWN_ON;
 80059e2:	f012 0220 	ands.w	r2, r2, #32
 80059e6:	bf18      	it	ne
 80059e8:	2201      	movne	r2, #1
							else 				   			C3_DOWN_OFF;
 80059ea:	4881      	ldr	r0, [pc, #516]	; (8005bf0 <xProcessCommandTask+0x340>)
 80059ec:	f7fc fca2 	bl	8002334 <HAL_GPIO_WritePin>
							if (outputState & 0b01000000) 	C4_UP_ON;
 80059f0:	f89d 2012 	ldrb.w	r2, [sp, #18]
							else 				   			C4_UP_OFF;
 80059f4:	2110      	movs	r1, #16
							if (outputState & 0b01000000) 	C4_UP_ON;
 80059f6:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 80059fa:	bf18      	it	ne
 80059fc:	2201      	movne	r2, #1
							else 				   			C4_UP_OFF;
 80059fe:	487c      	ldr	r0, [pc, #496]	; (8005bf0 <xProcessCommandTask+0x340>)
 8005a00:	f7fc fc98 	bl	8002334 <HAL_GPIO_WritePin>
							if (outputState & 0b10000000) 	C4_DOWN_ON;
 8005a04:	f99d 3012 	ldrsb.w	r3, [sp, #18]
							else 				   			C4_DOWN_OFF;
 8005a08:	2104      	movs	r1, #4
							if (outputState & 0b10000000) 	C4_DOWN_ON;
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	bfb4      	ite	lt
 8005a0e:	2201      	movlt	r2, #1
							else 				   			C4_DOWN_OFF;
 8005a10:	2200      	movge	r2, #0
 8005a12:	4878      	ldr	r0, [pc, #480]	; (8005bf4 <xProcessCommandTask+0x344>)
 8005a14:	f7fc fc8e 	bl	8002334 <HAL_GPIO_WritePin>
							prevOutputState = outputState;
 8005a18:	f89d 5012 	ldrb.w	r5, [sp, #18]
 8005a1c:	e75f      	b.n	80058de <xProcessCommandTask+0x2e>
					if (command[1] == 'x'){
 8005a1e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8005a22:	2b78      	cmp	r3, #120	; 0x78
 8005a24:	d11b      	bne.n	8005a5e <xProcessCommandTask+0x1ae>
						sscanf((char*)command, "sx,%hu,\n", &id);
 8005a26:	aa05      	add	r2, sp, #20
 8005a28:	4973      	ldr	r1, [pc, #460]	; (8005bf8 <xProcessCommandTask+0x348>)
 8005a2a:	a806      	add	r0, sp, #24
 8005a2c:	f000 ff86 	bl	800693c <siscanf>
						if (id == server_UID){
 8005a30:	4b67      	ldr	r3, [pc, #412]	; (8005bd0 <xProcessCommandTask+0x320>)
 8005a32:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8005a36:	881b      	ldrh	r3, [r3, #0]
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	f47f af50 	bne.w	80058de <xProcessCommandTask+0x2e>
	messageLength = sprintf(message, "compens off\n");
 8005a3e:	496f      	ldr	r1, [pc, #444]	; (8005bfc <xProcessCommandTask+0x34c>)
 8005a40:	4866      	ldr	r0, [pc, #408]	; (8005bdc <xProcessCommandTask+0x32c>)
 8005a42:	f000 ffa7 	bl	8006994 <strcpy>
 8005a46:	220c      	movs	r2, #12
 8005a48:	4b66      	ldr	r3, [pc, #408]	; (8005be4 <xProcessCommandTask+0x334>)
	HAL_UART_Transmit(&huart1, (uint8_t*)message, messageLength, 0xFFFF);
 8005a4a:	4964      	ldr	r1, [pc, #400]	; (8005bdc <xProcessCommandTask+0x32c>)
	messageLength = sprintf(message, "compens off\n");
 8005a4c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*)message, messageLength, 0xFFFF);
 8005a4e:	4866      	ldr	r0, [pc, #408]	; (8005be8 <xProcessCommandTask+0x338>)
 8005a50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005a54:	f7fd fc72 	bl	800333c <HAL_UART_Transmit>
							pressureCompensation = OFF;
 8005a58:	4b64      	ldr	r3, [pc, #400]	; (8005bec <xProcessCommandTask+0x33c>)
 8005a5a:	701c      	strb	r4, [r3, #0]
 8005a5c:	e73f      	b.n	80058de <xProcessCommandTask+0x2e>
					else if (command[1] == ','){
 8005a5e:	2b2c      	cmp	r3, #44	; 0x2c
 8005a60:	f47f af3d 	bne.w	80058de <xProcessCommandTask+0x2e>
						sscanf((char*)command, "s,%hu,%hu,%hu,%hu,%hu,%c,\n", &id, 	&nessPressure[0],
 8005a64:	f10d 0313 	add.w	r3, sp, #19
 8005a68:	9303      	str	r3, [sp, #12]
 8005a6a:	4b65      	ldr	r3, [pc, #404]	; (8005c00 <xProcessCommandTask+0x350>)
 8005a6c:	aa05      	add	r2, sp, #20
 8005a6e:	1e9f      	subs	r7, r3, #2
 8005a70:	9301      	str	r3, [sp, #4]
 8005a72:	f8cd a008 	str.w	sl, [sp, #8]
 8005a76:	3b04      	subs	r3, #4
 8005a78:	9700      	str	r7, [sp, #0]
 8005a7a:	4962      	ldr	r1, [pc, #392]	; (8005c04 <xProcessCommandTask+0x354>)
 8005a7c:	a806      	add	r0, sp, #24
 8005a7e:	f000 ff5d 	bl	800693c <siscanf>
						if (id == server_UID){
 8005a82:	4b53      	ldr	r3, [pc, #332]	; (8005bd0 <xProcessCommandTask+0x320>)
 8005a84:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8005a88:	881b      	ldrh	r3, [r3, #0]
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	f47f af27 	bne.w	80058de <xProcessCommandTask+0x2e>
							if (systemType == '1'){ // air system choice
 8005a90:	f89d 3013 	ldrb.w	r3, [sp, #19]
									pressIsLower[i] = 0;
 8005a94:	4620      	mov	r0, r4
								airSystem = COMPRESSOR; // for compressor
 8005a96:	2b31      	cmp	r3, #49	; 0x31
 8005a98:	bf14      	ite	ne
 8005a9a:	4632      	movne	r2, r6
 8005a9c:	4622      	moveq	r2, r4
 8005a9e:	4b5a      	ldr	r3, [pc, #360]	; (8005c08 <xProcessCommandTask+0x358>)
								if (filteredData[i] > nessPressure[i])
 8005aa0:	f8df e130 	ldr.w	lr, [pc, #304]	; 8005bd4 <xProcessCommandTask+0x324>
 8005aa4:	4959      	ldr	r1, [pc, #356]	; (8005c0c <xProcessCommandTask+0x35c>)
								airSystem = COMPRESSOR; // for compressor
 8005aa6:	701a      	strb	r2, [r3, #0]
								if (filteredData[i] > nessPressure[i])
 8005aa8:	3f02      	subs	r7, #2
 8005aaa:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
 8005aae:	f83e 2014 	ldrh.w	r2, [lr, r4, lsl #1]
 8005ab2:	429a      	cmp	r2, r3
									pressIsLower[i] = 0;
 8005ab4:	bf94      	ite	ls
 8005ab6:	4633      	movls	r3, r6
 8005ab8:	4603      	movhi	r3, r0
 8005aba:	550b      	strb	r3, [r1, r4]
 8005abc:	3401      	adds	r4, #1
							for (i = 0; i < 4; i++){
 8005abe:	2c04      	cmp	r4, #4
 8005ac0:	d1f3      	bne.n	8005aaa <xProcessCommandTask+0x1fa>
							pressureCompensation = ON;
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	4b49      	ldr	r3, [pc, #292]	; (8005bec <xProcessCommandTask+0x33c>)
 8005ac6:	701a      	strb	r2, [r3, #0]
 8005ac8:	e709      	b.n	80058de <xProcessCommandTask+0x2e>
					if (indicationState == SEARCH){
 8005aca:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 8005bc8 <xProcessCommandTask+0x318>
 8005ace:	f898 3000 	ldrb.w	r3, [r8]
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	f47f af03 	bne.w	80058de <xProcessCommandTask+0x2e>
						if (command[1] == '?'){
 8005ad8:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8005adc:	2b3f      	cmp	r3, #63	; 0x3f
 8005ade:	d114      	bne.n	8005b0a <xProcessCommandTask+0x25a>
							sscanf((char*)command, "x?%hu,\n", &controllerSettings.clientID);
 8005ae0:	4a4b      	ldr	r2, [pc, #300]	; (8005c10 <xProcessCommandTask+0x360>)
 8005ae2:	494c      	ldr	r1, [pc, #304]	; (8005c14 <xProcessCommandTask+0x364>)
 8005ae4:	a806      	add	r0, sp, #24
 8005ae6:	f000 ff29 	bl	800693c <siscanf>
							messageLength = sprintf(message, "x,%05d,%05d,\n", controllerSettings.clientID, server_UID);
 8005aea:	4b39      	ldr	r3, [pc, #228]	; (8005bd0 <xProcessCommandTask+0x320>)
 8005aec:	4a3a      	ldr	r2, [pc, #232]	; (8005bd8 <xProcessCommandTask+0x328>)
 8005aee:	881b      	ldrh	r3, [r3, #0]
 8005af0:	8892      	ldrh	r2, [r2, #4]
 8005af2:	4949      	ldr	r1, [pc, #292]	; (8005c18 <xProcessCommandTask+0x368>)
 8005af4:	4839      	ldr	r0, [pc, #228]	; (8005bdc <xProcessCommandTask+0x32c>)
 8005af6:	f000 fefd 	bl	80068f4 <siprintf>
 8005afa:	4b3a      	ldr	r3, [pc, #232]	; (8005be4 <xProcessCommandTask+0x334>)
 8005afc:	b2c2      	uxtb	r2, r0
							HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);
 8005afe:	4937      	ldr	r1, [pc, #220]	; (8005bdc <xProcessCommandTask+0x32c>)
 8005b00:	4839      	ldr	r0, [pc, #228]	; (8005be8 <xProcessCommandTask+0x338>)
							messageLength = sprintf(message, "x,%05d,%05d,\n", controllerSettings.clientID, server_UID);
 8005b02:	701a      	strb	r2, [r3, #0]
							HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);
 8005b04:	f7fd fc9e 	bl	8003444 <HAL_UART_Transmit_DMA>
 8005b08:	e6e9      	b.n	80058de <xProcessCommandTask+0x2e>
						else if (command[1] == 'c'){
 8005b0a:	2b63      	cmp	r3, #99	; 0x63
 8005b0c:	f47f aee7 	bne.w	80058de <xProcessCommandTask+0x2e>
							sscanf((char*)command, "xc,%hu,%hu,\n", &id, &channel);
 8005b10:	f10d 0316 	add.w	r3, sp, #22
 8005b14:	aa05      	add	r2, sp, #20
 8005b16:	4941      	ldr	r1, [pc, #260]	; (8005c1c <xProcessCommandTask+0x36c>)
 8005b18:	a806      	add	r0, sp, #24
 8005b1a:	f000 ff0f 	bl	800693c <siscanf>
							messageLength = sprintf(message, "id,%05d,%05d,%03d\n", id, server_UID, channel);
 8005b1e:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 8005bd0 <xProcessCommandTask+0x320>
 8005b22:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8005b26:	f8bb 3000 	ldrh.w	r3, [fp]
 8005b2a:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8005b2e:	9100      	str	r1, [sp, #0]
 8005b30:	482a      	ldr	r0, [pc, #168]	; (8005bdc <xProcessCommandTask+0x32c>)
 8005b32:	493b      	ldr	r1, [pc, #236]	; (8005c20 <xProcessCommandTask+0x370>)
 8005b34:	f000 fede 	bl	80068f4 <siprintf>
 8005b38:	4f2a      	ldr	r7, [pc, #168]	; (8005be4 <xProcessCommandTask+0x334>)
 8005b3a:	7038      	strb	r0, [r7, #0]
							print_debug(message);
 8005b3c:	4827      	ldr	r0, [pc, #156]	; (8005bdc <xProcessCommandTask+0x32c>)
 8005b3e:	f7ff fc41 	bl	80053c4 <print_debug>
							if (id == server_UID){
 8005b42:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8005b46:	f8bb 3000 	ldrh.w	r3, [fp]
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	f47f aec7 	bne.w	80058de <xProcessCommandTask+0x2e>
								controllerSettings.rfChannel = channel;
 8005b50:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8005b54:	f8df b080 	ldr.w	fp, [pc, #128]	; 8005bd8 <xProcessCommandTask+0x328>
 8005b58:	f88b 3000 	strb.w	r3, [fp]
								mWrite_flash();
 8005b5c:	f7ff fca0 	bl	80054a0 <mWrite_flash>
								messageLength = sprintf(message, "xc,%05d,ok,\n", controllerSettings.clientID);
 8005b60:	f8bb 2004 	ldrh.w	r2, [fp, #4]
 8005b64:	492f      	ldr	r1, [pc, #188]	; (8005c24 <xProcessCommandTask+0x374>)
 8005b66:	481d      	ldr	r0, [pc, #116]	; (8005bdc <xProcessCommandTask+0x32c>)
 8005b68:	f000 fec4 	bl	80068f4 <siprintf>
								HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);
 8005b6c:	491b      	ldr	r1, [pc, #108]	; (8005bdc <xProcessCommandTask+0x32c>)
								messageLength = sprintf(message, "xc,%05d,ok,\n", controllerSettings.clientID);
 8005b6e:	b2c2      	uxtb	r2, r0
								HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);
 8005b70:	481d      	ldr	r0, [pc, #116]	; (8005be8 <xProcessCommandTask+0x338>)
								messageLength = sprintf(message, "xc,%05d,ok,\n", controllerSettings.clientID);
 8005b72:	703a      	strb	r2, [r7, #0]
								HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);
 8005b74:	f7fd fc66 	bl	8003444 <HAL_UART_Transmit_DMA>
								vTaskDelay(200 / portTICK_RATE_MS);
 8005b78:	20c8      	movs	r0, #200	; 0xc8
 8005b7a:	f7fe fd99 	bl	80046b0 <vTaskDelay>
								CMD_RF_ON;
 8005b7e:	4622      	mov	r2, r4
 8005b80:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005b84:	4648      	mov	r0, r9
 8005b86:	f7fc fbd5 	bl	8002334 <HAL_GPIO_WritePin>
								vTaskDelay(50 / portTICK_RATE_MS);
 8005b8a:	2032      	movs	r0, #50	; 0x32
 8005b8c:	f7fe fd90 	bl	80046b0 <vTaskDelay>

								messageLength = sprintf(message, "AT+C%03d\r", channel);
 8005b90:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8005b94:	4924      	ldr	r1, [pc, #144]	; (8005c28 <xProcessCommandTask+0x378>)
 8005b96:	4811      	ldr	r0, [pc, #68]	; (8005bdc <xProcessCommandTask+0x32c>)
 8005b98:	f000 feac 	bl	80068f4 <siprintf>
								HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);
 8005b9c:	490f      	ldr	r1, [pc, #60]	; (8005bdc <xProcessCommandTask+0x32c>)
								messageLength = sprintf(message, "AT+C%03d\r", channel);
 8005b9e:	b2c2      	uxtb	r2, r0
								HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);
 8005ba0:	4811      	ldr	r0, [pc, #68]	; (8005be8 <xProcessCommandTask+0x338>)
								messageLength = sprintf(message, "AT+C%03d\r", channel);
 8005ba2:	703a      	strb	r2, [r7, #0]
								HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);
 8005ba4:	f7fd fc4e 	bl	8003444 <HAL_UART_Transmit_DMA>

								vTaskDelay(50 / portTICK_RATE_MS);
 8005ba8:	2032      	movs	r0, #50	; 0x32
 8005baa:	f7fe fd81 	bl	80046b0 <vTaskDelay>
								CMD_RF_OFF;
 8005bae:	4632      	mov	r2, r6
 8005bb0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005bb4:	4648      	mov	r0, r9
 8005bb6:	f7fc fbbd 	bl	8002334 <HAL_GPIO_WritePin>

								indicationState = NORMAL_C;
 8005bba:	f888 4000 	strb.w	r4, [r8]
 8005bbe:	e68e      	b.n	80058de <xProcessCommandTask+0x2e>
 8005bc0:	20005490 	.word	0x20005490
 8005bc4:	200051b0 	.word	0x200051b0
 8005bc8:	2000000c 	.word	0x2000000c
 8005bcc:	08008cf7 	.word	0x08008cf7
 8005bd0:	200052c4 	.word	0x200052c4
 8005bd4:	20005230 	.word	0x20005230
 8005bd8:	20005204 	.word	0x20005204
 8005bdc:	20005238 	.word	0x20005238
 8005be0:	08008d05 	.word	0x08008d05
 8005be4:	200052b8 	.word	0x200052b8
 8005be8:	20005444 	.word	0x20005444
 8005bec:	200052c2 	.word	0x200052c2
 8005bf0:	40010c00 	.word	0x40010c00
 8005bf4:	40011400 	.word	0x40011400
 8005bf8:	08008d1d 	.word	0x08008d1d
 8005bfc:	08008d26 	.word	0x08008d26
 8005c00:	200052be 	.word	0x200052be
 8005c04:	08008d33 	.word	0x08008d33
 8005c08:	20005201 	.word	0x20005201
 8005c0c:	200052c7 	.word	0x200052c7
 8005c10:	20005208 	.word	0x20005208
 8005c14:	08008d4e 	.word	0x08008d4e
 8005c18:	08008d56 	.word	0x08008d56
 8005c1c:	08008d64 	.word	0x08008d64
 8005c20:	08008d71 	.word	0x08008d71
 8005c24:	08008d84 	.word	0x08008d84
 8005c28:	08008c9f 	.word	0x08008c9f
 8005c2c:	200052c0 	.word	0x200052c0
 8005c30:	40010800 	.word	0x40010800

08005c34 <xScanInputTask>:
#include "controllerUtils.h"

extern UART_HandleTypeDef huart1;
extern enum IndicationState indicationState;

void xScanInputTask(void* arguments){
 8005c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t prevInputState = 1;
 8005c38:	2501      	movs	r5, #1
	uint8_t curInputState = 1;

	for(;;){
		curInputState = HAL_GPIO_ReadPin(HALL_SENS_PORT, HALL_SENS_PIN);
 8005c3a:	4e1c      	ldr	r6, [pc, #112]	; (8005cac <xScanInputTask+0x78>)
			if (curInputState != prevInputState){
				prevInputState = curInputState;
				if (!prevInputState){
					//Change indication to searching
					//HAL_GPIO_WritePin(A_LED_PORT, A_LED_PIN, GPIO_PIN_SET);
					indicationState = SEARCH;
 8005c3c:	4f1c      	ldr	r7, [pc, #112]	; (8005cb0 <xScanInputTask+0x7c>)
					//Change channel
					//rf433_set_channel_1();
					CMD_RF_ON;
					vTaskDelay(50 / portTICK_RATE_MS);

					HAL_UART_Transmit(&huart1, (uint8_t*) "AT+C001\r", 8, 0x2000);
 8005c3e:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8005cb8 <xScanInputTask+0x84>
		curInputState = HAL_GPIO_ReadPin(HALL_SENS_PORT, HALL_SENS_PIN);
 8005c42:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005c46:	4819      	ldr	r0, [pc, #100]	; (8005cac <xScanInputTask+0x78>)
 8005c48:	f7fc fb6e 	bl	8002328 <HAL_GPIO_ReadPin>
		if (curInputState != prevInputState){
 8005c4c:	4285      	cmp	r5, r0
		curInputState = HAL_GPIO_ReadPin(HALL_SENS_PORT, HALL_SENS_PIN);
 8005c4e:	4604      	mov	r4, r0
		if (curInputState != prevInputState){
 8005c50:	d026      	beq.n	8005ca0 <xScanInputTask+0x6c>
			vTaskDelay(1 / portTICK_RATE_MS);
 8005c52:	2001      	movs	r0, #1
 8005c54:	f7fe fd2c 	bl	80046b0 <vTaskDelay>
			curInputState = HAL_GPIO_ReadPin(HALL_SENS_PORT, HALL_SENS_PIN);
 8005c58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005c5c:	4630      	mov	r0, r6
 8005c5e:	f7fc fb63 	bl	8002328 <HAL_GPIO_ReadPin>
			if (curInputState != prevInputState){
 8005c62:	4285      	cmp	r5, r0
			curInputState = HAL_GPIO_ReadPin(HALL_SENS_PORT, HALL_SENS_PIN);
 8005c64:	4604      	mov	r4, r0
			if (curInputState != prevInputState){
 8005c66:	d01b      	beq.n	8005ca0 <xScanInputTask+0x6c>
				if (!prevInputState){
 8005c68:	b9d0      	cbnz	r0, 8005ca0 <xScanInputTask+0x6c>
					indicationState = SEARCH;
 8005c6a:	2302      	movs	r3, #2
					CMD_RF_ON;
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005c72:	4630      	mov	r0, r6
					indicationState = SEARCH;
 8005c74:	703b      	strb	r3, [r7, #0]
					CMD_RF_ON;
 8005c76:	f7fc fb5d 	bl	8002334 <HAL_GPIO_WritePin>
					vTaskDelay(50 / portTICK_RATE_MS);
 8005c7a:	2032      	movs	r0, #50	; 0x32
 8005c7c:	f7fe fd18 	bl	80046b0 <vTaskDelay>
					HAL_UART_Transmit(&huart1, (uint8_t*) "AT+C001\r", 8, 0x2000);
 8005c80:	2208      	movs	r2, #8
 8005c82:	4641      	mov	r1, r8
 8005c84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005c88:	480a      	ldr	r0, [pc, #40]	; (8005cb4 <xScanInputTask+0x80>)
 8005c8a:	f7fd fb57 	bl	800333c <HAL_UART_Transmit>

					vTaskDelay(50 / portTICK_RATE_MS);
 8005c8e:	2032      	movs	r0, #50	; 0x32
 8005c90:	f7fe fd0e 	bl	80046b0 <vTaskDelay>
					CMD_RF_OFF;
 8005c94:	2201      	movs	r2, #1
 8005c96:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005c9a:	4630      	mov	r0, r6
 8005c9c:	f7fc fb4a 	bl	8002334 <HAL_GPIO_WritePin>
				}
			}
		}

		vTaskDelay(10 / portTICK_RATE_MS);
 8005ca0:	200a      	movs	r0, #10
 8005ca2:	f7fe fd05 	bl	80046b0 <vTaskDelay>
		curInputState = HAL_GPIO_ReadPin(HALL_SENS_PORT, HALL_SENS_PIN);
 8005ca6:	4625      	mov	r5, r4
 8005ca8:	e7cb      	b.n	8005c42 <xScanInputTask+0xe>
 8005caa:	bf00      	nop
 8005cac:	40010800 	.word	0x40010800
 8005cb0:	2000000c 	.word	0x2000000c
 8005cb4:	20005444 	.word	0x20005444
 8005cb8:	08008d91 	.word	0x08008d91

08005cbc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005cbc:	4b11      	ldr	r3, [pc, #68]	; (8005d04 <HAL_MspInit+0x48>)
{
 8005cbe:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8005cc0:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005cc2:	210f      	movs	r1, #15
  __HAL_RCC_AFIO_CLK_ENABLE();
 8005cc4:	f042 0201 	orr.w	r2, r2, #1
 8005cc8:	619a      	str	r2, [r3, #24]
 8005cca:	699a      	ldr	r2, [r3, #24]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005ccc:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_AFIO_CLK_ENABLE();
 8005cd0:	f002 0201 	and.w	r2, r2, #1
 8005cd4:	9200      	str	r2, [sp, #0]
 8005cd6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005cd8:	69da      	ldr	r2, [r3, #28]
 8005cda:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005cde:	61da      	str	r2, [r3, #28]
 8005ce0:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005ce2:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 8005ce4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ce8:	9301      	str	r3, [sp, #4]
 8005cea:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005cec:	f7fb fef8 	bl	8001ae0 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005cf0:	4a05      	ldr	r2, [pc, #20]	; (8005d08 <HAL_MspInit+0x4c>)
 8005cf2:	6853      	ldr	r3, [r2, #4]
 8005cf4:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005cf8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005cfc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005cfe:	b003      	add	sp, #12
 8005d00:	f85d fb04 	ldr.w	pc, [sp], #4
 8005d04:	40021000 	.word	0x40021000
 8005d08:	40010000 	.word	0x40010000

08005d0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005d0c:	b510      	push	{r4, lr}
 8005d0e:	4604      	mov	r4, r0
 8005d10:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d12:	2210      	movs	r2, #16
 8005d14:	2100      	movs	r1, #0
 8005d16:	a802      	add	r0, sp, #8
 8005d18:	f000 f983 	bl	8006022 <memset>
  if(hadc->Instance==ADC1)
 8005d1c:	6822      	ldr	r2, [r4, #0]
 8005d1e:	4b14      	ldr	r3, [pc, #80]	; (8005d70 <HAL_ADC_MspInit+0x64>)
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d123      	bne.n	8005d6c <HAL_ADC_MspInit+0x60>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005d24:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8005d28:	699a      	ldr	r2, [r3, #24]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d2a:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005d2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d30:	619a      	str	r2, [r3, #24]
 8005d32:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d34:	480f      	ldr	r0, [pc, #60]	; (8005d74 <HAL_ADC_MspInit+0x68>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005d36:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8005d3a:	9200      	str	r2, [sp, #0]
 8005d3c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d3e:	699a      	ldr	r2, [r3, #24]
 8005d40:	f042 0204 	orr.w	r2, r2, #4
 8005d44:	619a      	str	r2, [r3, #24]
 8005d46:	699b      	ldr	r3, [r3, #24]
 8005d48:	f003 0304 	and.w	r3, r3, #4
 8005d4c:	9301      	str	r3, [sp, #4]
 8005d4e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8005d50:	230f      	movs	r3, #15
 8005d52:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005d54:	2303      	movs	r3, #3
 8005d56:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d58:	f7fc fa06 	bl	8002168 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8005d5c:	2012      	movs	r0, #18
 8005d5e:	2200      	movs	r2, #0
 8005d60:	2105      	movs	r1, #5
 8005d62:	f7fb febd 	bl	8001ae0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8005d66:	2012      	movs	r0, #18
 8005d68:	f7fb feee 	bl	8001b48 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8005d6c:	b006      	add	sp, #24
 8005d6e:	bd10      	pop	{r4, pc}
 8005d70:	40012400 	.word	0x40012400
 8005d74:	40010800 	.word	0x40010800

08005d78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005d78:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM3)
 8005d7a:	4b0d      	ldr	r3, [pc, #52]	; (8005db0 <HAL_TIM_Base_MspInit+0x38>)
 8005d7c:	6802      	ldr	r2, [r0, #0]
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d112      	bne.n	8005da8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005d82:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 8005d86:	69da      	ldr	r2, [r3, #28]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8005d88:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005d8a:	f042 0202 	orr.w	r2, r2, #2
 8005d8e:	61da      	str	r2, [r3, #28]
 8005d90:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8005d92:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005d94:	f003 0302 	and.w	r3, r3, #2
 8005d98:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8005d9a:	2105      	movs	r1, #5
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005d9c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8005d9e:	f7fb fe9f 	bl	8001ae0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005da2:	201d      	movs	r0, #29
 8005da4:	f7fb fed0 	bl	8001b48 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8005da8:	b003      	add	sp, #12
 8005daa:	f85d fb04 	ldr.w	pc, [sp], #4
 8005dae:	bf00      	nop
 8005db0:	40000400 	.word	0x40000400

08005db4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005db4:	b510      	push	{r4, lr}
 8005db6:	4604      	mov	r4, r0
 8005db8:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005dba:	2210      	movs	r2, #16
 8005dbc:	2100      	movs	r1, #0
 8005dbe:	a802      	add	r0, sp, #8
 8005dc0:	f000 f92f 	bl	8006022 <memset>
  if(htim->Instance==TIM3)
 8005dc4:	6822      	ldr	r2, [r4, #0]
 8005dc6:	4b15      	ldr	r3, [pc, #84]	; (8005e1c <HAL_TIM_MspPostInit+0x68>)
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d124      	bne.n	8005e16 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005dcc:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 8005dd0:	699a      	ldr	r2, [r3, #24]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005dd2:	2402      	movs	r4, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005dd4:	f042 0204 	orr.w	r2, r2, #4
 8005dd8:	619a      	str	r2, [r3, #24]
 8005dda:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ddc:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005dde:	f002 0204 	and.w	r2, r2, #4
 8005de2:	9200      	str	r2, [sp, #0]
 8005de4:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005de6:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005de8:	480d      	ldr	r0, [pc, #52]	; (8005e20 <HAL_TIM_MspPostInit+0x6c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005dea:	f042 0208 	orr.w	r2, r2, #8
 8005dee:	619a      	str	r2, [r3, #24]
 8005df0:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005df2:	9403      	str	r4, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005df4:	f003 0308 	and.w	r3, r3, #8
 8005df8:	9301      	str	r3, [sp, #4]
 8005dfa:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005dfc:	23c0      	movs	r3, #192	; 0xc0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005dfe:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005e00:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e02:	f7fc f9b1 	bl	8002168 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005e06:	2301      	movs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005e08:	a902      	add	r1, sp, #8
 8005e0a:	4806      	ldr	r0, [pc, #24]	; (8005e24 <HAL_TIM_MspPostInit+0x70>)
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005e0c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e0e:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e10:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005e12:	f7fc f9a9 	bl	8002168 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8005e16:	b006      	add	sp, #24
 8005e18:	bd10      	pop	{r4, pc}
 8005e1a:	bf00      	nop
 8005e1c:	40000400 	.word	0x40000400
 8005e20:	40010800 	.word	0x40010800
 8005e24:	40010c00 	.word	0x40010c00

08005e28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005e28:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e2a:	2710      	movs	r7, #16
{
 8005e2c:	4606      	mov	r6, r0
 8005e2e:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e30:	463a      	mov	r2, r7
 8005e32:	2100      	movs	r1, #0
 8005e34:	a802      	add	r0, sp, #8
 8005e36:	f000 f8f4 	bl	8006022 <memset>
  if(huart->Instance==USART1)
 8005e3a:	6832      	ldr	r2, [r6, #0]
 8005e3c:	4b24      	ldr	r3, [pc, #144]	; (8005ed0 <HAL_UART_MspInit+0xa8>)
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d143      	bne.n	8005eca <HAL_UART_MspInit+0xa2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005e42:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8005e46:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e48:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8005e4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e4e:	619a      	str	r2, [r3, #24]
 8005e50:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e52:	4820      	ldr	r0, [pc, #128]	; (8005ed4 <HAL_UART_MspInit+0xac>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8005e54:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8005e58:	9200      	str	r2, [sp, #0]
 8005e5a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e5c:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005e5e:	2500      	movs	r5, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e60:	f042 0204 	orr.w	r2, r2, #4
 8005e64:	619a      	str	r2, [r3, #24]
 8005e66:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8005e68:	4c1b      	ldr	r4, [pc, #108]	; (8005ed8 <HAL_UART_MspInit+0xb0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e6a:	f003 0304 	and.w	r3, r3, #4
 8005e6e:	9301      	str	r3, [sp, #4]
 8005e70:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005e72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e76:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e78:	2302      	movs	r3, #2
 8005e7a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005e7c:	2303      	movs	r3, #3
 8005e7e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e80:	f7fc f972 	bl	8002168 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005e84:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e88:	4812      	ldr	r0, [pc, #72]	; (8005ed4 <HAL_UART_MspInit+0xac>)
 8005e8a:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005e8c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005e8e:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e90:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e92:	f7fc f969 	bl	8002168 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8005e96:	4b11      	ldr	r3, [pc, #68]	; (8005edc <HAL_UART_MspInit+0xb4>)
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8005e98:	4620      	mov	r0, r4
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005e9a:	e884 0088 	stmia.w	r4, {r3, r7}
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005e9e:	2380      	movs	r3, #128	; 0x80
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005ea0:	60a5      	str	r5, [r4, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005ea2:	60e3      	str	r3, [r4, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005ea4:	6125      	str	r5, [r4, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005ea6:	6165      	str	r5, [r4, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8005ea8:	61a5      	str	r5, [r4, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005eaa:	61e5      	str	r5, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8005eac:	f7fb fe6e 	bl	8001b8c <HAL_DMA_Init>
 8005eb0:	b108      	cbz	r0, 8005eb6 <HAL_UART_MspInit+0x8e>
    {
      Error_Handler();
 8005eb2:	f7ff fcfb 	bl	80058ac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8005eb6:	2025      	movs	r0, #37	; 0x25
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8005eb8:	6334      	str	r4, [r6, #48]	; 0x30
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8005eba:	2200      	movs	r2, #0
 8005ebc:	2105      	movs	r1, #5
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8005ebe:	6266      	str	r6, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8005ec0:	f7fb fe0e 	bl	8001ae0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005ec4:	2025      	movs	r0, #37	; 0x25
 8005ec6:	f7fb fe3f 	bl	8001b48 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8005eca:	b007      	add	sp, #28
 8005ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ece:	bf00      	nop
 8005ed0:	40013800 	.word	0x40013800
 8005ed4:	40010800 	.word	0x40010800
 8005ed8:	200053d0 	.word	0x200053d0
 8005edc:	40020044 	.word	0x40020044

08005ee0 <NMI_Handler>:
 8005ee0:	4770      	bx	lr

08005ee2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005ee2:	e7fe      	b.n	8005ee2 <HardFault_Handler>

08005ee4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005ee4:	e7fe      	b.n	8005ee4 <MemManage_Handler>

08005ee6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005ee6:	e7fe      	b.n	8005ee6 <BusFault_Handler>

08005ee8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005ee8:	e7fe      	b.n	8005ee8 <UsageFault_Handler>

08005eea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005eea:	4770      	bx	lr

08005eec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005eec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005eee:	f7fb fa85 	bl	80013fc <HAL_IncTick>
  osSystickHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005ef2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  osSystickHandler();
 8005ef6:	f7fd bc10 	b.w	800371a <osSystickHandler>
	...

08005efc <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8005efc:	4801      	ldr	r0, [pc, #4]	; (8005f04 <DMA1_Channel4_IRQHandler+0x8>)
 8005efe:	f7fb bf31 	b.w	8001d64 <HAL_DMA_IRQHandler>
 8005f02:	bf00      	nop
 8005f04:	200053d0 	.word	0x200053d0

08005f08 <ADC1_2_IRQHandler>:
void ADC1_2_IRQHandler(void)
{
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8005f08:	4801      	ldr	r0, [pc, #4]	; (8005f10 <ADC1_2_IRQHandler+0x8>)
 8005f0a:	f7fb baad 	b.w	8001468 <HAL_ADC_IRQHandler>
 8005f0e:	bf00      	nop
 8005f10:	20005414 	.word	0x20005414

08005f14 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005f14:	4801      	ldr	r0, [pc, #4]	; (8005f1c <TIM3_IRQHandler+0x8>)
 8005f16:	f7fc bf24 	b.w	8002d62 <HAL_TIM_IRQHandler>
 8005f1a:	bf00      	nop
 8005f1c:	2000538c 	.word	0x2000538c

08005f20 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005f20:	4801      	ldr	r0, [pc, #4]	; (8005f28 <USART1_IRQHandler+0x8>)
 8005f22:	f7fd bb4d 	b.w	80035c0 <HAL_UART_IRQHandler>
 8005f26:	bf00      	nop
 8005f28:	20005444 	.word	0x20005444

08005f2c <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8005f2c:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005f2e:	4b0a      	ldr	r3, [pc, #40]	; (8005f58 <_sbrk+0x2c>)
{
 8005f30:	4602      	mov	r2, r0
	if (heap_end == 0)
 8005f32:	6819      	ldr	r1, [r3, #0]
 8005f34:	b909      	cbnz	r1, 8005f3a <_sbrk+0xe>
		heap_end = &end;
 8005f36:	4909      	ldr	r1, [pc, #36]	; (8005f5c <_sbrk+0x30>)
 8005f38:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8005f3a:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8005f3c:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8005f3e:	4402      	add	r2, r0
 8005f40:	428a      	cmp	r2, r1
 8005f42:	d906      	bls.n	8005f52 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8005f44:	f000 f85c 	bl	8006000 <__errno>
 8005f48:	230c      	movs	r3, #12
 8005f4a:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8005f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f50:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8005f52:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8005f54:	bd08      	pop	{r3, pc}
 8005f56:	bf00      	nop
 8005f58:	200052cc 	.word	0x200052cc
 8005f5c:	2000549c 	.word	0x2000549c

08005f60 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8005f60:	4b12      	ldr	r3, [pc, #72]	; (8005fac <SystemInit+0x4c>)
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	f042 0201 	orr.w	r2, r2, #1
 8005f68:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
#else
  RCC->CFGR &= 0xF0FF0000U;
 8005f6a:	6859      	ldr	r1, [r3, #4]
 8005f6c:	4a10      	ldr	r2, [pc, #64]	; (8005fb0 <SystemInit+0x50>)
 8005f6e:	400a      	ands	r2, r1
 8005f70:	605a      	str	r2, [r3, #4]
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8005f78:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005f7c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005f84:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8005f86:	685a      	ldr	r2, [r3, #4]
 8005f88:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8005f8c:	605a      	str	r2, [r3, #4]

#if defined(STM32F105xC) || defined(STM32F107xC)
  /* Reset PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEBFFFFFFU;
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	f022 52a0 	bic.w	r2, r2, #335544320	; 0x14000000
 8005f94:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x00FF0000U;
 8005f96:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8005f9a:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8005fa0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005fa4:	4b03      	ldr	r3, [pc, #12]	; (8005fb4 <SystemInit+0x54>)
 8005fa6:	609a      	str	r2, [r3, #8]
 8005fa8:	4770      	bx	lr
 8005faa:	bf00      	nop
 8005fac:	40021000 	.word	0x40021000
 8005fb0:	f0ff0000 	.word	0xf0ff0000
 8005fb4:	e000ed00 	.word	0xe000ed00

08005fb8 <Reset_Handler>:
 8005fb8:	2100      	movs	r1, #0
 8005fba:	e003      	b.n	8005fc4 <LoopCopyDataInit>

08005fbc <CopyDataInit>:
 8005fbc:	4b0a      	ldr	r3, [pc, #40]	; (8005fe8 <LoopFillZerobss+0x10>)
 8005fbe:	585b      	ldr	r3, [r3, r1]
 8005fc0:	5043      	str	r3, [r0, r1]
 8005fc2:	3104      	adds	r1, #4

08005fc4 <LoopCopyDataInit>:
 8005fc4:	4809      	ldr	r0, [pc, #36]	; (8005fec <LoopFillZerobss+0x14>)
 8005fc6:	4b0a      	ldr	r3, [pc, #40]	; (8005ff0 <LoopFillZerobss+0x18>)
 8005fc8:	1842      	adds	r2, r0, r1
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d3f6      	bcc.n	8005fbc <CopyDataInit>
 8005fce:	4a09      	ldr	r2, [pc, #36]	; (8005ff4 <LoopFillZerobss+0x1c>)
 8005fd0:	e002      	b.n	8005fd8 <LoopFillZerobss>

08005fd2 <FillZerobss>:
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	f842 3b04 	str.w	r3, [r2], #4

08005fd8 <LoopFillZerobss>:
 8005fd8:	4b07      	ldr	r3, [pc, #28]	; (8005ff8 <LoopFillZerobss+0x20>)
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d3f9      	bcc.n	8005fd2 <FillZerobss>
 8005fde:	f7ff ffbf 	bl	8005f60 <SystemInit>
 8005fe2:	f7ff faf3 	bl	80055cc <main>
 8005fe6:	4770      	bx	lr
 8005fe8:	0800909c 	.word	0x0800909c
 8005fec:	20000000 	.word	0x20000000
 8005ff0:	20000224 	.word	0x20000224
 8005ff4:	20000228 	.word	0x20000228
 8005ff8:	2000549c 	.word	0x2000549c

08005ffc <CAN1_RX0_IRQHandler>:
 8005ffc:	e7fe      	b.n	8005ffc <CAN1_RX0_IRQHandler>
	...

08006000 <__errno>:
 8006000:	4b01      	ldr	r3, [pc, #4]	; (8006008 <__errno+0x8>)
 8006002:	6818      	ldr	r0, [r3, #0]
 8006004:	4770      	bx	lr
 8006006:	bf00      	nop
 8006008:	20000054 	.word	0x20000054

0800600c <memcpy>:
 800600c:	b510      	push	{r4, lr}
 800600e:	1e43      	subs	r3, r0, #1
 8006010:	440a      	add	r2, r1
 8006012:	4291      	cmp	r1, r2
 8006014:	d100      	bne.n	8006018 <memcpy+0xc>
 8006016:	bd10      	pop	{r4, pc}
 8006018:	f811 4b01 	ldrb.w	r4, [r1], #1
 800601c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006020:	e7f7      	b.n	8006012 <memcpy+0x6>

08006022 <memset>:
 8006022:	4603      	mov	r3, r0
 8006024:	4402      	add	r2, r0
 8006026:	4293      	cmp	r3, r2
 8006028:	d100      	bne.n	800602c <memset+0xa>
 800602a:	4770      	bx	lr
 800602c:	f803 1b01 	strb.w	r1, [r3], #1
 8006030:	e7f9      	b.n	8006026 <memset+0x4>

08006032 <__cvt>:
 8006032:	2b00      	cmp	r3, #0
 8006034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006038:	461e      	mov	r6, r3
 800603a:	bfbb      	ittet	lt
 800603c:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006040:	461e      	movlt	r6, r3
 8006042:	2300      	movge	r3, #0
 8006044:	232d      	movlt	r3, #45	; 0x2d
 8006046:	b088      	sub	sp, #32
 8006048:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800604a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800604c:	f027 0720 	bic.w	r7, r7, #32
 8006050:	2f46      	cmp	r7, #70	; 0x46
 8006052:	4614      	mov	r4, r2
 8006054:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006056:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800605a:	700b      	strb	r3, [r1, #0]
 800605c:	d004      	beq.n	8006068 <__cvt+0x36>
 800605e:	2f45      	cmp	r7, #69	; 0x45
 8006060:	d100      	bne.n	8006064 <__cvt+0x32>
 8006062:	3501      	adds	r5, #1
 8006064:	2302      	movs	r3, #2
 8006066:	e000      	b.n	800606a <__cvt+0x38>
 8006068:	2303      	movs	r3, #3
 800606a:	aa07      	add	r2, sp, #28
 800606c:	9204      	str	r2, [sp, #16]
 800606e:	aa06      	add	r2, sp, #24
 8006070:	9203      	str	r2, [sp, #12]
 8006072:	e88d 0428 	stmia.w	sp, {r3, r5, sl}
 8006076:	4622      	mov	r2, r4
 8006078:	4633      	mov	r3, r6
 800607a:	f000 fd21 	bl	8006ac0 <_dtoa_r>
 800607e:	2f47      	cmp	r7, #71	; 0x47
 8006080:	4680      	mov	r8, r0
 8006082:	d102      	bne.n	800608a <__cvt+0x58>
 8006084:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006086:	07db      	lsls	r3, r3, #31
 8006088:	d526      	bpl.n	80060d8 <__cvt+0xa6>
 800608a:	2f46      	cmp	r7, #70	; 0x46
 800608c:	eb08 0905 	add.w	r9, r8, r5
 8006090:	d111      	bne.n	80060b6 <__cvt+0x84>
 8006092:	f898 3000 	ldrb.w	r3, [r8]
 8006096:	2b30      	cmp	r3, #48	; 0x30
 8006098:	d10a      	bne.n	80060b0 <__cvt+0x7e>
 800609a:	2200      	movs	r2, #0
 800609c:	2300      	movs	r3, #0
 800609e:	4620      	mov	r0, r4
 80060a0:	4631      	mov	r1, r6
 80060a2:	f7fa fcf9 	bl	8000a98 <__aeabi_dcmpeq>
 80060a6:	b918      	cbnz	r0, 80060b0 <__cvt+0x7e>
 80060a8:	f1c5 0501 	rsb	r5, r5, #1
 80060ac:	f8ca 5000 	str.w	r5, [sl]
 80060b0:	f8da 3000 	ldr.w	r3, [sl]
 80060b4:	4499      	add	r9, r3
 80060b6:	2200      	movs	r2, #0
 80060b8:	2300      	movs	r3, #0
 80060ba:	4620      	mov	r0, r4
 80060bc:	4631      	mov	r1, r6
 80060be:	f7fa fceb 	bl	8000a98 <__aeabi_dcmpeq>
 80060c2:	b938      	cbnz	r0, 80060d4 <__cvt+0xa2>
 80060c4:	2230      	movs	r2, #48	; 0x30
 80060c6:	9b07      	ldr	r3, [sp, #28]
 80060c8:	4599      	cmp	r9, r3
 80060ca:	d905      	bls.n	80060d8 <__cvt+0xa6>
 80060cc:	1c59      	adds	r1, r3, #1
 80060ce:	9107      	str	r1, [sp, #28]
 80060d0:	701a      	strb	r2, [r3, #0]
 80060d2:	e7f8      	b.n	80060c6 <__cvt+0x94>
 80060d4:	f8cd 901c 	str.w	r9, [sp, #28]
 80060d8:	4640      	mov	r0, r8
 80060da:	9b07      	ldr	r3, [sp, #28]
 80060dc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80060de:	eba3 0308 	sub.w	r3, r3, r8
 80060e2:	6013      	str	r3, [r2, #0]
 80060e4:	b008      	add	sp, #32
 80060e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080060ea <__exponent>:
 80060ea:	4603      	mov	r3, r0
 80060ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80060ee:	2900      	cmp	r1, #0
 80060f0:	f803 2b02 	strb.w	r2, [r3], #2
 80060f4:	bfb6      	itet	lt
 80060f6:	222d      	movlt	r2, #45	; 0x2d
 80060f8:	222b      	movge	r2, #43	; 0x2b
 80060fa:	4249      	neglt	r1, r1
 80060fc:	2909      	cmp	r1, #9
 80060fe:	7042      	strb	r2, [r0, #1]
 8006100:	dd21      	ble.n	8006146 <__exponent+0x5c>
 8006102:	f10d 0207 	add.w	r2, sp, #7
 8006106:	4617      	mov	r7, r2
 8006108:	260a      	movs	r6, #10
 800610a:	fb91 f5f6 	sdiv	r5, r1, r6
 800610e:	fb06 1115 	mls	r1, r6, r5, r1
 8006112:	2d09      	cmp	r5, #9
 8006114:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8006118:	f802 1c01 	strb.w	r1, [r2, #-1]
 800611c:	f102 34ff 	add.w	r4, r2, #4294967295
 8006120:	4629      	mov	r1, r5
 8006122:	dc09      	bgt.n	8006138 <__exponent+0x4e>
 8006124:	3130      	adds	r1, #48	; 0x30
 8006126:	3a02      	subs	r2, #2
 8006128:	f804 1c01 	strb.w	r1, [r4, #-1]
 800612c:	42ba      	cmp	r2, r7
 800612e:	461c      	mov	r4, r3
 8006130:	d304      	bcc.n	800613c <__exponent+0x52>
 8006132:	1a20      	subs	r0, r4, r0
 8006134:	b003      	add	sp, #12
 8006136:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006138:	4622      	mov	r2, r4
 800613a:	e7e6      	b.n	800610a <__exponent+0x20>
 800613c:	f812 1b01 	ldrb.w	r1, [r2], #1
 8006140:	f803 1b01 	strb.w	r1, [r3], #1
 8006144:	e7f2      	b.n	800612c <__exponent+0x42>
 8006146:	2230      	movs	r2, #48	; 0x30
 8006148:	461c      	mov	r4, r3
 800614a:	4411      	add	r1, r2
 800614c:	f804 2b02 	strb.w	r2, [r4], #2
 8006150:	7059      	strb	r1, [r3, #1]
 8006152:	e7ee      	b.n	8006132 <__exponent+0x48>

08006154 <_printf_float>:
 8006154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006158:	b091      	sub	sp, #68	; 0x44
 800615a:	460c      	mov	r4, r1
 800615c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800615e:	4693      	mov	fp, r2
 8006160:	461e      	mov	r6, r3
 8006162:	4605      	mov	r5, r0
 8006164:	f001 fa80 	bl	8007668 <_localeconv_r>
 8006168:	6803      	ldr	r3, [r0, #0]
 800616a:	4618      	mov	r0, r3
 800616c:	9309      	str	r3, [sp, #36]	; 0x24
 800616e:	f7fa f85f 	bl	8000230 <strlen>
 8006172:	2300      	movs	r3, #0
 8006174:	930e      	str	r3, [sp, #56]	; 0x38
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	900a      	str	r0, [sp, #40]	; 0x28
 800617a:	3307      	adds	r3, #7
 800617c:	f023 0307 	bic.w	r3, r3, #7
 8006180:	f103 0208 	add.w	r2, r3, #8
 8006184:	f894 8018 	ldrb.w	r8, [r4, #24]
 8006188:	f8d4 a000 	ldr.w	sl, [r4]
 800618c:	603a      	str	r2, [r7, #0]
 800618e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006192:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006196:	f8d4 904c 	ldr.w	r9, [r4, #76]	; 0x4c
 800619a:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 800619c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80061a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80061a2:	f04f 32ff 	mov.w	r2, #4294967295
 80061a6:	4ba6      	ldr	r3, [pc, #664]	; (8006440 <_printf_float+0x2ec>)
 80061a8:	4638      	mov	r0, r7
 80061aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80061ac:	f7fa fca6 	bl	8000afc <__aeabi_dcmpun>
 80061b0:	2800      	cmp	r0, #0
 80061b2:	f040 81f7 	bne.w	80065a4 <_printf_float+0x450>
 80061b6:	f04f 32ff 	mov.w	r2, #4294967295
 80061ba:	4ba1      	ldr	r3, [pc, #644]	; (8006440 <_printf_float+0x2ec>)
 80061bc:	4638      	mov	r0, r7
 80061be:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80061c0:	f7fa fc7e 	bl	8000ac0 <__aeabi_dcmple>
 80061c4:	2800      	cmp	r0, #0
 80061c6:	f040 81ed 	bne.w	80065a4 <_printf_float+0x450>
 80061ca:	2200      	movs	r2, #0
 80061cc:	2300      	movs	r3, #0
 80061ce:	4638      	mov	r0, r7
 80061d0:	4649      	mov	r1, r9
 80061d2:	f7fa fc6b 	bl	8000aac <__aeabi_dcmplt>
 80061d6:	b110      	cbz	r0, 80061de <_printf_float+0x8a>
 80061d8:	232d      	movs	r3, #45	; 0x2d
 80061da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061de:	4b99      	ldr	r3, [pc, #612]	; (8006444 <_printf_float+0x2f0>)
 80061e0:	4f99      	ldr	r7, [pc, #612]	; (8006448 <_printf_float+0x2f4>)
 80061e2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80061e6:	bf98      	it	ls
 80061e8:	461f      	movls	r7, r3
 80061ea:	2303      	movs	r3, #3
 80061ec:	f04f 0900 	mov.w	r9, #0
 80061f0:	6123      	str	r3, [r4, #16]
 80061f2:	f02a 0304 	bic.w	r3, sl, #4
 80061f6:	6023      	str	r3, [r4, #0]
 80061f8:	9600      	str	r6, [sp, #0]
 80061fa:	465b      	mov	r3, fp
 80061fc:	aa0f      	add	r2, sp, #60	; 0x3c
 80061fe:	4621      	mov	r1, r4
 8006200:	4628      	mov	r0, r5
 8006202:	f000 f9df 	bl	80065c4 <_printf_common>
 8006206:	3001      	adds	r0, #1
 8006208:	f040 809a 	bne.w	8006340 <_printf_float+0x1ec>
 800620c:	f04f 30ff 	mov.w	r0, #4294967295
 8006210:	b011      	add	sp, #68	; 0x44
 8006212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006216:	6862      	ldr	r2, [r4, #4]
 8006218:	a80e      	add	r0, sp, #56	; 0x38
 800621a:	1c53      	adds	r3, r2, #1
 800621c:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
 8006220:	f44a 6380 	orr.w	r3, sl, #1024	; 0x400
 8006224:	d141      	bne.n	80062aa <_printf_float+0x156>
 8006226:	2206      	movs	r2, #6
 8006228:	6062      	str	r2, [r4, #4]
 800622a:	2100      	movs	r1, #0
 800622c:	6023      	str	r3, [r4, #0]
 800622e:	9301      	str	r3, [sp, #4]
 8006230:	6863      	ldr	r3, [r4, #4]
 8006232:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006236:	9005      	str	r0, [sp, #20]
 8006238:	9202      	str	r2, [sp, #8]
 800623a:	9300      	str	r3, [sp, #0]
 800623c:	463a      	mov	r2, r7
 800623e:	464b      	mov	r3, r9
 8006240:	9106      	str	r1, [sp, #24]
 8006242:	f8cd 8010 	str.w	r8, [sp, #16]
 8006246:	f8cd e00c 	str.w	lr, [sp, #12]
 800624a:	4628      	mov	r0, r5
 800624c:	f7ff fef1 	bl	8006032 <__cvt>
 8006250:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8006254:	2b47      	cmp	r3, #71	; 0x47
 8006256:	4607      	mov	r7, r0
 8006258:	d109      	bne.n	800626e <_printf_float+0x11a>
 800625a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800625c:	1cd8      	adds	r0, r3, #3
 800625e:	db02      	blt.n	8006266 <_printf_float+0x112>
 8006260:	6862      	ldr	r2, [r4, #4]
 8006262:	4293      	cmp	r3, r2
 8006264:	dd59      	ble.n	800631a <_printf_float+0x1c6>
 8006266:	f1a8 0802 	sub.w	r8, r8, #2
 800626a:	fa5f f888 	uxtb.w	r8, r8
 800626e:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8006272:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006274:	d836      	bhi.n	80062e4 <_printf_float+0x190>
 8006276:	3901      	subs	r1, #1
 8006278:	4642      	mov	r2, r8
 800627a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800627e:	910d      	str	r1, [sp, #52]	; 0x34
 8006280:	f7ff ff33 	bl	80060ea <__exponent>
 8006284:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006286:	4681      	mov	r9, r0
 8006288:	1883      	adds	r3, r0, r2
 800628a:	2a01      	cmp	r2, #1
 800628c:	6123      	str	r3, [r4, #16]
 800628e:	dc02      	bgt.n	8006296 <_printf_float+0x142>
 8006290:	6822      	ldr	r2, [r4, #0]
 8006292:	07d1      	lsls	r1, r2, #31
 8006294:	d501      	bpl.n	800629a <_printf_float+0x146>
 8006296:	3301      	adds	r3, #1
 8006298:	6123      	str	r3, [r4, #16]
 800629a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d0aa      	beq.n	80061f8 <_printf_float+0xa4>
 80062a2:	232d      	movs	r3, #45	; 0x2d
 80062a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062a8:	e7a6      	b.n	80061f8 <_printf_float+0xa4>
 80062aa:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80062ae:	d002      	beq.n	80062b6 <_printf_float+0x162>
 80062b0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80062b4:	d1b9      	bne.n	800622a <_printf_float+0xd6>
 80062b6:	b19a      	cbz	r2, 80062e0 <_printf_float+0x18c>
 80062b8:	2100      	movs	r1, #0
 80062ba:	9106      	str	r1, [sp, #24]
 80062bc:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 80062c0:	e88d 000c 	stmia.w	sp, {r2, r3}
 80062c4:	6023      	str	r3, [r4, #0]
 80062c6:	9005      	str	r0, [sp, #20]
 80062c8:	463a      	mov	r2, r7
 80062ca:	f8cd 8010 	str.w	r8, [sp, #16]
 80062ce:	f8cd e00c 	str.w	lr, [sp, #12]
 80062d2:	9102      	str	r1, [sp, #8]
 80062d4:	464b      	mov	r3, r9
 80062d6:	4628      	mov	r0, r5
 80062d8:	f7ff feab 	bl	8006032 <__cvt>
 80062dc:	4607      	mov	r7, r0
 80062de:	e7bc      	b.n	800625a <_printf_float+0x106>
 80062e0:	2201      	movs	r2, #1
 80062e2:	e7a1      	b.n	8006228 <_printf_float+0xd4>
 80062e4:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80062e8:	d119      	bne.n	800631e <_printf_float+0x1ca>
 80062ea:	2900      	cmp	r1, #0
 80062ec:	6863      	ldr	r3, [r4, #4]
 80062ee:	dd0c      	ble.n	800630a <_printf_float+0x1b6>
 80062f0:	6121      	str	r1, [r4, #16]
 80062f2:	b913      	cbnz	r3, 80062fa <_printf_float+0x1a6>
 80062f4:	6822      	ldr	r2, [r4, #0]
 80062f6:	07d2      	lsls	r2, r2, #31
 80062f8:	d502      	bpl.n	8006300 <_printf_float+0x1ac>
 80062fa:	3301      	adds	r3, #1
 80062fc:	440b      	add	r3, r1
 80062fe:	6123      	str	r3, [r4, #16]
 8006300:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006302:	f04f 0900 	mov.w	r9, #0
 8006306:	65a3      	str	r3, [r4, #88]	; 0x58
 8006308:	e7c7      	b.n	800629a <_printf_float+0x146>
 800630a:	b913      	cbnz	r3, 8006312 <_printf_float+0x1be>
 800630c:	6822      	ldr	r2, [r4, #0]
 800630e:	07d0      	lsls	r0, r2, #31
 8006310:	d501      	bpl.n	8006316 <_printf_float+0x1c2>
 8006312:	3302      	adds	r3, #2
 8006314:	e7f3      	b.n	80062fe <_printf_float+0x1aa>
 8006316:	2301      	movs	r3, #1
 8006318:	e7f1      	b.n	80062fe <_printf_float+0x1aa>
 800631a:	f04f 0867 	mov.w	r8, #103	; 0x67
 800631e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006320:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006322:	4293      	cmp	r3, r2
 8006324:	db05      	blt.n	8006332 <_printf_float+0x1de>
 8006326:	6822      	ldr	r2, [r4, #0]
 8006328:	6123      	str	r3, [r4, #16]
 800632a:	07d1      	lsls	r1, r2, #31
 800632c:	d5e8      	bpl.n	8006300 <_printf_float+0x1ac>
 800632e:	3301      	adds	r3, #1
 8006330:	e7e5      	b.n	80062fe <_printf_float+0x1aa>
 8006332:	2b00      	cmp	r3, #0
 8006334:	bfcc      	ite	gt
 8006336:	2301      	movgt	r3, #1
 8006338:	f1c3 0302 	rsble	r3, r3, #2
 800633c:	4413      	add	r3, r2
 800633e:	e7de      	b.n	80062fe <_printf_float+0x1aa>
 8006340:	6823      	ldr	r3, [r4, #0]
 8006342:	055a      	lsls	r2, r3, #21
 8006344:	d407      	bmi.n	8006356 <_printf_float+0x202>
 8006346:	6923      	ldr	r3, [r4, #16]
 8006348:	463a      	mov	r2, r7
 800634a:	4659      	mov	r1, fp
 800634c:	4628      	mov	r0, r5
 800634e:	47b0      	blx	r6
 8006350:	3001      	adds	r0, #1
 8006352:	d12a      	bne.n	80063aa <_printf_float+0x256>
 8006354:	e75a      	b.n	800620c <_printf_float+0xb8>
 8006356:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800635a:	f240 80dc 	bls.w	8006516 <_printf_float+0x3c2>
 800635e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006362:	2200      	movs	r2, #0
 8006364:	2300      	movs	r3, #0
 8006366:	f7fa fb97 	bl	8000a98 <__aeabi_dcmpeq>
 800636a:	2800      	cmp	r0, #0
 800636c:	d039      	beq.n	80063e2 <_printf_float+0x28e>
 800636e:	2301      	movs	r3, #1
 8006370:	4a36      	ldr	r2, [pc, #216]	; (800644c <_printf_float+0x2f8>)
 8006372:	4659      	mov	r1, fp
 8006374:	4628      	mov	r0, r5
 8006376:	47b0      	blx	r6
 8006378:	3001      	adds	r0, #1
 800637a:	f43f af47 	beq.w	800620c <_printf_float+0xb8>
 800637e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006380:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006382:	429a      	cmp	r2, r3
 8006384:	db02      	blt.n	800638c <_printf_float+0x238>
 8006386:	6823      	ldr	r3, [r4, #0]
 8006388:	07d8      	lsls	r0, r3, #31
 800638a:	d50e      	bpl.n	80063aa <_printf_float+0x256>
 800638c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800638e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006390:	4659      	mov	r1, fp
 8006392:	4628      	mov	r0, r5
 8006394:	47b0      	blx	r6
 8006396:	3001      	adds	r0, #1
 8006398:	f43f af38 	beq.w	800620c <_printf_float+0xb8>
 800639c:	2700      	movs	r7, #0
 800639e:	f104 081a 	add.w	r8, r4, #26
 80063a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80063a4:	3b01      	subs	r3, #1
 80063a6:	429f      	cmp	r7, r3
 80063a8:	db11      	blt.n	80063ce <_printf_float+0x27a>
 80063aa:	6823      	ldr	r3, [r4, #0]
 80063ac:	079f      	lsls	r7, r3, #30
 80063ae:	d508      	bpl.n	80063c2 <_printf_float+0x26e>
 80063b0:	2700      	movs	r7, #0
 80063b2:	f104 0819 	add.w	r8, r4, #25
 80063b6:	68e3      	ldr	r3, [r4, #12]
 80063b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80063ba:	1a9b      	subs	r3, r3, r2
 80063bc:	429f      	cmp	r7, r3
 80063be:	f2c0 80e7 	blt.w	8006590 <_printf_float+0x43c>
 80063c2:	68e0      	ldr	r0, [r4, #12]
 80063c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80063c6:	4298      	cmp	r0, r3
 80063c8:	bfb8      	it	lt
 80063ca:	4618      	movlt	r0, r3
 80063cc:	e720      	b.n	8006210 <_printf_float+0xbc>
 80063ce:	2301      	movs	r3, #1
 80063d0:	4642      	mov	r2, r8
 80063d2:	4659      	mov	r1, fp
 80063d4:	4628      	mov	r0, r5
 80063d6:	47b0      	blx	r6
 80063d8:	3001      	adds	r0, #1
 80063da:	f43f af17 	beq.w	800620c <_printf_float+0xb8>
 80063de:	3701      	adds	r7, #1
 80063e0:	e7df      	b.n	80063a2 <_printf_float+0x24e>
 80063e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	dc33      	bgt.n	8006450 <_printf_float+0x2fc>
 80063e8:	2301      	movs	r3, #1
 80063ea:	4a18      	ldr	r2, [pc, #96]	; (800644c <_printf_float+0x2f8>)
 80063ec:	4659      	mov	r1, fp
 80063ee:	4628      	mov	r0, r5
 80063f0:	47b0      	blx	r6
 80063f2:	3001      	adds	r0, #1
 80063f4:	f43f af0a 	beq.w	800620c <_printf_float+0xb8>
 80063f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80063fa:	b923      	cbnz	r3, 8006406 <_printf_float+0x2b2>
 80063fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80063fe:	b913      	cbnz	r3, 8006406 <_printf_float+0x2b2>
 8006400:	6823      	ldr	r3, [r4, #0]
 8006402:	07d9      	lsls	r1, r3, #31
 8006404:	d5d1      	bpl.n	80063aa <_printf_float+0x256>
 8006406:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006408:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800640a:	4659      	mov	r1, fp
 800640c:	4628      	mov	r0, r5
 800640e:	47b0      	blx	r6
 8006410:	3001      	adds	r0, #1
 8006412:	f43f aefb 	beq.w	800620c <_printf_float+0xb8>
 8006416:	f04f 0800 	mov.w	r8, #0
 800641a:	f104 091a 	add.w	r9, r4, #26
 800641e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006420:	425b      	negs	r3, r3
 8006422:	4598      	cmp	r8, r3
 8006424:	db01      	blt.n	800642a <_printf_float+0x2d6>
 8006426:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006428:	e78e      	b.n	8006348 <_printf_float+0x1f4>
 800642a:	2301      	movs	r3, #1
 800642c:	464a      	mov	r2, r9
 800642e:	4659      	mov	r1, fp
 8006430:	4628      	mov	r0, r5
 8006432:	47b0      	blx	r6
 8006434:	3001      	adds	r0, #1
 8006436:	f43f aee9 	beq.w	800620c <_printf_float+0xb8>
 800643a:	f108 0801 	add.w	r8, r8, #1
 800643e:	e7ee      	b.n	800641e <_printf_float+0x2ca>
 8006440:	7fefffff 	.word	0x7fefffff
 8006444:	08008db2 	.word	0x08008db2
 8006448:	08008db6 	.word	0x08008db6
 800644c:	08008f1b 	.word	0x08008f1b
 8006450:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006452:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006454:	429a      	cmp	r2, r3
 8006456:	bfa8      	it	ge
 8006458:	461a      	movge	r2, r3
 800645a:	2a00      	cmp	r2, #0
 800645c:	4690      	mov	r8, r2
 800645e:	dc36      	bgt.n	80064ce <_printf_float+0x37a>
 8006460:	f04f 0a00 	mov.w	sl, #0
 8006464:	f104 031a 	add.w	r3, r4, #26
 8006468:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 800646c:	930b      	str	r3, [sp, #44]	; 0x2c
 800646e:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8006472:	eba9 0308 	sub.w	r3, r9, r8
 8006476:	459a      	cmp	sl, r3
 8006478:	db31      	blt.n	80064de <_printf_float+0x38a>
 800647a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800647c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800647e:	429a      	cmp	r2, r3
 8006480:	db38      	blt.n	80064f4 <_printf_float+0x3a0>
 8006482:	6823      	ldr	r3, [r4, #0]
 8006484:	07da      	lsls	r2, r3, #31
 8006486:	d435      	bmi.n	80064f4 <_printf_float+0x3a0>
 8006488:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800648a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800648c:	eba3 0209 	sub.w	r2, r3, r9
 8006490:	eba3 0801 	sub.w	r8, r3, r1
 8006494:	4590      	cmp	r8, r2
 8006496:	bfa8      	it	ge
 8006498:	4690      	movge	r8, r2
 800649a:	f1b8 0f00 	cmp.w	r8, #0
 800649e:	dc31      	bgt.n	8006504 <_printf_float+0x3b0>
 80064a0:	2700      	movs	r7, #0
 80064a2:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 80064a6:	f104 091a 	add.w	r9, r4, #26
 80064aa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80064ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80064ae:	1a9b      	subs	r3, r3, r2
 80064b0:	eba3 0308 	sub.w	r3, r3, r8
 80064b4:	429f      	cmp	r7, r3
 80064b6:	f6bf af78 	bge.w	80063aa <_printf_float+0x256>
 80064ba:	2301      	movs	r3, #1
 80064bc:	464a      	mov	r2, r9
 80064be:	4659      	mov	r1, fp
 80064c0:	4628      	mov	r0, r5
 80064c2:	47b0      	blx	r6
 80064c4:	3001      	adds	r0, #1
 80064c6:	f43f aea1 	beq.w	800620c <_printf_float+0xb8>
 80064ca:	3701      	adds	r7, #1
 80064cc:	e7ed      	b.n	80064aa <_printf_float+0x356>
 80064ce:	4613      	mov	r3, r2
 80064d0:	4659      	mov	r1, fp
 80064d2:	463a      	mov	r2, r7
 80064d4:	4628      	mov	r0, r5
 80064d6:	47b0      	blx	r6
 80064d8:	3001      	adds	r0, #1
 80064da:	d1c1      	bne.n	8006460 <_printf_float+0x30c>
 80064dc:	e696      	b.n	800620c <_printf_float+0xb8>
 80064de:	2301      	movs	r3, #1
 80064e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80064e2:	4659      	mov	r1, fp
 80064e4:	4628      	mov	r0, r5
 80064e6:	47b0      	blx	r6
 80064e8:	3001      	adds	r0, #1
 80064ea:	f43f ae8f 	beq.w	800620c <_printf_float+0xb8>
 80064ee:	f10a 0a01 	add.w	sl, sl, #1
 80064f2:	e7bc      	b.n	800646e <_printf_float+0x31a>
 80064f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064f8:	4659      	mov	r1, fp
 80064fa:	4628      	mov	r0, r5
 80064fc:	47b0      	blx	r6
 80064fe:	3001      	adds	r0, #1
 8006500:	d1c2      	bne.n	8006488 <_printf_float+0x334>
 8006502:	e683      	b.n	800620c <_printf_float+0xb8>
 8006504:	4643      	mov	r3, r8
 8006506:	eb07 0209 	add.w	r2, r7, r9
 800650a:	4659      	mov	r1, fp
 800650c:	4628      	mov	r0, r5
 800650e:	47b0      	blx	r6
 8006510:	3001      	adds	r0, #1
 8006512:	d1c5      	bne.n	80064a0 <_printf_float+0x34c>
 8006514:	e67a      	b.n	800620c <_printf_float+0xb8>
 8006516:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006518:	2a01      	cmp	r2, #1
 800651a:	dc01      	bgt.n	8006520 <_printf_float+0x3cc>
 800651c:	07db      	lsls	r3, r3, #31
 800651e:	d534      	bpl.n	800658a <_printf_float+0x436>
 8006520:	2301      	movs	r3, #1
 8006522:	463a      	mov	r2, r7
 8006524:	4659      	mov	r1, fp
 8006526:	4628      	mov	r0, r5
 8006528:	47b0      	blx	r6
 800652a:	3001      	adds	r0, #1
 800652c:	f43f ae6e 	beq.w	800620c <_printf_float+0xb8>
 8006530:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006532:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006534:	4659      	mov	r1, fp
 8006536:	4628      	mov	r0, r5
 8006538:	47b0      	blx	r6
 800653a:	3001      	adds	r0, #1
 800653c:	f43f ae66 	beq.w	800620c <_printf_float+0xb8>
 8006540:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006544:	2200      	movs	r2, #0
 8006546:	2300      	movs	r3, #0
 8006548:	f7fa faa6 	bl	8000a98 <__aeabi_dcmpeq>
 800654c:	b150      	cbz	r0, 8006564 <_printf_float+0x410>
 800654e:	2700      	movs	r7, #0
 8006550:	f104 081a 	add.w	r8, r4, #26
 8006554:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006556:	3b01      	subs	r3, #1
 8006558:	429f      	cmp	r7, r3
 800655a:	db0c      	blt.n	8006576 <_printf_float+0x422>
 800655c:	464b      	mov	r3, r9
 800655e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006562:	e6f2      	b.n	800634a <_printf_float+0x1f6>
 8006564:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006566:	1c7a      	adds	r2, r7, #1
 8006568:	3b01      	subs	r3, #1
 800656a:	4659      	mov	r1, fp
 800656c:	4628      	mov	r0, r5
 800656e:	47b0      	blx	r6
 8006570:	3001      	adds	r0, #1
 8006572:	d1f3      	bne.n	800655c <_printf_float+0x408>
 8006574:	e64a      	b.n	800620c <_printf_float+0xb8>
 8006576:	2301      	movs	r3, #1
 8006578:	4642      	mov	r2, r8
 800657a:	4659      	mov	r1, fp
 800657c:	4628      	mov	r0, r5
 800657e:	47b0      	blx	r6
 8006580:	3001      	adds	r0, #1
 8006582:	f43f ae43 	beq.w	800620c <_printf_float+0xb8>
 8006586:	3701      	adds	r7, #1
 8006588:	e7e4      	b.n	8006554 <_printf_float+0x400>
 800658a:	2301      	movs	r3, #1
 800658c:	463a      	mov	r2, r7
 800658e:	e7ec      	b.n	800656a <_printf_float+0x416>
 8006590:	2301      	movs	r3, #1
 8006592:	4642      	mov	r2, r8
 8006594:	4659      	mov	r1, fp
 8006596:	4628      	mov	r0, r5
 8006598:	47b0      	blx	r6
 800659a:	3001      	adds	r0, #1
 800659c:	f43f ae36 	beq.w	800620c <_printf_float+0xb8>
 80065a0:	3701      	adds	r7, #1
 80065a2:	e708      	b.n	80063b6 <_printf_float+0x262>
 80065a4:	463a      	mov	r2, r7
 80065a6:	464b      	mov	r3, r9
 80065a8:	4638      	mov	r0, r7
 80065aa:	4649      	mov	r1, r9
 80065ac:	f7fa faa6 	bl	8000afc <__aeabi_dcmpun>
 80065b0:	2800      	cmp	r0, #0
 80065b2:	f43f ae30 	beq.w	8006216 <_printf_float+0xc2>
 80065b6:	4b01      	ldr	r3, [pc, #4]	; (80065bc <_printf_float+0x468>)
 80065b8:	4f01      	ldr	r7, [pc, #4]	; (80065c0 <_printf_float+0x46c>)
 80065ba:	e612      	b.n	80061e2 <_printf_float+0x8e>
 80065bc:	08008dba 	.word	0x08008dba
 80065c0:	08008dbe 	.word	0x08008dbe

080065c4 <_printf_common>:
 80065c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065c8:	4691      	mov	r9, r2
 80065ca:	461f      	mov	r7, r3
 80065cc:	688a      	ldr	r2, [r1, #8]
 80065ce:	690b      	ldr	r3, [r1, #16]
 80065d0:	4606      	mov	r6, r0
 80065d2:	4293      	cmp	r3, r2
 80065d4:	bfb8      	it	lt
 80065d6:	4613      	movlt	r3, r2
 80065d8:	f8c9 3000 	str.w	r3, [r9]
 80065dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80065e0:	460c      	mov	r4, r1
 80065e2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80065e6:	b112      	cbz	r2, 80065ee <_printf_common+0x2a>
 80065e8:	3301      	adds	r3, #1
 80065ea:	f8c9 3000 	str.w	r3, [r9]
 80065ee:	6823      	ldr	r3, [r4, #0]
 80065f0:	0699      	lsls	r1, r3, #26
 80065f2:	bf42      	ittt	mi
 80065f4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80065f8:	3302      	addmi	r3, #2
 80065fa:	f8c9 3000 	strmi.w	r3, [r9]
 80065fe:	6825      	ldr	r5, [r4, #0]
 8006600:	f015 0506 	ands.w	r5, r5, #6
 8006604:	d107      	bne.n	8006616 <_printf_common+0x52>
 8006606:	f104 0a19 	add.w	sl, r4, #25
 800660a:	68e3      	ldr	r3, [r4, #12]
 800660c:	f8d9 2000 	ldr.w	r2, [r9]
 8006610:	1a9b      	subs	r3, r3, r2
 8006612:	429d      	cmp	r5, r3
 8006614:	db2a      	blt.n	800666c <_printf_common+0xa8>
 8006616:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800661a:	6822      	ldr	r2, [r4, #0]
 800661c:	3300      	adds	r3, #0
 800661e:	bf18      	it	ne
 8006620:	2301      	movne	r3, #1
 8006622:	0692      	lsls	r2, r2, #26
 8006624:	d42f      	bmi.n	8006686 <_printf_common+0xc2>
 8006626:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800662a:	4639      	mov	r1, r7
 800662c:	4630      	mov	r0, r6
 800662e:	47c0      	blx	r8
 8006630:	3001      	adds	r0, #1
 8006632:	d022      	beq.n	800667a <_printf_common+0xb6>
 8006634:	6823      	ldr	r3, [r4, #0]
 8006636:	68e5      	ldr	r5, [r4, #12]
 8006638:	f003 0306 	and.w	r3, r3, #6
 800663c:	2b04      	cmp	r3, #4
 800663e:	bf18      	it	ne
 8006640:	2500      	movne	r5, #0
 8006642:	f8d9 2000 	ldr.w	r2, [r9]
 8006646:	f04f 0900 	mov.w	r9, #0
 800664a:	bf08      	it	eq
 800664c:	1aad      	subeq	r5, r5, r2
 800664e:	68a3      	ldr	r3, [r4, #8]
 8006650:	6922      	ldr	r2, [r4, #16]
 8006652:	bf08      	it	eq
 8006654:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006658:	4293      	cmp	r3, r2
 800665a:	bfc4      	itt	gt
 800665c:	1a9b      	subgt	r3, r3, r2
 800665e:	18ed      	addgt	r5, r5, r3
 8006660:	341a      	adds	r4, #26
 8006662:	454d      	cmp	r5, r9
 8006664:	d11b      	bne.n	800669e <_printf_common+0xda>
 8006666:	2000      	movs	r0, #0
 8006668:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800666c:	2301      	movs	r3, #1
 800666e:	4652      	mov	r2, sl
 8006670:	4639      	mov	r1, r7
 8006672:	4630      	mov	r0, r6
 8006674:	47c0      	blx	r8
 8006676:	3001      	adds	r0, #1
 8006678:	d103      	bne.n	8006682 <_printf_common+0xbe>
 800667a:	f04f 30ff 	mov.w	r0, #4294967295
 800667e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006682:	3501      	adds	r5, #1
 8006684:	e7c1      	b.n	800660a <_printf_common+0x46>
 8006686:	2030      	movs	r0, #48	; 0x30
 8006688:	18e1      	adds	r1, r4, r3
 800668a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800668e:	1c5a      	adds	r2, r3, #1
 8006690:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006694:	4422      	add	r2, r4
 8006696:	3302      	adds	r3, #2
 8006698:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800669c:	e7c3      	b.n	8006626 <_printf_common+0x62>
 800669e:	2301      	movs	r3, #1
 80066a0:	4622      	mov	r2, r4
 80066a2:	4639      	mov	r1, r7
 80066a4:	4630      	mov	r0, r6
 80066a6:	47c0      	blx	r8
 80066a8:	3001      	adds	r0, #1
 80066aa:	d0e6      	beq.n	800667a <_printf_common+0xb6>
 80066ac:	f109 0901 	add.w	r9, r9, #1
 80066b0:	e7d7      	b.n	8006662 <_printf_common+0x9e>
	...

080066b4 <_printf_i>:
 80066b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80066b8:	4617      	mov	r7, r2
 80066ba:	7e0a      	ldrb	r2, [r1, #24]
 80066bc:	b085      	sub	sp, #20
 80066be:	2a6e      	cmp	r2, #110	; 0x6e
 80066c0:	4698      	mov	r8, r3
 80066c2:	4606      	mov	r6, r0
 80066c4:	460c      	mov	r4, r1
 80066c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80066c8:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80066cc:	f000 80bc 	beq.w	8006848 <_printf_i+0x194>
 80066d0:	d81a      	bhi.n	8006708 <_printf_i+0x54>
 80066d2:	2a63      	cmp	r2, #99	; 0x63
 80066d4:	d02e      	beq.n	8006734 <_printf_i+0x80>
 80066d6:	d80a      	bhi.n	80066ee <_printf_i+0x3a>
 80066d8:	2a00      	cmp	r2, #0
 80066da:	f000 80c8 	beq.w	800686e <_printf_i+0x1ba>
 80066de:	2a58      	cmp	r2, #88	; 0x58
 80066e0:	f000 808a 	beq.w	80067f8 <_printf_i+0x144>
 80066e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80066e8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80066ec:	e02a      	b.n	8006744 <_printf_i+0x90>
 80066ee:	2a64      	cmp	r2, #100	; 0x64
 80066f0:	d001      	beq.n	80066f6 <_printf_i+0x42>
 80066f2:	2a69      	cmp	r2, #105	; 0x69
 80066f4:	d1f6      	bne.n	80066e4 <_printf_i+0x30>
 80066f6:	6821      	ldr	r1, [r4, #0]
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	f011 0f80 	tst.w	r1, #128	; 0x80
 80066fe:	d023      	beq.n	8006748 <_printf_i+0x94>
 8006700:	1d11      	adds	r1, r2, #4
 8006702:	6019      	str	r1, [r3, #0]
 8006704:	6813      	ldr	r3, [r2, #0]
 8006706:	e027      	b.n	8006758 <_printf_i+0xa4>
 8006708:	2a73      	cmp	r2, #115	; 0x73
 800670a:	f000 80b4 	beq.w	8006876 <_printf_i+0x1c2>
 800670e:	d808      	bhi.n	8006722 <_printf_i+0x6e>
 8006710:	2a6f      	cmp	r2, #111	; 0x6f
 8006712:	d02a      	beq.n	800676a <_printf_i+0xb6>
 8006714:	2a70      	cmp	r2, #112	; 0x70
 8006716:	d1e5      	bne.n	80066e4 <_printf_i+0x30>
 8006718:	680a      	ldr	r2, [r1, #0]
 800671a:	f042 0220 	orr.w	r2, r2, #32
 800671e:	600a      	str	r2, [r1, #0]
 8006720:	e003      	b.n	800672a <_printf_i+0x76>
 8006722:	2a75      	cmp	r2, #117	; 0x75
 8006724:	d021      	beq.n	800676a <_printf_i+0xb6>
 8006726:	2a78      	cmp	r2, #120	; 0x78
 8006728:	d1dc      	bne.n	80066e4 <_printf_i+0x30>
 800672a:	2278      	movs	r2, #120	; 0x78
 800672c:	496f      	ldr	r1, [pc, #444]	; (80068ec <_printf_i+0x238>)
 800672e:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8006732:	e064      	b.n	80067fe <_printf_i+0x14a>
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800673a:	1d11      	adds	r1, r2, #4
 800673c:	6019      	str	r1, [r3, #0]
 800673e:	6813      	ldr	r3, [r2, #0]
 8006740:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006744:	2301      	movs	r3, #1
 8006746:	e0a3      	b.n	8006890 <_printf_i+0x1dc>
 8006748:	f011 0f40 	tst.w	r1, #64	; 0x40
 800674c:	f102 0104 	add.w	r1, r2, #4
 8006750:	6019      	str	r1, [r3, #0]
 8006752:	d0d7      	beq.n	8006704 <_printf_i+0x50>
 8006754:	f9b2 3000 	ldrsh.w	r3, [r2]
 8006758:	2b00      	cmp	r3, #0
 800675a:	da03      	bge.n	8006764 <_printf_i+0xb0>
 800675c:	222d      	movs	r2, #45	; 0x2d
 800675e:	425b      	negs	r3, r3
 8006760:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8006764:	4962      	ldr	r1, [pc, #392]	; (80068f0 <_printf_i+0x23c>)
 8006766:	220a      	movs	r2, #10
 8006768:	e017      	b.n	800679a <_printf_i+0xe6>
 800676a:	6820      	ldr	r0, [r4, #0]
 800676c:	6819      	ldr	r1, [r3, #0]
 800676e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006772:	d003      	beq.n	800677c <_printf_i+0xc8>
 8006774:	1d08      	adds	r0, r1, #4
 8006776:	6018      	str	r0, [r3, #0]
 8006778:	680b      	ldr	r3, [r1, #0]
 800677a:	e006      	b.n	800678a <_printf_i+0xd6>
 800677c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006780:	f101 0004 	add.w	r0, r1, #4
 8006784:	6018      	str	r0, [r3, #0]
 8006786:	d0f7      	beq.n	8006778 <_printf_i+0xc4>
 8006788:	880b      	ldrh	r3, [r1, #0]
 800678a:	2a6f      	cmp	r2, #111	; 0x6f
 800678c:	bf14      	ite	ne
 800678e:	220a      	movne	r2, #10
 8006790:	2208      	moveq	r2, #8
 8006792:	4957      	ldr	r1, [pc, #348]	; (80068f0 <_printf_i+0x23c>)
 8006794:	2000      	movs	r0, #0
 8006796:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800679a:	6865      	ldr	r5, [r4, #4]
 800679c:	2d00      	cmp	r5, #0
 800679e:	60a5      	str	r5, [r4, #8]
 80067a0:	f2c0 809c 	blt.w	80068dc <_printf_i+0x228>
 80067a4:	6820      	ldr	r0, [r4, #0]
 80067a6:	f020 0004 	bic.w	r0, r0, #4
 80067aa:	6020      	str	r0, [r4, #0]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d13f      	bne.n	8006830 <_printf_i+0x17c>
 80067b0:	2d00      	cmp	r5, #0
 80067b2:	f040 8095 	bne.w	80068e0 <_printf_i+0x22c>
 80067b6:	4675      	mov	r5, lr
 80067b8:	2a08      	cmp	r2, #8
 80067ba:	d10b      	bne.n	80067d4 <_printf_i+0x120>
 80067bc:	6823      	ldr	r3, [r4, #0]
 80067be:	07da      	lsls	r2, r3, #31
 80067c0:	d508      	bpl.n	80067d4 <_printf_i+0x120>
 80067c2:	6923      	ldr	r3, [r4, #16]
 80067c4:	6862      	ldr	r2, [r4, #4]
 80067c6:	429a      	cmp	r2, r3
 80067c8:	bfde      	ittt	le
 80067ca:	2330      	movle	r3, #48	; 0x30
 80067cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80067d0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80067d4:	ebae 0305 	sub.w	r3, lr, r5
 80067d8:	6123      	str	r3, [r4, #16]
 80067da:	f8cd 8000 	str.w	r8, [sp]
 80067de:	463b      	mov	r3, r7
 80067e0:	aa03      	add	r2, sp, #12
 80067e2:	4621      	mov	r1, r4
 80067e4:	4630      	mov	r0, r6
 80067e6:	f7ff feed 	bl	80065c4 <_printf_common>
 80067ea:	3001      	adds	r0, #1
 80067ec:	d155      	bne.n	800689a <_printf_i+0x1e6>
 80067ee:	f04f 30ff 	mov.w	r0, #4294967295
 80067f2:	b005      	add	sp, #20
 80067f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80067f8:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80067fc:	493c      	ldr	r1, [pc, #240]	; (80068f0 <_printf_i+0x23c>)
 80067fe:	6822      	ldr	r2, [r4, #0]
 8006800:	6818      	ldr	r0, [r3, #0]
 8006802:	f012 0f80 	tst.w	r2, #128	; 0x80
 8006806:	f100 0504 	add.w	r5, r0, #4
 800680a:	601d      	str	r5, [r3, #0]
 800680c:	d001      	beq.n	8006812 <_printf_i+0x15e>
 800680e:	6803      	ldr	r3, [r0, #0]
 8006810:	e002      	b.n	8006818 <_printf_i+0x164>
 8006812:	0655      	lsls	r5, r2, #25
 8006814:	d5fb      	bpl.n	800680e <_printf_i+0x15a>
 8006816:	8803      	ldrh	r3, [r0, #0]
 8006818:	07d0      	lsls	r0, r2, #31
 800681a:	bf44      	itt	mi
 800681c:	f042 0220 	orrmi.w	r2, r2, #32
 8006820:	6022      	strmi	r2, [r4, #0]
 8006822:	b91b      	cbnz	r3, 800682c <_printf_i+0x178>
 8006824:	6822      	ldr	r2, [r4, #0]
 8006826:	f022 0220 	bic.w	r2, r2, #32
 800682a:	6022      	str	r2, [r4, #0]
 800682c:	2210      	movs	r2, #16
 800682e:	e7b1      	b.n	8006794 <_printf_i+0xe0>
 8006830:	4675      	mov	r5, lr
 8006832:	fbb3 f0f2 	udiv	r0, r3, r2
 8006836:	fb02 3310 	mls	r3, r2, r0, r3
 800683a:	5ccb      	ldrb	r3, [r1, r3]
 800683c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006840:	4603      	mov	r3, r0
 8006842:	2800      	cmp	r0, #0
 8006844:	d1f5      	bne.n	8006832 <_printf_i+0x17e>
 8006846:	e7b7      	b.n	80067b8 <_printf_i+0x104>
 8006848:	6808      	ldr	r0, [r1, #0]
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006850:	6949      	ldr	r1, [r1, #20]
 8006852:	d004      	beq.n	800685e <_printf_i+0x1aa>
 8006854:	1d10      	adds	r0, r2, #4
 8006856:	6018      	str	r0, [r3, #0]
 8006858:	6813      	ldr	r3, [r2, #0]
 800685a:	6019      	str	r1, [r3, #0]
 800685c:	e007      	b.n	800686e <_printf_i+0x1ba>
 800685e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006862:	f102 0004 	add.w	r0, r2, #4
 8006866:	6018      	str	r0, [r3, #0]
 8006868:	6813      	ldr	r3, [r2, #0]
 800686a:	d0f6      	beq.n	800685a <_printf_i+0x1a6>
 800686c:	8019      	strh	r1, [r3, #0]
 800686e:	2300      	movs	r3, #0
 8006870:	4675      	mov	r5, lr
 8006872:	6123      	str	r3, [r4, #16]
 8006874:	e7b1      	b.n	80067da <_printf_i+0x126>
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	1d11      	adds	r1, r2, #4
 800687a:	6019      	str	r1, [r3, #0]
 800687c:	6815      	ldr	r5, [r2, #0]
 800687e:	2100      	movs	r1, #0
 8006880:	6862      	ldr	r2, [r4, #4]
 8006882:	4628      	mov	r0, r5
 8006884:	f000 ff06 	bl	8007694 <memchr>
 8006888:	b108      	cbz	r0, 800688e <_printf_i+0x1da>
 800688a:	1b40      	subs	r0, r0, r5
 800688c:	6060      	str	r0, [r4, #4]
 800688e:	6863      	ldr	r3, [r4, #4]
 8006890:	6123      	str	r3, [r4, #16]
 8006892:	2300      	movs	r3, #0
 8006894:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006898:	e79f      	b.n	80067da <_printf_i+0x126>
 800689a:	6923      	ldr	r3, [r4, #16]
 800689c:	462a      	mov	r2, r5
 800689e:	4639      	mov	r1, r7
 80068a0:	4630      	mov	r0, r6
 80068a2:	47c0      	blx	r8
 80068a4:	3001      	adds	r0, #1
 80068a6:	d0a2      	beq.n	80067ee <_printf_i+0x13a>
 80068a8:	6823      	ldr	r3, [r4, #0]
 80068aa:	079b      	lsls	r3, r3, #30
 80068ac:	d507      	bpl.n	80068be <_printf_i+0x20a>
 80068ae:	2500      	movs	r5, #0
 80068b0:	f104 0919 	add.w	r9, r4, #25
 80068b4:	68e3      	ldr	r3, [r4, #12]
 80068b6:	9a03      	ldr	r2, [sp, #12]
 80068b8:	1a9b      	subs	r3, r3, r2
 80068ba:	429d      	cmp	r5, r3
 80068bc:	db05      	blt.n	80068ca <_printf_i+0x216>
 80068be:	68e0      	ldr	r0, [r4, #12]
 80068c0:	9b03      	ldr	r3, [sp, #12]
 80068c2:	4298      	cmp	r0, r3
 80068c4:	bfb8      	it	lt
 80068c6:	4618      	movlt	r0, r3
 80068c8:	e793      	b.n	80067f2 <_printf_i+0x13e>
 80068ca:	2301      	movs	r3, #1
 80068cc:	464a      	mov	r2, r9
 80068ce:	4639      	mov	r1, r7
 80068d0:	4630      	mov	r0, r6
 80068d2:	47c0      	blx	r8
 80068d4:	3001      	adds	r0, #1
 80068d6:	d08a      	beq.n	80067ee <_printf_i+0x13a>
 80068d8:	3501      	adds	r5, #1
 80068da:	e7eb      	b.n	80068b4 <_printf_i+0x200>
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d1a7      	bne.n	8006830 <_printf_i+0x17c>
 80068e0:	780b      	ldrb	r3, [r1, #0]
 80068e2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80068e6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80068ea:	e765      	b.n	80067b8 <_printf_i+0x104>
 80068ec:	08008dd3 	.word	0x08008dd3
 80068f0:	08008dc2 	.word	0x08008dc2

080068f4 <siprintf>:
 80068f4:	b40e      	push	{r1, r2, r3}
 80068f6:	f44f 7102 	mov.w	r1, #520	; 0x208
 80068fa:	b500      	push	{lr}
 80068fc:	b09c      	sub	sp, #112	; 0x70
 80068fe:	f8ad 1014 	strh.w	r1, [sp, #20]
 8006902:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006906:	9104      	str	r1, [sp, #16]
 8006908:	9107      	str	r1, [sp, #28]
 800690a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800690e:	ab1d      	add	r3, sp, #116	; 0x74
 8006910:	9002      	str	r0, [sp, #8]
 8006912:	9006      	str	r0, [sp, #24]
 8006914:	4808      	ldr	r0, [pc, #32]	; (8006938 <siprintf+0x44>)
 8006916:	f853 2b04 	ldr.w	r2, [r3], #4
 800691a:	f8ad 1016 	strh.w	r1, [sp, #22]
 800691e:	6800      	ldr	r0, [r0, #0]
 8006920:	a902      	add	r1, sp, #8
 8006922:	9301      	str	r3, [sp, #4]
 8006924:	f001 faaa 	bl	8007e7c <_svfiprintf_r>
 8006928:	2200      	movs	r2, #0
 800692a:	9b02      	ldr	r3, [sp, #8]
 800692c:	701a      	strb	r2, [r3, #0]
 800692e:	b01c      	add	sp, #112	; 0x70
 8006930:	f85d eb04 	ldr.w	lr, [sp], #4
 8006934:	b003      	add	sp, #12
 8006936:	4770      	bx	lr
 8006938:	20000054 	.word	0x20000054

0800693c <siscanf>:
 800693c:	b40e      	push	{r1, r2, r3}
 800693e:	f44f 7201 	mov.w	r2, #516	; 0x204
 8006942:	b530      	push	{r4, r5, lr}
 8006944:	b09c      	sub	sp, #112	; 0x70
 8006946:	ac1f      	add	r4, sp, #124	; 0x7c
 8006948:	f854 5b04 	ldr.w	r5, [r4], #4
 800694c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8006950:	9002      	str	r0, [sp, #8]
 8006952:	9006      	str	r0, [sp, #24]
 8006954:	f7f9 fc6c 	bl	8000230 <strlen>
 8006958:	4b0b      	ldr	r3, [pc, #44]	; (8006988 <siscanf+0x4c>)
 800695a:	9003      	str	r0, [sp, #12]
 800695c:	930b      	str	r3, [sp, #44]	; 0x2c
 800695e:	2300      	movs	r3, #0
 8006960:	930f      	str	r3, [sp, #60]	; 0x3c
 8006962:	9314      	str	r3, [sp, #80]	; 0x50
 8006964:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006968:	9007      	str	r0, [sp, #28]
 800696a:	4808      	ldr	r0, [pc, #32]	; (800698c <siscanf+0x50>)
 800696c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006970:	462a      	mov	r2, r5
 8006972:	4623      	mov	r3, r4
 8006974:	a902      	add	r1, sp, #8
 8006976:	6800      	ldr	r0, [r0, #0]
 8006978:	9401      	str	r4, [sp, #4]
 800697a:	f001 fbcd 	bl	8008118 <__ssvfiscanf_r>
 800697e:	b01c      	add	sp, #112	; 0x70
 8006980:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006984:	b003      	add	sp, #12
 8006986:	4770      	bx	lr
 8006988:	08006991 	.word	0x08006991
 800698c:	20000054 	.word	0x20000054

08006990 <__seofread>:
 8006990:	2000      	movs	r0, #0
 8006992:	4770      	bx	lr

08006994 <strcpy>:
 8006994:	4603      	mov	r3, r0
 8006996:	f811 2b01 	ldrb.w	r2, [r1], #1
 800699a:	f803 2b01 	strb.w	r2, [r3], #1
 800699e:	2a00      	cmp	r2, #0
 80069a0:	d1f9      	bne.n	8006996 <strcpy+0x2>
 80069a2:	4770      	bx	lr

080069a4 <quorem>:
 80069a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069a8:	6903      	ldr	r3, [r0, #16]
 80069aa:	690c      	ldr	r4, [r1, #16]
 80069ac:	4680      	mov	r8, r0
 80069ae:	429c      	cmp	r4, r3
 80069b0:	f300 8082 	bgt.w	8006ab8 <quorem+0x114>
 80069b4:	3c01      	subs	r4, #1
 80069b6:	f101 0714 	add.w	r7, r1, #20
 80069ba:	f100 0614 	add.w	r6, r0, #20
 80069be:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80069c2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80069c6:	3501      	adds	r5, #1
 80069c8:	fbb0 f5f5 	udiv	r5, r0, r5
 80069cc:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 80069d0:	eb06 030e 	add.w	r3, r6, lr
 80069d4:	eb07 090e 	add.w	r9, r7, lr
 80069d8:	9301      	str	r3, [sp, #4]
 80069da:	b38d      	cbz	r5, 8006a40 <quorem+0x9c>
 80069dc:	f04f 0a00 	mov.w	sl, #0
 80069e0:	4638      	mov	r0, r7
 80069e2:	46b4      	mov	ip, r6
 80069e4:	46d3      	mov	fp, sl
 80069e6:	f850 2b04 	ldr.w	r2, [r0], #4
 80069ea:	b293      	uxth	r3, r2
 80069ec:	fb05 a303 	mla	r3, r5, r3, sl
 80069f0:	0c12      	lsrs	r2, r2, #16
 80069f2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80069f6:	fb05 a202 	mla	r2, r5, r2, sl
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	ebab 0303 	sub.w	r3, fp, r3
 8006a00:	f8bc b000 	ldrh.w	fp, [ip]
 8006a04:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8006a08:	445b      	add	r3, fp
 8006a0a:	fa1f fb82 	uxth.w	fp, r2
 8006a0e:	f8dc 2000 	ldr.w	r2, [ip]
 8006a12:	4581      	cmp	r9, r0
 8006a14:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8006a18:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006a22:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8006a26:	f84c 3b04 	str.w	r3, [ip], #4
 8006a2a:	d2dc      	bcs.n	80069e6 <quorem+0x42>
 8006a2c:	f856 300e 	ldr.w	r3, [r6, lr]
 8006a30:	b933      	cbnz	r3, 8006a40 <quorem+0x9c>
 8006a32:	9b01      	ldr	r3, [sp, #4]
 8006a34:	3b04      	subs	r3, #4
 8006a36:	429e      	cmp	r6, r3
 8006a38:	461a      	mov	r2, r3
 8006a3a:	d331      	bcc.n	8006aa0 <quorem+0xfc>
 8006a3c:	f8c8 4010 	str.w	r4, [r8, #16]
 8006a40:	4640      	mov	r0, r8
 8006a42:	f001 f83e 	bl	8007ac2 <__mcmp>
 8006a46:	2800      	cmp	r0, #0
 8006a48:	db26      	blt.n	8006a98 <quorem+0xf4>
 8006a4a:	4630      	mov	r0, r6
 8006a4c:	f04f 0e00 	mov.w	lr, #0
 8006a50:	3501      	adds	r5, #1
 8006a52:	f857 1b04 	ldr.w	r1, [r7], #4
 8006a56:	f8d0 c000 	ldr.w	ip, [r0]
 8006a5a:	b28b      	uxth	r3, r1
 8006a5c:	ebae 0303 	sub.w	r3, lr, r3
 8006a60:	fa1f f28c 	uxth.w	r2, ip
 8006a64:	4413      	add	r3, r2
 8006a66:	0c0a      	lsrs	r2, r1, #16
 8006a68:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006a6c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006a76:	45b9      	cmp	r9, r7
 8006a78:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8006a7c:	f840 3b04 	str.w	r3, [r0], #4
 8006a80:	d2e7      	bcs.n	8006a52 <quorem+0xae>
 8006a82:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8006a86:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8006a8a:	b92a      	cbnz	r2, 8006a98 <quorem+0xf4>
 8006a8c:	3b04      	subs	r3, #4
 8006a8e:	429e      	cmp	r6, r3
 8006a90:	461a      	mov	r2, r3
 8006a92:	d30b      	bcc.n	8006aac <quorem+0x108>
 8006a94:	f8c8 4010 	str.w	r4, [r8, #16]
 8006a98:	4628      	mov	r0, r5
 8006a9a:	b003      	add	sp, #12
 8006a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006aa0:	6812      	ldr	r2, [r2, #0]
 8006aa2:	3b04      	subs	r3, #4
 8006aa4:	2a00      	cmp	r2, #0
 8006aa6:	d1c9      	bne.n	8006a3c <quorem+0x98>
 8006aa8:	3c01      	subs	r4, #1
 8006aaa:	e7c4      	b.n	8006a36 <quorem+0x92>
 8006aac:	6812      	ldr	r2, [r2, #0]
 8006aae:	3b04      	subs	r3, #4
 8006ab0:	2a00      	cmp	r2, #0
 8006ab2:	d1ef      	bne.n	8006a94 <quorem+0xf0>
 8006ab4:	3c01      	subs	r4, #1
 8006ab6:	e7ea      	b.n	8006a8e <quorem+0xea>
 8006ab8:	2000      	movs	r0, #0
 8006aba:	e7ee      	b.n	8006a9a <quorem+0xf6>
 8006abc:	0000      	movs	r0, r0
	...

08006ac0 <_dtoa_r>:
 8006ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ac4:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006ac6:	b095      	sub	sp, #84	; 0x54
 8006ac8:	4604      	mov	r4, r0
 8006aca:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8006acc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006ad0:	b93e      	cbnz	r6, 8006ae2 <_dtoa_r+0x22>
 8006ad2:	2010      	movs	r0, #16
 8006ad4:	f000 fdd6 	bl	8007684 <malloc>
 8006ad8:	6260      	str	r0, [r4, #36]	; 0x24
 8006ada:	6046      	str	r6, [r0, #4]
 8006adc:	6086      	str	r6, [r0, #8]
 8006ade:	6006      	str	r6, [r0, #0]
 8006ae0:	60c6      	str	r6, [r0, #12]
 8006ae2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ae4:	6819      	ldr	r1, [r3, #0]
 8006ae6:	b151      	cbz	r1, 8006afe <_dtoa_r+0x3e>
 8006ae8:	685a      	ldr	r2, [r3, #4]
 8006aea:	2301      	movs	r3, #1
 8006aec:	4093      	lsls	r3, r2
 8006aee:	604a      	str	r2, [r1, #4]
 8006af0:	608b      	str	r3, [r1, #8]
 8006af2:	4620      	mov	r0, r4
 8006af4:	f000 fe10 	bl	8007718 <_Bfree>
 8006af8:	2200      	movs	r2, #0
 8006afa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006afc:	601a      	str	r2, [r3, #0]
 8006afe:	9b03      	ldr	r3, [sp, #12]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	bfb7      	itett	lt
 8006b04:	2301      	movlt	r3, #1
 8006b06:	2300      	movge	r3, #0
 8006b08:	602b      	strlt	r3, [r5, #0]
 8006b0a:	9b03      	ldrlt	r3, [sp, #12]
 8006b0c:	bfae      	itee	ge
 8006b0e:	602b      	strge	r3, [r5, #0]
 8006b10:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006b14:	9303      	strlt	r3, [sp, #12]
 8006b16:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006b1a:	4bab      	ldr	r3, [pc, #684]	; (8006dc8 <_dtoa_r+0x308>)
 8006b1c:	ea33 0309 	bics.w	r3, r3, r9
 8006b20:	d11b      	bne.n	8006b5a <_dtoa_r+0x9a>
 8006b22:	f242 730f 	movw	r3, #9999	; 0x270f
 8006b26:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006b28:	6013      	str	r3, [r2, #0]
 8006b2a:	9b02      	ldr	r3, [sp, #8]
 8006b2c:	b923      	cbnz	r3, 8006b38 <_dtoa_r+0x78>
 8006b2e:	f3c9 0013 	ubfx	r0, r9, #0, #20
 8006b32:	2800      	cmp	r0, #0
 8006b34:	f000 8583 	beq.w	800763e <_dtoa_r+0xb7e>
 8006b38:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b3a:	b953      	cbnz	r3, 8006b52 <_dtoa_r+0x92>
 8006b3c:	4ba3      	ldr	r3, [pc, #652]	; (8006dcc <_dtoa_r+0x30c>)
 8006b3e:	e021      	b.n	8006b84 <_dtoa_r+0xc4>
 8006b40:	4ba3      	ldr	r3, [pc, #652]	; (8006dd0 <_dtoa_r+0x310>)
 8006b42:	9306      	str	r3, [sp, #24]
 8006b44:	3308      	adds	r3, #8
 8006b46:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006b48:	6013      	str	r3, [r2, #0]
 8006b4a:	9806      	ldr	r0, [sp, #24]
 8006b4c:	b015      	add	sp, #84	; 0x54
 8006b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b52:	4b9e      	ldr	r3, [pc, #632]	; (8006dcc <_dtoa_r+0x30c>)
 8006b54:	9306      	str	r3, [sp, #24]
 8006b56:	3303      	adds	r3, #3
 8006b58:	e7f5      	b.n	8006b46 <_dtoa_r+0x86>
 8006b5a:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	2300      	movs	r3, #0
 8006b62:	4630      	mov	r0, r6
 8006b64:	4639      	mov	r1, r7
 8006b66:	f7f9 ff97 	bl	8000a98 <__aeabi_dcmpeq>
 8006b6a:	4680      	mov	r8, r0
 8006b6c:	b160      	cbz	r0, 8006b88 <_dtoa_r+0xc8>
 8006b6e:	2301      	movs	r3, #1
 8006b70:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006b72:	6013      	str	r3, [r2, #0]
 8006b74:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	f000 855e 	beq.w	8007638 <_dtoa_r+0xb78>
 8006b7c:	4b95      	ldr	r3, [pc, #596]	; (8006dd4 <_dtoa_r+0x314>)
 8006b7e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006b80:	6013      	str	r3, [r2, #0]
 8006b82:	3b01      	subs	r3, #1
 8006b84:	9306      	str	r3, [sp, #24]
 8006b86:	e7e0      	b.n	8006b4a <_dtoa_r+0x8a>
 8006b88:	ab12      	add	r3, sp, #72	; 0x48
 8006b8a:	9301      	str	r3, [sp, #4]
 8006b8c:	ab13      	add	r3, sp, #76	; 0x4c
 8006b8e:	9300      	str	r3, [sp, #0]
 8006b90:	4632      	mov	r2, r6
 8006b92:	463b      	mov	r3, r7
 8006b94:	4620      	mov	r0, r4
 8006b96:	f001 f80d 	bl	8007bb4 <__d2b>
 8006b9a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006b9e:	4682      	mov	sl, r0
 8006ba0:	2d00      	cmp	r5, #0
 8006ba2:	d07d      	beq.n	8006ca0 <_dtoa_r+0x1e0>
 8006ba4:	4630      	mov	r0, r6
 8006ba6:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006baa:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8006bae:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006bb2:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006bb6:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8006bba:	2200      	movs	r2, #0
 8006bbc:	4b86      	ldr	r3, [pc, #536]	; (8006dd8 <_dtoa_r+0x318>)
 8006bbe:	f7f9 fb4f 	bl	8000260 <__aeabi_dsub>
 8006bc2:	a37b      	add	r3, pc, #492	; (adr r3, 8006db0 <_dtoa_r+0x2f0>)
 8006bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bc8:	f7f9 fcfe 	bl	80005c8 <__aeabi_dmul>
 8006bcc:	a37a      	add	r3, pc, #488	; (adr r3, 8006db8 <_dtoa_r+0x2f8>)
 8006bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bd2:	f7f9 fb47 	bl	8000264 <__adddf3>
 8006bd6:	4606      	mov	r6, r0
 8006bd8:	4628      	mov	r0, r5
 8006bda:	460f      	mov	r7, r1
 8006bdc:	f7f9 fc8e 	bl	80004fc <__aeabi_i2d>
 8006be0:	a377      	add	r3, pc, #476	; (adr r3, 8006dc0 <_dtoa_r+0x300>)
 8006be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be6:	f7f9 fcef 	bl	80005c8 <__aeabi_dmul>
 8006bea:	4602      	mov	r2, r0
 8006bec:	460b      	mov	r3, r1
 8006bee:	4630      	mov	r0, r6
 8006bf0:	4639      	mov	r1, r7
 8006bf2:	f7f9 fb37 	bl	8000264 <__adddf3>
 8006bf6:	4606      	mov	r6, r0
 8006bf8:	460f      	mov	r7, r1
 8006bfa:	f7f9 ff95 	bl	8000b28 <__aeabi_d2iz>
 8006bfe:	2200      	movs	r2, #0
 8006c00:	4683      	mov	fp, r0
 8006c02:	2300      	movs	r3, #0
 8006c04:	4630      	mov	r0, r6
 8006c06:	4639      	mov	r1, r7
 8006c08:	f7f9 ff50 	bl	8000aac <__aeabi_dcmplt>
 8006c0c:	b158      	cbz	r0, 8006c26 <_dtoa_r+0x166>
 8006c0e:	4658      	mov	r0, fp
 8006c10:	f7f9 fc74 	bl	80004fc <__aeabi_i2d>
 8006c14:	4602      	mov	r2, r0
 8006c16:	460b      	mov	r3, r1
 8006c18:	4630      	mov	r0, r6
 8006c1a:	4639      	mov	r1, r7
 8006c1c:	f7f9 ff3c 	bl	8000a98 <__aeabi_dcmpeq>
 8006c20:	b908      	cbnz	r0, 8006c26 <_dtoa_r+0x166>
 8006c22:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006c26:	f1bb 0f16 	cmp.w	fp, #22
 8006c2a:	d858      	bhi.n	8006cde <_dtoa_r+0x21e>
 8006c2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006c30:	496a      	ldr	r1, [pc, #424]	; (8006ddc <_dtoa_r+0x31c>)
 8006c32:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8006c36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c3a:	f7f9 ff55 	bl	8000ae8 <__aeabi_dcmpgt>
 8006c3e:	2800      	cmp	r0, #0
 8006c40:	d04f      	beq.n	8006ce2 <_dtoa_r+0x222>
 8006c42:	2300      	movs	r3, #0
 8006c44:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006c48:	930d      	str	r3, [sp, #52]	; 0x34
 8006c4a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006c4c:	1b5d      	subs	r5, r3, r5
 8006c4e:	1e6b      	subs	r3, r5, #1
 8006c50:	9307      	str	r3, [sp, #28]
 8006c52:	bf43      	ittte	mi
 8006c54:	2300      	movmi	r3, #0
 8006c56:	f1c5 0801 	rsbmi	r8, r5, #1
 8006c5a:	9307      	strmi	r3, [sp, #28]
 8006c5c:	f04f 0800 	movpl.w	r8, #0
 8006c60:	f1bb 0f00 	cmp.w	fp, #0
 8006c64:	db3f      	blt.n	8006ce6 <_dtoa_r+0x226>
 8006c66:	9b07      	ldr	r3, [sp, #28]
 8006c68:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8006c6c:	445b      	add	r3, fp
 8006c6e:	9307      	str	r3, [sp, #28]
 8006c70:	2300      	movs	r3, #0
 8006c72:	9308      	str	r3, [sp, #32]
 8006c74:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006c76:	2b09      	cmp	r3, #9
 8006c78:	f200 80b4 	bhi.w	8006de4 <_dtoa_r+0x324>
 8006c7c:	2b05      	cmp	r3, #5
 8006c7e:	bfc4      	itt	gt
 8006c80:	3b04      	subgt	r3, #4
 8006c82:	931e      	strgt	r3, [sp, #120]	; 0x78
 8006c84:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006c86:	bfc8      	it	gt
 8006c88:	2600      	movgt	r6, #0
 8006c8a:	f1a3 0302 	sub.w	r3, r3, #2
 8006c8e:	bfd8      	it	le
 8006c90:	2601      	movle	r6, #1
 8006c92:	2b03      	cmp	r3, #3
 8006c94:	f200 80b2 	bhi.w	8006dfc <_dtoa_r+0x33c>
 8006c98:	e8df f003 	tbb	[pc, r3]
 8006c9c:	782d8684 	.word	0x782d8684
 8006ca0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006ca2:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8006ca4:	441d      	add	r5, r3
 8006ca6:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006caa:	2b20      	cmp	r3, #32
 8006cac:	dd11      	ble.n	8006cd2 <_dtoa_r+0x212>
 8006cae:	9a02      	ldr	r2, [sp, #8]
 8006cb0:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8006cb4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8006cb8:	fa22 f000 	lsr.w	r0, r2, r0
 8006cbc:	fa09 f303 	lsl.w	r3, r9, r3
 8006cc0:	4318      	orrs	r0, r3
 8006cc2:	f7f9 fc0b 	bl	80004dc <__aeabi_ui2d>
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006ccc:	3d01      	subs	r5, #1
 8006cce:	9310      	str	r3, [sp, #64]	; 0x40
 8006cd0:	e773      	b.n	8006bba <_dtoa_r+0xfa>
 8006cd2:	f1c3 0020 	rsb	r0, r3, #32
 8006cd6:	9b02      	ldr	r3, [sp, #8]
 8006cd8:	fa03 f000 	lsl.w	r0, r3, r0
 8006cdc:	e7f1      	b.n	8006cc2 <_dtoa_r+0x202>
 8006cde:	2301      	movs	r3, #1
 8006ce0:	e7b2      	b.n	8006c48 <_dtoa_r+0x188>
 8006ce2:	900d      	str	r0, [sp, #52]	; 0x34
 8006ce4:	e7b1      	b.n	8006c4a <_dtoa_r+0x18a>
 8006ce6:	f1cb 0300 	rsb	r3, fp, #0
 8006cea:	9308      	str	r3, [sp, #32]
 8006cec:	2300      	movs	r3, #0
 8006cee:	eba8 080b 	sub.w	r8, r8, fp
 8006cf2:	930c      	str	r3, [sp, #48]	; 0x30
 8006cf4:	e7be      	b.n	8006c74 <_dtoa_r+0x1b4>
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	9309      	str	r3, [sp, #36]	; 0x24
 8006cfa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	f340 8080 	ble.w	8006e02 <_dtoa_r+0x342>
 8006d02:	4699      	mov	r9, r3
 8006d04:	9304      	str	r3, [sp, #16]
 8006d06:	2200      	movs	r2, #0
 8006d08:	2104      	movs	r1, #4
 8006d0a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006d0c:	606a      	str	r2, [r5, #4]
 8006d0e:	f101 0214 	add.w	r2, r1, #20
 8006d12:	429a      	cmp	r2, r3
 8006d14:	d97a      	bls.n	8006e0c <_dtoa_r+0x34c>
 8006d16:	6869      	ldr	r1, [r5, #4]
 8006d18:	4620      	mov	r0, r4
 8006d1a:	f000 fcc9 	bl	80076b0 <_Balloc>
 8006d1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d20:	6028      	str	r0, [r5, #0]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f1b9 0f0e 	cmp.w	r9, #14
 8006d28:	9306      	str	r3, [sp, #24]
 8006d2a:	f200 80f0 	bhi.w	8006f0e <_dtoa_r+0x44e>
 8006d2e:	2e00      	cmp	r6, #0
 8006d30:	f000 80ed 	beq.w	8006f0e <_dtoa_r+0x44e>
 8006d34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006d38:	f1bb 0f00 	cmp.w	fp, #0
 8006d3c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8006d40:	dd79      	ble.n	8006e36 <_dtoa_r+0x376>
 8006d42:	4a26      	ldr	r2, [pc, #152]	; (8006ddc <_dtoa_r+0x31c>)
 8006d44:	f00b 030f 	and.w	r3, fp, #15
 8006d48:	ea4f 162b 	mov.w	r6, fp, asr #4
 8006d4c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006d50:	06f0      	lsls	r0, r6, #27
 8006d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d56:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006d5a:	d55c      	bpl.n	8006e16 <_dtoa_r+0x356>
 8006d5c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006d60:	4b1f      	ldr	r3, [pc, #124]	; (8006de0 <_dtoa_r+0x320>)
 8006d62:	2503      	movs	r5, #3
 8006d64:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006d68:	f7f9 fd58 	bl	800081c <__aeabi_ddiv>
 8006d6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d70:	f006 060f 	and.w	r6, r6, #15
 8006d74:	4f1a      	ldr	r7, [pc, #104]	; (8006de0 <_dtoa_r+0x320>)
 8006d76:	2e00      	cmp	r6, #0
 8006d78:	d14f      	bne.n	8006e1a <_dtoa_r+0x35a>
 8006d7a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006d7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d82:	f7f9 fd4b 	bl	800081c <__aeabi_ddiv>
 8006d86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d8a:	e06e      	b.n	8006e6a <_dtoa_r+0x3aa>
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	9309      	str	r3, [sp, #36]	; 0x24
 8006d90:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006d92:	445b      	add	r3, fp
 8006d94:	f103 0901 	add.w	r9, r3, #1
 8006d98:	9304      	str	r3, [sp, #16]
 8006d9a:	464b      	mov	r3, r9
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	bfb8      	it	lt
 8006da0:	2301      	movlt	r3, #1
 8006da2:	e7b0      	b.n	8006d06 <_dtoa_r+0x246>
 8006da4:	2300      	movs	r3, #0
 8006da6:	e7a7      	b.n	8006cf8 <_dtoa_r+0x238>
 8006da8:	2300      	movs	r3, #0
 8006daa:	e7f0      	b.n	8006d8e <_dtoa_r+0x2ce>
 8006dac:	f3af 8000 	nop.w
 8006db0:	636f4361 	.word	0x636f4361
 8006db4:	3fd287a7 	.word	0x3fd287a7
 8006db8:	8b60c8b3 	.word	0x8b60c8b3
 8006dbc:	3fc68a28 	.word	0x3fc68a28
 8006dc0:	509f79fb 	.word	0x509f79fb
 8006dc4:	3fd34413 	.word	0x3fd34413
 8006dc8:	7ff00000 	.word	0x7ff00000
 8006dcc:	08008ded 	.word	0x08008ded
 8006dd0:	08008de4 	.word	0x08008de4
 8006dd4:	08008f1c 	.word	0x08008f1c
 8006dd8:	3ff80000 	.word	0x3ff80000
 8006ddc:	08008e20 	.word	0x08008e20
 8006de0:	08008df8 	.word	0x08008df8
 8006de4:	2601      	movs	r6, #1
 8006de6:	2300      	movs	r3, #0
 8006de8:	9609      	str	r6, [sp, #36]	; 0x24
 8006dea:	931e      	str	r3, [sp, #120]	; 0x78
 8006dec:	f04f 33ff 	mov.w	r3, #4294967295
 8006df0:	2200      	movs	r2, #0
 8006df2:	9304      	str	r3, [sp, #16]
 8006df4:	4699      	mov	r9, r3
 8006df6:	2312      	movs	r3, #18
 8006df8:	921f      	str	r2, [sp, #124]	; 0x7c
 8006dfa:	e784      	b.n	8006d06 <_dtoa_r+0x246>
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	9309      	str	r3, [sp, #36]	; 0x24
 8006e00:	e7f4      	b.n	8006dec <_dtoa_r+0x32c>
 8006e02:	2301      	movs	r3, #1
 8006e04:	9304      	str	r3, [sp, #16]
 8006e06:	4699      	mov	r9, r3
 8006e08:	461a      	mov	r2, r3
 8006e0a:	e7f5      	b.n	8006df8 <_dtoa_r+0x338>
 8006e0c:	686a      	ldr	r2, [r5, #4]
 8006e0e:	0049      	lsls	r1, r1, #1
 8006e10:	3201      	adds	r2, #1
 8006e12:	606a      	str	r2, [r5, #4]
 8006e14:	e77b      	b.n	8006d0e <_dtoa_r+0x24e>
 8006e16:	2502      	movs	r5, #2
 8006e18:	e7ac      	b.n	8006d74 <_dtoa_r+0x2b4>
 8006e1a:	07f1      	lsls	r1, r6, #31
 8006e1c:	d508      	bpl.n	8006e30 <_dtoa_r+0x370>
 8006e1e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006e22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e26:	f7f9 fbcf 	bl	80005c8 <__aeabi_dmul>
 8006e2a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006e2e:	3501      	adds	r5, #1
 8006e30:	1076      	asrs	r6, r6, #1
 8006e32:	3708      	adds	r7, #8
 8006e34:	e79f      	b.n	8006d76 <_dtoa_r+0x2b6>
 8006e36:	f000 80a5 	beq.w	8006f84 <_dtoa_r+0x4c4>
 8006e3a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006e3e:	f1cb 0600 	rsb	r6, fp, #0
 8006e42:	4ba2      	ldr	r3, [pc, #648]	; (80070cc <_dtoa_r+0x60c>)
 8006e44:	f006 020f 	and.w	r2, r6, #15
 8006e48:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e50:	f7f9 fbba 	bl	80005c8 <__aeabi_dmul>
 8006e54:	2502      	movs	r5, #2
 8006e56:	2300      	movs	r3, #0
 8006e58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e5c:	4f9c      	ldr	r7, [pc, #624]	; (80070d0 <_dtoa_r+0x610>)
 8006e5e:	1136      	asrs	r6, r6, #4
 8006e60:	2e00      	cmp	r6, #0
 8006e62:	f040 8084 	bne.w	8006f6e <_dtoa_r+0x4ae>
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d18d      	bne.n	8006d86 <_dtoa_r+0x2c6>
 8006e6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	f000 808b 	beq.w	8006f88 <_dtoa_r+0x4c8>
 8006e72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006e76:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006e7a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006e7e:	2200      	movs	r2, #0
 8006e80:	4b94      	ldr	r3, [pc, #592]	; (80070d4 <_dtoa_r+0x614>)
 8006e82:	f7f9 fe13 	bl	8000aac <__aeabi_dcmplt>
 8006e86:	2800      	cmp	r0, #0
 8006e88:	d07e      	beq.n	8006f88 <_dtoa_r+0x4c8>
 8006e8a:	f1b9 0f00 	cmp.w	r9, #0
 8006e8e:	d07b      	beq.n	8006f88 <_dtoa_r+0x4c8>
 8006e90:	9b04      	ldr	r3, [sp, #16]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	dd37      	ble.n	8006f06 <_dtoa_r+0x446>
 8006e96:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	4b8e      	ldr	r3, [pc, #568]	; (80070d8 <_dtoa_r+0x618>)
 8006e9e:	f7f9 fb93 	bl	80005c8 <__aeabi_dmul>
 8006ea2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ea6:	9e04      	ldr	r6, [sp, #16]
 8006ea8:	f10b 37ff 	add.w	r7, fp, #4294967295
 8006eac:	3501      	adds	r5, #1
 8006eae:	4628      	mov	r0, r5
 8006eb0:	f7f9 fb24 	bl	80004fc <__aeabi_i2d>
 8006eb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006eb8:	f7f9 fb86 	bl	80005c8 <__aeabi_dmul>
 8006ebc:	4b87      	ldr	r3, [pc, #540]	; (80070dc <_dtoa_r+0x61c>)
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	f7f9 f9d0 	bl	8000264 <__adddf3>
 8006ec4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006ec8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006eca:	f1a3 7550 	sub.w	r5, r3, #54525952	; 0x3400000
 8006ece:	950b      	str	r5, [sp, #44]	; 0x2c
 8006ed0:	2e00      	cmp	r6, #0
 8006ed2:	d15c      	bne.n	8006f8e <_dtoa_r+0x4ce>
 8006ed4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	4b81      	ldr	r3, [pc, #516]	; (80070e0 <_dtoa_r+0x620>)
 8006edc:	f7f9 f9c0 	bl	8000260 <__aeabi_dsub>
 8006ee0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ee2:	462b      	mov	r3, r5
 8006ee4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ee8:	f7f9 fdfe 	bl	8000ae8 <__aeabi_dcmpgt>
 8006eec:	2800      	cmp	r0, #0
 8006eee:	f040 82f7 	bne.w	80074e0 <_dtoa_r+0xa20>
 8006ef2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ef6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ef8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006efc:	f7f9 fdd6 	bl	8000aac <__aeabi_dcmplt>
 8006f00:	2800      	cmp	r0, #0
 8006f02:	f040 82eb 	bne.w	80074dc <_dtoa_r+0xa1c>
 8006f06:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006f0a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006f0e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	f2c0 8150 	blt.w	80071b6 <_dtoa_r+0x6f6>
 8006f16:	f1bb 0f0e 	cmp.w	fp, #14
 8006f1a:	f300 814c 	bgt.w	80071b6 <_dtoa_r+0x6f6>
 8006f1e:	4b6b      	ldr	r3, [pc, #428]	; (80070cc <_dtoa_r+0x60c>)
 8006f20:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f28:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006f2c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	f280 80da 	bge.w	80070e8 <_dtoa_r+0x628>
 8006f34:	f1b9 0f00 	cmp.w	r9, #0
 8006f38:	f300 80d6 	bgt.w	80070e8 <_dtoa_r+0x628>
 8006f3c:	f040 82cd 	bne.w	80074da <_dtoa_r+0xa1a>
 8006f40:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f44:	2200      	movs	r2, #0
 8006f46:	4b66      	ldr	r3, [pc, #408]	; (80070e0 <_dtoa_r+0x620>)
 8006f48:	f7f9 fb3e 	bl	80005c8 <__aeabi_dmul>
 8006f4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006f50:	f7f9 fdc0 	bl	8000ad4 <__aeabi_dcmpge>
 8006f54:	464e      	mov	r6, r9
 8006f56:	464f      	mov	r7, r9
 8006f58:	2800      	cmp	r0, #0
 8006f5a:	f040 82a4 	bne.w	80074a6 <_dtoa_r+0x9e6>
 8006f5e:	9b06      	ldr	r3, [sp, #24]
 8006f60:	9a06      	ldr	r2, [sp, #24]
 8006f62:	1c5d      	adds	r5, r3, #1
 8006f64:	2331      	movs	r3, #49	; 0x31
 8006f66:	f10b 0b01 	add.w	fp, fp, #1
 8006f6a:	7013      	strb	r3, [r2, #0]
 8006f6c:	e29f      	b.n	80074ae <_dtoa_r+0x9ee>
 8006f6e:	07f2      	lsls	r2, r6, #31
 8006f70:	d505      	bpl.n	8006f7e <_dtoa_r+0x4be>
 8006f72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f76:	f7f9 fb27 	bl	80005c8 <__aeabi_dmul>
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	3501      	adds	r5, #1
 8006f7e:	1076      	asrs	r6, r6, #1
 8006f80:	3708      	adds	r7, #8
 8006f82:	e76d      	b.n	8006e60 <_dtoa_r+0x3a0>
 8006f84:	2502      	movs	r5, #2
 8006f86:	e770      	b.n	8006e6a <_dtoa_r+0x3aa>
 8006f88:	465f      	mov	r7, fp
 8006f8a:	464e      	mov	r6, r9
 8006f8c:	e78f      	b.n	8006eae <_dtoa_r+0x3ee>
 8006f8e:	9a06      	ldr	r2, [sp, #24]
 8006f90:	4b4e      	ldr	r3, [pc, #312]	; (80070cc <_dtoa_r+0x60c>)
 8006f92:	4432      	add	r2, r6
 8006f94:	9211      	str	r2, [sp, #68]	; 0x44
 8006f96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f98:	1e71      	subs	r1, r6, #1
 8006f9a:	2a00      	cmp	r2, #0
 8006f9c:	d048      	beq.n	8007030 <_dtoa_r+0x570>
 8006f9e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8006fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa6:	2000      	movs	r0, #0
 8006fa8:	494e      	ldr	r1, [pc, #312]	; (80070e4 <_dtoa_r+0x624>)
 8006faa:	f7f9 fc37 	bl	800081c <__aeabi_ddiv>
 8006fae:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006fb2:	f7f9 f955 	bl	8000260 <__aeabi_dsub>
 8006fb6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006fba:	9d06      	ldr	r5, [sp, #24]
 8006fbc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006fc0:	f7f9 fdb2 	bl	8000b28 <__aeabi_d2iz>
 8006fc4:	4606      	mov	r6, r0
 8006fc6:	f7f9 fa99 	bl	80004fc <__aeabi_i2d>
 8006fca:	4602      	mov	r2, r0
 8006fcc:	460b      	mov	r3, r1
 8006fce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006fd2:	f7f9 f945 	bl	8000260 <__aeabi_dsub>
 8006fd6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006fda:	3630      	adds	r6, #48	; 0x30
 8006fdc:	f805 6b01 	strb.w	r6, [r5], #1
 8006fe0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006fe4:	f7f9 fd62 	bl	8000aac <__aeabi_dcmplt>
 8006fe8:	2800      	cmp	r0, #0
 8006fea:	d164      	bne.n	80070b6 <_dtoa_r+0x5f6>
 8006fec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006ff0:	2000      	movs	r0, #0
 8006ff2:	4938      	ldr	r1, [pc, #224]	; (80070d4 <_dtoa_r+0x614>)
 8006ff4:	f7f9 f934 	bl	8000260 <__aeabi_dsub>
 8006ff8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006ffc:	f7f9 fd56 	bl	8000aac <__aeabi_dcmplt>
 8007000:	2800      	cmp	r0, #0
 8007002:	f040 80b9 	bne.w	8007178 <_dtoa_r+0x6b8>
 8007006:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007008:	429d      	cmp	r5, r3
 800700a:	f43f af7c 	beq.w	8006f06 <_dtoa_r+0x446>
 800700e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007012:	2200      	movs	r2, #0
 8007014:	4b30      	ldr	r3, [pc, #192]	; (80070d8 <_dtoa_r+0x618>)
 8007016:	f7f9 fad7 	bl	80005c8 <__aeabi_dmul>
 800701a:	2200      	movs	r2, #0
 800701c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007020:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007024:	4b2c      	ldr	r3, [pc, #176]	; (80070d8 <_dtoa_r+0x618>)
 8007026:	f7f9 facf 	bl	80005c8 <__aeabi_dmul>
 800702a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800702e:	e7c5      	b.n	8006fbc <_dtoa_r+0x4fc>
 8007030:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8007034:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007038:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800703c:	f7f9 fac4 	bl	80005c8 <__aeabi_dmul>
 8007040:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007044:	9d06      	ldr	r5, [sp, #24]
 8007046:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800704a:	f7f9 fd6d 	bl	8000b28 <__aeabi_d2iz>
 800704e:	4606      	mov	r6, r0
 8007050:	f7f9 fa54 	bl	80004fc <__aeabi_i2d>
 8007054:	4602      	mov	r2, r0
 8007056:	460b      	mov	r3, r1
 8007058:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800705c:	f7f9 f900 	bl	8000260 <__aeabi_dsub>
 8007060:	3630      	adds	r6, #48	; 0x30
 8007062:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007064:	f805 6b01 	strb.w	r6, [r5], #1
 8007068:	42ab      	cmp	r3, r5
 800706a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800706e:	f04f 0200 	mov.w	r2, #0
 8007072:	d124      	bne.n	80070be <_dtoa_r+0x5fe>
 8007074:	4b1b      	ldr	r3, [pc, #108]	; (80070e4 <_dtoa_r+0x624>)
 8007076:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800707a:	f7f9 f8f3 	bl	8000264 <__adddf3>
 800707e:	4602      	mov	r2, r0
 8007080:	460b      	mov	r3, r1
 8007082:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007086:	f7f9 fd2f 	bl	8000ae8 <__aeabi_dcmpgt>
 800708a:	2800      	cmp	r0, #0
 800708c:	d174      	bne.n	8007178 <_dtoa_r+0x6b8>
 800708e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007092:	2000      	movs	r0, #0
 8007094:	4913      	ldr	r1, [pc, #76]	; (80070e4 <_dtoa_r+0x624>)
 8007096:	f7f9 f8e3 	bl	8000260 <__aeabi_dsub>
 800709a:	4602      	mov	r2, r0
 800709c:	460b      	mov	r3, r1
 800709e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070a2:	f7f9 fd03 	bl	8000aac <__aeabi_dcmplt>
 80070a6:	2800      	cmp	r0, #0
 80070a8:	f43f af2d 	beq.w	8006f06 <_dtoa_r+0x446>
 80070ac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80070b0:	1e6a      	subs	r2, r5, #1
 80070b2:	2b30      	cmp	r3, #48	; 0x30
 80070b4:	d001      	beq.n	80070ba <_dtoa_r+0x5fa>
 80070b6:	46bb      	mov	fp, r7
 80070b8:	e04d      	b.n	8007156 <_dtoa_r+0x696>
 80070ba:	4615      	mov	r5, r2
 80070bc:	e7f6      	b.n	80070ac <_dtoa_r+0x5ec>
 80070be:	4b06      	ldr	r3, [pc, #24]	; (80070d8 <_dtoa_r+0x618>)
 80070c0:	f7f9 fa82 	bl	80005c8 <__aeabi_dmul>
 80070c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80070c8:	e7bd      	b.n	8007046 <_dtoa_r+0x586>
 80070ca:	bf00      	nop
 80070cc:	08008e20 	.word	0x08008e20
 80070d0:	08008df8 	.word	0x08008df8
 80070d4:	3ff00000 	.word	0x3ff00000
 80070d8:	40240000 	.word	0x40240000
 80070dc:	401c0000 	.word	0x401c0000
 80070e0:	40140000 	.word	0x40140000
 80070e4:	3fe00000 	.word	0x3fe00000
 80070e8:	9d06      	ldr	r5, [sp, #24]
 80070ea:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80070ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80070f2:	4630      	mov	r0, r6
 80070f4:	4639      	mov	r1, r7
 80070f6:	f7f9 fb91 	bl	800081c <__aeabi_ddiv>
 80070fa:	f7f9 fd15 	bl	8000b28 <__aeabi_d2iz>
 80070fe:	4680      	mov	r8, r0
 8007100:	f7f9 f9fc 	bl	80004fc <__aeabi_i2d>
 8007104:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007108:	f7f9 fa5e 	bl	80005c8 <__aeabi_dmul>
 800710c:	4602      	mov	r2, r0
 800710e:	460b      	mov	r3, r1
 8007110:	4630      	mov	r0, r6
 8007112:	4639      	mov	r1, r7
 8007114:	f7f9 f8a4 	bl	8000260 <__aeabi_dsub>
 8007118:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800711c:	f805 6b01 	strb.w	r6, [r5], #1
 8007120:	9e06      	ldr	r6, [sp, #24]
 8007122:	4602      	mov	r2, r0
 8007124:	1bae      	subs	r6, r5, r6
 8007126:	45b1      	cmp	r9, r6
 8007128:	460b      	mov	r3, r1
 800712a:	d137      	bne.n	800719c <_dtoa_r+0x6dc>
 800712c:	f7f9 f89a 	bl	8000264 <__adddf3>
 8007130:	4606      	mov	r6, r0
 8007132:	460f      	mov	r7, r1
 8007134:	4602      	mov	r2, r0
 8007136:	460b      	mov	r3, r1
 8007138:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800713c:	f7f9 fcb6 	bl	8000aac <__aeabi_dcmplt>
 8007140:	b9c8      	cbnz	r0, 8007176 <_dtoa_r+0x6b6>
 8007142:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007146:	4632      	mov	r2, r6
 8007148:	463b      	mov	r3, r7
 800714a:	f7f9 fca5 	bl	8000a98 <__aeabi_dcmpeq>
 800714e:	b110      	cbz	r0, 8007156 <_dtoa_r+0x696>
 8007150:	f018 0f01 	tst.w	r8, #1
 8007154:	d10f      	bne.n	8007176 <_dtoa_r+0x6b6>
 8007156:	4651      	mov	r1, sl
 8007158:	4620      	mov	r0, r4
 800715a:	f000 fadd 	bl	8007718 <_Bfree>
 800715e:	2300      	movs	r3, #0
 8007160:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007162:	702b      	strb	r3, [r5, #0]
 8007164:	f10b 0301 	add.w	r3, fp, #1
 8007168:	6013      	str	r3, [r2, #0]
 800716a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800716c:	2b00      	cmp	r3, #0
 800716e:	f43f acec 	beq.w	8006b4a <_dtoa_r+0x8a>
 8007172:	601d      	str	r5, [r3, #0]
 8007174:	e4e9      	b.n	8006b4a <_dtoa_r+0x8a>
 8007176:	465f      	mov	r7, fp
 8007178:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800717c:	1e6b      	subs	r3, r5, #1
 800717e:	2a39      	cmp	r2, #57	; 0x39
 8007180:	d106      	bne.n	8007190 <_dtoa_r+0x6d0>
 8007182:	9a06      	ldr	r2, [sp, #24]
 8007184:	429a      	cmp	r2, r3
 8007186:	d107      	bne.n	8007198 <_dtoa_r+0x6d8>
 8007188:	2330      	movs	r3, #48	; 0x30
 800718a:	7013      	strb	r3, [r2, #0]
 800718c:	4613      	mov	r3, r2
 800718e:	3701      	adds	r7, #1
 8007190:	781a      	ldrb	r2, [r3, #0]
 8007192:	3201      	adds	r2, #1
 8007194:	701a      	strb	r2, [r3, #0]
 8007196:	e78e      	b.n	80070b6 <_dtoa_r+0x5f6>
 8007198:	461d      	mov	r5, r3
 800719a:	e7ed      	b.n	8007178 <_dtoa_r+0x6b8>
 800719c:	2200      	movs	r2, #0
 800719e:	4bb5      	ldr	r3, [pc, #724]	; (8007474 <_dtoa_r+0x9b4>)
 80071a0:	f7f9 fa12 	bl	80005c8 <__aeabi_dmul>
 80071a4:	2200      	movs	r2, #0
 80071a6:	2300      	movs	r3, #0
 80071a8:	4606      	mov	r6, r0
 80071aa:	460f      	mov	r7, r1
 80071ac:	f7f9 fc74 	bl	8000a98 <__aeabi_dcmpeq>
 80071b0:	2800      	cmp	r0, #0
 80071b2:	d09c      	beq.n	80070ee <_dtoa_r+0x62e>
 80071b4:	e7cf      	b.n	8007156 <_dtoa_r+0x696>
 80071b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80071b8:	2a00      	cmp	r2, #0
 80071ba:	f000 8129 	beq.w	8007410 <_dtoa_r+0x950>
 80071be:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80071c0:	2a01      	cmp	r2, #1
 80071c2:	f300 810e 	bgt.w	80073e2 <_dtoa_r+0x922>
 80071c6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80071c8:	2a00      	cmp	r2, #0
 80071ca:	f000 8106 	beq.w	80073da <_dtoa_r+0x91a>
 80071ce:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80071d2:	4645      	mov	r5, r8
 80071d4:	9e08      	ldr	r6, [sp, #32]
 80071d6:	9a07      	ldr	r2, [sp, #28]
 80071d8:	2101      	movs	r1, #1
 80071da:	441a      	add	r2, r3
 80071dc:	4620      	mov	r0, r4
 80071de:	4498      	add	r8, r3
 80071e0:	9207      	str	r2, [sp, #28]
 80071e2:	f000 fb39 	bl	8007858 <__i2b>
 80071e6:	4607      	mov	r7, r0
 80071e8:	2d00      	cmp	r5, #0
 80071ea:	dd0b      	ble.n	8007204 <_dtoa_r+0x744>
 80071ec:	9b07      	ldr	r3, [sp, #28]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	dd08      	ble.n	8007204 <_dtoa_r+0x744>
 80071f2:	42ab      	cmp	r3, r5
 80071f4:	bfa8      	it	ge
 80071f6:	462b      	movge	r3, r5
 80071f8:	9a07      	ldr	r2, [sp, #28]
 80071fa:	eba8 0803 	sub.w	r8, r8, r3
 80071fe:	1aed      	subs	r5, r5, r3
 8007200:	1ad3      	subs	r3, r2, r3
 8007202:	9307      	str	r3, [sp, #28]
 8007204:	9b08      	ldr	r3, [sp, #32]
 8007206:	b1fb      	cbz	r3, 8007248 <_dtoa_r+0x788>
 8007208:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800720a:	2b00      	cmp	r3, #0
 800720c:	f000 8104 	beq.w	8007418 <_dtoa_r+0x958>
 8007210:	2e00      	cmp	r6, #0
 8007212:	dd11      	ble.n	8007238 <_dtoa_r+0x778>
 8007214:	4639      	mov	r1, r7
 8007216:	4632      	mov	r2, r6
 8007218:	4620      	mov	r0, r4
 800721a:	f000 fbb3 	bl	8007984 <__pow5mult>
 800721e:	4652      	mov	r2, sl
 8007220:	4601      	mov	r1, r0
 8007222:	4607      	mov	r7, r0
 8007224:	4620      	mov	r0, r4
 8007226:	f000 fb20 	bl	800786a <__multiply>
 800722a:	4651      	mov	r1, sl
 800722c:	900a      	str	r0, [sp, #40]	; 0x28
 800722e:	4620      	mov	r0, r4
 8007230:	f000 fa72 	bl	8007718 <_Bfree>
 8007234:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007236:	469a      	mov	sl, r3
 8007238:	9b08      	ldr	r3, [sp, #32]
 800723a:	1b9a      	subs	r2, r3, r6
 800723c:	d004      	beq.n	8007248 <_dtoa_r+0x788>
 800723e:	4651      	mov	r1, sl
 8007240:	4620      	mov	r0, r4
 8007242:	f000 fb9f 	bl	8007984 <__pow5mult>
 8007246:	4682      	mov	sl, r0
 8007248:	2101      	movs	r1, #1
 800724a:	4620      	mov	r0, r4
 800724c:	f000 fb04 	bl	8007858 <__i2b>
 8007250:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007252:	4606      	mov	r6, r0
 8007254:	2b00      	cmp	r3, #0
 8007256:	f340 80e1 	ble.w	800741c <_dtoa_r+0x95c>
 800725a:	461a      	mov	r2, r3
 800725c:	4601      	mov	r1, r0
 800725e:	4620      	mov	r0, r4
 8007260:	f000 fb90 	bl	8007984 <__pow5mult>
 8007264:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007266:	4606      	mov	r6, r0
 8007268:	2b01      	cmp	r3, #1
 800726a:	f340 80da 	ble.w	8007422 <_dtoa_r+0x962>
 800726e:	2300      	movs	r3, #0
 8007270:	9308      	str	r3, [sp, #32]
 8007272:	6933      	ldr	r3, [r6, #16]
 8007274:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007278:	6918      	ldr	r0, [r3, #16]
 800727a:	f000 fa9f 	bl	80077bc <__hi0bits>
 800727e:	f1c0 0020 	rsb	r0, r0, #32
 8007282:	9b07      	ldr	r3, [sp, #28]
 8007284:	4418      	add	r0, r3
 8007286:	f010 001f 	ands.w	r0, r0, #31
 800728a:	f000 80f0 	beq.w	800746e <_dtoa_r+0x9ae>
 800728e:	f1c0 0320 	rsb	r3, r0, #32
 8007292:	2b04      	cmp	r3, #4
 8007294:	f340 80e2 	ble.w	800745c <_dtoa_r+0x99c>
 8007298:	9b07      	ldr	r3, [sp, #28]
 800729a:	f1c0 001c 	rsb	r0, r0, #28
 800729e:	4480      	add	r8, r0
 80072a0:	4405      	add	r5, r0
 80072a2:	4403      	add	r3, r0
 80072a4:	9307      	str	r3, [sp, #28]
 80072a6:	f1b8 0f00 	cmp.w	r8, #0
 80072aa:	dd05      	ble.n	80072b8 <_dtoa_r+0x7f8>
 80072ac:	4651      	mov	r1, sl
 80072ae:	4642      	mov	r2, r8
 80072b0:	4620      	mov	r0, r4
 80072b2:	f000 fbb5 	bl	8007a20 <__lshift>
 80072b6:	4682      	mov	sl, r0
 80072b8:	9b07      	ldr	r3, [sp, #28]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	dd05      	ble.n	80072ca <_dtoa_r+0x80a>
 80072be:	4631      	mov	r1, r6
 80072c0:	461a      	mov	r2, r3
 80072c2:	4620      	mov	r0, r4
 80072c4:	f000 fbac 	bl	8007a20 <__lshift>
 80072c8:	4606      	mov	r6, r0
 80072ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	f000 80d3 	beq.w	8007478 <_dtoa_r+0x9b8>
 80072d2:	4631      	mov	r1, r6
 80072d4:	4650      	mov	r0, sl
 80072d6:	f000 fbf4 	bl	8007ac2 <__mcmp>
 80072da:	2800      	cmp	r0, #0
 80072dc:	f280 80cc 	bge.w	8007478 <_dtoa_r+0x9b8>
 80072e0:	2300      	movs	r3, #0
 80072e2:	4651      	mov	r1, sl
 80072e4:	220a      	movs	r2, #10
 80072e6:	4620      	mov	r0, r4
 80072e8:	f000 fa2d 	bl	8007746 <__multadd>
 80072ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072ee:	f10b 3bff 	add.w	fp, fp, #4294967295
 80072f2:	4682      	mov	sl, r0
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	f000 81a9 	beq.w	800764c <_dtoa_r+0xb8c>
 80072fa:	2300      	movs	r3, #0
 80072fc:	4639      	mov	r1, r7
 80072fe:	220a      	movs	r2, #10
 8007300:	4620      	mov	r0, r4
 8007302:	f000 fa20 	bl	8007746 <__multadd>
 8007306:	9b04      	ldr	r3, [sp, #16]
 8007308:	4607      	mov	r7, r0
 800730a:	2b00      	cmp	r3, #0
 800730c:	dc03      	bgt.n	8007316 <_dtoa_r+0x856>
 800730e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007310:	2b02      	cmp	r3, #2
 8007312:	f300 80b9 	bgt.w	8007488 <_dtoa_r+0x9c8>
 8007316:	2d00      	cmp	r5, #0
 8007318:	dd05      	ble.n	8007326 <_dtoa_r+0x866>
 800731a:	4639      	mov	r1, r7
 800731c:	462a      	mov	r2, r5
 800731e:	4620      	mov	r0, r4
 8007320:	f000 fb7e 	bl	8007a20 <__lshift>
 8007324:	4607      	mov	r7, r0
 8007326:	9b08      	ldr	r3, [sp, #32]
 8007328:	2b00      	cmp	r3, #0
 800732a:	f000 8110 	beq.w	800754e <_dtoa_r+0xa8e>
 800732e:	6879      	ldr	r1, [r7, #4]
 8007330:	4620      	mov	r0, r4
 8007332:	f000 f9bd 	bl	80076b0 <_Balloc>
 8007336:	4605      	mov	r5, r0
 8007338:	693a      	ldr	r2, [r7, #16]
 800733a:	f107 010c 	add.w	r1, r7, #12
 800733e:	3202      	adds	r2, #2
 8007340:	0092      	lsls	r2, r2, #2
 8007342:	300c      	adds	r0, #12
 8007344:	f7fe fe62 	bl	800600c <memcpy>
 8007348:	2201      	movs	r2, #1
 800734a:	4629      	mov	r1, r5
 800734c:	4620      	mov	r0, r4
 800734e:	f000 fb67 	bl	8007a20 <__lshift>
 8007352:	9707      	str	r7, [sp, #28]
 8007354:	4607      	mov	r7, r0
 8007356:	9b02      	ldr	r3, [sp, #8]
 8007358:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800735c:	f003 0301 	and.w	r3, r3, #1
 8007360:	9308      	str	r3, [sp, #32]
 8007362:	4631      	mov	r1, r6
 8007364:	4650      	mov	r0, sl
 8007366:	f7ff fb1d 	bl	80069a4 <quorem>
 800736a:	9907      	ldr	r1, [sp, #28]
 800736c:	4605      	mov	r5, r0
 800736e:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007372:	4650      	mov	r0, sl
 8007374:	f000 fba5 	bl	8007ac2 <__mcmp>
 8007378:	463a      	mov	r2, r7
 800737a:	9002      	str	r0, [sp, #8]
 800737c:	4631      	mov	r1, r6
 800737e:	4620      	mov	r0, r4
 8007380:	f000 fbb9 	bl	8007af6 <__mdiff>
 8007384:	68c3      	ldr	r3, [r0, #12]
 8007386:	4602      	mov	r2, r0
 8007388:	2b00      	cmp	r3, #0
 800738a:	f040 80e2 	bne.w	8007552 <_dtoa_r+0xa92>
 800738e:	4601      	mov	r1, r0
 8007390:	9009      	str	r0, [sp, #36]	; 0x24
 8007392:	4650      	mov	r0, sl
 8007394:	f000 fb95 	bl	8007ac2 <__mcmp>
 8007398:	4603      	mov	r3, r0
 800739a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800739c:	4611      	mov	r1, r2
 800739e:	4620      	mov	r0, r4
 80073a0:	9309      	str	r3, [sp, #36]	; 0x24
 80073a2:	f000 f9b9 	bl	8007718 <_Bfree>
 80073a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	f040 80d4 	bne.w	8007556 <_dtoa_r+0xa96>
 80073ae:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80073b0:	2a00      	cmp	r2, #0
 80073b2:	f040 80d0 	bne.w	8007556 <_dtoa_r+0xa96>
 80073b6:	9a08      	ldr	r2, [sp, #32]
 80073b8:	2a00      	cmp	r2, #0
 80073ba:	f040 80cc 	bne.w	8007556 <_dtoa_r+0xa96>
 80073be:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80073c2:	f000 80e8 	beq.w	8007596 <_dtoa_r+0xad6>
 80073c6:	9b02      	ldr	r3, [sp, #8]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	dd01      	ble.n	80073d0 <_dtoa_r+0x910>
 80073cc:	f105 0931 	add.w	r9, r5, #49	; 0x31
 80073d0:	f108 0501 	add.w	r5, r8, #1
 80073d4:	f888 9000 	strb.w	r9, [r8]
 80073d8:	e06b      	b.n	80074b2 <_dtoa_r+0x9f2>
 80073da:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80073dc:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80073e0:	e6f7      	b.n	80071d2 <_dtoa_r+0x712>
 80073e2:	9b08      	ldr	r3, [sp, #32]
 80073e4:	f109 36ff 	add.w	r6, r9, #4294967295
 80073e8:	42b3      	cmp	r3, r6
 80073ea:	bfb7      	itett	lt
 80073ec:	9b08      	ldrlt	r3, [sp, #32]
 80073ee:	1b9e      	subge	r6, r3, r6
 80073f0:	1af2      	sublt	r2, r6, r3
 80073f2:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 80073f4:	bfbf      	itttt	lt
 80073f6:	9608      	strlt	r6, [sp, #32]
 80073f8:	189b      	addlt	r3, r3, r2
 80073fa:	930c      	strlt	r3, [sp, #48]	; 0x30
 80073fc:	2600      	movlt	r6, #0
 80073fe:	f1b9 0f00 	cmp.w	r9, #0
 8007402:	bfb9      	ittee	lt
 8007404:	eba8 0509 	sublt.w	r5, r8, r9
 8007408:	2300      	movlt	r3, #0
 800740a:	4645      	movge	r5, r8
 800740c:	464b      	movge	r3, r9
 800740e:	e6e2      	b.n	80071d6 <_dtoa_r+0x716>
 8007410:	9e08      	ldr	r6, [sp, #32]
 8007412:	4645      	mov	r5, r8
 8007414:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007416:	e6e7      	b.n	80071e8 <_dtoa_r+0x728>
 8007418:	9a08      	ldr	r2, [sp, #32]
 800741a:	e710      	b.n	800723e <_dtoa_r+0x77e>
 800741c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800741e:	2b01      	cmp	r3, #1
 8007420:	dc18      	bgt.n	8007454 <_dtoa_r+0x994>
 8007422:	9b02      	ldr	r3, [sp, #8]
 8007424:	b9b3      	cbnz	r3, 8007454 <_dtoa_r+0x994>
 8007426:	9b03      	ldr	r3, [sp, #12]
 8007428:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800742c:	b9a3      	cbnz	r3, 8007458 <_dtoa_r+0x998>
 800742e:	9b03      	ldr	r3, [sp, #12]
 8007430:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007434:	0d1b      	lsrs	r3, r3, #20
 8007436:	051b      	lsls	r3, r3, #20
 8007438:	b12b      	cbz	r3, 8007446 <_dtoa_r+0x986>
 800743a:	9b07      	ldr	r3, [sp, #28]
 800743c:	f108 0801 	add.w	r8, r8, #1
 8007440:	3301      	adds	r3, #1
 8007442:	9307      	str	r3, [sp, #28]
 8007444:	2301      	movs	r3, #1
 8007446:	9308      	str	r3, [sp, #32]
 8007448:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800744a:	2b00      	cmp	r3, #0
 800744c:	f47f af11 	bne.w	8007272 <_dtoa_r+0x7b2>
 8007450:	2001      	movs	r0, #1
 8007452:	e716      	b.n	8007282 <_dtoa_r+0x7c2>
 8007454:	2300      	movs	r3, #0
 8007456:	e7f6      	b.n	8007446 <_dtoa_r+0x986>
 8007458:	9b02      	ldr	r3, [sp, #8]
 800745a:	e7f4      	b.n	8007446 <_dtoa_r+0x986>
 800745c:	f43f af23 	beq.w	80072a6 <_dtoa_r+0x7e6>
 8007460:	9a07      	ldr	r2, [sp, #28]
 8007462:	331c      	adds	r3, #28
 8007464:	441a      	add	r2, r3
 8007466:	4498      	add	r8, r3
 8007468:	441d      	add	r5, r3
 800746a:	4613      	mov	r3, r2
 800746c:	e71a      	b.n	80072a4 <_dtoa_r+0x7e4>
 800746e:	4603      	mov	r3, r0
 8007470:	e7f6      	b.n	8007460 <_dtoa_r+0x9a0>
 8007472:	bf00      	nop
 8007474:	40240000 	.word	0x40240000
 8007478:	f1b9 0f00 	cmp.w	r9, #0
 800747c:	dc33      	bgt.n	80074e6 <_dtoa_r+0xa26>
 800747e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007480:	2b02      	cmp	r3, #2
 8007482:	dd30      	ble.n	80074e6 <_dtoa_r+0xa26>
 8007484:	f8cd 9010 	str.w	r9, [sp, #16]
 8007488:	9b04      	ldr	r3, [sp, #16]
 800748a:	b963      	cbnz	r3, 80074a6 <_dtoa_r+0x9e6>
 800748c:	4631      	mov	r1, r6
 800748e:	2205      	movs	r2, #5
 8007490:	4620      	mov	r0, r4
 8007492:	f000 f958 	bl	8007746 <__multadd>
 8007496:	4601      	mov	r1, r0
 8007498:	4606      	mov	r6, r0
 800749a:	4650      	mov	r0, sl
 800749c:	f000 fb11 	bl	8007ac2 <__mcmp>
 80074a0:	2800      	cmp	r0, #0
 80074a2:	f73f ad5c 	bgt.w	8006f5e <_dtoa_r+0x49e>
 80074a6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80074a8:	9d06      	ldr	r5, [sp, #24]
 80074aa:	ea6f 0b03 	mvn.w	fp, r3
 80074ae:	2300      	movs	r3, #0
 80074b0:	9307      	str	r3, [sp, #28]
 80074b2:	4631      	mov	r1, r6
 80074b4:	4620      	mov	r0, r4
 80074b6:	f000 f92f 	bl	8007718 <_Bfree>
 80074ba:	2f00      	cmp	r7, #0
 80074bc:	f43f ae4b 	beq.w	8007156 <_dtoa_r+0x696>
 80074c0:	9b07      	ldr	r3, [sp, #28]
 80074c2:	b12b      	cbz	r3, 80074d0 <_dtoa_r+0xa10>
 80074c4:	42bb      	cmp	r3, r7
 80074c6:	d003      	beq.n	80074d0 <_dtoa_r+0xa10>
 80074c8:	4619      	mov	r1, r3
 80074ca:	4620      	mov	r0, r4
 80074cc:	f000 f924 	bl	8007718 <_Bfree>
 80074d0:	4639      	mov	r1, r7
 80074d2:	4620      	mov	r0, r4
 80074d4:	f000 f920 	bl	8007718 <_Bfree>
 80074d8:	e63d      	b.n	8007156 <_dtoa_r+0x696>
 80074da:	2600      	movs	r6, #0
 80074dc:	4637      	mov	r7, r6
 80074de:	e7e2      	b.n	80074a6 <_dtoa_r+0x9e6>
 80074e0:	46bb      	mov	fp, r7
 80074e2:	4637      	mov	r7, r6
 80074e4:	e53b      	b.n	8006f5e <_dtoa_r+0x49e>
 80074e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074e8:	f8cd 9010 	str.w	r9, [sp, #16]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	f47f af12 	bne.w	8007316 <_dtoa_r+0x856>
 80074f2:	9d06      	ldr	r5, [sp, #24]
 80074f4:	4631      	mov	r1, r6
 80074f6:	4650      	mov	r0, sl
 80074f8:	f7ff fa54 	bl	80069a4 <quorem>
 80074fc:	9b06      	ldr	r3, [sp, #24]
 80074fe:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007502:	f805 9b01 	strb.w	r9, [r5], #1
 8007506:	9a04      	ldr	r2, [sp, #16]
 8007508:	1aeb      	subs	r3, r5, r3
 800750a:	429a      	cmp	r2, r3
 800750c:	f300 8081 	bgt.w	8007612 <_dtoa_r+0xb52>
 8007510:	9b06      	ldr	r3, [sp, #24]
 8007512:	2a01      	cmp	r2, #1
 8007514:	bfac      	ite	ge
 8007516:	189b      	addge	r3, r3, r2
 8007518:	3301      	addlt	r3, #1
 800751a:	4698      	mov	r8, r3
 800751c:	2300      	movs	r3, #0
 800751e:	9307      	str	r3, [sp, #28]
 8007520:	4651      	mov	r1, sl
 8007522:	2201      	movs	r2, #1
 8007524:	4620      	mov	r0, r4
 8007526:	f000 fa7b 	bl	8007a20 <__lshift>
 800752a:	4631      	mov	r1, r6
 800752c:	4682      	mov	sl, r0
 800752e:	f000 fac8 	bl	8007ac2 <__mcmp>
 8007532:	2800      	cmp	r0, #0
 8007534:	dc34      	bgt.n	80075a0 <_dtoa_r+0xae0>
 8007536:	d102      	bne.n	800753e <_dtoa_r+0xa7e>
 8007538:	f019 0f01 	tst.w	r9, #1
 800753c:	d130      	bne.n	80075a0 <_dtoa_r+0xae0>
 800753e:	4645      	mov	r5, r8
 8007540:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007544:	1e6a      	subs	r2, r5, #1
 8007546:	2b30      	cmp	r3, #48	; 0x30
 8007548:	d1b3      	bne.n	80074b2 <_dtoa_r+0x9f2>
 800754a:	4615      	mov	r5, r2
 800754c:	e7f8      	b.n	8007540 <_dtoa_r+0xa80>
 800754e:	4638      	mov	r0, r7
 8007550:	e6ff      	b.n	8007352 <_dtoa_r+0x892>
 8007552:	2301      	movs	r3, #1
 8007554:	e722      	b.n	800739c <_dtoa_r+0x8dc>
 8007556:	9a02      	ldr	r2, [sp, #8]
 8007558:	2a00      	cmp	r2, #0
 800755a:	db04      	blt.n	8007566 <_dtoa_r+0xaa6>
 800755c:	d128      	bne.n	80075b0 <_dtoa_r+0xaf0>
 800755e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007560:	bb32      	cbnz	r2, 80075b0 <_dtoa_r+0xaf0>
 8007562:	9a08      	ldr	r2, [sp, #32]
 8007564:	bb22      	cbnz	r2, 80075b0 <_dtoa_r+0xaf0>
 8007566:	2b00      	cmp	r3, #0
 8007568:	f77f af32 	ble.w	80073d0 <_dtoa_r+0x910>
 800756c:	4651      	mov	r1, sl
 800756e:	2201      	movs	r2, #1
 8007570:	4620      	mov	r0, r4
 8007572:	f000 fa55 	bl	8007a20 <__lshift>
 8007576:	4631      	mov	r1, r6
 8007578:	4682      	mov	sl, r0
 800757a:	f000 faa2 	bl	8007ac2 <__mcmp>
 800757e:	2800      	cmp	r0, #0
 8007580:	dc05      	bgt.n	800758e <_dtoa_r+0xace>
 8007582:	f47f af25 	bne.w	80073d0 <_dtoa_r+0x910>
 8007586:	f019 0f01 	tst.w	r9, #1
 800758a:	f43f af21 	beq.w	80073d0 <_dtoa_r+0x910>
 800758e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007592:	f47f af1b 	bne.w	80073cc <_dtoa_r+0x90c>
 8007596:	2339      	movs	r3, #57	; 0x39
 8007598:	f108 0801 	add.w	r8, r8, #1
 800759c:	f808 3c01 	strb.w	r3, [r8, #-1]
 80075a0:	4645      	mov	r5, r8
 80075a2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80075a6:	1e6a      	subs	r2, r5, #1
 80075a8:	2b39      	cmp	r3, #57	; 0x39
 80075aa:	d03a      	beq.n	8007622 <_dtoa_r+0xb62>
 80075ac:	3301      	adds	r3, #1
 80075ae:	e03f      	b.n	8007630 <_dtoa_r+0xb70>
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	f108 0501 	add.w	r5, r8, #1
 80075b6:	dd05      	ble.n	80075c4 <_dtoa_r+0xb04>
 80075b8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80075bc:	d0eb      	beq.n	8007596 <_dtoa_r+0xad6>
 80075be:	f109 0901 	add.w	r9, r9, #1
 80075c2:	e707      	b.n	80073d4 <_dtoa_r+0x914>
 80075c4:	9b06      	ldr	r3, [sp, #24]
 80075c6:	9a04      	ldr	r2, [sp, #16]
 80075c8:	1aeb      	subs	r3, r5, r3
 80075ca:	4293      	cmp	r3, r2
 80075cc:	46a8      	mov	r8, r5
 80075ce:	f805 9c01 	strb.w	r9, [r5, #-1]
 80075d2:	d0a5      	beq.n	8007520 <_dtoa_r+0xa60>
 80075d4:	4651      	mov	r1, sl
 80075d6:	2300      	movs	r3, #0
 80075d8:	220a      	movs	r2, #10
 80075da:	4620      	mov	r0, r4
 80075dc:	f000 f8b3 	bl	8007746 <__multadd>
 80075e0:	9b07      	ldr	r3, [sp, #28]
 80075e2:	4682      	mov	sl, r0
 80075e4:	42bb      	cmp	r3, r7
 80075e6:	f04f 020a 	mov.w	r2, #10
 80075ea:	f04f 0300 	mov.w	r3, #0
 80075ee:	9907      	ldr	r1, [sp, #28]
 80075f0:	4620      	mov	r0, r4
 80075f2:	d104      	bne.n	80075fe <_dtoa_r+0xb3e>
 80075f4:	f000 f8a7 	bl	8007746 <__multadd>
 80075f8:	9007      	str	r0, [sp, #28]
 80075fa:	4607      	mov	r7, r0
 80075fc:	e6b1      	b.n	8007362 <_dtoa_r+0x8a2>
 80075fe:	f000 f8a2 	bl	8007746 <__multadd>
 8007602:	2300      	movs	r3, #0
 8007604:	9007      	str	r0, [sp, #28]
 8007606:	220a      	movs	r2, #10
 8007608:	4639      	mov	r1, r7
 800760a:	4620      	mov	r0, r4
 800760c:	f000 f89b 	bl	8007746 <__multadd>
 8007610:	e7f3      	b.n	80075fa <_dtoa_r+0xb3a>
 8007612:	4651      	mov	r1, sl
 8007614:	2300      	movs	r3, #0
 8007616:	220a      	movs	r2, #10
 8007618:	4620      	mov	r0, r4
 800761a:	f000 f894 	bl	8007746 <__multadd>
 800761e:	4682      	mov	sl, r0
 8007620:	e768      	b.n	80074f4 <_dtoa_r+0xa34>
 8007622:	9b06      	ldr	r3, [sp, #24]
 8007624:	4293      	cmp	r3, r2
 8007626:	d105      	bne.n	8007634 <_dtoa_r+0xb74>
 8007628:	2331      	movs	r3, #49	; 0x31
 800762a:	9a06      	ldr	r2, [sp, #24]
 800762c:	f10b 0b01 	add.w	fp, fp, #1
 8007630:	7013      	strb	r3, [r2, #0]
 8007632:	e73e      	b.n	80074b2 <_dtoa_r+0x9f2>
 8007634:	4615      	mov	r5, r2
 8007636:	e7b4      	b.n	80075a2 <_dtoa_r+0xae2>
 8007638:	4b09      	ldr	r3, [pc, #36]	; (8007660 <_dtoa_r+0xba0>)
 800763a:	f7ff baa3 	b.w	8006b84 <_dtoa_r+0xc4>
 800763e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007640:	2b00      	cmp	r3, #0
 8007642:	f47f aa7d 	bne.w	8006b40 <_dtoa_r+0x80>
 8007646:	4b07      	ldr	r3, [pc, #28]	; (8007664 <_dtoa_r+0xba4>)
 8007648:	f7ff ba9c 	b.w	8006b84 <_dtoa_r+0xc4>
 800764c:	9b04      	ldr	r3, [sp, #16]
 800764e:	2b00      	cmp	r3, #0
 8007650:	f73f af4f 	bgt.w	80074f2 <_dtoa_r+0xa32>
 8007654:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007656:	2b02      	cmp	r3, #2
 8007658:	f77f af4b 	ble.w	80074f2 <_dtoa_r+0xa32>
 800765c:	e714      	b.n	8007488 <_dtoa_r+0x9c8>
 800765e:	bf00      	nop
 8007660:	08008f1b 	.word	0x08008f1b
 8007664:	08008de4 	.word	0x08008de4

08007668 <_localeconv_r>:
 8007668:	4b04      	ldr	r3, [pc, #16]	; (800767c <_localeconv_r+0x14>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	6a18      	ldr	r0, [r3, #32]
 800766e:	4b04      	ldr	r3, [pc, #16]	; (8007680 <_localeconv_r+0x18>)
 8007670:	2800      	cmp	r0, #0
 8007672:	bf08      	it	eq
 8007674:	4618      	moveq	r0, r3
 8007676:	30f0      	adds	r0, #240	; 0xf0
 8007678:	4770      	bx	lr
 800767a:	bf00      	nop
 800767c:	20000054 	.word	0x20000054
 8007680:	200000b8 	.word	0x200000b8

08007684 <malloc>:
 8007684:	4b02      	ldr	r3, [pc, #8]	; (8007690 <malloc+0xc>)
 8007686:	4601      	mov	r1, r0
 8007688:	6818      	ldr	r0, [r3, #0]
 800768a:	f000 bb3d 	b.w	8007d08 <_malloc_r>
 800768e:	bf00      	nop
 8007690:	20000054 	.word	0x20000054

08007694 <memchr>:
 8007694:	b510      	push	{r4, lr}
 8007696:	b2c9      	uxtb	r1, r1
 8007698:	4402      	add	r2, r0
 800769a:	4290      	cmp	r0, r2
 800769c:	4603      	mov	r3, r0
 800769e:	d101      	bne.n	80076a4 <memchr+0x10>
 80076a0:	2000      	movs	r0, #0
 80076a2:	bd10      	pop	{r4, pc}
 80076a4:	781c      	ldrb	r4, [r3, #0]
 80076a6:	3001      	adds	r0, #1
 80076a8:	428c      	cmp	r4, r1
 80076aa:	d1f6      	bne.n	800769a <memchr+0x6>
 80076ac:	4618      	mov	r0, r3
 80076ae:	bd10      	pop	{r4, pc}

080076b0 <_Balloc>:
 80076b0:	b570      	push	{r4, r5, r6, lr}
 80076b2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80076b4:	4604      	mov	r4, r0
 80076b6:	460e      	mov	r6, r1
 80076b8:	b93d      	cbnz	r5, 80076ca <_Balloc+0x1a>
 80076ba:	2010      	movs	r0, #16
 80076bc:	f7ff ffe2 	bl	8007684 <malloc>
 80076c0:	6260      	str	r0, [r4, #36]	; 0x24
 80076c2:	6045      	str	r5, [r0, #4]
 80076c4:	6085      	str	r5, [r0, #8]
 80076c6:	6005      	str	r5, [r0, #0]
 80076c8:	60c5      	str	r5, [r0, #12]
 80076ca:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80076cc:	68eb      	ldr	r3, [r5, #12]
 80076ce:	b183      	cbz	r3, 80076f2 <_Balloc+0x42>
 80076d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80076d2:	68db      	ldr	r3, [r3, #12]
 80076d4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80076d8:	b9b8      	cbnz	r0, 800770a <_Balloc+0x5a>
 80076da:	2101      	movs	r1, #1
 80076dc:	fa01 f506 	lsl.w	r5, r1, r6
 80076e0:	1d6a      	adds	r2, r5, #5
 80076e2:	0092      	lsls	r2, r2, #2
 80076e4:	4620      	mov	r0, r4
 80076e6:	f000 fab4 	bl	8007c52 <_calloc_r>
 80076ea:	b160      	cbz	r0, 8007706 <_Balloc+0x56>
 80076ec:	6046      	str	r6, [r0, #4]
 80076ee:	6085      	str	r5, [r0, #8]
 80076f0:	e00e      	b.n	8007710 <_Balloc+0x60>
 80076f2:	2221      	movs	r2, #33	; 0x21
 80076f4:	2104      	movs	r1, #4
 80076f6:	4620      	mov	r0, r4
 80076f8:	f000 faab 	bl	8007c52 <_calloc_r>
 80076fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80076fe:	60e8      	str	r0, [r5, #12]
 8007700:	68db      	ldr	r3, [r3, #12]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d1e4      	bne.n	80076d0 <_Balloc+0x20>
 8007706:	2000      	movs	r0, #0
 8007708:	bd70      	pop	{r4, r5, r6, pc}
 800770a:	6802      	ldr	r2, [r0, #0]
 800770c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8007710:	2300      	movs	r3, #0
 8007712:	6103      	str	r3, [r0, #16]
 8007714:	60c3      	str	r3, [r0, #12]
 8007716:	bd70      	pop	{r4, r5, r6, pc}

08007718 <_Bfree>:
 8007718:	b570      	push	{r4, r5, r6, lr}
 800771a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800771c:	4606      	mov	r6, r0
 800771e:	460d      	mov	r5, r1
 8007720:	b93c      	cbnz	r4, 8007732 <_Bfree+0x1a>
 8007722:	2010      	movs	r0, #16
 8007724:	f7ff ffae 	bl	8007684 <malloc>
 8007728:	6270      	str	r0, [r6, #36]	; 0x24
 800772a:	6044      	str	r4, [r0, #4]
 800772c:	6084      	str	r4, [r0, #8]
 800772e:	6004      	str	r4, [r0, #0]
 8007730:	60c4      	str	r4, [r0, #12]
 8007732:	b13d      	cbz	r5, 8007744 <_Bfree+0x2c>
 8007734:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007736:	686a      	ldr	r2, [r5, #4]
 8007738:	68db      	ldr	r3, [r3, #12]
 800773a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800773e:	6029      	str	r1, [r5, #0]
 8007740:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8007744:	bd70      	pop	{r4, r5, r6, pc}

08007746 <__multadd>:
 8007746:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800774a:	461f      	mov	r7, r3
 800774c:	4606      	mov	r6, r0
 800774e:	460c      	mov	r4, r1
 8007750:	2300      	movs	r3, #0
 8007752:	690d      	ldr	r5, [r1, #16]
 8007754:	f101 0e14 	add.w	lr, r1, #20
 8007758:	f8de 0000 	ldr.w	r0, [lr]
 800775c:	3301      	adds	r3, #1
 800775e:	b281      	uxth	r1, r0
 8007760:	fb02 7101 	mla	r1, r2, r1, r7
 8007764:	0c00      	lsrs	r0, r0, #16
 8007766:	0c0f      	lsrs	r7, r1, #16
 8007768:	fb02 7000 	mla	r0, r2, r0, r7
 800776c:	b289      	uxth	r1, r1
 800776e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8007772:	429d      	cmp	r5, r3
 8007774:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8007778:	f84e 1b04 	str.w	r1, [lr], #4
 800777c:	dcec      	bgt.n	8007758 <__multadd+0x12>
 800777e:	b1d7      	cbz	r7, 80077b6 <__multadd+0x70>
 8007780:	68a3      	ldr	r3, [r4, #8]
 8007782:	429d      	cmp	r5, r3
 8007784:	db12      	blt.n	80077ac <__multadd+0x66>
 8007786:	6861      	ldr	r1, [r4, #4]
 8007788:	4630      	mov	r0, r6
 800778a:	3101      	adds	r1, #1
 800778c:	f7ff ff90 	bl	80076b0 <_Balloc>
 8007790:	4680      	mov	r8, r0
 8007792:	6922      	ldr	r2, [r4, #16]
 8007794:	f104 010c 	add.w	r1, r4, #12
 8007798:	3202      	adds	r2, #2
 800779a:	0092      	lsls	r2, r2, #2
 800779c:	300c      	adds	r0, #12
 800779e:	f7fe fc35 	bl	800600c <memcpy>
 80077a2:	4621      	mov	r1, r4
 80077a4:	4630      	mov	r0, r6
 80077a6:	f7ff ffb7 	bl	8007718 <_Bfree>
 80077aa:	4644      	mov	r4, r8
 80077ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80077b0:	3501      	adds	r5, #1
 80077b2:	615f      	str	r7, [r3, #20]
 80077b4:	6125      	str	r5, [r4, #16]
 80077b6:	4620      	mov	r0, r4
 80077b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080077bc <__hi0bits>:
 80077bc:	0c02      	lsrs	r2, r0, #16
 80077be:	0412      	lsls	r2, r2, #16
 80077c0:	4603      	mov	r3, r0
 80077c2:	b9b2      	cbnz	r2, 80077f2 <__hi0bits+0x36>
 80077c4:	0403      	lsls	r3, r0, #16
 80077c6:	2010      	movs	r0, #16
 80077c8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80077cc:	bf04      	itt	eq
 80077ce:	021b      	lsleq	r3, r3, #8
 80077d0:	3008      	addeq	r0, #8
 80077d2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80077d6:	bf04      	itt	eq
 80077d8:	011b      	lsleq	r3, r3, #4
 80077da:	3004      	addeq	r0, #4
 80077dc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80077e0:	bf04      	itt	eq
 80077e2:	009b      	lsleq	r3, r3, #2
 80077e4:	3002      	addeq	r0, #2
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	db06      	blt.n	80077f8 <__hi0bits+0x3c>
 80077ea:	005b      	lsls	r3, r3, #1
 80077ec:	d503      	bpl.n	80077f6 <__hi0bits+0x3a>
 80077ee:	3001      	adds	r0, #1
 80077f0:	4770      	bx	lr
 80077f2:	2000      	movs	r0, #0
 80077f4:	e7e8      	b.n	80077c8 <__hi0bits+0xc>
 80077f6:	2020      	movs	r0, #32
 80077f8:	4770      	bx	lr

080077fa <__lo0bits>:
 80077fa:	6803      	ldr	r3, [r0, #0]
 80077fc:	4601      	mov	r1, r0
 80077fe:	f013 0207 	ands.w	r2, r3, #7
 8007802:	d00b      	beq.n	800781c <__lo0bits+0x22>
 8007804:	07da      	lsls	r2, r3, #31
 8007806:	d423      	bmi.n	8007850 <__lo0bits+0x56>
 8007808:	0798      	lsls	r0, r3, #30
 800780a:	bf49      	itett	mi
 800780c:	085b      	lsrmi	r3, r3, #1
 800780e:	089b      	lsrpl	r3, r3, #2
 8007810:	2001      	movmi	r0, #1
 8007812:	600b      	strmi	r3, [r1, #0]
 8007814:	bf5c      	itt	pl
 8007816:	600b      	strpl	r3, [r1, #0]
 8007818:	2002      	movpl	r0, #2
 800781a:	4770      	bx	lr
 800781c:	b298      	uxth	r0, r3
 800781e:	b9a8      	cbnz	r0, 800784c <__lo0bits+0x52>
 8007820:	2010      	movs	r0, #16
 8007822:	0c1b      	lsrs	r3, r3, #16
 8007824:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007828:	bf04      	itt	eq
 800782a:	0a1b      	lsreq	r3, r3, #8
 800782c:	3008      	addeq	r0, #8
 800782e:	071a      	lsls	r2, r3, #28
 8007830:	bf04      	itt	eq
 8007832:	091b      	lsreq	r3, r3, #4
 8007834:	3004      	addeq	r0, #4
 8007836:	079a      	lsls	r2, r3, #30
 8007838:	bf04      	itt	eq
 800783a:	089b      	lsreq	r3, r3, #2
 800783c:	3002      	addeq	r0, #2
 800783e:	07da      	lsls	r2, r3, #31
 8007840:	d402      	bmi.n	8007848 <__lo0bits+0x4e>
 8007842:	085b      	lsrs	r3, r3, #1
 8007844:	d006      	beq.n	8007854 <__lo0bits+0x5a>
 8007846:	3001      	adds	r0, #1
 8007848:	600b      	str	r3, [r1, #0]
 800784a:	4770      	bx	lr
 800784c:	4610      	mov	r0, r2
 800784e:	e7e9      	b.n	8007824 <__lo0bits+0x2a>
 8007850:	2000      	movs	r0, #0
 8007852:	4770      	bx	lr
 8007854:	2020      	movs	r0, #32
 8007856:	4770      	bx	lr

08007858 <__i2b>:
 8007858:	b510      	push	{r4, lr}
 800785a:	460c      	mov	r4, r1
 800785c:	2101      	movs	r1, #1
 800785e:	f7ff ff27 	bl	80076b0 <_Balloc>
 8007862:	2201      	movs	r2, #1
 8007864:	6144      	str	r4, [r0, #20]
 8007866:	6102      	str	r2, [r0, #16]
 8007868:	bd10      	pop	{r4, pc}

0800786a <__multiply>:
 800786a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800786e:	4614      	mov	r4, r2
 8007870:	690a      	ldr	r2, [r1, #16]
 8007872:	6923      	ldr	r3, [r4, #16]
 8007874:	4689      	mov	r9, r1
 8007876:	429a      	cmp	r2, r3
 8007878:	bfbe      	ittt	lt
 800787a:	460b      	movlt	r3, r1
 800787c:	46a1      	movlt	r9, r4
 800787e:	461c      	movlt	r4, r3
 8007880:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007884:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007888:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800788c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007890:	eb07 060a 	add.w	r6, r7, sl
 8007894:	429e      	cmp	r6, r3
 8007896:	bfc8      	it	gt
 8007898:	3101      	addgt	r1, #1
 800789a:	f7ff ff09 	bl	80076b0 <_Balloc>
 800789e:	f100 0514 	add.w	r5, r0, #20
 80078a2:	462b      	mov	r3, r5
 80078a4:	2200      	movs	r2, #0
 80078a6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80078aa:	4543      	cmp	r3, r8
 80078ac:	d316      	bcc.n	80078dc <__multiply+0x72>
 80078ae:	f104 0214 	add.w	r2, r4, #20
 80078b2:	f109 0114 	add.w	r1, r9, #20
 80078b6:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 80078ba:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80078be:	9301      	str	r3, [sp, #4]
 80078c0:	9c01      	ldr	r4, [sp, #4]
 80078c2:	4613      	mov	r3, r2
 80078c4:	4294      	cmp	r4, r2
 80078c6:	d80c      	bhi.n	80078e2 <__multiply+0x78>
 80078c8:	2e00      	cmp	r6, #0
 80078ca:	dd03      	ble.n	80078d4 <__multiply+0x6a>
 80078cc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d054      	beq.n	800797e <__multiply+0x114>
 80078d4:	6106      	str	r6, [r0, #16]
 80078d6:	b003      	add	sp, #12
 80078d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078dc:	f843 2b04 	str.w	r2, [r3], #4
 80078e0:	e7e3      	b.n	80078aa <__multiply+0x40>
 80078e2:	f8b3 a000 	ldrh.w	sl, [r3]
 80078e6:	3204      	adds	r2, #4
 80078e8:	f1ba 0f00 	cmp.w	sl, #0
 80078ec:	d020      	beq.n	8007930 <__multiply+0xc6>
 80078ee:	46ae      	mov	lr, r5
 80078f0:	4689      	mov	r9, r1
 80078f2:	f04f 0c00 	mov.w	ip, #0
 80078f6:	f859 4b04 	ldr.w	r4, [r9], #4
 80078fa:	f8be b000 	ldrh.w	fp, [lr]
 80078fe:	b2a3      	uxth	r3, r4
 8007900:	fb0a b303 	mla	r3, sl, r3, fp
 8007904:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8007908:	f8de 4000 	ldr.w	r4, [lr]
 800790c:	4463      	add	r3, ip
 800790e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8007912:	fb0a c40b 	mla	r4, sl, fp, ip
 8007916:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800791a:	b29b      	uxth	r3, r3
 800791c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007920:	454f      	cmp	r7, r9
 8007922:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8007926:	f84e 3b04 	str.w	r3, [lr], #4
 800792a:	d8e4      	bhi.n	80078f6 <__multiply+0x8c>
 800792c:	f8ce c000 	str.w	ip, [lr]
 8007930:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8007934:	f1b9 0f00 	cmp.w	r9, #0
 8007938:	d01f      	beq.n	800797a <__multiply+0x110>
 800793a:	46ae      	mov	lr, r5
 800793c:	468c      	mov	ip, r1
 800793e:	f04f 0a00 	mov.w	sl, #0
 8007942:	682b      	ldr	r3, [r5, #0]
 8007944:	f8bc 4000 	ldrh.w	r4, [ip]
 8007948:	f8be b002 	ldrh.w	fp, [lr, #2]
 800794c:	b29b      	uxth	r3, r3
 800794e:	fb09 b404 	mla	r4, r9, r4, fp
 8007952:	44a2      	add	sl, r4
 8007954:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8007958:	f84e 3b04 	str.w	r3, [lr], #4
 800795c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007960:	f8be 4000 	ldrh.w	r4, [lr]
 8007964:	0c1b      	lsrs	r3, r3, #16
 8007966:	fb09 4303 	mla	r3, r9, r3, r4
 800796a:	4567      	cmp	r7, ip
 800796c:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8007970:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007974:	d8e6      	bhi.n	8007944 <__multiply+0xda>
 8007976:	f8ce 3000 	str.w	r3, [lr]
 800797a:	3504      	adds	r5, #4
 800797c:	e7a0      	b.n	80078c0 <__multiply+0x56>
 800797e:	3e01      	subs	r6, #1
 8007980:	e7a2      	b.n	80078c8 <__multiply+0x5e>
	...

08007984 <__pow5mult>:
 8007984:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007988:	4615      	mov	r5, r2
 800798a:	f012 0203 	ands.w	r2, r2, #3
 800798e:	4606      	mov	r6, r0
 8007990:	460f      	mov	r7, r1
 8007992:	d007      	beq.n	80079a4 <__pow5mult+0x20>
 8007994:	4c21      	ldr	r4, [pc, #132]	; (8007a1c <__pow5mult+0x98>)
 8007996:	3a01      	subs	r2, #1
 8007998:	2300      	movs	r3, #0
 800799a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800799e:	f7ff fed2 	bl	8007746 <__multadd>
 80079a2:	4607      	mov	r7, r0
 80079a4:	10ad      	asrs	r5, r5, #2
 80079a6:	d035      	beq.n	8007a14 <__pow5mult+0x90>
 80079a8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80079aa:	b93c      	cbnz	r4, 80079bc <__pow5mult+0x38>
 80079ac:	2010      	movs	r0, #16
 80079ae:	f7ff fe69 	bl	8007684 <malloc>
 80079b2:	6270      	str	r0, [r6, #36]	; 0x24
 80079b4:	6044      	str	r4, [r0, #4]
 80079b6:	6084      	str	r4, [r0, #8]
 80079b8:	6004      	str	r4, [r0, #0]
 80079ba:	60c4      	str	r4, [r0, #12]
 80079bc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80079c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80079c4:	b94c      	cbnz	r4, 80079da <__pow5mult+0x56>
 80079c6:	f240 2171 	movw	r1, #625	; 0x271
 80079ca:	4630      	mov	r0, r6
 80079cc:	f7ff ff44 	bl	8007858 <__i2b>
 80079d0:	2300      	movs	r3, #0
 80079d2:	4604      	mov	r4, r0
 80079d4:	f8c8 0008 	str.w	r0, [r8, #8]
 80079d8:	6003      	str	r3, [r0, #0]
 80079da:	f04f 0800 	mov.w	r8, #0
 80079de:	07eb      	lsls	r3, r5, #31
 80079e0:	d50a      	bpl.n	80079f8 <__pow5mult+0x74>
 80079e2:	4639      	mov	r1, r7
 80079e4:	4622      	mov	r2, r4
 80079e6:	4630      	mov	r0, r6
 80079e8:	f7ff ff3f 	bl	800786a <__multiply>
 80079ec:	4681      	mov	r9, r0
 80079ee:	4639      	mov	r1, r7
 80079f0:	4630      	mov	r0, r6
 80079f2:	f7ff fe91 	bl	8007718 <_Bfree>
 80079f6:	464f      	mov	r7, r9
 80079f8:	106d      	asrs	r5, r5, #1
 80079fa:	d00b      	beq.n	8007a14 <__pow5mult+0x90>
 80079fc:	6820      	ldr	r0, [r4, #0]
 80079fe:	b938      	cbnz	r0, 8007a10 <__pow5mult+0x8c>
 8007a00:	4622      	mov	r2, r4
 8007a02:	4621      	mov	r1, r4
 8007a04:	4630      	mov	r0, r6
 8007a06:	f7ff ff30 	bl	800786a <__multiply>
 8007a0a:	6020      	str	r0, [r4, #0]
 8007a0c:	f8c0 8000 	str.w	r8, [r0]
 8007a10:	4604      	mov	r4, r0
 8007a12:	e7e4      	b.n	80079de <__pow5mult+0x5a>
 8007a14:	4638      	mov	r0, r7
 8007a16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a1a:	bf00      	nop
 8007a1c:	08008ee8 	.word	0x08008ee8

08007a20 <__lshift>:
 8007a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a24:	460c      	mov	r4, r1
 8007a26:	4607      	mov	r7, r0
 8007a28:	4616      	mov	r6, r2
 8007a2a:	6923      	ldr	r3, [r4, #16]
 8007a2c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007a30:	eb0a 0903 	add.w	r9, sl, r3
 8007a34:	6849      	ldr	r1, [r1, #4]
 8007a36:	68a3      	ldr	r3, [r4, #8]
 8007a38:	f109 0501 	add.w	r5, r9, #1
 8007a3c:	42ab      	cmp	r3, r5
 8007a3e:	db31      	blt.n	8007aa4 <__lshift+0x84>
 8007a40:	4638      	mov	r0, r7
 8007a42:	f7ff fe35 	bl	80076b0 <_Balloc>
 8007a46:	2200      	movs	r2, #0
 8007a48:	4680      	mov	r8, r0
 8007a4a:	4611      	mov	r1, r2
 8007a4c:	f100 0314 	add.w	r3, r0, #20
 8007a50:	4552      	cmp	r2, sl
 8007a52:	db2a      	blt.n	8007aaa <__lshift+0x8a>
 8007a54:	6920      	ldr	r0, [r4, #16]
 8007a56:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007a5a:	f104 0114 	add.w	r1, r4, #20
 8007a5e:	f016 021f 	ands.w	r2, r6, #31
 8007a62:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8007a66:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8007a6a:	d022      	beq.n	8007ab2 <__lshift+0x92>
 8007a6c:	2000      	movs	r0, #0
 8007a6e:	f1c2 0c20 	rsb	ip, r2, #32
 8007a72:	680e      	ldr	r6, [r1, #0]
 8007a74:	4096      	lsls	r6, r2
 8007a76:	4330      	orrs	r0, r6
 8007a78:	f843 0b04 	str.w	r0, [r3], #4
 8007a7c:	f851 0b04 	ldr.w	r0, [r1], #4
 8007a80:	458e      	cmp	lr, r1
 8007a82:	fa20 f00c 	lsr.w	r0, r0, ip
 8007a86:	d8f4      	bhi.n	8007a72 <__lshift+0x52>
 8007a88:	6018      	str	r0, [r3, #0]
 8007a8a:	b108      	cbz	r0, 8007a90 <__lshift+0x70>
 8007a8c:	f109 0502 	add.w	r5, r9, #2
 8007a90:	3d01      	subs	r5, #1
 8007a92:	4638      	mov	r0, r7
 8007a94:	f8c8 5010 	str.w	r5, [r8, #16]
 8007a98:	4621      	mov	r1, r4
 8007a9a:	f7ff fe3d 	bl	8007718 <_Bfree>
 8007a9e:	4640      	mov	r0, r8
 8007aa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007aa4:	3101      	adds	r1, #1
 8007aa6:	005b      	lsls	r3, r3, #1
 8007aa8:	e7c8      	b.n	8007a3c <__lshift+0x1c>
 8007aaa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8007aae:	3201      	adds	r2, #1
 8007ab0:	e7ce      	b.n	8007a50 <__lshift+0x30>
 8007ab2:	3b04      	subs	r3, #4
 8007ab4:	f851 2b04 	ldr.w	r2, [r1], #4
 8007ab8:	458e      	cmp	lr, r1
 8007aba:	f843 2f04 	str.w	r2, [r3, #4]!
 8007abe:	d8f9      	bhi.n	8007ab4 <__lshift+0x94>
 8007ac0:	e7e6      	b.n	8007a90 <__lshift+0x70>

08007ac2 <__mcmp>:
 8007ac2:	6903      	ldr	r3, [r0, #16]
 8007ac4:	690a      	ldr	r2, [r1, #16]
 8007ac6:	b530      	push	{r4, r5, lr}
 8007ac8:	1a9b      	subs	r3, r3, r2
 8007aca:	d10c      	bne.n	8007ae6 <__mcmp+0x24>
 8007acc:	0092      	lsls	r2, r2, #2
 8007ace:	3014      	adds	r0, #20
 8007ad0:	3114      	adds	r1, #20
 8007ad2:	1884      	adds	r4, r0, r2
 8007ad4:	4411      	add	r1, r2
 8007ad6:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007ada:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007ade:	4295      	cmp	r5, r2
 8007ae0:	d003      	beq.n	8007aea <__mcmp+0x28>
 8007ae2:	d305      	bcc.n	8007af0 <__mcmp+0x2e>
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	bd30      	pop	{r4, r5, pc}
 8007aea:	42a0      	cmp	r0, r4
 8007aec:	d3f3      	bcc.n	8007ad6 <__mcmp+0x14>
 8007aee:	e7fa      	b.n	8007ae6 <__mcmp+0x24>
 8007af0:	f04f 33ff 	mov.w	r3, #4294967295
 8007af4:	e7f7      	b.n	8007ae6 <__mcmp+0x24>

08007af6 <__mdiff>:
 8007af6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007afa:	460d      	mov	r5, r1
 8007afc:	4607      	mov	r7, r0
 8007afe:	4611      	mov	r1, r2
 8007b00:	4628      	mov	r0, r5
 8007b02:	4614      	mov	r4, r2
 8007b04:	f7ff ffdd 	bl	8007ac2 <__mcmp>
 8007b08:	1e06      	subs	r6, r0, #0
 8007b0a:	d108      	bne.n	8007b1e <__mdiff+0x28>
 8007b0c:	4631      	mov	r1, r6
 8007b0e:	4638      	mov	r0, r7
 8007b10:	f7ff fdce 	bl	80076b0 <_Balloc>
 8007b14:	2301      	movs	r3, #1
 8007b16:	6146      	str	r6, [r0, #20]
 8007b18:	6103      	str	r3, [r0, #16]
 8007b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b1e:	bfa4      	itt	ge
 8007b20:	4623      	movge	r3, r4
 8007b22:	462c      	movge	r4, r5
 8007b24:	4638      	mov	r0, r7
 8007b26:	6861      	ldr	r1, [r4, #4]
 8007b28:	bfa6      	itte	ge
 8007b2a:	461d      	movge	r5, r3
 8007b2c:	2600      	movge	r6, #0
 8007b2e:	2601      	movlt	r6, #1
 8007b30:	f7ff fdbe 	bl	80076b0 <_Balloc>
 8007b34:	f04f 0c00 	mov.w	ip, #0
 8007b38:	60c6      	str	r6, [r0, #12]
 8007b3a:	692b      	ldr	r3, [r5, #16]
 8007b3c:	6926      	ldr	r6, [r4, #16]
 8007b3e:	f104 0214 	add.w	r2, r4, #20
 8007b42:	f105 0914 	add.w	r9, r5, #20
 8007b46:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007b4a:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007b4e:	f100 0114 	add.w	r1, r0, #20
 8007b52:	f852 ab04 	ldr.w	sl, [r2], #4
 8007b56:	f859 5b04 	ldr.w	r5, [r9], #4
 8007b5a:	fa1f f38a 	uxth.w	r3, sl
 8007b5e:	4463      	add	r3, ip
 8007b60:	b2ac      	uxth	r4, r5
 8007b62:	1b1b      	subs	r3, r3, r4
 8007b64:	0c2c      	lsrs	r4, r5, #16
 8007b66:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8007b6a:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8007b6e:	b29b      	uxth	r3, r3
 8007b70:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007b74:	45c8      	cmp	r8, r9
 8007b76:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8007b7a:	4696      	mov	lr, r2
 8007b7c:	f841 4b04 	str.w	r4, [r1], #4
 8007b80:	d8e7      	bhi.n	8007b52 <__mdiff+0x5c>
 8007b82:	45be      	cmp	lr, r7
 8007b84:	d305      	bcc.n	8007b92 <__mdiff+0x9c>
 8007b86:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007b8a:	b18b      	cbz	r3, 8007bb0 <__mdiff+0xba>
 8007b8c:	6106      	str	r6, [r0, #16]
 8007b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b92:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007b96:	b2a2      	uxth	r2, r4
 8007b98:	4462      	add	r2, ip
 8007b9a:	1413      	asrs	r3, r2, #16
 8007b9c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007ba0:	b292      	uxth	r2, r2
 8007ba2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007ba6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007baa:	f841 2b04 	str.w	r2, [r1], #4
 8007bae:	e7e8      	b.n	8007b82 <__mdiff+0x8c>
 8007bb0:	3e01      	subs	r6, #1
 8007bb2:	e7e8      	b.n	8007b86 <__mdiff+0x90>

08007bb4 <__d2b>:
 8007bb4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007bb8:	461c      	mov	r4, r3
 8007bba:	2101      	movs	r1, #1
 8007bbc:	4690      	mov	r8, r2
 8007bbe:	9e08      	ldr	r6, [sp, #32]
 8007bc0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007bc2:	f7ff fd75 	bl	80076b0 <_Balloc>
 8007bc6:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8007bca:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8007bce:	4607      	mov	r7, r0
 8007bd0:	bb34      	cbnz	r4, 8007c20 <__d2b+0x6c>
 8007bd2:	9201      	str	r2, [sp, #4]
 8007bd4:	f1b8 0f00 	cmp.w	r8, #0
 8007bd8:	d027      	beq.n	8007c2a <__d2b+0x76>
 8007bda:	a802      	add	r0, sp, #8
 8007bdc:	f840 8d08 	str.w	r8, [r0, #-8]!
 8007be0:	f7ff fe0b 	bl	80077fa <__lo0bits>
 8007be4:	9900      	ldr	r1, [sp, #0]
 8007be6:	b1f0      	cbz	r0, 8007c26 <__d2b+0x72>
 8007be8:	9a01      	ldr	r2, [sp, #4]
 8007bea:	f1c0 0320 	rsb	r3, r0, #32
 8007bee:	fa02 f303 	lsl.w	r3, r2, r3
 8007bf2:	430b      	orrs	r3, r1
 8007bf4:	40c2      	lsrs	r2, r0
 8007bf6:	617b      	str	r3, [r7, #20]
 8007bf8:	9201      	str	r2, [sp, #4]
 8007bfa:	9b01      	ldr	r3, [sp, #4]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	bf14      	ite	ne
 8007c00:	2102      	movne	r1, #2
 8007c02:	2101      	moveq	r1, #1
 8007c04:	61bb      	str	r3, [r7, #24]
 8007c06:	6139      	str	r1, [r7, #16]
 8007c08:	b1c4      	cbz	r4, 8007c3c <__d2b+0x88>
 8007c0a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007c0e:	4404      	add	r4, r0
 8007c10:	6034      	str	r4, [r6, #0]
 8007c12:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007c16:	6028      	str	r0, [r5, #0]
 8007c18:	4638      	mov	r0, r7
 8007c1a:	b002      	add	sp, #8
 8007c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c20:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007c24:	e7d5      	b.n	8007bd2 <__d2b+0x1e>
 8007c26:	6179      	str	r1, [r7, #20]
 8007c28:	e7e7      	b.n	8007bfa <__d2b+0x46>
 8007c2a:	a801      	add	r0, sp, #4
 8007c2c:	f7ff fde5 	bl	80077fa <__lo0bits>
 8007c30:	2101      	movs	r1, #1
 8007c32:	9b01      	ldr	r3, [sp, #4]
 8007c34:	6139      	str	r1, [r7, #16]
 8007c36:	617b      	str	r3, [r7, #20]
 8007c38:	3020      	adds	r0, #32
 8007c3a:	e7e5      	b.n	8007c08 <__d2b+0x54>
 8007c3c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007c40:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007c44:	6030      	str	r0, [r6, #0]
 8007c46:	6918      	ldr	r0, [r3, #16]
 8007c48:	f7ff fdb8 	bl	80077bc <__hi0bits>
 8007c4c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007c50:	e7e1      	b.n	8007c16 <__d2b+0x62>

08007c52 <_calloc_r>:
 8007c52:	b538      	push	{r3, r4, r5, lr}
 8007c54:	fb02 f401 	mul.w	r4, r2, r1
 8007c58:	4621      	mov	r1, r4
 8007c5a:	f000 f855 	bl	8007d08 <_malloc_r>
 8007c5e:	4605      	mov	r5, r0
 8007c60:	b118      	cbz	r0, 8007c6a <_calloc_r+0x18>
 8007c62:	4622      	mov	r2, r4
 8007c64:	2100      	movs	r1, #0
 8007c66:	f7fe f9dc 	bl	8006022 <memset>
 8007c6a:	4628      	mov	r0, r5
 8007c6c:	bd38      	pop	{r3, r4, r5, pc}
	...

08007c70 <_free_r>:
 8007c70:	b538      	push	{r3, r4, r5, lr}
 8007c72:	4605      	mov	r5, r0
 8007c74:	2900      	cmp	r1, #0
 8007c76:	d043      	beq.n	8007d00 <_free_r+0x90>
 8007c78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c7c:	1f0c      	subs	r4, r1, #4
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	bfb8      	it	lt
 8007c82:	18e4      	addlt	r4, r4, r3
 8007c84:	f000 fece 	bl	8008a24 <__malloc_lock>
 8007c88:	4a1e      	ldr	r2, [pc, #120]	; (8007d04 <_free_r+0x94>)
 8007c8a:	6813      	ldr	r3, [r2, #0]
 8007c8c:	4610      	mov	r0, r2
 8007c8e:	b933      	cbnz	r3, 8007c9e <_free_r+0x2e>
 8007c90:	6063      	str	r3, [r4, #4]
 8007c92:	6014      	str	r4, [r2, #0]
 8007c94:	4628      	mov	r0, r5
 8007c96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c9a:	f000 bec4 	b.w	8008a26 <__malloc_unlock>
 8007c9e:	42a3      	cmp	r3, r4
 8007ca0:	d90b      	bls.n	8007cba <_free_r+0x4a>
 8007ca2:	6821      	ldr	r1, [r4, #0]
 8007ca4:	1862      	adds	r2, r4, r1
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	bf01      	itttt	eq
 8007caa:	681a      	ldreq	r2, [r3, #0]
 8007cac:	685b      	ldreq	r3, [r3, #4]
 8007cae:	1852      	addeq	r2, r2, r1
 8007cb0:	6022      	streq	r2, [r4, #0]
 8007cb2:	6063      	str	r3, [r4, #4]
 8007cb4:	6004      	str	r4, [r0, #0]
 8007cb6:	e7ed      	b.n	8007c94 <_free_r+0x24>
 8007cb8:	4613      	mov	r3, r2
 8007cba:	685a      	ldr	r2, [r3, #4]
 8007cbc:	b10a      	cbz	r2, 8007cc2 <_free_r+0x52>
 8007cbe:	42a2      	cmp	r2, r4
 8007cc0:	d9fa      	bls.n	8007cb8 <_free_r+0x48>
 8007cc2:	6819      	ldr	r1, [r3, #0]
 8007cc4:	1858      	adds	r0, r3, r1
 8007cc6:	42a0      	cmp	r0, r4
 8007cc8:	d10b      	bne.n	8007ce2 <_free_r+0x72>
 8007cca:	6820      	ldr	r0, [r4, #0]
 8007ccc:	4401      	add	r1, r0
 8007cce:	1858      	adds	r0, r3, r1
 8007cd0:	4282      	cmp	r2, r0
 8007cd2:	6019      	str	r1, [r3, #0]
 8007cd4:	d1de      	bne.n	8007c94 <_free_r+0x24>
 8007cd6:	6810      	ldr	r0, [r2, #0]
 8007cd8:	6852      	ldr	r2, [r2, #4]
 8007cda:	4401      	add	r1, r0
 8007cdc:	6019      	str	r1, [r3, #0]
 8007cde:	605a      	str	r2, [r3, #4]
 8007ce0:	e7d8      	b.n	8007c94 <_free_r+0x24>
 8007ce2:	d902      	bls.n	8007cea <_free_r+0x7a>
 8007ce4:	230c      	movs	r3, #12
 8007ce6:	602b      	str	r3, [r5, #0]
 8007ce8:	e7d4      	b.n	8007c94 <_free_r+0x24>
 8007cea:	6820      	ldr	r0, [r4, #0]
 8007cec:	1821      	adds	r1, r4, r0
 8007cee:	428a      	cmp	r2, r1
 8007cf0:	bf01      	itttt	eq
 8007cf2:	6811      	ldreq	r1, [r2, #0]
 8007cf4:	6852      	ldreq	r2, [r2, #4]
 8007cf6:	1809      	addeq	r1, r1, r0
 8007cf8:	6021      	streq	r1, [r4, #0]
 8007cfa:	6062      	str	r2, [r4, #4]
 8007cfc:	605c      	str	r4, [r3, #4]
 8007cfe:	e7c9      	b.n	8007c94 <_free_r+0x24>
 8007d00:	bd38      	pop	{r3, r4, r5, pc}
 8007d02:	bf00      	nop
 8007d04:	200052d0 	.word	0x200052d0

08007d08 <_malloc_r>:
 8007d08:	b570      	push	{r4, r5, r6, lr}
 8007d0a:	1ccd      	adds	r5, r1, #3
 8007d0c:	f025 0503 	bic.w	r5, r5, #3
 8007d10:	3508      	adds	r5, #8
 8007d12:	2d0c      	cmp	r5, #12
 8007d14:	bf38      	it	cc
 8007d16:	250c      	movcc	r5, #12
 8007d18:	2d00      	cmp	r5, #0
 8007d1a:	4606      	mov	r6, r0
 8007d1c:	db01      	blt.n	8007d22 <_malloc_r+0x1a>
 8007d1e:	42a9      	cmp	r1, r5
 8007d20:	d903      	bls.n	8007d2a <_malloc_r+0x22>
 8007d22:	230c      	movs	r3, #12
 8007d24:	6033      	str	r3, [r6, #0]
 8007d26:	2000      	movs	r0, #0
 8007d28:	bd70      	pop	{r4, r5, r6, pc}
 8007d2a:	f000 fe7b 	bl	8008a24 <__malloc_lock>
 8007d2e:	4a23      	ldr	r2, [pc, #140]	; (8007dbc <_malloc_r+0xb4>)
 8007d30:	6814      	ldr	r4, [r2, #0]
 8007d32:	4621      	mov	r1, r4
 8007d34:	b991      	cbnz	r1, 8007d5c <_malloc_r+0x54>
 8007d36:	4c22      	ldr	r4, [pc, #136]	; (8007dc0 <_malloc_r+0xb8>)
 8007d38:	6823      	ldr	r3, [r4, #0]
 8007d3a:	b91b      	cbnz	r3, 8007d44 <_malloc_r+0x3c>
 8007d3c:	4630      	mov	r0, r6
 8007d3e:	f000 fc99 	bl	8008674 <_sbrk_r>
 8007d42:	6020      	str	r0, [r4, #0]
 8007d44:	4629      	mov	r1, r5
 8007d46:	4630      	mov	r0, r6
 8007d48:	f000 fc94 	bl	8008674 <_sbrk_r>
 8007d4c:	1c43      	adds	r3, r0, #1
 8007d4e:	d126      	bne.n	8007d9e <_malloc_r+0x96>
 8007d50:	230c      	movs	r3, #12
 8007d52:	4630      	mov	r0, r6
 8007d54:	6033      	str	r3, [r6, #0]
 8007d56:	f000 fe66 	bl	8008a26 <__malloc_unlock>
 8007d5a:	e7e4      	b.n	8007d26 <_malloc_r+0x1e>
 8007d5c:	680b      	ldr	r3, [r1, #0]
 8007d5e:	1b5b      	subs	r3, r3, r5
 8007d60:	d41a      	bmi.n	8007d98 <_malloc_r+0x90>
 8007d62:	2b0b      	cmp	r3, #11
 8007d64:	d90f      	bls.n	8007d86 <_malloc_r+0x7e>
 8007d66:	600b      	str	r3, [r1, #0]
 8007d68:	18cc      	adds	r4, r1, r3
 8007d6a:	50cd      	str	r5, [r1, r3]
 8007d6c:	4630      	mov	r0, r6
 8007d6e:	f000 fe5a 	bl	8008a26 <__malloc_unlock>
 8007d72:	f104 000b 	add.w	r0, r4, #11
 8007d76:	1d23      	adds	r3, r4, #4
 8007d78:	f020 0007 	bic.w	r0, r0, #7
 8007d7c:	1ac3      	subs	r3, r0, r3
 8007d7e:	d01b      	beq.n	8007db8 <_malloc_r+0xb0>
 8007d80:	425a      	negs	r2, r3
 8007d82:	50e2      	str	r2, [r4, r3]
 8007d84:	bd70      	pop	{r4, r5, r6, pc}
 8007d86:	428c      	cmp	r4, r1
 8007d88:	bf0b      	itete	eq
 8007d8a:	6863      	ldreq	r3, [r4, #4]
 8007d8c:	684b      	ldrne	r3, [r1, #4]
 8007d8e:	6013      	streq	r3, [r2, #0]
 8007d90:	6063      	strne	r3, [r4, #4]
 8007d92:	bf18      	it	ne
 8007d94:	460c      	movne	r4, r1
 8007d96:	e7e9      	b.n	8007d6c <_malloc_r+0x64>
 8007d98:	460c      	mov	r4, r1
 8007d9a:	6849      	ldr	r1, [r1, #4]
 8007d9c:	e7ca      	b.n	8007d34 <_malloc_r+0x2c>
 8007d9e:	1cc4      	adds	r4, r0, #3
 8007da0:	f024 0403 	bic.w	r4, r4, #3
 8007da4:	42a0      	cmp	r0, r4
 8007da6:	d005      	beq.n	8007db4 <_malloc_r+0xac>
 8007da8:	1a21      	subs	r1, r4, r0
 8007daa:	4630      	mov	r0, r6
 8007dac:	f000 fc62 	bl	8008674 <_sbrk_r>
 8007db0:	3001      	adds	r0, #1
 8007db2:	d0cd      	beq.n	8007d50 <_malloc_r+0x48>
 8007db4:	6025      	str	r5, [r4, #0]
 8007db6:	e7d9      	b.n	8007d6c <_malloc_r+0x64>
 8007db8:	bd70      	pop	{r4, r5, r6, pc}
 8007dba:	bf00      	nop
 8007dbc:	200052d0 	.word	0x200052d0
 8007dc0:	200052d4 	.word	0x200052d4

08007dc4 <__ssputs_r>:
 8007dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007dc8:	688e      	ldr	r6, [r1, #8]
 8007dca:	4682      	mov	sl, r0
 8007dcc:	429e      	cmp	r6, r3
 8007dce:	460c      	mov	r4, r1
 8007dd0:	4691      	mov	r9, r2
 8007dd2:	4698      	mov	r8, r3
 8007dd4:	d835      	bhi.n	8007e42 <__ssputs_r+0x7e>
 8007dd6:	898a      	ldrh	r2, [r1, #12]
 8007dd8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007ddc:	d031      	beq.n	8007e42 <__ssputs_r+0x7e>
 8007dde:	2302      	movs	r3, #2
 8007de0:	6825      	ldr	r5, [r4, #0]
 8007de2:	6909      	ldr	r1, [r1, #16]
 8007de4:	1a6f      	subs	r7, r5, r1
 8007de6:	6965      	ldr	r5, [r4, #20]
 8007de8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007dec:	fb95 f5f3 	sdiv	r5, r5, r3
 8007df0:	f108 0301 	add.w	r3, r8, #1
 8007df4:	443b      	add	r3, r7
 8007df6:	429d      	cmp	r5, r3
 8007df8:	bf38      	it	cc
 8007dfa:	461d      	movcc	r5, r3
 8007dfc:	0553      	lsls	r3, r2, #21
 8007dfe:	d531      	bpl.n	8007e64 <__ssputs_r+0xa0>
 8007e00:	4629      	mov	r1, r5
 8007e02:	f7ff ff81 	bl	8007d08 <_malloc_r>
 8007e06:	4606      	mov	r6, r0
 8007e08:	b950      	cbnz	r0, 8007e20 <__ssputs_r+0x5c>
 8007e0a:	230c      	movs	r3, #12
 8007e0c:	f8ca 3000 	str.w	r3, [sl]
 8007e10:	89a3      	ldrh	r3, [r4, #12]
 8007e12:	f04f 30ff 	mov.w	r0, #4294967295
 8007e16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e1a:	81a3      	strh	r3, [r4, #12]
 8007e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e20:	463a      	mov	r2, r7
 8007e22:	6921      	ldr	r1, [r4, #16]
 8007e24:	f7fe f8f2 	bl	800600c <memcpy>
 8007e28:	89a3      	ldrh	r3, [r4, #12]
 8007e2a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007e2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e32:	81a3      	strh	r3, [r4, #12]
 8007e34:	6126      	str	r6, [r4, #16]
 8007e36:	443e      	add	r6, r7
 8007e38:	6026      	str	r6, [r4, #0]
 8007e3a:	4646      	mov	r6, r8
 8007e3c:	6165      	str	r5, [r4, #20]
 8007e3e:	1bed      	subs	r5, r5, r7
 8007e40:	60a5      	str	r5, [r4, #8]
 8007e42:	4546      	cmp	r6, r8
 8007e44:	bf28      	it	cs
 8007e46:	4646      	movcs	r6, r8
 8007e48:	4649      	mov	r1, r9
 8007e4a:	4632      	mov	r2, r6
 8007e4c:	6820      	ldr	r0, [r4, #0]
 8007e4e:	f000 fdcf 	bl	80089f0 <memmove>
 8007e52:	68a3      	ldr	r3, [r4, #8]
 8007e54:	2000      	movs	r0, #0
 8007e56:	1b9b      	subs	r3, r3, r6
 8007e58:	60a3      	str	r3, [r4, #8]
 8007e5a:	6823      	ldr	r3, [r4, #0]
 8007e5c:	441e      	add	r6, r3
 8007e5e:	6026      	str	r6, [r4, #0]
 8007e60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e64:	462a      	mov	r2, r5
 8007e66:	f000 fddf 	bl	8008a28 <_realloc_r>
 8007e6a:	4606      	mov	r6, r0
 8007e6c:	2800      	cmp	r0, #0
 8007e6e:	d1e1      	bne.n	8007e34 <__ssputs_r+0x70>
 8007e70:	6921      	ldr	r1, [r4, #16]
 8007e72:	4650      	mov	r0, sl
 8007e74:	f7ff fefc 	bl	8007c70 <_free_r>
 8007e78:	e7c7      	b.n	8007e0a <__ssputs_r+0x46>
	...

08007e7c <_svfiprintf_r>:
 8007e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e80:	b09d      	sub	sp, #116	; 0x74
 8007e82:	9303      	str	r3, [sp, #12]
 8007e84:	898b      	ldrh	r3, [r1, #12]
 8007e86:	4680      	mov	r8, r0
 8007e88:	061c      	lsls	r4, r3, #24
 8007e8a:	460d      	mov	r5, r1
 8007e8c:	4616      	mov	r6, r2
 8007e8e:	d50f      	bpl.n	8007eb0 <_svfiprintf_r+0x34>
 8007e90:	690b      	ldr	r3, [r1, #16]
 8007e92:	b96b      	cbnz	r3, 8007eb0 <_svfiprintf_r+0x34>
 8007e94:	2140      	movs	r1, #64	; 0x40
 8007e96:	f7ff ff37 	bl	8007d08 <_malloc_r>
 8007e9a:	6028      	str	r0, [r5, #0]
 8007e9c:	6128      	str	r0, [r5, #16]
 8007e9e:	b928      	cbnz	r0, 8007eac <_svfiprintf_r+0x30>
 8007ea0:	230c      	movs	r3, #12
 8007ea2:	f8c8 3000 	str.w	r3, [r8]
 8007ea6:	f04f 30ff 	mov.w	r0, #4294967295
 8007eaa:	e0c4      	b.n	8008036 <_svfiprintf_r+0x1ba>
 8007eac:	2340      	movs	r3, #64	; 0x40
 8007eae:	616b      	str	r3, [r5, #20]
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	9309      	str	r3, [sp, #36]	; 0x24
 8007eb4:	2320      	movs	r3, #32
 8007eb6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007eba:	2330      	movs	r3, #48	; 0x30
 8007ebc:	f04f 0b01 	mov.w	fp, #1
 8007ec0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007ec4:	4637      	mov	r7, r6
 8007ec6:	463c      	mov	r4, r7
 8007ec8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d13c      	bne.n	8007f4a <_svfiprintf_r+0xce>
 8007ed0:	ebb7 0a06 	subs.w	sl, r7, r6
 8007ed4:	d00b      	beq.n	8007eee <_svfiprintf_r+0x72>
 8007ed6:	4653      	mov	r3, sl
 8007ed8:	4632      	mov	r2, r6
 8007eda:	4629      	mov	r1, r5
 8007edc:	4640      	mov	r0, r8
 8007ede:	f7ff ff71 	bl	8007dc4 <__ssputs_r>
 8007ee2:	3001      	adds	r0, #1
 8007ee4:	f000 80a2 	beq.w	800802c <_svfiprintf_r+0x1b0>
 8007ee8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007eea:	4453      	add	r3, sl
 8007eec:	9309      	str	r3, [sp, #36]	; 0x24
 8007eee:	783b      	ldrb	r3, [r7, #0]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	f000 809b 	beq.w	800802c <_svfiprintf_r+0x1b0>
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8007efc:	9304      	str	r3, [sp, #16]
 8007efe:	9307      	str	r3, [sp, #28]
 8007f00:	9205      	str	r2, [sp, #20]
 8007f02:	9306      	str	r3, [sp, #24]
 8007f04:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007f08:	931a      	str	r3, [sp, #104]	; 0x68
 8007f0a:	2205      	movs	r2, #5
 8007f0c:	7821      	ldrb	r1, [r4, #0]
 8007f0e:	4850      	ldr	r0, [pc, #320]	; (8008050 <_svfiprintf_r+0x1d4>)
 8007f10:	f7ff fbc0 	bl	8007694 <memchr>
 8007f14:	1c67      	adds	r7, r4, #1
 8007f16:	9b04      	ldr	r3, [sp, #16]
 8007f18:	b9d8      	cbnz	r0, 8007f52 <_svfiprintf_r+0xd6>
 8007f1a:	06d9      	lsls	r1, r3, #27
 8007f1c:	bf44      	itt	mi
 8007f1e:	2220      	movmi	r2, #32
 8007f20:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007f24:	071a      	lsls	r2, r3, #28
 8007f26:	bf44      	itt	mi
 8007f28:	222b      	movmi	r2, #43	; 0x2b
 8007f2a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007f2e:	7822      	ldrb	r2, [r4, #0]
 8007f30:	2a2a      	cmp	r2, #42	; 0x2a
 8007f32:	d016      	beq.n	8007f62 <_svfiprintf_r+0xe6>
 8007f34:	2100      	movs	r1, #0
 8007f36:	200a      	movs	r0, #10
 8007f38:	9a07      	ldr	r2, [sp, #28]
 8007f3a:	4627      	mov	r7, r4
 8007f3c:	783b      	ldrb	r3, [r7, #0]
 8007f3e:	3401      	adds	r4, #1
 8007f40:	3b30      	subs	r3, #48	; 0x30
 8007f42:	2b09      	cmp	r3, #9
 8007f44:	d950      	bls.n	8007fe8 <_svfiprintf_r+0x16c>
 8007f46:	b1c9      	cbz	r1, 8007f7c <_svfiprintf_r+0x100>
 8007f48:	e011      	b.n	8007f6e <_svfiprintf_r+0xf2>
 8007f4a:	2b25      	cmp	r3, #37	; 0x25
 8007f4c:	d0c0      	beq.n	8007ed0 <_svfiprintf_r+0x54>
 8007f4e:	4627      	mov	r7, r4
 8007f50:	e7b9      	b.n	8007ec6 <_svfiprintf_r+0x4a>
 8007f52:	4a3f      	ldr	r2, [pc, #252]	; (8008050 <_svfiprintf_r+0x1d4>)
 8007f54:	463c      	mov	r4, r7
 8007f56:	1a80      	subs	r0, r0, r2
 8007f58:	fa0b f000 	lsl.w	r0, fp, r0
 8007f5c:	4318      	orrs	r0, r3
 8007f5e:	9004      	str	r0, [sp, #16]
 8007f60:	e7d3      	b.n	8007f0a <_svfiprintf_r+0x8e>
 8007f62:	9a03      	ldr	r2, [sp, #12]
 8007f64:	1d11      	adds	r1, r2, #4
 8007f66:	6812      	ldr	r2, [r2, #0]
 8007f68:	9103      	str	r1, [sp, #12]
 8007f6a:	2a00      	cmp	r2, #0
 8007f6c:	db01      	blt.n	8007f72 <_svfiprintf_r+0xf6>
 8007f6e:	9207      	str	r2, [sp, #28]
 8007f70:	e004      	b.n	8007f7c <_svfiprintf_r+0x100>
 8007f72:	4252      	negs	r2, r2
 8007f74:	f043 0302 	orr.w	r3, r3, #2
 8007f78:	9207      	str	r2, [sp, #28]
 8007f7a:	9304      	str	r3, [sp, #16]
 8007f7c:	783b      	ldrb	r3, [r7, #0]
 8007f7e:	2b2e      	cmp	r3, #46	; 0x2e
 8007f80:	d10d      	bne.n	8007f9e <_svfiprintf_r+0x122>
 8007f82:	787b      	ldrb	r3, [r7, #1]
 8007f84:	1c79      	adds	r1, r7, #1
 8007f86:	2b2a      	cmp	r3, #42	; 0x2a
 8007f88:	d132      	bne.n	8007ff0 <_svfiprintf_r+0x174>
 8007f8a:	9b03      	ldr	r3, [sp, #12]
 8007f8c:	3702      	adds	r7, #2
 8007f8e:	1d1a      	adds	r2, r3, #4
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	9203      	str	r2, [sp, #12]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	bfb8      	it	lt
 8007f98:	f04f 33ff 	movlt.w	r3, #4294967295
 8007f9c:	9305      	str	r3, [sp, #20]
 8007f9e:	4c2d      	ldr	r4, [pc, #180]	; (8008054 <_svfiprintf_r+0x1d8>)
 8007fa0:	2203      	movs	r2, #3
 8007fa2:	7839      	ldrb	r1, [r7, #0]
 8007fa4:	4620      	mov	r0, r4
 8007fa6:	f7ff fb75 	bl	8007694 <memchr>
 8007faa:	b138      	cbz	r0, 8007fbc <_svfiprintf_r+0x140>
 8007fac:	2340      	movs	r3, #64	; 0x40
 8007fae:	1b00      	subs	r0, r0, r4
 8007fb0:	fa03 f000 	lsl.w	r0, r3, r0
 8007fb4:	9b04      	ldr	r3, [sp, #16]
 8007fb6:	3701      	adds	r7, #1
 8007fb8:	4303      	orrs	r3, r0
 8007fba:	9304      	str	r3, [sp, #16]
 8007fbc:	7839      	ldrb	r1, [r7, #0]
 8007fbe:	2206      	movs	r2, #6
 8007fc0:	4825      	ldr	r0, [pc, #148]	; (8008058 <_svfiprintf_r+0x1dc>)
 8007fc2:	1c7e      	adds	r6, r7, #1
 8007fc4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007fc8:	f7ff fb64 	bl	8007694 <memchr>
 8007fcc:	2800      	cmp	r0, #0
 8007fce:	d035      	beq.n	800803c <_svfiprintf_r+0x1c0>
 8007fd0:	4b22      	ldr	r3, [pc, #136]	; (800805c <_svfiprintf_r+0x1e0>)
 8007fd2:	b9fb      	cbnz	r3, 8008014 <_svfiprintf_r+0x198>
 8007fd4:	9b03      	ldr	r3, [sp, #12]
 8007fd6:	3307      	adds	r3, #7
 8007fd8:	f023 0307 	bic.w	r3, r3, #7
 8007fdc:	3308      	adds	r3, #8
 8007fde:	9303      	str	r3, [sp, #12]
 8007fe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fe2:	444b      	add	r3, r9
 8007fe4:	9309      	str	r3, [sp, #36]	; 0x24
 8007fe6:	e76d      	b.n	8007ec4 <_svfiprintf_r+0x48>
 8007fe8:	fb00 3202 	mla	r2, r0, r2, r3
 8007fec:	2101      	movs	r1, #1
 8007fee:	e7a4      	b.n	8007f3a <_svfiprintf_r+0xbe>
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	240a      	movs	r4, #10
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	9305      	str	r3, [sp, #20]
 8007ff8:	460f      	mov	r7, r1
 8007ffa:	783a      	ldrb	r2, [r7, #0]
 8007ffc:	3101      	adds	r1, #1
 8007ffe:	3a30      	subs	r2, #48	; 0x30
 8008000:	2a09      	cmp	r2, #9
 8008002:	d903      	bls.n	800800c <_svfiprintf_r+0x190>
 8008004:	2b00      	cmp	r3, #0
 8008006:	d0ca      	beq.n	8007f9e <_svfiprintf_r+0x122>
 8008008:	9005      	str	r0, [sp, #20]
 800800a:	e7c8      	b.n	8007f9e <_svfiprintf_r+0x122>
 800800c:	fb04 2000 	mla	r0, r4, r0, r2
 8008010:	2301      	movs	r3, #1
 8008012:	e7f1      	b.n	8007ff8 <_svfiprintf_r+0x17c>
 8008014:	ab03      	add	r3, sp, #12
 8008016:	9300      	str	r3, [sp, #0]
 8008018:	462a      	mov	r2, r5
 800801a:	4b11      	ldr	r3, [pc, #68]	; (8008060 <_svfiprintf_r+0x1e4>)
 800801c:	a904      	add	r1, sp, #16
 800801e:	4640      	mov	r0, r8
 8008020:	f7fe f898 	bl	8006154 <_printf_float>
 8008024:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008028:	4681      	mov	r9, r0
 800802a:	d1d9      	bne.n	8007fe0 <_svfiprintf_r+0x164>
 800802c:	89ab      	ldrh	r3, [r5, #12]
 800802e:	065b      	lsls	r3, r3, #25
 8008030:	f53f af39 	bmi.w	8007ea6 <_svfiprintf_r+0x2a>
 8008034:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008036:	b01d      	add	sp, #116	; 0x74
 8008038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800803c:	ab03      	add	r3, sp, #12
 800803e:	9300      	str	r3, [sp, #0]
 8008040:	462a      	mov	r2, r5
 8008042:	4b07      	ldr	r3, [pc, #28]	; (8008060 <_svfiprintf_r+0x1e4>)
 8008044:	a904      	add	r1, sp, #16
 8008046:	4640      	mov	r0, r8
 8008048:	f7fe fb34 	bl	80066b4 <_printf_i>
 800804c:	e7ea      	b.n	8008024 <_svfiprintf_r+0x1a8>
 800804e:	bf00      	nop
 8008050:	08008ef4 	.word	0x08008ef4
 8008054:	08008efa 	.word	0x08008efa
 8008058:	08008efe 	.word	0x08008efe
 800805c:	08006155 	.word	0x08006155
 8008060:	08007dc5 	.word	0x08007dc5

08008064 <_sungetc_r>:
 8008064:	b538      	push	{r3, r4, r5, lr}
 8008066:	1c4b      	adds	r3, r1, #1
 8008068:	4614      	mov	r4, r2
 800806a:	d103      	bne.n	8008074 <_sungetc_r+0x10>
 800806c:	f04f 35ff 	mov.w	r5, #4294967295
 8008070:	4628      	mov	r0, r5
 8008072:	bd38      	pop	{r3, r4, r5, pc}
 8008074:	8993      	ldrh	r3, [r2, #12]
 8008076:	b2cd      	uxtb	r5, r1
 8008078:	f023 0320 	bic.w	r3, r3, #32
 800807c:	8193      	strh	r3, [r2, #12]
 800807e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8008080:	6852      	ldr	r2, [r2, #4]
 8008082:	b18b      	cbz	r3, 80080a8 <_sungetc_r+0x44>
 8008084:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008086:	429a      	cmp	r2, r3
 8008088:	da08      	bge.n	800809c <_sungetc_r+0x38>
 800808a:	6823      	ldr	r3, [r4, #0]
 800808c:	1e5a      	subs	r2, r3, #1
 800808e:	6022      	str	r2, [r4, #0]
 8008090:	f803 5c01 	strb.w	r5, [r3, #-1]
 8008094:	6863      	ldr	r3, [r4, #4]
 8008096:	3301      	adds	r3, #1
 8008098:	6063      	str	r3, [r4, #4]
 800809a:	e7e9      	b.n	8008070 <_sungetc_r+0xc>
 800809c:	4621      	mov	r1, r4
 800809e:	f000 fc4b 	bl	8008938 <__submore>
 80080a2:	2800      	cmp	r0, #0
 80080a4:	d0f1      	beq.n	800808a <_sungetc_r+0x26>
 80080a6:	e7e1      	b.n	800806c <_sungetc_r+0x8>
 80080a8:	6921      	ldr	r1, [r4, #16]
 80080aa:	6823      	ldr	r3, [r4, #0]
 80080ac:	b151      	cbz	r1, 80080c4 <_sungetc_r+0x60>
 80080ae:	4299      	cmp	r1, r3
 80080b0:	d208      	bcs.n	80080c4 <_sungetc_r+0x60>
 80080b2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80080b6:	428d      	cmp	r5, r1
 80080b8:	d104      	bne.n	80080c4 <_sungetc_r+0x60>
 80080ba:	3b01      	subs	r3, #1
 80080bc:	3201      	adds	r2, #1
 80080be:	6023      	str	r3, [r4, #0]
 80080c0:	6062      	str	r2, [r4, #4]
 80080c2:	e7d5      	b.n	8008070 <_sungetc_r+0xc>
 80080c4:	63e3      	str	r3, [r4, #60]	; 0x3c
 80080c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80080ca:	6363      	str	r3, [r4, #52]	; 0x34
 80080cc:	2303      	movs	r3, #3
 80080ce:	63a3      	str	r3, [r4, #56]	; 0x38
 80080d0:	4623      	mov	r3, r4
 80080d2:	6422      	str	r2, [r4, #64]	; 0x40
 80080d4:	f803 5f46 	strb.w	r5, [r3, #70]!
 80080d8:	6023      	str	r3, [r4, #0]
 80080da:	2301      	movs	r3, #1
 80080dc:	e7dc      	b.n	8008098 <_sungetc_r+0x34>

080080de <__ssrefill_r>:
 80080de:	b510      	push	{r4, lr}
 80080e0:	460c      	mov	r4, r1
 80080e2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80080e4:	b169      	cbz	r1, 8008102 <__ssrefill_r+0x24>
 80080e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80080ea:	4299      	cmp	r1, r3
 80080ec:	d001      	beq.n	80080f2 <__ssrefill_r+0x14>
 80080ee:	f7ff fdbf 	bl	8007c70 <_free_r>
 80080f2:	2000      	movs	r0, #0
 80080f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80080f6:	6360      	str	r0, [r4, #52]	; 0x34
 80080f8:	6063      	str	r3, [r4, #4]
 80080fa:	b113      	cbz	r3, 8008102 <__ssrefill_r+0x24>
 80080fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80080fe:	6023      	str	r3, [r4, #0]
 8008100:	bd10      	pop	{r4, pc}
 8008102:	6923      	ldr	r3, [r4, #16]
 8008104:	f04f 30ff 	mov.w	r0, #4294967295
 8008108:	6023      	str	r3, [r4, #0]
 800810a:	2300      	movs	r3, #0
 800810c:	6063      	str	r3, [r4, #4]
 800810e:	89a3      	ldrh	r3, [r4, #12]
 8008110:	f043 0320 	orr.w	r3, r3, #32
 8008114:	81a3      	strh	r3, [r4, #12]
 8008116:	bd10      	pop	{r4, pc}

08008118 <__ssvfiscanf_r>:
 8008118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800811c:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
 8008120:	9301      	str	r3, [sp, #4]
 8008122:	2300      	movs	r3, #0
 8008124:	4606      	mov	r6, r0
 8008126:	460c      	mov	r4, r1
 8008128:	4692      	mov	sl, r2
 800812a:	270a      	movs	r7, #10
 800812c:	9346      	str	r3, [sp, #280]	; 0x118
 800812e:	9347      	str	r3, [sp, #284]	; 0x11c
 8008130:	4b9f      	ldr	r3, [pc, #636]	; (80083b0 <__ssvfiscanf_r+0x298>)
 8008132:	f10d 080c 	add.w	r8, sp, #12
 8008136:	93a2      	str	r3, [sp, #648]	; 0x288
 8008138:	4b9e      	ldr	r3, [pc, #632]	; (80083b4 <__ssvfiscanf_r+0x29c>)
 800813a:	f8df 927c 	ldr.w	r9, [pc, #636]	; 80083b8 <__ssvfiscanf_r+0x2a0>
 800813e:	f8cd 8120 	str.w	r8, [sp, #288]	; 0x120
 8008142:	93a3      	str	r3, [sp, #652]	; 0x28c
 8008144:	f89a 3000 	ldrb.w	r3, [sl]
 8008148:	2b00      	cmp	r3, #0
 800814a:	f000 812f 	beq.w	80083ac <__ssvfiscanf_r+0x294>
 800814e:	f000 fc2f 	bl	80089b0 <__locale_ctype_ptr>
 8008152:	f89a b000 	ldrb.w	fp, [sl]
 8008156:	4458      	add	r0, fp
 8008158:	7843      	ldrb	r3, [r0, #1]
 800815a:	f013 0308 	ands.w	r3, r3, #8
 800815e:	d143      	bne.n	80081e8 <__ssvfiscanf_r+0xd0>
 8008160:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8008164:	f10a 0501 	add.w	r5, sl, #1
 8008168:	f040 8099 	bne.w	800829e <__ssvfiscanf_r+0x186>
 800816c:	9345      	str	r3, [sp, #276]	; 0x114
 800816e:	9343      	str	r3, [sp, #268]	; 0x10c
 8008170:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8008174:	2b2a      	cmp	r3, #42	; 0x2a
 8008176:	d103      	bne.n	8008180 <__ssvfiscanf_r+0x68>
 8008178:	2310      	movs	r3, #16
 800817a:	f10a 0502 	add.w	r5, sl, #2
 800817e:	9343      	str	r3, [sp, #268]	; 0x10c
 8008180:	7829      	ldrb	r1, [r5, #0]
 8008182:	46aa      	mov	sl, r5
 8008184:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8008188:	2a09      	cmp	r2, #9
 800818a:	f105 0501 	add.w	r5, r5, #1
 800818e:	d941      	bls.n	8008214 <__ssvfiscanf_r+0xfc>
 8008190:	2203      	movs	r2, #3
 8008192:	4889      	ldr	r0, [pc, #548]	; (80083b8 <__ssvfiscanf_r+0x2a0>)
 8008194:	f7ff fa7e 	bl	8007694 <memchr>
 8008198:	b138      	cbz	r0, 80081aa <__ssvfiscanf_r+0x92>
 800819a:	eba0 0309 	sub.w	r3, r0, r9
 800819e:	2001      	movs	r0, #1
 80081a0:	46aa      	mov	sl, r5
 80081a2:	4098      	lsls	r0, r3
 80081a4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80081a6:	4318      	orrs	r0, r3
 80081a8:	9043      	str	r0, [sp, #268]	; 0x10c
 80081aa:	f89a 3000 	ldrb.w	r3, [sl]
 80081ae:	f10a 0501 	add.w	r5, sl, #1
 80081b2:	2b67      	cmp	r3, #103	; 0x67
 80081b4:	d84a      	bhi.n	800824c <__ssvfiscanf_r+0x134>
 80081b6:	2b65      	cmp	r3, #101	; 0x65
 80081b8:	f080 80b7 	bcs.w	800832a <__ssvfiscanf_r+0x212>
 80081bc:	2b47      	cmp	r3, #71	; 0x47
 80081be:	d82f      	bhi.n	8008220 <__ssvfiscanf_r+0x108>
 80081c0:	2b45      	cmp	r3, #69	; 0x45
 80081c2:	f080 80b2 	bcs.w	800832a <__ssvfiscanf_r+0x212>
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	f000 8082 	beq.w	80082d0 <__ssvfiscanf_r+0x1b8>
 80081cc:	2b25      	cmp	r3, #37	; 0x25
 80081ce:	d066      	beq.n	800829e <__ssvfiscanf_r+0x186>
 80081d0:	2303      	movs	r3, #3
 80081d2:	9744      	str	r7, [sp, #272]	; 0x110
 80081d4:	9349      	str	r3, [sp, #292]	; 0x124
 80081d6:	e045      	b.n	8008264 <__ssvfiscanf_r+0x14c>
 80081d8:	9947      	ldr	r1, [sp, #284]	; 0x11c
 80081da:	3301      	adds	r3, #1
 80081dc:	3101      	adds	r1, #1
 80081de:	9147      	str	r1, [sp, #284]	; 0x11c
 80081e0:	6861      	ldr	r1, [r4, #4]
 80081e2:	6023      	str	r3, [r4, #0]
 80081e4:	3901      	subs	r1, #1
 80081e6:	6061      	str	r1, [r4, #4]
 80081e8:	6863      	ldr	r3, [r4, #4]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	dd0b      	ble.n	8008206 <__ssvfiscanf_r+0xee>
 80081ee:	f000 fbdf 	bl	80089b0 <__locale_ctype_ptr>
 80081f2:	6823      	ldr	r3, [r4, #0]
 80081f4:	7819      	ldrb	r1, [r3, #0]
 80081f6:	4408      	add	r0, r1
 80081f8:	7841      	ldrb	r1, [r0, #1]
 80081fa:	070d      	lsls	r5, r1, #28
 80081fc:	d4ec      	bmi.n	80081d8 <__ssvfiscanf_r+0xc0>
 80081fe:	f10a 0501 	add.w	r5, sl, #1
 8008202:	46aa      	mov	sl, r5
 8008204:	e79e      	b.n	8008144 <__ssvfiscanf_r+0x2c>
 8008206:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8008208:	4621      	mov	r1, r4
 800820a:	4630      	mov	r0, r6
 800820c:	4798      	blx	r3
 800820e:	2800      	cmp	r0, #0
 8008210:	d0ed      	beq.n	80081ee <__ssvfiscanf_r+0xd6>
 8008212:	e7f4      	b.n	80081fe <__ssvfiscanf_r+0xe6>
 8008214:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8008216:	fb07 1303 	mla	r3, r7, r3, r1
 800821a:	3b30      	subs	r3, #48	; 0x30
 800821c:	9345      	str	r3, [sp, #276]	; 0x114
 800821e:	e7af      	b.n	8008180 <__ssvfiscanf_r+0x68>
 8008220:	2b5b      	cmp	r3, #91	; 0x5b
 8008222:	d061      	beq.n	80082e8 <__ssvfiscanf_r+0x1d0>
 8008224:	d80c      	bhi.n	8008240 <__ssvfiscanf_r+0x128>
 8008226:	2b58      	cmp	r3, #88	; 0x58
 8008228:	d1d2      	bne.n	80081d0 <__ssvfiscanf_r+0xb8>
 800822a:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800822c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008230:	9243      	str	r2, [sp, #268]	; 0x10c
 8008232:	2210      	movs	r2, #16
 8008234:	9244      	str	r2, [sp, #272]	; 0x110
 8008236:	2b6f      	cmp	r3, #111	; 0x6f
 8008238:	bfb4      	ite	lt
 800823a:	2303      	movlt	r3, #3
 800823c:	2304      	movge	r3, #4
 800823e:	e010      	b.n	8008262 <__ssvfiscanf_r+0x14a>
 8008240:	2b63      	cmp	r3, #99	; 0x63
 8008242:	d05c      	beq.n	80082fe <__ssvfiscanf_r+0x1e6>
 8008244:	2b64      	cmp	r3, #100	; 0x64
 8008246:	d1c3      	bne.n	80081d0 <__ssvfiscanf_r+0xb8>
 8008248:	9744      	str	r7, [sp, #272]	; 0x110
 800824a:	e7f4      	b.n	8008236 <__ssvfiscanf_r+0x11e>
 800824c:	2b70      	cmp	r3, #112	; 0x70
 800824e:	d042      	beq.n	80082d6 <__ssvfiscanf_r+0x1be>
 8008250:	d81d      	bhi.n	800828e <__ssvfiscanf_r+0x176>
 8008252:	2b6e      	cmp	r3, #110	; 0x6e
 8008254:	d059      	beq.n	800830a <__ssvfiscanf_r+0x1f2>
 8008256:	d843      	bhi.n	80082e0 <__ssvfiscanf_r+0x1c8>
 8008258:	2b69      	cmp	r3, #105	; 0x69
 800825a:	d1b9      	bne.n	80081d0 <__ssvfiscanf_r+0xb8>
 800825c:	2300      	movs	r3, #0
 800825e:	9344      	str	r3, [sp, #272]	; 0x110
 8008260:	2303      	movs	r3, #3
 8008262:	9349      	str	r3, [sp, #292]	; 0x124
 8008264:	6863      	ldr	r3, [r4, #4]
 8008266:	2b00      	cmp	r3, #0
 8008268:	dd61      	ble.n	800832e <__ssvfiscanf_r+0x216>
 800826a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800826c:	0659      	lsls	r1, r3, #25
 800826e:	d56f      	bpl.n	8008350 <__ssvfiscanf_r+0x238>
 8008270:	9b49      	ldr	r3, [sp, #292]	; 0x124
 8008272:	2b02      	cmp	r3, #2
 8008274:	dc7c      	bgt.n	8008370 <__ssvfiscanf_r+0x258>
 8008276:	ab01      	add	r3, sp, #4
 8008278:	4622      	mov	r2, r4
 800827a:	a943      	add	r1, sp, #268	; 0x10c
 800827c:	4630      	mov	r0, r6
 800827e:	f000 f89f 	bl	80083c0 <_scanf_chars>
 8008282:	2801      	cmp	r0, #1
 8008284:	f000 8092 	beq.w	80083ac <__ssvfiscanf_r+0x294>
 8008288:	2802      	cmp	r0, #2
 800828a:	d1ba      	bne.n	8008202 <__ssvfiscanf_r+0xea>
 800828c:	e01d      	b.n	80082ca <__ssvfiscanf_r+0x1b2>
 800828e:	2b75      	cmp	r3, #117	; 0x75
 8008290:	d0da      	beq.n	8008248 <__ssvfiscanf_r+0x130>
 8008292:	2b78      	cmp	r3, #120	; 0x78
 8008294:	d0c9      	beq.n	800822a <__ssvfiscanf_r+0x112>
 8008296:	2b73      	cmp	r3, #115	; 0x73
 8008298:	d19a      	bne.n	80081d0 <__ssvfiscanf_r+0xb8>
 800829a:	2302      	movs	r3, #2
 800829c:	e7e1      	b.n	8008262 <__ssvfiscanf_r+0x14a>
 800829e:	6863      	ldr	r3, [r4, #4]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	dd0c      	ble.n	80082be <__ssvfiscanf_r+0x1a6>
 80082a4:	6823      	ldr	r3, [r4, #0]
 80082a6:	781a      	ldrb	r2, [r3, #0]
 80082a8:	4593      	cmp	fp, r2
 80082aa:	d17f      	bne.n	80083ac <__ssvfiscanf_r+0x294>
 80082ac:	3301      	adds	r3, #1
 80082ae:	6862      	ldr	r2, [r4, #4]
 80082b0:	6023      	str	r3, [r4, #0]
 80082b2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80082b4:	3a01      	subs	r2, #1
 80082b6:	3301      	adds	r3, #1
 80082b8:	6062      	str	r2, [r4, #4]
 80082ba:	9347      	str	r3, [sp, #284]	; 0x11c
 80082bc:	e7a1      	b.n	8008202 <__ssvfiscanf_r+0xea>
 80082be:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80082c0:	4621      	mov	r1, r4
 80082c2:	4630      	mov	r0, r6
 80082c4:	4798      	blx	r3
 80082c6:	2800      	cmp	r0, #0
 80082c8:	d0ec      	beq.n	80082a4 <__ssvfiscanf_r+0x18c>
 80082ca:	9846      	ldr	r0, [sp, #280]	; 0x118
 80082cc:	2800      	cmp	r0, #0
 80082ce:	d163      	bne.n	8008398 <__ssvfiscanf_r+0x280>
 80082d0:	f04f 30ff 	mov.w	r0, #4294967295
 80082d4:	e066      	b.n	80083a4 <__ssvfiscanf_r+0x28c>
 80082d6:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 80082d8:	f042 0220 	orr.w	r2, r2, #32
 80082dc:	9243      	str	r2, [sp, #268]	; 0x10c
 80082de:	e7a4      	b.n	800822a <__ssvfiscanf_r+0x112>
 80082e0:	2308      	movs	r3, #8
 80082e2:	9344      	str	r3, [sp, #272]	; 0x110
 80082e4:	2304      	movs	r3, #4
 80082e6:	e7bc      	b.n	8008262 <__ssvfiscanf_r+0x14a>
 80082e8:	4629      	mov	r1, r5
 80082ea:	4640      	mov	r0, r8
 80082ec:	f000 f9d2 	bl	8008694 <__sccl>
 80082f0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80082f2:	4605      	mov	r5, r0
 80082f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082f8:	9343      	str	r3, [sp, #268]	; 0x10c
 80082fa:	2301      	movs	r3, #1
 80082fc:	e7b1      	b.n	8008262 <__ssvfiscanf_r+0x14a>
 80082fe:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8008300:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008304:	9343      	str	r3, [sp, #268]	; 0x10c
 8008306:	2300      	movs	r3, #0
 8008308:	e7ab      	b.n	8008262 <__ssvfiscanf_r+0x14a>
 800830a:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800830c:	06d0      	lsls	r0, r2, #27
 800830e:	f53f af78 	bmi.w	8008202 <__ssvfiscanf_r+0xea>
 8008312:	f012 0f01 	tst.w	r2, #1
 8008316:	9a01      	ldr	r2, [sp, #4]
 8008318:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800831a:	f102 0104 	add.w	r1, r2, #4
 800831e:	9101      	str	r1, [sp, #4]
 8008320:	6812      	ldr	r2, [r2, #0]
 8008322:	bf14      	ite	ne
 8008324:	8013      	strhne	r3, [r2, #0]
 8008326:	6013      	streq	r3, [r2, #0]
 8008328:	e76b      	b.n	8008202 <__ssvfiscanf_r+0xea>
 800832a:	2305      	movs	r3, #5
 800832c:	e799      	b.n	8008262 <__ssvfiscanf_r+0x14a>
 800832e:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8008330:	4621      	mov	r1, r4
 8008332:	4630      	mov	r0, r6
 8008334:	4798      	blx	r3
 8008336:	2800      	cmp	r0, #0
 8008338:	d097      	beq.n	800826a <__ssvfiscanf_r+0x152>
 800833a:	e7c6      	b.n	80082ca <__ssvfiscanf_r+0x1b2>
 800833c:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 800833e:	3201      	adds	r2, #1
 8008340:	9247      	str	r2, [sp, #284]	; 0x11c
 8008342:	6862      	ldr	r2, [r4, #4]
 8008344:	3a01      	subs	r2, #1
 8008346:	2a00      	cmp	r2, #0
 8008348:	6062      	str	r2, [r4, #4]
 800834a:	dd0a      	ble.n	8008362 <__ssvfiscanf_r+0x24a>
 800834c:	3301      	adds	r3, #1
 800834e:	6023      	str	r3, [r4, #0]
 8008350:	f000 fb2e 	bl	80089b0 <__locale_ctype_ptr>
 8008354:	6823      	ldr	r3, [r4, #0]
 8008356:	781a      	ldrb	r2, [r3, #0]
 8008358:	4410      	add	r0, r2
 800835a:	7842      	ldrb	r2, [r0, #1]
 800835c:	0712      	lsls	r2, r2, #28
 800835e:	d4ed      	bmi.n	800833c <__ssvfiscanf_r+0x224>
 8008360:	e786      	b.n	8008270 <__ssvfiscanf_r+0x158>
 8008362:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8008364:	4621      	mov	r1, r4
 8008366:	4630      	mov	r0, r6
 8008368:	4798      	blx	r3
 800836a:	2800      	cmp	r0, #0
 800836c:	d0f0      	beq.n	8008350 <__ssvfiscanf_r+0x238>
 800836e:	e7ac      	b.n	80082ca <__ssvfiscanf_r+0x1b2>
 8008370:	2b04      	cmp	r3, #4
 8008372:	dc06      	bgt.n	8008382 <__ssvfiscanf_r+0x26a>
 8008374:	ab01      	add	r3, sp, #4
 8008376:	4622      	mov	r2, r4
 8008378:	a943      	add	r1, sp, #268	; 0x10c
 800837a:	4630      	mov	r0, r6
 800837c:	f000 f884 	bl	8008488 <_scanf_i>
 8008380:	e77f      	b.n	8008282 <__ssvfiscanf_r+0x16a>
 8008382:	4b0e      	ldr	r3, [pc, #56]	; (80083bc <__ssvfiscanf_r+0x2a4>)
 8008384:	2b00      	cmp	r3, #0
 8008386:	f43f af3c 	beq.w	8008202 <__ssvfiscanf_r+0xea>
 800838a:	ab01      	add	r3, sp, #4
 800838c:	4622      	mov	r2, r4
 800838e:	a943      	add	r1, sp, #268	; 0x10c
 8008390:	4630      	mov	r0, r6
 8008392:	f3af 8000 	nop.w
 8008396:	e774      	b.n	8008282 <__ssvfiscanf_r+0x16a>
 8008398:	89a3      	ldrh	r3, [r4, #12]
 800839a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800839e:	bf18      	it	ne
 80083a0:	f04f 30ff 	movne.w	r0, #4294967295
 80083a4:	f50d 7d25 	add.w	sp, sp, #660	; 0x294
 80083a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083ac:	9846      	ldr	r0, [sp, #280]	; 0x118
 80083ae:	e7f9      	b.n	80083a4 <__ssvfiscanf_r+0x28c>
 80083b0:	08008065 	.word	0x08008065
 80083b4:	080080df 	.word	0x080080df
 80083b8:	08008efa 	.word	0x08008efa
 80083bc:	00000000 	.word	0x00000000

080083c0 <_scanf_chars>:
 80083c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083c4:	4615      	mov	r5, r2
 80083c6:	688a      	ldr	r2, [r1, #8]
 80083c8:	4680      	mov	r8, r0
 80083ca:	460c      	mov	r4, r1
 80083cc:	b932      	cbnz	r2, 80083dc <_scanf_chars+0x1c>
 80083ce:	698a      	ldr	r2, [r1, #24]
 80083d0:	2a00      	cmp	r2, #0
 80083d2:	bf0c      	ite	eq
 80083d4:	2201      	moveq	r2, #1
 80083d6:	f04f 32ff 	movne.w	r2, #4294967295
 80083da:	608a      	str	r2, [r1, #8]
 80083dc:	2600      	movs	r6, #0
 80083de:	6822      	ldr	r2, [r4, #0]
 80083e0:	06d1      	lsls	r1, r2, #27
 80083e2:	bf5f      	itttt	pl
 80083e4:	681a      	ldrpl	r2, [r3, #0]
 80083e6:	1d11      	addpl	r1, r2, #4
 80083e8:	6019      	strpl	r1, [r3, #0]
 80083ea:	6817      	ldrpl	r7, [r2, #0]
 80083ec:	69a3      	ldr	r3, [r4, #24]
 80083ee:	b1db      	cbz	r3, 8008428 <_scanf_chars+0x68>
 80083f0:	2b01      	cmp	r3, #1
 80083f2:	d107      	bne.n	8008404 <_scanf_chars+0x44>
 80083f4:	682b      	ldr	r3, [r5, #0]
 80083f6:	6962      	ldr	r2, [r4, #20]
 80083f8:	781b      	ldrb	r3, [r3, #0]
 80083fa:	5cd3      	ldrb	r3, [r2, r3]
 80083fc:	b9a3      	cbnz	r3, 8008428 <_scanf_chars+0x68>
 80083fe:	2e00      	cmp	r6, #0
 8008400:	d131      	bne.n	8008466 <_scanf_chars+0xa6>
 8008402:	e006      	b.n	8008412 <_scanf_chars+0x52>
 8008404:	2b02      	cmp	r3, #2
 8008406:	d007      	beq.n	8008418 <_scanf_chars+0x58>
 8008408:	2e00      	cmp	r6, #0
 800840a:	d12c      	bne.n	8008466 <_scanf_chars+0xa6>
 800840c:	69a3      	ldr	r3, [r4, #24]
 800840e:	2b01      	cmp	r3, #1
 8008410:	d129      	bne.n	8008466 <_scanf_chars+0xa6>
 8008412:	2001      	movs	r0, #1
 8008414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008418:	f000 faca 	bl	80089b0 <__locale_ctype_ptr>
 800841c:	682b      	ldr	r3, [r5, #0]
 800841e:	781b      	ldrb	r3, [r3, #0]
 8008420:	4418      	add	r0, r3
 8008422:	7843      	ldrb	r3, [r0, #1]
 8008424:	071b      	lsls	r3, r3, #28
 8008426:	d4ef      	bmi.n	8008408 <_scanf_chars+0x48>
 8008428:	6823      	ldr	r3, [r4, #0]
 800842a:	3601      	adds	r6, #1
 800842c:	06da      	lsls	r2, r3, #27
 800842e:	bf5e      	ittt	pl
 8008430:	682b      	ldrpl	r3, [r5, #0]
 8008432:	781b      	ldrbpl	r3, [r3, #0]
 8008434:	703b      	strbpl	r3, [r7, #0]
 8008436:	682a      	ldr	r2, [r5, #0]
 8008438:	686b      	ldr	r3, [r5, #4]
 800843a:	f102 0201 	add.w	r2, r2, #1
 800843e:	602a      	str	r2, [r5, #0]
 8008440:	68a2      	ldr	r2, [r4, #8]
 8008442:	f103 33ff 	add.w	r3, r3, #4294967295
 8008446:	f102 32ff 	add.w	r2, r2, #4294967295
 800844a:	606b      	str	r3, [r5, #4]
 800844c:	bf58      	it	pl
 800844e:	3701      	addpl	r7, #1
 8008450:	60a2      	str	r2, [r4, #8]
 8008452:	b142      	cbz	r2, 8008466 <_scanf_chars+0xa6>
 8008454:	2b00      	cmp	r3, #0
 8008456:	dcc9      	bgt.n	80083ec <_scanf_chars+0x2c>
 8008458:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800845c:	4629      	mov	r1, r5
 800845e:	4640      	mov	r0, r8
 8008460:	4798      	blx	r3
 8008462:	2800      	cmp	r0, #0
 8008464:	d0c2      	beq.n	80083ec <_scanf_chars+0x2c>
 8008466:	6823      	ldr	r3, [r4, #0]
 8008468:	f013 0310 	ands.w	r3, r3, #16
 800846c:	d105      	bne.n	800847a <_scanf_chars+0xba>
 800846e:	68e2      	ldr	r2, [r4, #12]
 8008470:	3201      	adds	r2, #1
 8008472:	60e2      	str	r2, [r4, #12]
 8008474:	69a2      	ldr	r2, [r4, #24]
 8008476:	b102      	cbz	r2, 800847a <_scanf_chars+0xba>
 8008478:	703b      	strb	r3, [r7, #0]
 800847a:	6923      	ldr	r3, [r4, #16]
 800847c:	2000      	movs	r0, #0
 800847e:	441e      	add	r6, r3
 8008480:	6126      	str	r6, [r4, #16]
 8008482:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08008488 <_scanf_i>:
 8008488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800848c:	460c      	mov	r4, r1
 800848e:	469a      	mov	sl, r3
 8008490:	4b74      	ldr	r3, [pc, #464]	; (8008664 <_scanf_i+0x1dc>)
 8008492:	b087      	sub	sp, #28
 8008494:	4683      	mov	fp, r0
 8008496:	4616      	mov	r6, r2
 8008498:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800849c:	ab03      	add	r3, sp, #12
 800849e:	68a7      	ldr	r7, [r4, #8]
 80084a0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80084a4:	4b70      	ldr	r3, [pc, #448]	; (8008668 <_scanf_i+0x1e0>)
 80084a6:	69a1      	ldr	r1, [r4, #24]
 80084a8:	4a70      	ldr	r2, [pc, #448]	; (800866c <_scanf_i+0x1e4>)
 80084aa:	f104 091c 	add.w	r9, r4, #28
 80084ae:	2903      	cmp	r1, #3
 80084b0:	bf18      	it	ne
 80084b2:	461a      	movne	r2, r3
 80084b4:	1e7b      	subs	r3, r7, #1
 80084b6:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 80084ba:	bf84      	itt	hi
 80084bc:	f240 135d 	movwhi	r3, #349	; 0x15d
 80084c0:	60a3      	strhi	r3, [r4, #8]
 80084c2:	6823      	ldr	r3, [r4, #0]
 80084c4:	bf88      	it	hi
 80084c6:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80084ca:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80084ce:	6023      	str	r3, [r4, #0]
 80084d0:	bf98      	it	ls
 80084d2:	2700      	movls	r7, #0
 80084d4:	464b      	mov	r3, r9
 80084d6:	f04f 0800 	mov.w	r8, #0
 80084da:	9200      	str	r2, [sp, #0]
 80084dc:	bf88      	it	hi
 80084de:	197f      	addhi	r7, r7, r5
 80084e0:	6831      	ldr	r1, [r6, #0]
 80084e2:	9301      	str	r3, [sp, #4]
 80084e4:	ab03      	add	r3, sp, #12
 80084e6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80084ea:	2202      	movs	r2, #2
 80084ec:	7809      	ldrb	r1, [r1, #0]
 80084ee:	f7ff f8d1 	bl	8007694 <memchr>
 80084f2:	9b01      	ldr	r3, [sp, #4]
 80084f4:	b328      	cbz	r0, 8008542 <_scanf_i+0xba>
 80084f6:	f1b8 0f01 	cmp.w	r8, #1
 80084fa:	d156      	bne.n	80085aa <_scanf_i+0x122>
 80084fc:	6862      	ldr	r2, [r4, #4]
 80084fe:	b92a      	cbnz	r2, 800850c <_scanf_i+0x84>
 8008500:	2208      	movs	r2, #8
 8008502:	6062      	str	r2, [r4, #4]
 8008504:	6822      	ldr	r2, [r4, #0]
 8008506:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800850a:	6022      	str	r2, [r4, #0]
 800850c:	6822      	ldr	r2, [r4, #0]
 800850e:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8008512:	6022      	str	r2, [r4, #0]
 8008514:	68a2      	ldr	r2, [r4, #8]
 8008516:	1e51      	subs	r1, r2, #1
 8008518:	60a1      	str	r1, [r4, #8]
 800851a:	b192      	cbz	r2, 8008542 <_scanf_i+0xba>
 800851c:	6832      	ldr	r2, [r6, #0]
 800851e:	1c5d      	adds	r5, r3, #1
 8008520:	1c51      	adds	r1, r2, #1
 8008522:	6031      	str	r1, [r6, #0]
 8008524:	7812      	ldrb	r2, [r2, #0]
 8008526:	701a      	strb	r2, [r3, #0]
 8008528:	6873      	ldr	r3, [r6, #4]
 800852a:	3b01      	subs	r3, #1
 800852c:	2b00      	cmp	r3, #0
 800852e:	6073      	str	r3, [r6, #4]
 8008530:	dc06      	bgt.n	8008540 <_scanf_i+0xb8>
 8008532:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008536:	4631      	mov	r1, r6
 8008538:	4658      	mov	r0, fp
 800853a:	4798      	blx	r3
 800853c:	2800      	cmp	r0, #0
 800853e:	d177      	bne.n	8008630 <_scanf_i+0x1a8>
 8008540:	462b      	mov	r3, r5
 8008542:	f108 0801 	add.w	r8, r8, #1
 8008546:	f1b8 0f03 	cmp.w	r8, #3
 800854a:	d1c9      	bne.n	80084e0 <_scanf_i+0x58>
 800854c:	6862      	ldr	r2, [r4, #4]
 800854e:	b90a      	cbnz	r2, 8008554 <_scanf_i+0xcc>
 8008550:	220a      	movs	r2, #10
 8008552:	6062      	str	r2, [r4, #4]
 8008554:	6862      	ldr	r2, [r4, #4]
 8008556:	4946      	ldr	r1, [pc, #280]	; (8008670 <_scanf_i+0x1e8>)
 8008558:	6960      	ldr	r0, [r4, #20]
 800855a:	1a89      	subs	r1, r1, r2
 800855c:	9301      	str	r3, [sp, #4]
 800855e:	f000 f899 	bl	8008694 <__sccl>
 8008562:	9b01      	ldr	r3, [sp, #4]
 8008564:	f04f 0800 	mov.w	r8, #0
 8008568:	461d      	mov	r5, r3
 800856a:	68a3      	ldr	r3, [r4, #8]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d039      	beq.n	80085e4 <_scanf_i+0x15c>
 8008570:	6831      	ldr	r1, [r6, #0]
 8008572:	6960      	ldr	r0, [r4, #20]
 8008574:	780a      	ldrb	r2, [r1, #0]
 8008576:	5c80      	ldrb	r0, [r0, r2]
 8008578:	2800      	cmp	r0, #0
 800857a:	d033      	beq.n	80085e4 <_scanf_i+0x15c>
 800857c:	2a30      	cmp	r2, #48	; 0x30
 800857e:	6822      	ldr	r2, [r4, #0]
 8008580:	d121      	bne.n	80085c6 <_scanf_i+0x13e>
 8008582:	0510      	lsls	r0, r2, #20
 8008584:	d51f      	bpl.n	80085c6 <_scanf_i+0x13e>
 8008586:	f108 0801 	add.w	r8, r8, #1
 800858a:	b117      	cbz	r7, 8008592 <_scanf_i+0x10a>
 800858c:	3301      	adds	r3, #1
 800858e:	3f01      	subs	r7, #1
 8008590:	60a3      	str	r3, [r4, #8]
 8008592:	6873      	ldr	r3, [r6, #4]
 8008594:	3b01      	subs	r3, #1
 8008596:	2b00      	cmp	r3, #0
 8008598:	6073      	str	r3, [r6, #4]
 800859a:	dd1c      	ble.n	80085d6 <_scanf_i+0x14e>
 800859c:	6833      	ldr	r3, [r6, #0]
 800859e:	3301      	adds	r3, #1
 80085a0:	6033      	str	r3, [r6, #0]
 80085a2:	68a3      	ldr	r3, [r4, #8]
 80085a4:	3b01      	subs	r3, #1
 80085a6:	60a3      	str	r3, [r4, #8]
 80085a8:	e7df      	b.n	800856a <_scanf_i+0xe2>
 80085aa:	f1b8 0f02 	cmp.w	r8, #2
 80085ae:	d1b1      	bne.n	8008514 <_scanf_i+0x8c>
 80085b0:	6822      	ldr	r2, [r4, #0]
 80085b2:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80085b6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80085ba:	d1c2      	bne.n	8008542 <_scanf_i+0xba>
 80085bc:	2110      	movs	r1, #16
 80085be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80085c2:	6061      	str	r1, [r4, #4]
 80085c4:	e7a5      	b.n	8008512 <_scanf_i+0x8a>
 80085c6:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80085ca:	6022      	str	r2, [r4, #0]
 80085cc:	780b      	ldrb	r3, [r1, #0]
 80085ce:	3501      	adds	r5, #1
 80085d0:	f805 3c01 	strb.w	r3, [r5, #-1]
 80085d4:	e7dd      	b.n	8008592 <_scanf_i+0x10a>
 80085d6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80085da:	4631      	mov	r1, r6
 80085dc:	4658      	mov	r0, fp
 80085de:	4798      	blx	r3
 80085e0:	2800      	cmp	r0, #0
 80085e2:	d0de      	beq.n	80085a2 <_scanf_i+0x11a>
 80085e4:	6823      	ldr	r3, [r4, #0]
 80085e6:	05d9      	lsls	r1, r3, #23
 80085e8:	d50c      	bpl.n	8008604 <_scanf_i+0x17c>
 80085ea:	454d      	cmp	r5, r9
 80085ec:	d908      	bls.n	8008600 <_scanf_i+0x178>
 80085ee:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80085f2:	1e6f      	subs	r7, r5, #1
 80085f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80085f8:	4632      	mov	r2, r6
 80085fa:	4658      	mov	r0, fp
 80085fc:	4798      	blx	r3
 80085fe:	463d      	mov	r5, r7
 8008600:	454d      	cmp	r5, r9
 8008602:	d02c      	beq.n	800865e <_scanf_i+0x1d6>
 8008604:	6822      	ldr	r2, [r4, #0]
 8008606:	f012 0210 	ands.w	r2, r2, #16
 800860a:	d11e      	bne.n	800864a <_scanf_i+0x1c2>
 800860c:	702a      	strb	r2, [r5, #0]
 800860e:	6863      	ldr	r3, [r4, #4]
 8008610:	4649      	mov	r1, r9
 8008612:	4658      	mov	r0, fp
 8008614:	9e00      	ldr	r6, [sp, #0]
 8008616:	47b0      	blx	r6
 8008618:	6822      	ldr	r2, [r4, #0]
 800861a:	f8da 3000 	ldr.w	r3, [sl]
 800861e:	f012 0f20 	tst.w	r2, #32
 8008622:	d008      	beq.n	8008636 <_scanf_i+0x1ae>
 8008624:	1d1a      	adds	r2, r3, #4
 8008626:	f8ca 2000 	str.w	r2, [sl]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	6018      	str	r0, [r3, #0]
 800862e:	e009      	b.n	8008644 <_scanf_i+0x1bc>
 8008630:	f04f 0800 	mov.w	r8, #0
 8008634:	e7d6      	b.n	80085e4 <_scanf_i+0x15c>
 8008636:	07d2      	lsls	r2, r2, #31
 8008638:	d5f4      	bpl.n	8008624 <_scanf_i+0x19c>
 800863a:	1d1a      	adds	r2, r3, #4
 800863c:	f8ca 2000 	str.w	r2, [sl]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	8018      	strh	r0, [r3, #0]
 8008644:	68e3      	ldr	r3, [r4, #12]
 8008646:	3301      	adds	r3, #1
 8008648:	60e3      	str	r3, [r4, #12]
 800864a:	2000      	movs	r0, #0
 800864c:	eba5 0509 	sub.w	r5, r5, r9
 8008650:	44a8      	add	r8, r5
 8008652:	6925      	ldr	r5, [r4, #16]
 8008654:	4445      	add	r5, r8
 8008656:	6125      	str	r5, [r4, #16]
 8008658:	b007      	add	sp, #28
 800865a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800865e:	2001      	movs	r0, #1
 8008660:	e7fa      	b.n	8008658 <_scanf_i+0x1d0>
 8008662:	bf00      	nop
 8008664:	08008b10 	.word	0x08008b10
 8008668:	08008915 	.word	0x08008915
 800866c:	080087f5 	.word	0x080087f5
 8008670:	08008f15 	.word	0x08008f15

08008674 <_sbrk_r>:
 8008674:	b538      	push	{r3, r4, r5, lr}
 8008676:	2300      	movs	r3, #0
 8008678:	4c05      	ldr	r4, [pc, #20]	; (8008690 <_sbrk_r+0x1c>)
 800867a:	4605      	mov	r5, r0
 800867c:	4608      	mov	r0, r1
 800867e:	6023      	str	r3, [r4, #0]
 8008680:	f7fd fc54 	bl	8005f2c <_sbrk>
 8008684:	1c43      	adds	r3, r0, #1
 8008686:	d102      	bne.n	800868e <_sbrk_r+0x1a>
 8008688:	6823      	ldr	r3, [r4, #0]
 800868a:	b103      	cbz	r3, 800868e <_sbrk_r+0x1a>
 800868c:	602b      	str	r3, [r5, #0]
 800868e:	bd38      	pop	{r3, r4, r5, pc}
 8008690:	20005498 	.word	0x20005498

08008694 <__sccl>:
 8008694:	b570      	push	{r4, r5, r6, lr}
 8008696:	780b      	ldrb	r3, [r1, #0]
 8008698:	1e44      	subs	r4, r0, #1
 800869a:	2b5e      	cmp	r3, #94	; 0x5e
 800869c:	bf13      	iteet	ne
 800869e:	1c4a      	addne	r2, r1, #1
 80086a0:	1c8a      	addeq	r2, r1, #2
 80086a2:	784b      	ldrbeq	r3, [r1, #1]
 80086a4:	2100      	movne	r1, #0
 80086a6:	bf08      	it	eq
 80086a8:	2101      	moveq	r1, #1
 80086aa:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 80086ae:	f804 1f01 	strb.w	r1, [r4, #1]!
 80086b2:	42a5      	cmp	r5, r4
 80086b4:	d1fb      	bne.n	80086ae <__sccl+0x1a>
 80086b6:	b913      	cbnz	r3, 80086be <__sccl+0x2a>
 80086b8:	3a01      	subs	r2, #1
 80086ba:	4610      	mov	r0, r2
 80086bc:	bd70      	pop	{r4, r5, r6, pc}
 80086be:	f081 0401 	eor.w	r4, r1, #1
 80086c2:	4611      	mov	r1, r2
 80086c4:	54c4      	strb	r4, [r0, r3]
 80086c6:	780d      	ldrb	r5, [r1, #0]
 80086c8:	1c4a      	adds	r2, r1, #1
 80086ca:	2d2d      	cmp	r5, #45	; 0x2d
 80086cc:	d006      	beq.n	80086dc <__sccl+0x48>
 80086ce:	2d5d      	cmp	r5, #93	; 0x5d
 80086d0:	d0f3      	beq.n	80086ba <__sccl+0x26>
 80086d2:	b90d      	cbnz	r5, 80086d8 <__sccl+0x44>
 80086d4:	460a      	mov	r2, r1
 80086d6:	e7f0      	b.n	80086ba <__sccl+0x26>
 80086d8:	462b      	mov	r3, r5
 80086da:	e7f2      	b.n	80086c2 <__sccl+0x2e>
 80086dc:	784e      	ldrb	r6, [r1, #1]
 80086de:	2e5d      	cmp	r6, #93	; 0x5d
 80086e0:	d0fa      	beq.n	80086d8 <__sccl+0x44>
 80086e2:	42b3      	cmp	r3, r6
 80086e4:	dcf8      	bgt.n	80086d8 <__sccl+0x44>
 80086e6:	3102      	adds	r1, #2
 80086e8:	3301      	adds	r3, #1
 80086ea:	429e      	cmp	r6, r3
 80086ec:	54c4      	strb	r4, [r0, r3]
 80086ee:	dcfb      	bgt.n	80086e8 <__sccl+0x54>
 80086f0:	e7e9      	b.n	80086c6 <__sccl+0x32>

080086f2 <_strtol_l.isra.0>:
 80086f2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086f6:	4680      	mov	r8, r0
 80086f8:	4689      	mov	r9, r1
 80086fa:	4692      	mov	sl, r2
 80086fc:	461f      	mov	r7, r3
 80086fe:	468b      	mov	fp, r1
 8008700:	465d      	mov	r5, fp
 8008702:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008704:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008708:	f000 f94f 	bl	80089aa <__locale_ctype_ptr_l>
 800870c:	4420      	add	r0, r4
 800870e:	7846      	ldrb	r6, [r0, #1]
 8008710:	f016 0608 	ands.w	r6, r6, #8
 8008714:	d10b      	bne.n	800872e <_strtol_l.isra.0+0x3c>
 8008716:	2c2d      	cmp	r4, #45	; 0x2d
 8008718:	d10b      	bne.n	8008732 <_strtol_l.isra.0+0x40>
 800871a:	2601      	movs	r6, #1
 800871c:	782c      	ldrb	r4, [r5, #0]
 800871e:	f10b 0502 	add.w	r5, fp, #2
 8008722:	b167      	cbz	r7, 800873e <_strtol_l.isra.0+0x4c>
 8008724:	2f10      	cmp	r7, #16
 8008726:	d114      	bne.n	8008752 <_strtol_l.isra.0+0x60>
 8008728:	2c30      	cmp	r4, #48	; 0x30
 800872a:	d00a      	beq.n	8008742 <_strtol_l.isra.0+0x50>
 800872c:	e011      	b.n	8008752 <_strtol_l.isra.0+0x60>
 800872e:	46ab      	mov	fp, r5
 8008730:	e7e6      	b.n	8008700 <_strtol_l.isra.0+0xe>
 8008732:	2c2b      	cmp	r4, #43	; 0x2b
 8008734:	bf04      	itt	eq
 8008736:	782c      	ldrbeq	r4, [r5, #0]
 8008738:	f10b 0502 	addeq.w	r5, fp, #2
 800873c:	e7f1      	b.n	8008722 <_strtol_l.isra.0+0x30>
 800873e:	2c30      	cmp	r4, #48	; 0x30
 8008740:	d127      	bne.n	8008792 <_strtol_l.isra.0+0xa0>
 8008742:	782b      	ldrb	r3, [r5, #0]
 8008744:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008748:	2b58      	cmp	r3, #88	; 0x58
 800874a:	d14b      	bne.n	80087e4 <_strtol_l.isra.0+0xf2>
 800874c:	2710      	movs	r7, #16
 800874e:	786c      	ldrb	r4, [r5, #1]
 8008750:	3502      	adds	r5, #2
 8008752:	2e00      	cmp	r6, #0
 8008754:	bf0c      	ite	eq
 8008756:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800875a:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800875e:	2200      	movs	r2, #0
 8008760:	fbb1 fef7 	udiv	lr, r1, r7
 8008764:	4610      	mov	r0, r2
 8008766:	fb07 1c1e 	mls	ip, r7, lr, r1
 800876a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800876e:	2b09      	cmp	r3, #9
 8008770:	d811      	bhi.n	8008796 <_strtol_l.isra.0+0xa4>
 8008772:	461c      	mov	r4, r3
 8008774:	42a7      	cmp	r7, r4
 8008776:	dd1d      	ble.n	80087b4 <_strtol_l.isra.0+0xc2>
 8008778:	1c53      	adds	r3, r2, #1
 800877a:	d007      	beq.n	800878c <_strtol_l.isra.0+0x9a>
 800877c:	4586      	cmp	lr, r0
 800877e:	d316      	bcc.n	80087ae <_strtol_l.isra.0+0xbc>
 8008780:	d101      	bne.n	8008786 <_strtol_l.isra.0+0x94>
 8008782:	45a4      	cmp	ip, r4
 8008784:	db13      	blt.n	80087ae <_strtol_l.isra.0+0xbc>
 8008786:	2201      	movs	r2, #1
 8008788:	fb00 4007 	mla	r0, r0, r7, r4
 800878c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008790:	e7eb      	b.n	800876a <_strtol_l.isra.0+0x78>
 8008792:	270a      	movs	r7, #10
 8008794:	e7dd      	b.n	8008752 <_strtol_l.isra.0+0x60>
 8008796:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800879a:	2b19      	cmp	r3, #25
 800879c:	d801      	bhi.n	80087a2 <_strtol_l.isra.0+0xb0>
 800879e:	3c37      	subs	r4, #55	; 0x37
 80087a0:	e7e8      	b.n	8008774 <_strtol_l.isra.0+0x82>
 80087a2:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80087a6:	2b19      	cmp	r3, #25
 80087a8:	d804      	bhi.n	80087b4 <_strtol_l.isra.0+0xc2>
 80087aa:	3c57      	subs	r4, #87	; 0x57
 80087ac:	e7e2      	b.n	8008774 <_strtol_l.isra.0+0x82>
 80087ae:	f04f 32ff 	mov.w	r2, #4294967295
 80087b2:	e7eb      	b.n	800878c <_strtol_l.isra.0+0x9a>
 80087b4:	1c53      	adds	r3, r2, #1
 80087b6:	d108      	bne.n	80087ca <_strtol_l.isra.0+0xd8>
 80087b8:	2322      	movs	r3, #34	; 0x22
 80087ba:	4608      	mov	r0, r1
 80087bc:	f8c8 3000 	str.w	r3, [r8]
 80087c0:	f1ba 0f00 	cmp.w	sl, #0
 80087c4:	d107      	bne.n	80087d6 <_strtol_l.isra.0+0xe4>
 80087c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087ca:	b106      	cbz	r6, 80087ce <_strtol_l.isra.0+0xdc>
 80087cc:	4240      	negs	r0, r0
 80087ce:	f1ba 0f00 	cmp.w	sl, #0
 80087d2:	d00c      	beq.n	80087ee <_strtol_l.isra.0+0xfc>
 80087d4:	b122      	cbz	r2, 80087e0 <_strtol_l.isra.0+0xee>
 80087d6:	3d01      	subs	r5, #1
 80087d8:	f8ca 5000 	str.w	r5, [sl]
 80087dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087e0:	464d      	mov	r5, r9
 80087e2:	e7f9      	b.n	80087d8 <_strtol_l.isra.0+0xe6>
 80087e4:	2430      	movs	r4, #48	; 0x30
 80087e6:	2f00      	cmp	r7, #0
 80087e8:	d1b3      	bne.n	8008752 <_strtol_l.isra.0+0x60>
 80087ea:	2708      	movs	r7, #8
 80087ec:	e7b1      	b.n	8008752 <_strtol_l.isra.0+0x60>
 80087ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080087f4 <_strtol_r>:
 80087f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80087f6:	4c06      	ldr	r4, [pc, #24]	; (8008810 <_strtol_r+0x1c>)
 80087f8:	4d06      	ldr	r5, [pc, #24]	; (8008814 <_strtol_r+0x20>)
 80087fa:	6824      	ldr	r4, [r4, #0]
 80087fc:	6a24      	ldr	r4, [r4, #32]
 80087fe:	2c00      	cmp	r4, #0
 8008800:	bf08      	it	eq
 8008802:	462c      	moveq	r4, r5
 8008804:	9400      	str	r4, [sp, #0]
 8008806:	f7ff ff74 	bl	80086f2 <_strtol_l.isra.0>
 800880a:	b003      	add	sp, #12
 800880c:	bd30      	pop	{r4, r5, pc}
 800880e:	bf00      	nop
 8008810:	20000054 	.word	0x20000054
 8008814:	200000b8 	.word	0x200000b8

08008818 <_strtoul_l.isra.0>:
 8008818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800881c:	4680      	mov	r8, r0
 800881e:	4689      	mov	r9, r1
 8008820:	4692      	mov	sl, r2
 8008822:	461e      	mov	r6, r3
 8008824:	460f      	mov	r7, r1
 8008826:	463d      	mov	r5, r7
 8008828:	9808      	ldr	r0, [sp, #32]
 800882a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800882e:	f000 f8bc 	bl	80089aa <__locale_ctype_ptr_l>
 8008832:	4420      	add	r0, r4
 8008834:	7843      	ldrb	r3, [r0, #1]
 8008836:	f013 0308 	ands.w	r3, r3, #8
 800883a:	d10a      	bne.n	8008852 <_strtoul_l.isra.0+0x3a>
 800883c:	2c2d      	cmp	r4, #45	; 0x2d
 800883e:	d10a      	bne.n	8008856 <_strtoul_l.isra.0+0x3e>
 8008840:	2301      	movs	r3, #1
 8008842:	782c      	ldrb	r4, [r5, #0]
 8008844:	1cbd      	adds	r5, r7, #2
 8008846:	b15e      	cbz	r6, 8008860 <_strtoul_l.isra.0+0x48>
 8008848:	2e10      	cmp	r6, #16
 800884a:	d113      	bne.n	8008874 <_strtoul_l.isra.0+0x5c>
 800884c:	2c30      	cmp	r4, #48	; 0x30
 800884e:	d009      	beq.n	8008864 <_strtoul_l.isra.0+0x4c>
 8008850:	e010      	b.n	8008874 <_strtoul_l.isra.0+0x5c>
 8008852:	462f      	mov	r7, r5
 8008854:	e7e7      	b.n	8008826 <_strtoul_l.isra.0+0xe>
 8008856:	2c2b      	cmp	r4, #43	; 0x2b
 8008858:	bf04      	itt	eq
 800885a:	782c      	ldrbeq	r4, [r5, #0]
 800885c:	1cbd      	addeq	r5, r7, #2
 800885e:	e7f2      	b.n	8008846 <_strtoul_l.isra.0+0x2e>
 8008860:	2c30      	cmp	r4, #48	; 0x30
 8008862:	d125      	bne.n	80088b0 <_strtoul_l.isra.0+0x98>
 8008864:	782a      	ldrb	r2, [r5, #0]
 8008866:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800886a:	2a58      	cmp	r2, #88	; 0x58
 800886c:	d14a      	bne.n	8008904 <_strtoul_l.isra.0+0xec>
 800886e:	2610      	movs	r6, #16
 8008870:	786c      	ldrb	r4, [r5, #1]
 8008872:	3502      	adds	r5, #2
 8008874:	f04f 31ff 	mov.w	r1, #4294967295
 8008878:	fbb1 f1f6 	udiv	r1, r1, r6
 800887c:	2700      	movs	r7, #0
 800887e:	fb06 fe01 	mul.w	lr, r6, r1
 8008882:	4638      	mov	r0, r7
 8008884:	ea6f 0e0e 	mvn.w	lr, lr
 8008888:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 800888c:	2a09      	cmp	r2, #9
 800888e:	d811      	bhi.n	80088b4 <_strtoul_l.isra.0+0x9c>
 8008890:	4614      	mov	r4, r2
 8008892:	42a6      	cmp	r6, r4
 8008894:	dd1d      	ble.n	80088d2 <_strtoul_l.isra.0+0xba>
 8008896:	2f00      	cmp	r7, #0
 8008898:	db18      	blt.n	80088cc <_strtoul_l.isra.0+0xb4>
 800889a:	4281      	cmp	r1, r0
 800889c:	d316      	bcc.n	80088cc <_strtoul_l.isra.0+0xb4>
 800889e:	d101      	bne.n	80088a4 <_strtoul_l.isra.0+0x8c>
 80088a0:	45a6      	cmp	lr, r4
 80088a2:	db13      	blt.n	80088cc <_strtoul_l.isra.0+0xb4>
 80088a4:	2701      	movs	r7, #1
 80088a6:	fb00 4006 	mla	r0, r0, r6, r4
 80088aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80088ae:	e7eb      	b.n	8008888 <_strtoul_l.isra.0+0x70>
 80088b0:	260a      	movs	r6, #10
 80088b2:	e7df      	b.n	8008874 <_strtoul_l.isra.0+0x5c>
 80088b4:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
 80088b8:	2a19      	cmp	r2, #25
 80088ba:	d801      	bhi.n	80088c0 <_strtoul_l.isra.0+0xa8>
 80088bc:	3c37      	subs	r4, #55	; 0x37
 80088be:	e7e8      	b.n	8008892 <_strtoul_l.isra.0+0x7a>
 80088c0:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
 80088c4:	2a19      	cmp	r2, #25
 80088c6:	d804      	bhi.n	80088d2 <_strtoul_l.isra.0+0xba>
 80088c8:	3c57      	subs	r4, #87	; 0x57
 80088ca:	e7e2      	b.n	8008892 <_strtoul_l.isra.0+0x7a>
 80088cc:	f04f 37ff 	mov.w	r7, #4294967295
 80088d0:	e7eb      	b.n	80088aa <_strtoul_l.isra.0+0x92>
 80088d2:	2f00      	cmp	r7, #0
 80088d4:	da09      	bge.n	80088ea <_strtoul_l.isra.0+0xd2>
 80088d6:	2322      	movs	r3, #34	; 0x22
 80088d8:	f04f 30ff 	mov.w	r0, #4294967295
 80088dc:	f8c8 3000 	str.w	r3, [r8]
 80088e0:	f1ba 0f00 	cmp.w	sl, #0
 80088e4:	d107      	bne.n	80088f6 <_strtoul_l.isra.0+0xde>
 80088e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088ea:	b103      	cbz	r3, 80088ee <_strtoul_l.isra.0+0xd6>
 80088ec:	4240      	negs	r0, r0
 80088ee:	f1ba 0f00 	cmp.w	sl, #0
 80088f2:	d00c      	beq.n	800890e <_strtoul_l.isra.0+0xf6>
 80088f4:	b127      	cbz	r7, 8008900 <_strtoul_l.isra.0+0xe8>
 80088f6:	3d01      	subs	r5, #1
 80088f8:	f8ca 5000 	str.w	r5, [sl]
 80088fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008900:	464d      	mov	r5, r9
 8008902:	e7f9      	b.n	80088f8 <_strtoul_l.isra.0+0xe0>
 8008904:	2430      	movs	r4, #48	; 0x30
 8008906:	2e00      	cmp	r6, #0
 8008908:	d1b4      	bne.n	8008874 <_strtoul_l.isra.0+0x5c>
 800890a:	2608      	movs	r6, #8
 800890c:	e7b2      	b.n	8008874 <_strtoul_l.isra.0+0x5c>
 800890e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08008914 <_strtoul_r>:
 8008914:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008916:	4c06      	ldr	r4, [pc, #24]	; (8008930 <_strtoul_r+0x1c>)
 8008918:	4d06      	ldr	r5, [pc, #24]	; (8008934 <_strtoul_r+0x20>)
 800891a:	6824      	ldr	r4, [r4, #0]
 800891c:	6a24      	ldr	r4, [r4, #32]
 800891e:	2c00      	cmp	r4, #0
 8008920:	bf08      	it	eq
 8008922:	462c      	moveq	r4, r5
 8008924:	9400      	str	r4, [sp, #0]
 8008926:	f7ff ff77 	bl	8008818 <_strtoul_l.isra.0>
 800892a:	b003      	add	sp, #12
 800892c:	bd30      	pop	{r4, r5, pc}
 800892e:	bf00      	nop
 8008930:	20000054 	.word	0x20000054
 8008934:	200000b8 	.word	0x200000b8

08008938 <__submore>:
 8008938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800893c:	460c      	mov	r4, r1
 800893e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008940:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008944:	4299      	cmp	r1, r3
 8008946:	d11c      	bne.n	8008982 <__submore+0x4a>
 8008948:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800894c:	f7ff f9dc 	bl	8007d08 <_malloc_r>
 8008950:	b918      	cbnz	r0, 800895a <__submore+0x22>
 8008952:	f04f 30ff 	mov.w	r0, #4294967295
 8008956:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800895a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800895e:	63a3      	str	r3, [r4, #56]	; 0x38
 8008960:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8008964:	6360      	str	r0, [r4, #52]	; 0x34
 8008966:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800896a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800896e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8008972:	7043      	strb	r3, [r0, #1]
 8008974:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008978:	7003      	strb	r3, [r0, #0]
 800897a:	6020      	str	r0, [r4, #0]
 800897c:	2000      	movs	r0, #0
 800897e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008982:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8008984:	0077      	lsls	r7, r6, #1
 8008986:	463a      	mov	r2, r7
 8008988:	f000 f84e 	bl	8008a28 <_realloc_r>
 800898c:	4605      	mov	r5, r0
 800898e:	2800      	cmp	r0, #0
 8008990:	d0df      	beq.n	8008952 <__submore+0x1a>
 8008992:	eb00 0806 	add.w	r8, r0, r6
 8008996:	4601      	mov	r1, r0
 8008998:	4632      	mov	r2, r6
 800899a:	4640      	mov	r0, r8
 800899c:	f7fd fb36 	bl	800600c <memcpy>
 80089a0:	f8c4 8000 	str.w	r8, [r4]
 80089a4:	6365      	str	r5, [r4, #52]	; 0x34
 80089a6:	63a7      	str	r7, [r4, #56]	; 0x38
 80089a8:	e7e8      	b.n	800897c <__submore+0x44>

080089aa <__locale_ctype_ptr_l>:
 80089aa:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80089ae:	4770      	bx	lr

080089b0 <__locale_ctype_ptr>:
 80089b0:	4b04      	ldr	r3, [pc, #16]	; (80089c4 <__locale_ctype_ptr+0x14>)
 80089b2:	4a05      	ldr	r2, [pc, #20]	; (80089c8 <__locale_ctype_ptr+0x18>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	6a1b      	ldr	r3, [r3, #32]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	bf08      	it	eq
 80089bc:	4613      	moveq	r3, r2
 80089be:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 80089c2:	4770      	bx	lr
 80089c4:	20000054 	.word	0x20000054
 80089c8:	200000b8 	.word	0x200000b8

080089cc <__ascii_mbtowc>:
 80089cc:	b082      	sub	sp, #8
 80089ce:	b901      	cbnz	r1, 80089d2 <__ascii_mbtowc+0x6>
 80089d0:	a901      	add	r1, sp, #4
 80089d2:	b142      	cbz	r2, 80089e6 <__ascii_mbtowc+0x1a>
 80089d4:	b14b      	cbz	r3, 80089ea <__ascii_mbtowc+0x1e>
 80089d6:	7813      	ldrb	r3, [r2, #0]
 80089d8:	600b      	str	r3, [r1, #0]
 80089da:	7812      	ldrb	r2, [r2, #0]
 80089dc:	1c10      	adds	r0, r2, #0
 80089de:	bf18      	it	ne
 80089e0:	2001      	movne	r0, #1
 80089e2:	b002      	add	sp, #8
 80089e4:	4770      	bx	lr
 80089e6:	4610      	mov	r0, r2
 80089e8:	e7fb      	b.n	80089e2 <__ascii_mbtowc+0x16>
 80089ea:	f06f 0001 	mvn.w	r0, #1
 80089ee:	e7f8      	b.n	80089e2 <__ascii_mbtowc+0x16>

080089f0 <memmove>:
 80089f0:	4288      	cmp	r0, r1
 80089f2:	b510      	push	{r4, lr}
 80089f4:	eb01 0302 	add.w	r3, r1, r2
 80089f8:	d803      	bhi.n	8008a02 <memmove+0x12>
 80089fa:	1e42      	subs	r2, r0, #1
 80089fc:	4299      	cmp	r1, r3
 80089fe:	d10c      	bne.n	8008a1a <memmove+0x2a>
 8008a00:	bd10      	pop	{r4, pc}
 8008a02:	4298      	cmp	r0, r3
 8008a04:	d2f9      	bcs.n	80089fa <memmove+0xa>
 8008a06:	1881      	adds	r1, r0, r2
 8008a08:	1ad2      	subs	r2, r2, r3
 8008a0a:	42d3      	cmn	r3, r2
 8008a0c:	d100      	bne.n	8008a10 <memmove+0x20>
 8008a0e:	bd10      	pop	{r4, pc}
 8008a10:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a14:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008a18:	e7f7      	b.n	8008a0a <memmove+0x1a>
 8008a1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a1e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008a22:	e7eb      	b.n	80089fc <memmove+0xc>

08008a24 <__malloc_lock>:
 8008a24:	4770      	bx	lr

08008a26 <__malloc_unlock>:
 8008a26:	4770      	bx	lr

08008a28 <_realloc_r>:
 8008a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a2a:	4607      	mov	r7, r0
 8008a2c:	4614      	mov	r4, r2
 8008a2e:	460e      	mov	r6, r1
 8008a30:	b921      	cbnz	r1, 8008a3c <_realloc_r+0x14>
 8008a32:	4611      	mov	r1, r2
 8008a34:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008a38:	f7ff b966 	b.w	8007d08 <_malloc_r>
 8008a3c:	b922      	cbnz	r2, 8008a48 <_realloc_r+0x20>
 8008a3e:	f7ff f917 	bl	8007c70 <_free_r>
 8008a42:	4625      	mov	r5, r4
 8008a44:	4628      	mov	r0, r5
 8008a46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a48:	f000 f821 	bl	8008a8e <_malloc_usable_size_r>
 8008a4c:	4284      	cmp	r4, r0
 8008a4e:	d90f      	bls.n	8008a70 <_realloc_r+0x48>
 8008a50:	4621      	mov	r1, r4
 8008a52:	4638      	mov	r0, r7
 8008a54:	f7ff f958 	bl	8007d08 <_malloc_r>
 8008a58:	4605      	mov	r5, r0
 8008a5a:	2800      	cmp	r0, #0
 8008a5c:	d0f2      	beq.n	8008a44 <_realloc_r+0x1c>
 8008a5e:	4631      	mov	r1, r6
 8008a60:	4622      	mov	r2, r4
 8008a62:	f7fd fad3 	bl	800600c <memcpy>
 8008a66:	4631      	mov	r1, r6
 8008a68:	4638      	mov	r0, r7
 8008a6a:	f7ff f901 	bl	8007c70 <_free_r>
 8008a6e:	e7e9      	b.n	8008a44 <_realloc_r+0x1c>
 8008a70:	4635      	mov	r5, r6
 8008a72:	e7e7      	b.n	8008a44 <_realloc_r+0x1c>

08008a74 <__ascii_wctomb>:
 8008a74:	b149      	cbz	r1, 8008a8a <__ascii_wctomb+0x16>
 8008a76:	2aff      	cmp	r2, #255	; 0xff
 8008a78:	bf8b      	itete	hi
 8008a7a:	238a      	movhi	r3, #138	; 0x8a
 8008a7c:	700a      	strbls	r2, [r1, #0]
 8008a7e:	6003      	strhi	r3, [r0, #0]
 8008a80:	2001      	movls	r0, #1
 8008a82:	bf88      	it	hi
 8008a84:	f04f 30ff 	movhi.w	r0, #4294967295
 8008a88:	4770      	bx	lr
 8008a8a:	4608      	mov	r0, r1
 8008a8c:	4770      	bx	lr

08008a8e <_malloc_usable_size_r>:
 8008a8e:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8008a92:	2800      	cmp	r0, #0
 8008a94:	f1a0 0004 	sub.w	r0, r0, #4
 8008a98:	bfbc      	itt	lt
 8008a9a:	580b      	ldrlt	r3, [r1, r0]
 8008a9c:	18c0      	addlt	r0, r0, r3
 8008a9e:	4770      	bx	lr

08008aa0 <_init>:
 8008aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aa2:	bf00      	nop
 8008aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008aa6:	bc08      	pop	{r3}
 8008aa8:	469e      	mov	lr, r3
 8008aaa:	4770      	bx	lr

08008aac <_fini>:
 8008aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aae:	bf00      	nop
 8008ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ab2:	bc08      	pop	{r3}
 8008ab4:	469e      	mov	lr, r3
 8008ab6:	4770      	bx	lr
