
aride_pressure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fc4  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f4  080061b4  080061b4  000161b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080065a8  080065a8  000165a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080065b0  080065b0  000165b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080065b4  080065b4  000165b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000224  20000000  080065b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00005254  20000228  080067dc  00020228  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  2000547c  080067dc  0002547c  2**0
                  ALLOC
  9 .ARM.attributes 00000029  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY
 10 .debug_info   00029c1b  00000000  00000000  0002024d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00005923  00000000  00000000  00049e68  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000c0f6  00000000  00000000  0004f78b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001188  00000000  00000000  0005b888  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001700  00000000  00000000  0005ca10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000b73f  00000000  00000000  0005e110  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000066ee  00000000  00000000  0006984f  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0006ff3d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003aac  00000000  00000000  0006ffbc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000228 	.word	0x20000228
 800020c:	00000000 	.word	0x00000000
 8000210:	0800619c 	.word	0x0800619c

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	2000022c 	.word	0x2000022c
 800022c:	0800619c 	.word	0x0800619c

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <__aeabi_llsr>:
 8000240:	40d0      	lsrs	r0, r2
 8000242:	1c0b      	adds	r3, r1, #0
 8000244:	40d1      	lsrs	r1, r2
 8000246:	469c      	mov	ip, r3
 8000248:	3a20      	subs	r2, #32
 800024a:	40d3      	lsrs	r3, r2
 800024c:	4318      	orrs	r0, r3
 800024e:	4252      	negs	r2, r2
 8000250:	4663      	mov	r3, ip
 8000252:	4093      	lsls	r3, r2
 8000254:	4318      	orrs	r0, r3
 8000256:	4770      	bx	lr

08000258 <__aeabi_uldivmod>:
 8000258:	b953      	cbnz	r3, 8000270 <__aeabi_uldivmod+0x18>
 800025a:	b94a      	cbnz	r2, 8000270 <__aeabi_uldivmod+0x18>
 800025c:	2900      	cmp	r1, #0
 800025e:	bf08      	it	eq
 8000260:	2800      	cmpeq	r0, #0
 8000262:	bf1c      	itt	ne
 8000264:	f04f 31ff 	movne.w	r1, #4294967295
 8000268:	f04f 30ff 	movne.w	r0, #4294967295
 800026c:	f000 b97a 	b.w	8000564 <__aeabi_idiv0>
 8000270:	f1ad 0c08 	sub.w	ip, sp, #8
 8000274:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000278:	f000 f806 	bl	8000288 <__udivmoddi4>
 800027c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000280:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000284:	b004      	add	sp, #16
 8000286:	4770      	bx	lr

08000288 <__udivmoddi4>:
 8000288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800028c:	468c      	mov	ip, r1
 800028e:	460e      	mov	r6, r1
 8000290:	4604      	mov	r4, r0
 8000292:	9d08      	ldr	r5, [sp, #32]
 8000294:	2b00      	cmp	r3, #0
 8000296:	d150      	bne.n	800033a <__udivmoddi4+0xb2>
 8000298:	428a      	cmp	r2, r1
 800029a:	4617      	mov	r7, r2
 800029c:	d96c      	bls.n	8000378 <__udivmoddi4+0xf0>
 800029e:	fab2 fe82 	clz	lr, r2
 80002a2:	f1be 0f00 	cmp.w	lr, #0
 80002a6:	d00b      	beq.n	80002c0 <__udivmoddi4+0x38>
 80002a8:	f1ce 0c20 	rsb	ip, lr, #32
 80002ac:	fa01 f60e 	lsl.w	r6, r1, lr
 80002b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002b4:	fa02 f70e 	lsl.w	r7, r2, lr
 80002b8:	ea4c 0c06 	orr.w	ip, ip, r6
 80002bc:	fa00 f40e 	lsl.w	r4, r0, lr
 80002c0:	0c3a      	lsrs	r2, r7, #16
 80002c2:	fbbc f9f2 	udiv	r9, ip, r2
 80002c6:	b2bb      	uxth	r3, r7
 80002c8:	fb02 cc19 	mls	ip, r2, r9, ip
 80002cc:	fb09 fa03 	mul.w	sl, r9, r3
 80002d0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80002d4:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
 80002d8:	45b2      	cmp	sl, r6
 80002da:	d90a      	bls.n	80002f2 <__udivmoddi4+0x6a>
 80002dc:	19f6      	adds	r6, r6, r7
 80002de:	f109 31ff 	add.w	r1, r9, #4294967295
 80002e2:	f080 8125 	bcs.w	8000530 <__udivmoddi4+0x2a8>
 80002e6:	45b2      	cmp	sl, r6
 80002e8:	f240 8122 	bls.w	8000530 <__udivmoddi4+0x2a8>
 80002ec:	f1a9 0902 	sub.w	r9, r9, #2
 80002f0:	443e      	add	r6, r7
 80002f2:	eba6 060a 	sub.w	r6, r6, sl
 80002f6:	fbb6 f0f2 	udiv	r0, r6, r2
 80002fa:	fb02 6610 	mls	r6, r2, r0, r6
 80002fe:	fb00 f303 	mul.w	r3, r0, r3
 8000302:	b2a4      	uxth	r4, r4
 8000304:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8000308:	42a3      	cmp	r3, r4
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x98>
 800030c:	19e4      	adds	r4, r4, r7
 800030e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000312:	f080 810b 	bcs.w	800052c <__udivmoddi4+0x2a4>
 8000316:	42a3      	cmp	r3, r4
 8000318:	f240 8108 	bls.w	800052c <__udivmoddi4+0x2a4>
 800031c:	3802      	subs	r0, #2
 800031e:	443c      	add	r4, r7
 8000320:	2100      	movs	r1, #0
 8000322:	1ae4      	subs	r4, r4, r3
 8000324:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000328:	2d00      	cmp	r5, #0
 800032a:	d062      	beq.n	80003f2 <__udivmoddi4+0x16a>
 800032c:	2300      	movs	r3, #0
 800032e:	fa24 f40e 	lsr.w	r4, r4, lr
 8000332:	602c      	str	r4, [r5, #0]
 8000334:	606b      	str	r3, [r5, #4]
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	428b      	cmp	r3, r1
 800033c:	d907      	bls.n	800034e <__udivmoddi4+0xc6>
 800033e:	2d00      	cmp	r5, #0
 8000340:	d055      	beq.n	80003ee <__udivmoddi4+0x166>
 8000342:	2100      	movs	r1, #0
 8000344:	e885 0041 	stmia.w	r5, {r0, r6}
 8000348:	4608      	mov	r0, r1
 800034a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034e:	fab3 f183 	clz	r1, r3
 8000352:	2900      	cmp	r1, #0
 8000354:	f040 808f 	bne.w	8000476 <__udivmoddi4+0x1ee>
 8000358:	42b3      	cmp	r3, r6
 800035a:	d302      	bcc.n	8000362 <__udivmoddi4+0xda>
 800035c:	4282      	cmp	r2, r0
 800035e:	f200 80fc 	bhi.w	800055a <__udivmoddi4+0x2d2>
 8000362:	1a84      	subs	r4, r0, r2
 8000364:	eb66 0603 	sbc.w	r6, r6, r3
 8000368:	2001      	movs	r0, #1
 800036a:	46b4      	mov	ip, r6
 800036c:	2d00      	cmp	r5, #0
 800036e:	d040      	beq.n	80003f2 <__udivmoddi4+0x16a>
 8000370:	e885 1010 	stmia.w	r5, {r4, ip}
 8000374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000378:	b912      	cbnz	r2, 8000380 <__udivmoddi4+0xf8>
 800037a:	2701      	movs	r7, #1
 800037c:	fbb7 f7f2 	udiv	r7, r7, r2
 8000380:	fab7 fe87 	clz	lr, r7
 8000384:	f1be 0f00 	cmp.w	lr, #0
 8000388:	d135      	bne.n	80003f6 <__udivmoddi4+0x16e>
 800038a:	2101      	movs	r1, #1
 800038c:	1bf6      	subs	r6, r6, r7
 800038e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8000392:	fa1f f887 	uxth.w	r8, r7
 8000396:	fbb6 f2fc 	udiv	r2, r6, ip
 800039a:	fb0c 6612 	mls	r6, ip, r2, r6
 800039e:	fb08 f002 	mul.w	r0, r8, r2
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
 80003a8:	42b0      	cmp	r0, r6
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x134>
 80003ac:	19f6      	adds	r6, r6, r7
 80003ae:	f102 33ff 	add.w	r3, r2, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x132>
 80003b4:	42b0      	cmp	r0, r6
 80003b6:	f200 80d2 	bhi.w	800055e <__udivmoddi4+0x2d6>
 80003ba:	461a      	mov	r2, r3
 80003bc:	1a36      	subs	r6, r6, r0
 80003be:	fbb6 f0fc 	udiv	r0, r6, ip
 80003c2:	fb0c 6610 	mls	r6, ip, r0, r6
 80003c6:	fb08 f800 	mul.w	r8, r8, r0
 80003ca:	b2a3      	uxth	r3, r4
 80003cc:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
 80003d0:	45a0      	cmp	r8, r4
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x15c>
 80003d4:	19e4      	adds	r4, r4, r7
 80003d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x15a>
 80003dc:	45a0      	cmp	r8, r4
 80003de:	f200 80b9 	bhi.w	8000554 <__udivmoddi4+0x2cc>
 80003e2:	4618      	mov	r0, r3
 80003e4:	eba4 0408 	sub.w	r4, r4, r8
 80003e8:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80003ec:	e79c      	b.n	8000328 <__udivmoddi4+0xa0>
 80003ee:	4629      	mov	r1, r5
 80003f0:	4628      	mov	r0, r5
 80003f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003f6:	fa07 f70e 	lsl.w	r7, r7, lr
 80003fa:	f1ce 0320 	rsb	r3, lr, #32
 80003fe:	fa26 f203 	lsr.w	r2, r6, r3
 8000402:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8000406:	fbb2 f1fc 	udiv	r1, r2, ip
 800040a:	fa1f f887 	uxth.w	r8, r7
 800040e:	fb0c 2211 	mls	r2, ip, r1, r2
 8000412:	fa06 f60e 	lsl.w	r6, r6, lr
 8000416:	fa20 f303 	lsr.w	r3, r0, r3
 800041a:	fb01 f908 	mul.w	r9, r1, r8
 800041e:	4333      	orrs	r3, r6
 8000420:	0c1e      	lsrs	r6, r3, #16
 8000422:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 8000426:	45b1      	cmp	r9, r6
 8000428:	fa00 f40e 	lsl.w	r4, r0, lr
 800042c:	d909      	bls.n	8000442 <__udivmoddi4+0x1ba>
 800042e:	19f6      	adds	r6, r6, r7
 8000430:	f101 32ff 	add.w	r2, r1, #4294967295
 8000434:	f080 808c 	bcs.w	8000550 <__udivmoddi4+0x2c8>
 8000438:	45b1      	cmp	r9, r6
 800043a:	f240 8089 	bls.w	8000550 <__udivmoddi4+0x2c8>
 800043e:	3902      	subs	r1, #2
 8000440:	443e      	add	r6, r7
 8000442:	eba6 0609 	sub.w	r6, r6, r9
 8000446:	fbb6 f0fc 	udiv	r0, r6, ip
 800044a:	fb0c 6210 	mls	r2, ip, r0, r6
 800044e:	fb00 f908 	mul.w	r9, r0, r8
 8000452:	b29e      	uxth	r6, r3
 8000454:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 8000458:	45b1      	cmp	r9, r6
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x1e4>
 800045c:	19f6      	adds	r6, r6, r7
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d271      	bcs.n	8000548 <__udivmoddi4+0x2c0>
 8000464:	45b1      	cmp	r9, r6
 8000466:	d96f      	bls.n	8000548 <__udivmoddi4+0x2c0>
 8000468:	3802      	subs	r0, #2
 800046a:	443e      	add	r6, r7
 800046c:	eba6 0609 	sub.w	r6, r6, r9
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	e78f      	b.n	8000396 <__udivmoddi4+0x10e>
 8000476:	f1c1 0720 	rsb	r7, r1, #32
 800047a:	fa22 f807 	lsr.w	r8, r2, r7
 800047e:	408b      	lsls	r3, r1
 8000480:	ea48 0303 	orr.w	r3, r8, r3
 8000484:	fa26 f407 	lsr.w	r4, r6, r7
 8000488:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800048c:	fbb4 f9fe 	udiv	r9, r4, lr
 8000490:	fa1f fc83 	uxth.w	ip, r3
 8000494:	fb0e 4419 	mls	r4, lr, r9, r4
 8000498:	408e      	lsls	r6, r1
 800049a:	fa20 f807 	lsr.w	r8, r0, r7
 800049e:	fb09 fa0c 	mul.w	sl, r9, ip
 80004a2:	ea48 0806 	orr.w	r8, r8, r6
 80004a6:	ea4f 4618 	mov.w	r6, r8, lsr #16
 80004aa:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
 80004ae:	45a2      	cmp	sl, r4
 80004b0:	fa02 f201 	lsl.w	r2, r2, r1
 80004b4:	fa00 f601 	lsl.w	r6, r0, r1
 80004b8:	d908      	bls.n	80004cc <__udivmoddi4+0x244>
 80004ba:	18e4      	adds	r4, r4, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	d244      	bcs.n	800054c <__udivmoddi4+0x2c4>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d942      	bls.n	800054c <__udivmoddi4+0x2c4>
 80004c6:	f1a9 0902 	sub.w	r9, r9, #2
 80004ca:	441c      	add	r4, r3
 80004cc:	eba4 040a 	sub.w	r4, r4, sl
 80004d0:	fbb4 f0fe 	udiv	r0, r4, lr
 80004d4:	fb0e 4410 	mls	r4, lr, r0, r4
 80004d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80004dc:	fa1f f888 	uxth.w	r8, r8
 80004e0:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 80004e4:	45a4      	cmp	ip, r4
 80004e6:	d907      	bls.n	80004f8 <__udivmoddi4+0x270>
 80004e8:	18e4      	adds	r4, r4, r3
 80004ea:	f100 3eff 	add.w	lr, r0, #4294967295
 80004ee:	d229      	bcs.n	8000544 <__udivmoddi4+0x2bc>
 80004f0:	45a4      	cmp	ip, r4
 80004f2:	d927      	bls.n	8000544 <__udivmoddi4+0x2bc>
 80004f4:	3802      	subs	r0, #2
 80004f6:	441c      	add	r4, r3
 80004f8:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fc:	fba0 8902 	umull	r8, r9, r0, r2
 8000500:	eba4 0c0c 	sub.w	ip, r4, ip
 8000504:	45cc      	cmp	ip, r9
 8000506:	46c2      	mov	sl, r8
 8000508:	46ce      	mov	lr, r9
 800050a:	d315      	bcc.n	8000538 <__udivmoddi4+0x2b0>
 800050c:	d012      	beq.n	8000534 <__udivmoddi4+0x2ac>
 800050e:	b155      	cbz	r5, 8000526 <__udivmoddi4+0x29e>
 8000510:	ebb6 030a 	subs.w	r3, r6, sl
 8000514:	eb6c 060e 	sbc.w	r6, ip, lr
 8000518:	fa06 f707 	lsl.w	r7, r6, r7
 800051c:	40cb      	lsrs	r3, r1
 800051e:	431f      	orrs	r7, r3
 8000520:	40ce      	lsrs	r6, r1
 8000522:	602f      	str	r7, [r5, #0]
 8000524:	606e      	str	r6, [r5, #4]
 8000526:	2100      	movs	r1, #0
 8000528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052c:	4610      	mov	r0, r2
 800052e:	e6f7      	b.n	8000320 <__udivmoddi4+0x98>
 8000530:	4689      	mov	r9, r1
 8000532:	e6de      	b.n	80002f2 <__udivmoddi4+0x6a>
 8000534:	4546      	cmp	r6, r8
 8000536:	d2ea      	bcs.n	800050e <__udivmoddi4+0x286>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 0e03 	sbc.w	lr, r9, r3
 8000540:	3801      	subs	r0, #1
 8000542:	e7e4      	b.n	800050e <__udivmoddi4+0x286>
 8000544:	4670      	mov	r0, lr
 8000546:	e7d7      	b.n	80004f8 <__udivmoddi4+0x270>
 8000548:	4618      	mov	r0, r3
 800054a:	e78f      	b.n	800046c <__udivmoddi4+0x1e4>
 800054c:	4681      	mov	r9, r0
 800054e:	e7bd      	b.n	80004cc <__udivmoddi4+0x244>
 8000550:	4611      	mov	r1, r2
 8000552:	e776      	b.n	8000442 <__udivmoddi4+0x1ba>
 8000554:	3802      	subs	r0, #2
 8000556:	443c      	add	r4, r7
 8000558:	e744      	b.n	80003e4 <__udivmoddi4+0x15c>
 800055a:	4608      	mov	r0, r1
 800055c:	e706      	b.n	800036c <__udivmoddi4+0xe4>
 800055e:	3a02      	subs	r2, #2
 8000560:	443e      	add	r6, r7
 8000562:	e72b      	b.n	80003bc <__udivmoddi4+0x134>

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000568:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800056a:	4b0e      	ldr	r3, [pc, #56]	; (80005a4 <HAL_InitTick+0x3c>)
{
 800056c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800056e:	7818      	ldrb	r0, [r3, #0]
 8000570:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000574:	fbb3 f3f0 	udiv	r3, r3, r0
 8000578:	4a0b      	ldr	r2, [pc, #44]	; (80005a8 <HAL_InitTick+0x40>)
 800057a:	6810      	ldr	r0, [r2, #0]
 800057c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000580:	f000 fbda 	bl	8000d38 <HAL_SYSTICK_Config>
 8000584:	4604      	mov	r4, r0
 8000586:	b958      	cbnz	r0, 80005a0 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000588:	2d0f      	cmp	r5, #15
 800058a:	d809      	bhi.n	80005a0 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800058c:	4602      	mov	r2, r0
 800058e:	4629      	mov	r1, r5
 8000590:	f04f 30ff 	mov.w	r0, #4294967295
 8000594:	f000 fb90 	bl	8000cb8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000598:	4b04      	ldr	r3, [pc, #16]	; (80005ac <HAL_InitTick+0x44>)
 800059a:	4620      	mov	r0, r4
 800059c:	601d      	str	r5, [r3, #0]
 800059e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80005a0:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80005a2:	bd38      	pop	{r3, r4, r5, pc}
 80005a4:	20000000 	.word	0x20000000
 80005a8:	20000050 	.word	0x20000050
 80005ac:	20000004 	.word	0x20000004

080005b0 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005b0:	4a07      	ldr	r2, [pc, #28]	; (80005d0 <HAL_Init+0x20>)
{
 80005b2:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005b4:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005b6:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005b8:	f043 0310 	orr.w	r3, r3, #16
 80005bc:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005be:	f000 fb69 	bl	8000c94 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80005c2:	200f      	movs	r0, #15
 80005c4:	f7ff ffd0 	bl	8000568 <HAL_InitTick>
  HAL_MspInit();
 80005c8:	f004 fb1e 	bl	8004c08 <HAL_MspInit>
}
 80005cc:	2000      	movs	r0, #0
 80005ce:	bd08      	pop	{r3, pc}
 80005d0:	40022000 	.word	0x40022000

080005d4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80005d4:	4a03      	ldr	r2, [pc, #12]	; (80005e4 <HAL_IncTick+0x10>)
 80005d6:	4b04      	ldr	r3, [pc, #16]	; (80005e8 <HAL_IncTick+0x14>)
 80005d8:	6811      	ldr	r1, [r2, #0]
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	440b      	add	r3, r1
 80005de:	6013      	str	r3, [r2, #0]
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	200052bc 	.word	0x200052bc
 80005e8:	20000000 	.word	0x20000000

080005ec <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005ec:	4b01      	ldr	r3, [pc, #4]	; (80005f4 <HAL_GetTick+0x8>)
 80005ee:	6818      	ldr	r0, [r3, #0]
}
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	200052bc 	.word	0x200052bc

080005f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005f8:	b538      	push	{r3, r4, r5, lr}
 80005fa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80005fc:	f7ff fff6 	bl	80005ec <HAL_GetTick>
 8000600:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000602:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000604:	bf1e      	ittt	ne
 8000606:	4b04      	ldrne	r3, [pc, #16]	; (8000618 <HAL_Delay+0x20>)
 8000608:	781b      	ldrbne	r3, [r3, #0]
 800060a:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800060c:	f7ff ffee 	bl	80005ec <HAL_GetTick>
 8000610:	1b40      	subs	r0, r0, r5
 8000612:	4284      	cmp	r4, r0
 8000614:	d8fa      	bhi.n	800060c <HAL_Delay+0x14>
  {
  }
}
 8000616:	bd38      	pop	{r3, r4, r5, pc}
 8000618:	20000000 	.word	0x20000000

0800061c <HAL_GetUID>:
  * @param UID pointer to 3 words array.
  * @retval Device identifier
  */
void HAL_GetUID(uint32_t *UID)
{
  UID[0] = (uint32_t)(READ_REG(*((uint32_t *)UID_BASE)));
 800061c:	4b04      	ldr	r3, [pc, #16]	; (8000630 <HAL_GetUID+0x14>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	6003      	str	r3, [r0, #0]
  UID[1] = (uint32_t)(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8000622:	4b04      	ldr	r3, [pc, #16]	; (8000634 <HAL_GetUID+0x18>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	6043      	str	r3, [r0, #4]
  UID[2] = (uint32_t)(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8000628:	4b03      	ldr	r3, [pc, #12]	; (8000638 <HAL_GetUID+0x1c>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	6083      	str	r3, [r0, #8]
 800062e:	4770      	bx	lr
 8000630:	1ffff7e8 	.word	0x1ffff7e8
 8000634:	1ffff7ec 	.word	0x1ffff7ec
 8000638:	1ffff7f0 	.word	0x1ffff7f0

0800063c <HAL_ADC_ConvCpltCallback>:
 800063c:	4770      	bx	lr

0800063e <HAL_ADC_LevelOutOfWindowCallback>:
 800063e:	4770      	bx	lr

08000640 <HAL_ADC_IRQHandler>:
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000640:	6803      	ldr	r3, [r0, #0]
{
 8000642:	b510      	push	{r4, lr}
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000644:	685a      	ldr	r2, [r3, #4]
{
 8000646:	4604      	mov	r4, r0
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8000648:	0690      	lsls	r0, r2, #26
 800064a:	d527      	bpl.n	800069c <HAL_ADC_IRQHandler+0x5c>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 800064c:	681a      	ldr	r2, [r3, #0]
 800064e:	0791      	lsls	r1, r2, #30
 8000650:	d524      	bpl.n	800069c <HAL_ADC_IRQHandler+0x5c>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000652:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000654:	06d2      	lsls	r2, r2, #27
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000656:	bf5e      	ittt	pl
 8000658:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 800065a:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 800065e:	62a2      	strpl	r2, [r4, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000660:	689a      	ldr	r2, [r3, #8]
 8000662:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8000666:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 800066a:	d110      	bne.n	800068e <HAL_ADC_IRQHandler+0x4e>
 800066c:	68e2      	ldr	r2, [r4, #12]
 800066e:	b972      	cbnz	r2, 800068e <HAL_ADC_IRQHandler+0x4e>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000670:	685a      	ldr	r2, [r3, #4]
 8000672:	f022 0220 	bic.w	r2, r2, #32
 8000676:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000678:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800067a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800067e:	62a3      	str	r3, [r4, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000680:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000682:	04db      	lsls	r3, r3, #19
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000684:	bf5e      	ittt	pl
 8000686:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 8000688:	f043 0301 	orrpl.w	r3, r3, #1
 800068c:	62a3      	strpl	r3, [r4, #40]	; 0x28
        }
      }

      /* Conversion complete callback */
      HAL_ADC_ConvCpltCallback(hadc);
 800068e:	4620      	mov	r0, r4
 8000690:	f7ff ffd4 	bl	800063c <HAL_ADC_ConvCpltCallback>
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000694:	f06f 0212 	mvn.w	r2, #18
 8000698:	6823      	ldr	r3, [r4, #0]
 800069a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 800069c:	6823      	ldr	r3, [r4, #0]
 800069e:	685a      	ldr	r2, [r3, #4]
 80006a0:	0610      	lsls	r0, r2, #24
 80006a2:	d530      	bpl.n	8000706 <HAL_ADC_IRQHandler+0xc6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 80006a4:	681a      	ldr	r2, [r3, #0]
 80006a6:	0751      	lsls	r1, r2, #29
 80006a8:	d52d      	bpl.n	8000706 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80006aa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80006ac:	06d2      	lsls	r2, r2, #27
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80006ae:	bf5e      	ittt	pl
 80006b0:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 80006b2:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 80006b6:	62a2      	strpl	r2, [r4, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80006b8:	689a      	ldr	r2, [r3, #8]
 80006ba:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
 80006be:	f5b2 4fe0 	cmp.w	r2, #28672	; 0x7000
 80006c2:	d00a      	beq.n	80006da <HAL_ADC_IRQHandler+0x9a>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80006c4:	685a      	ldr	r2, [r3, #4]
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80006c6:	0550      	lsls	r0, r2, #21
 80006c8:	d416      	bmi.n	80006f8 <HAL_ADC_IRQHandler+0xb8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80006ca:	689a      	ldr	r2, [r3, #8]
 80006cc:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80006d0:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 80006d4:	d110      	bne.n	80006f8 <HAL_ADC_IRQHandler+0xb8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80006d6:	68e2      	ldr	r2, [r4, #12]
 80006d8:	b972      	cbnz	r2, 80006f8 <HAL_ADC_IRQHandler+0xb8>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80006da:	685a      	ldr	r2, [r3, #4]
 80006dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80006e0:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80006e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80006e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80006e8:	62a3      	str	r3, [r4, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80006ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80006ec:	05d9      	lsls	r1, r3, #23
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80006ee:	bf5e      	ittt	pl
 80006f0:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 80006f2:	f043 0301 	orrpl.w	r3, r3, #1
 80006f6:	62a3      	strpl	r3, [r4, #40]	; 0x28
        }
      }

      /* Conversion complete callback */ 
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80006f8:	4620      	mov	r0, r4
 80006fa:	f004 f871 	bl	80047e0 <HAL_ADCEx_InjectedConvCpltCallback>
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80006fe:	f06f 020c 	mvn.w	r2, #12
 8000702:	6823      	ldr	r3, [r4, #0]
 8000704:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8000706:	6823      	ldr	r3, [r4, #0]
 8000708:	685a      	ldr	r2, [r3, #4]
 800070a:	0652      	lsls	r2, r2, #25
 800070c:	d50d      	bpl.n	800072a <HAL_ADC_IRQHandler+0xea>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	07db      	lsls	r3, r3, #31
 8000712:	d50a      	bpl.n	800072a <HAL_ADC_IRQHandler+0xea>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000714:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      
      /* Level out of window callback */ 
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000716:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000718:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800071c:	62a3      	str	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800071e:	f7ff ff8e 	bl	800063e <HAL_ADC_LevelOutOfWindowCallback>
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000722:	f06f 0201 	mvn.w	r2, #1
 8000726:	6823      	ldr	r3, [r4, #0]
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	bd10      	pop	{r4, pc}

0800072c <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 800072c:	2300      	movs	r3, #0
{ 
 800072e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000730:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000732:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8000736:	2b01      	cmp	r3, #1
 8000738:	d074      	beq.n	8000824 <HAL_ADC_ConfigChannel+0xf8>
 800073a:	2301      	movs	r3, #1
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800073c:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 800073e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8000742:	2d06      	cmp	r5, #6
 8000744:	6802      	ldr	r2, [r0, #0]
 8000746:	ea4f 0385 	mov.w	r3, r5, lsl #2
 800074a:	680c      	ldr	r4, [r1, #0]
 800074c:	d825      	bhi.n	800079a <HAL_ADC_ConfigChannel+0x6e>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800074e:	442b      	add	r3, r5
 8000750:	251f      	movs	r5, #31
 8000752:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8000754:	3b05      	subs	r3, #5
 8000756:	409d      	lsls	r5, r3
 8000758:	ea26 0505 	bic.w	r5, r6, r5
 800075c:	fa04 f303 	lsl.w	r3, r4, r3
 8000760:	432b      	orrs	r3, r5
 8000762:	6353      	str	r3, [r2, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000764:	2c09      	cmp	r4, #9
 8000766:	ea4f 0344 	mov.w	r3, r4, lsl #1
 800076a:	688d      	ldr	r5, [r1, #8]
 800076c:	d92f      	bls.n	80007ce <HAL_ADC_ConfigChannel+0xa2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800076e:	2607      	movs	r6, #7
 8000770:	4423      	add	r3, r4
 8000772:	68d1      	ldr	r1, [r2, #12]
 8000774:	3b1e      	subs	r3, #30
 8000776:	409e      	lsls	r6, r3
 8000778:	ea21 0106 	bic.w	r1, r1, r6
 800077c:	fa05 f303 	lsl.w	r3, r5, r3
 8000780:	430b      	orrs	r3, r1
 8000782:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000784:	f1a4 0310 	sub.w	r3, r4, #16
 8000788:	2b01      	cmp	r3, #1
 800078a:	d92b      	bls.n	80007e4 <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800078c:	2300      	movs	r3, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800078e:	2200      	movs	r2, #0
 8000790:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8000794:	4618      	mov	r0, r3
 8000796:	b002      	add	sp, #8
 8000798:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 800079a:	2d0c      	cmp	r5, #12
 800079c:	d80b      	bhi.n	80007b6 <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800079e:	442b      	add	r3, r5
 80007a0:	251f      	movs	r5, #31
 80007a2:	6b16      	ldr	r6, [r2, #48]	; 0x30
 80007a4:	3b23      	subs	r3, #35	; 0x23
 80007a6:	409d      	lsls	r5, r3
 80007a8:	ea26 0505 	bic.w	r5, r6, r5
 80007ac:	fa04 f303 	lsl.w	r3, r4, r3
 80007b0:	432b      	orrs	r3, r5
 80007b2:	6313      	str	r3, [r2, #48]	; 0x30
 80007b4:	e7d6      	b.n	8000764 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80007b6:	442b      	add	r3, r5
 80007b8:	251f      	movs	r5, #31
 80007ba:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 80007bc:	3b41      	subs	r3, #65	; 0x41
 80007be:	409d      	lsls	r5, r3
 80007c0:	ea26 0505 	bic.w	r5, r6, r5
 80007c4:	fa04 f303 	lsl.w	r3, r4, r3
 80007c8:	432b      	orrs	r3, r5
 80007ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 80007cc:	e7ca      	b.n	8000764 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80007ce:	2607      	movs	r6, #7
 80007d0:	6911      	ldr	r1, [r2, #16]
 80007d2:	4423      	add	r3, r4
 80007d4:	409e      	lsls	r6, r3
 80007d6:	ea21 0106 	bic.w	r1, r1, r6
 80007da:	fa05 f303 	lsl.w	r3, r5, r3
 80007de:	430b      	orrs	r3, r1
 80007e0:	6113      	str	r3, [r2, #16]
 80007e2:	e7cf      	b.n	8000784 <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 80007e4:	4b10      	ldr	r3, [pc, #64]	; (8000828 <HAL_ADC_ConfigChannel+0xfc>)
 80007e6:	429a      	cmp	r2, r3
 80007e8:	d116      	bne.n	8000818 <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80007ea:	6893      	ldr	r3, [r2, #8]
 80007ec:	021b      	lsls	r3, r3, #8
 80007ee:	d4cd      	bmi.n	800078c <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80007f0:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80007f2:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80007f4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80007f8:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80007fa:	d1c7      	bne.n	800078c <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80007fc:	4b0b      	ldr	r3, [pc, #44]	; (800082c <HAL_ADC_ConfigChannel+0x100>)
 80007fe:	4a0c      	ldr	r2, [pc, #48]	; (8000830 <HAL_ADC_ConfigChannel+0x104>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	fbb3 f2f2 	udiv	r2, r3, r2
 8000806:	230a      	movs	r3, #10
 8000808:	4353      	muls	r3, r2
            wait_loop_index--;
 800080a:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 800080c:	9b01      	ldr	r3, [sp, #4]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d0bc      	beq.n	800078c <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 8000812:	9b01      	ldr	r3, [sp, #4]
 8000814:	3b01      	subs	r3, #1
 8000816:	e7f8      	b.n	800080a <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000818:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800081a:	f043 0320 	orr.w	r3, r3, #32
 800081e:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8000820:	2301      	movs	r3, #1
 8000822:	e7b4      	b.n	800078e <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 8000824:	2302      	movs	r3, #2
 8000826:	e7b5      	b.n	8000794 <HAL_ADC_ConfigChannel+0x68>
 8000828:	40012400 	.word	0x40012400
 800082c:	20000050 	.word	0x20000050
 8000830:	000f4240 	.word	0x000f4240

08000834 <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8000834:	2300      	movs	r3, #0
{
 8000836:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000838:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800083a:	6803      	ldr	r3, [r0, #0]
{
 800083c:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800083e:	689a      	ldr	r2, [r3, #8]
 8000840:	07d2      	lsls	r2, r2, #31
 8000842:	d502      	bpl.n	800084a <ADC_Enable+0x16>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000844:	2000      	movs	r0, #0
}
 8000846:	b002      	add	sp, #8
 8000848:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 800084a:	689a      	ldr	r2, [r3, #8]
 800084c:	f042 0201 	orr.w	r2, r2, #1
 8000850:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000852:	4b12      	ldr	r3, [pc, #72]	; (800089c <ADC_Enable+0x68>)
 8000854:	4a12      	ldr	r2, [pc, #72]	; (80008a0 <ADC_Enable+0x6c>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 800085c:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 800085e:	9b01      	ldr	r3, [sp, #4]
 8000860:	b9c3      	cbnz	r3, 8000894 <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 8000862:	f7ff fec3 	bl	80005ec <HAL_GetTick>
 8000866:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000868:	6823      	ldr	r3, [r4, #0]
 800086a:	689d      	ldr	r5, [r3, #8]
 800086c:	f015 0501 	ands.w	r5, r5, #1
 8000870:	d1e8      	bne.n	8000844 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000872:	f7ff febb 	bl	80005ec <HAL_GetTick>
 8000876:	1b80      	subs	r0, r0, r6
 8000878:	2802      	cmp	r0, #2
 800087a:	d9f5      	bls.n	8000868 <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800087c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 800087e:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000882:	f043 0310 	orr.w	r3, r3, #16
 8000886:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000888:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 800088a:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800088c:	f043 0301 	orr.w	r3, r3, #1
 8000890:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000892:	e7d8      	b.n	8000846 <ADC_Enable+0x12>
      wait_loop_index--;
 8000894:	9b01      	ldr	r3, [sp, #4]
 8000896:	3b01      	subs	r3, #1
 8000898:	e7e0      	b.n	800085c <ADC_Enable+0x28>
 800089a:	bf00      	nop
 800089c:	20000050 	.word	0x20000050
 80008a0:	000f4240 	.word	0x000f4240

080008a4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80008a4:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80008a6:	6803      	ldr	r3, [r0, #0]
{
 80008a8:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 80008aa:	689a      	ldr	r2, [r3, #8]
 80008ac:	07d2      	lsls	r2, r2, #31
 80008ae:	d401      	bmi.n	80008b4 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80008b0:	2000      	movs	r0, #0
 80008b2:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 80008b4:	689a      	ldr	r2, [r3, #8]
 80008b6:	f022 0201 	bic.w	r2, r2, #1
 80008ba:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80008bc:	f7ff fe96 	bl	80005ec <HAL_GetTick>
 80008c0:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 80008c2:	6823      	ldr	r3, [r4, #0]
 80008c4:	689b      	ldr	r3, [r3, #8]
 80008c6:	07db      	lsls	r3, r3, #31
 80008c8:	d5f2      	bpl.n	80008b0 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80008ca:	f7ff fe8f 	bl	80005ec <HAL_GetTick>
 80008ce:	1b40      	subs	r0, r0, r5
 80008d0:	2802      	cmp	r0, #2
 80008d2:	d9f6      	bls.n	80008c2 <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80008d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80008d6:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80008d8:	f043 0310 	orr.w	r3, r3, #16
 80008dc:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80008de:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80008e0:	f043 0301 	orr.w	r3, r3, #1
 80008e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80008e6:	bd38      	pop	{r3, r4, r5, pc}

080008e8 <HAL_ADC_Init>:
{
 80008e8:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 80008ea:	4604      	mov	r4, r0
 80008ec:	2800      	cmp	r0, #0
 80008ee:	d071      	beq.n	80009d4 <HAL_ADC_Init+0xec>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80008f0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80008f2:	b923      	cbnz	r3, 80008fe <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 80008f4:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 80008f6:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 80008fa:	f004 f9ad 	bl	8004c58 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80008fe:	4620      	mov	r0, r4
 8000900:	f7ff ffd0 	bl	80008a4 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000904:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000906:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 800090a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800090c:	d164      	bne.n	80009d8 <HAL_ADC_Init+0xf0>
 800090e:	2800      	cmp	r0, #0
 8000910:	d162      	bne.n	80009d8 <HAL_ADC_Init+0xf0>
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000912:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 8000914:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000918:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 800091a:	f023 0302 	bic.w	r3, r3, #2
 800091e:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8000922:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000924:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8000926:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 8000928:	68e3      	ldr	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800092a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 800092e:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000932:	d038      	beq.n	80009a6 <HAL_ADC_Init+0xbe>
 8000934:	2901      	cmp	r1, #1
 8000936:	bf14      	ite	ne
 8000938:	4606      	movne	r6, r0
 800093a:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800093e:	6965      	ldr	r5, [r4, #20]
 8000940:	2d01      	cmp	r5, #1
 8000942:	d107      	bne.n	8000954 <HAL_ADC_Init+0x6c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000944:	2b00      	cmp	r3, #0
 8000946:	d130      	bne.n	80009aa <HAL_ADC_Init+0xc2>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000948:	69a3      	ldr	r3, [r4, #24]
 800094a:	3b01      	subs	r3, #1
 800094c:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 8000950:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8000954:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000956:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 800095a:	685d      	ldr	r5, [r3, #4]
 800095c:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 8000960:	ea45 0506 	orr.w	r5, r5, r6
 8000964:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8000966:	689e      	ldr	r6, [r3, #8]
 8000968:	4d1d      	ldr	r5, [pc, #116]	; (80009e0 <HAL_ADC_Init+0xf8>)
 800096a:	ea05 0506 	and.w	r5, r5, r6
 800096e:	ea45 0502 	orr.w	r5, r5, r2
 8000972:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000974:	d001      	beq.n	800097a <HAL_ADC_Init+0x92>
 8000976:	2901      	cmp	r1, #1
 8000978:	d120      	bne.n	80009bc <HAL_ADC_Init+0xd4>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800097a:	6921      	ldr	r1, [r4, #16]
 800097c:	3901      	subs	r1, #1
 800097e:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8000980:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8000982:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 8000986:	4329      	orrs	r1, r5
 8000988:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800098a:	6899      	ldr	r1, [r3, #8]
 800098c:	4b15      	ldr	r3, [pc, #84]	; (80009e4 <HAL_ADC_Init+0xfc>)
 800098e:	400b      	ands	r3, r1
 8000990:	429a      	cmp	r2, r3
 8000992:	d115      	bne.n	80009c0 <HAL_ADC_Init+0xd8>
      ADC_CLEAR_ERRORCODE(hadc);
 8000994:	2300      	movs	r3, #0
 8000996:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8000998:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800099a:	f023 0303 	bic.w	r3, r3, #3
 800099e:	f043 0301 	orr.w	r3, r3, #1
 80009a2:	62a3      	str	r3, [r4, #40]	; 0x28
 80009a4:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80009a6:	460e      	mov	r6, r1
 80009a8:	e7c9      	b.n	800093e <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80009aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80009ac:	f043 0320 	orr.w	r3, r3, #32
 80009b0:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009b2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80009ba:	e7cb      	b.n	8000954 <HAL_ADC_Init+0x6c>
  uint32_t tmp_sqr1 = 0U;
 80009bc:	2100      	movs	r1, #0
 80009be:	e7df      	b.n	8000980 <HAL_ADC_Init+0x98>
      ADC_STATE_CLR_SET(hadc->State,
 80009c0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80009c2:	f023 0312 	bic.w	r3, r3, #18
 80009c6:	f043 0310 	orr.w	r3, r3, #16
 80009ca:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009cc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80009ce:	f043 0301 	orr.w	r3, r3, #1
 80009d2:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 80009d4:	2001      	movs	r0, #1
}
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80009d8:	f043 0310 	orr.w	r3, r3, #16
 80009dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80009de:	e7f9      	b.n	80009d4 <HAL_ADC_Init+0xec>
 80009e0:	ffe1f7fd 	.word	0xffe1f7fd
 80009e4:	ff1f0efe 	.word	0xff1f0efe

080009e8 <HAL_ADCEx_InjectedStart_IT>:
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80009e8:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 80009ec:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 80009ee:	2b01      	cmp	r3, #1
{
 80009f0:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 80009f2:	d04e      	beq.n	8000a92 <HAL_ADCEx_InjectedStart_IT+0xaa>
 80009f4:	2301      	movs	r3, #1
 80009f6:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80009fa:	f7ff ff1b 	bl	8000834 <ADC_Enable>
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80009fe:	2800      	cmp	r0, #0
 8000a00:	d143      	bne.n	8000a8a <HAL_ADCEx_InjectedStart_IT+0xa2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 8000a02:	6aa3      	ldr	r3, [r4, #40]	; 0x28
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_INJ_EOC,
                      HAL_ADC_STATE_INJ_BUSY);
    
    /* Case of independent mode or multimode (for devices with several ADCs): */
    /* Set multimode state.                                                   */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000a04:	4a24      	ldr	r2, [pc, #144]	; (8000a98 <HAL_ADCEx_InjectedStart_IT+0xb0>)
    ADC_STATE_CLR_SET(hadc->State,
 8000a06:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000a0a:	f023 0301 	bic.w	r3, r3, #1
 8000a0e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a12:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000a14:	6823      	ldr	r3, [r4, #0]
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d105      	bne.n	8000a26 <HAL_ADCEx_InjectedStart_IT+0x3e>
 8000a1a:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8000a1e:	6852      	ldr	r2, [r2, #4]
 8000a20:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 8000a24:	d129      	bne.n	8000a7a <HAL_ADCEx_InjectedStart_IT+0x92>
    {
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000a26:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000a28:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
    }
    else
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000a2c:	62a2      	str	r2, [r4, #40]	; 0x28
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000a2e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000a30:	f412 7280 	ands.w	r2, r2, #256	; 0x100
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000a34:	bf08      	it	eq
 8000a36:	62e2      	streq	r2, [r4, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000a38:	2200      	movs	r2, #0
 8000a3a:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8000a3e:	f06f 0204 	mvn.w	r2, #4
 8000a42:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for injected channels */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8000a44:	685a      	ldr	r2, [r3, #4]
 8000a46:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000a4a:	605a      	str	r2, [r3, #4]
    /* and if automatic injected conversion is disabled.                      */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* If automatic injected conversion is enabled, conversion will start     */
    /* after next regular group conversion.                                   */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO))
 8000a4c:	685a      	ldr	r2, [r3, #4]
 8000a4e:	0552      	lsls	r2, r2, #21
 8000a50:	d420      	bmi.n	8000a94 <HAL_ADCEx_InjectedStart_IT+0xac>
    {
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 8000a52:	689a      	ldr	r2, [r3, #8]
 8000a54:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
 8000a58:	f5b2 4fe0 	cmp.w	r2, #28672	; 0x7000
 8000a5c:	d111      	bne.n	8000a82 <HAL_ADCEx_InjectedStart_IT+0x9a>
 8000a5e:	4a0e      	ldr	r2, [pc, #56]	; (8000a98 <HAL_ADCEx_InjectedStart_IT+0xb0>)
 8000a60:	4293      	cmp	r3, r2
 8000a62:	d105      	bne.n	8000a70 <HAL_ADCEx_InjectedStart_IT+0x88>
          ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000a64:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8000a68:	6852      	ldr	r2, [r2, #4]
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 8000a6a:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 8000a6e:	d108      	bne.n	8000a82 <HAL_ADCEx_InjectedStart_IT+0x9a>
      {
        /* Start ADC conversion on injected group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_JSWSTART | ADC_CR2_JEXTTRIG));
 8000a70:	689a      	ldr	r2, [r3, #8]
 8000a72:	f442 1202 	orr.w	r2, r2, #2129920	; 0x208000
      }
      else
      {
        /* Start ADC conversion on injected group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_JEXTTRIG);
 8000a76:	609a      	str	r2, [r3, #8]
 8000a78:	bd10      	pop	{r4, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000a7a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000a7c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000a80:	e7d4      	b.n	8000a2c <HAL_ADCEx_InjectedStart_IT+0x44>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_JEXTTRIG);
 8000a82:	689a      	ldr	r2, [r3, #8]
 8000a84:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000a88:	e7f5      	b.n	8000a76 <HAL_ADCEx_InjectedStart_IT+0x8e>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8000a90:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8000a92:	2002      	movs	r0, #2
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 8000a94:	bd10      	pop	{r4, pc}
 8000a96:	bf00      	nop
 8000a98:	40012800 	.word	0x40012800

08000a9c <HAL_ADCEx_InjectedGetValue>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Get ADC converted value */ 
  switch(InjectedRank)
 8000a9c:	2903      	cmp	r1, #3
 8000a9e:	6803      	ldr	r3, [r0, #0]
 8000aa0:	d007      	beq.n	8000ab2 <HAL_ADCEx_InjectedGetValue+0x16>
 8000aa2:	2904      	cmp	r1, #4
 8000aa4:	d003      	beq.n	8000aae <HAL_ADCEx_InjectedGetValue+0x12>
 8000aa6:	2902      	cmp	r1, #2
 8000aa8:	d105      	bne.n	8000ab6 <HAL_ADCEx_InjectedGetValue+0x1a>
      break;
    case ADC_INJECTED_RANK_3: 
      tmp_jdr = hadc->Instance->JDR3;
      break;
    case ADC_INJECTED_RANK_2: 
      tmp_jdr = hadc->Instance->JDR2;
 8000aaa:	6c18      	ldr	r0, [r3, #64]	; 0x40
      break;
 8000aac:	4770      	bx	lr
      tmp_jdr = hadc->Instance->JDR4;
 8000aae:	6c98      	ldr	r0, [r3, #72]	; 0x48
      break;
 8000ab0:	4770      	bx	lr
      tmp_jdr = hadc->Instance->JDR3;
 8000ab2:	6c58      	ldr	r0, [r3, #68]	; 0x44
      break;
 8000ab4:	4770      	bx	lr
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 8000ab6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
      break;
  }
  
  /* Return ADC converted value */ 
  return tmp_jdr;
}
 8000ab8:	4770      	bx	lr
	...

08000abc <HAL_ADCEx_InjectedConfigChannel>:
  * @param  sConfigInjected: Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8000abc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000abe:	4602      	mov	r2, r0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8000ac0:	2000      	movs	r0, #0
    assert_param(IS_ADC_INJECTED_NB_CONV(sConfigInjected->InjectedNbrOfConversion));
    assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->InjectedDiscontinuousConvMode));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ac2:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
  __IO uint32_t wait_loop_index = 0U;
 8000ac6:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	f000 80d8 	beq.w	8000c7e <HAL_ADCEx_InjectedConfigChannel+0x1c2>
 8000ace:	2701      	movs	r7, #1
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000ad0:	f8d2 e008 	ldr.w	lr, [r2, #8]
  __HAL_LOCK(hadc);
 8000ad4:	f882 7024 	strb.w	r7, [r2, #36]	; 0x24
 8000ad8:	684e      	ldr	r6, [r1, #4]
 8000ada:	6813      	ldr	r3, [r2, #0]
 8000adc:	680d      	ldr	r5, [r1, #0]
  /*   Note: Scan mode is present by hardware on this device and, if          */
  /*   disabled, discards automatically nb of conversions. Anyway, nb of      */
  /*   conversions is forced to 0x00 for alignment over all STM32 devices.    */
  /* - if scan mode is enabled, injected channels sequence length is set to   */
  /*   parameter "InjectedNbrOfConversion".                                   */
  if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8000ade:	f1be 0f00 	cmp.w	lr, #0
 8000ae2:	d17b      	bne.n	8000bdc <HAL_ADCEx_InjectedConfigChannel+0x120>
  {
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8000ae4:	42be      	cmp	r6, r7
 8000ae6:	d173      	bne.n	8000bd0 <HAL_ADCEx_InjectedConfigChannel+0x114>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ae8:	4670      	mov	r0, lr
    {
      /* Clear the old SQx bits for all injected ranks */
      MODIFY_REG(hadc->Instance->JSQR                             ,
 8000aea:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8000aec:	0da4      	lsrs	r4, r4, #22
 8000aee:	05a4      	lsls	r4, r4, #22
 8000af0:	ea44 34c5 	orr.w	r4, r4, r5, lsl #15
 8000af4:	639c      	str	r4, [r3, #56]	; 0x38
  /* Parameters update not conditioned to ADC state:                          */
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  /* Note: In case of ADC already enabled, caution to not launch an unwanted  */
  /*       conversion while modifying register CR2 by writing 1 to bit ADON.  */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000af6:	689c      	ldr	r4, [r3, #8]
 8000af8:	07e4      	lsls	r4, r4, #31
 8000afa:	d407      	bmi.n	8000b0c <HAL_ADCEx_InjectedConfigChannel+0x50>
  {    
    MODIFY_REG(hadc->Instance->CR2                                           ,
 8000afc:	689c      	ldr	r4, [r3, #8]
 8000afe:	69cf      	ldr	r7, [r1, #28]
 8000b00:	f424 44e0 	bic.w	r4, r4, #28672	; 0x7000
 8000b04:	f024 0401 	bic.w	r4, r4, #1
 8000b08:	433c      	orrs	r4, r7
 8000b0a:	609c      	str	r4, [r3, #8]
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  
    /* Automatic injected conversion can be enabled if injected group         */
    /* external triggers are disabled.                                        */
    if (sConfigInjected->AutoInjectedConv == ENABLE)
 8000b0c:	698c      	ldr	r4, [r1, #24]
 8000b0e:	2c01      	cmp	r4, #1
 8000b10:	d10d      	bne.n	8000b2e <HAL_ADCEx_InjectedConfigChannel+0x72>
    {
      if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8000b12:	69cf      	ldr	r7, [r1, #28]
 8000b14:	f5b7 4fe0 	cmp.w	r7, #28672	; 0x7000
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO);
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b18:	bf17      	itett	ne
 8000b1a:	6a90      	ldrne	r0, [r2, #40]	; 0x28
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8000b1c:	685f      	ldreq	r7, [r3, #4]
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b1e:	f040 0020 	orrne.w	r0, r0, #32
 8000b22:	6290      	strne	r0, [r2, #40]	; 0x28
        
        tmp_hal_status = HAL_ERROR;
 8000b24:	bf12      	itee	ne
 8000b26:	4620      	movne	r0, r4
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8000b28:	f447 6780 	orreq.w	r7, r7, #1024	; 0x400
 8000b2c:	605f      	streq	r7, [r3, #4]
      }
    }
    
    /* Injected discontinuous can be enabled only if auto-injected mode is    */
    /* disabled.                                                              */  
    if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 8000b2e:	694f      	ldr	r7, [r1, #20]
 8000b30:	2f01      	cmp	r7, #1
 8000b32:	d105      	bne.n	8000b40 <HAL_ADCEx_InjectedConfigChannel+0x84>
    {
      if (sConfigInjected->AutoInjectedConv == DISABLE)
 8000b34:	2c00      	cmp	r4, #0
 8000b36:	d174      	bne.n	8000c22 <HAL_ADCEx_InjectedConfigChannel+0x166>
      {
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JDISCEN);
 8000b38:	685c      	ldr	r4, [r3, #4]
 8000b3a:	f444 5480 	orr.w	r4, r4, #4096	; 0x1000
 8000b3e:	605c      	str	r4, [r3, #4]
    }


  /* InjectedChannel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8000b40:	2d09      	cmp	r5, #9
 8000b42:	ea4f 0445 	mov.w	r4, r5, lsl #1
 8000b46:	f8d1 e008 	ldr.w	lr, [r1, #8]
 8000b4a:	d970      	bls.n	8000c2e <HAL_ADCEx_InjectedConfigChannel+0x172>
  {
    MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 8000b4c:	f04f 0c07 	mov.w	ip, #7
 8000b50:	442c      	add	r4, r5
 8000b52:	68df      	ldr	r7, [r3, #12]
 8000b54:	3c1e      	subs	r4, #30
 8000b56:	fa0c fc04 	lsl.w	ip, ip, r4
 8000b5a:	ea27 070c 	bic.w	r7, r7, ip
 8000b5e:	fa0e f404 	lsl.w	r4, lr, r4
 8000b62:	433c      	orrs	r4, r7
 8000b64:	60dc      	str	r4, [r3, #12]
               ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  
  /* If ADC1 InjectedChannel_16 or InjectedChannel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8000b66:	f1a5 0410 	sub.w	r4, r5, #16
 8000b6a:	2c01      	cmp	r4, #1
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
  {
    SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000b6c:	bf98      	it	ls
 8000b6e:	689f      	ldrls	r7, [r3, #8]
 8000b70:	f8df e11c 	ldr.w	lr, [pc, #284]	; 8000c90 <HAL_ADCEx_InjectedConfigChannel+0x1d4>
 8000b74:	bf9c      	itt	ls
 8000b76:	f447 0700 	orrls.w	r7, r7, #8388608	; 0x800000
 8000b7a:	609f      	strls	r7, [r3, #8]
  }
  
  
  /* Configure the offset: offset enable/disable, InjectedChannel, offset value */
  switch(sConfigInjected->InjectedRank)
 8000b7c:	2e02      	cmp	r6, #2
 8000b7e:	68cf      	ldr	r7, [r1, #12]
 8000b80:	d062      	beq.n	8000c48 <HAL_ADCEx_InjectedConfigChannel+0x18c>
 8000b82:	2e03      	cmp	r6, #3
 8000b84:	d066      	beq.n	8000c54 <HAL_ADCEx_InjectedConfigChannel+0x198>
 8000b86:	2e01      	cmp	r6, #1
 8000b88:	d16a      	bne.n	8000c60 <HAL_ADCEx_InjectedConfigChannel+0x1a4>
  {
    case 1:
      /* Set injected channel 1 offset */
      MODIFY_REG(hadc->Instance->JOFR1,
 8000b8a:	6959      	ldr	r1, [r3, #20]
 8000b8c:	ea01 010e 	and.w	r1, r1, lr
 8000b90:	4339      	orrs	r1, r7
 8000b92:	6159      	str	r1, [r3, #20]
      break;
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8000b94:	2c01      	cmp	r4, #1
 8000b96:	d816      	bhi.n	8000bc6 <HAL_ADCEx_InjectedConfigChannel+0x10a>
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000b98:	493a      	ldr	r1, [pc, #232]	; (8000c84 <HAL_ADCEx_InjectedConfigChannel+0x1c8>)
 8000b9a:	428b      	cmp	r3, r1
 8000b9c:	d169      	bne.n	8000c72 <HAL_ADCEx_InjectedConfigChannel+0x1b6>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000b9e:	6899      	ldr	r1, [r3, #8]
 8000ba0:	0209      	lsls	r1, r1, #8
 8000ba2:	d410      	bmi.n	8000bc6 <HAL_ADCEx_InjectedConfigChannel+0x10a>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000ba4:	6899      	ldr	r1, [r3, #8]
        
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR))
 8000ba6:	2d10      	cmp	r5, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000ba8:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bac:	6099      	str	r1, [r3, #8]
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR))
 8000bae:	d10a      	bne.n	8000bc6 <HAL_ADCEx_InjectedConfigChannel+0x10a>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000bb0:	4b35      	ldr	r3, [pc, #212]	; (8000c88 <HAL_ADCEx_InjectedConfigChannel+0x1cc>)
 8000bb2:	4936      	ldr	r1, [pc, #216]	; (8000c8c <HAL_ADCEx_InjectedConfigChannel+0x1d0>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	fbb3 f1f1 	udiv	r1, r3, r1
 8000bba:	230a      	movs	r3, #10
 8000bbc:	434b      	muls	r3, r1
          while(wait_loop_index != 0U)
          {
            wait_loop_index--;
 8000bbe:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8000bc0:	9b01      	ldr	r3, [sp, #4]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d152      	bne.n	8000c6c <HAL_ADCEx_InjectedConfigChannel+0x1b0>
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8000bcc:	b003      	add	sp, #12
 8000bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000bd0:	6a94      	ldr	r4, [r2, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8000bd2:	4638      	mov	r0, r7
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000bd4:	f044 0420 	orr.w	r4, r4, #32
 8000bd8:	6294      	str	r4, [r2, #40]	; 0x28
 8000bda:	e78c      	b.n	8000af6 <HAL_ADCEx_InjectedConfigChannel+0x3a>
    if (sConfigInjected->InjectedRank <= sConfigInjected->InjectedNbrOfConversion)
 8000bdc:	690f      	ldr	r7, [r1, #16]
      MODIFY_REG(hadc->Instance->JSQR                                         ,
 8000bde:	f8d3 e038 	ldr.w	lr, [r3, #56]	; 0x38
 8000be2:	1bf4      	subs	r4, r6, r7
 8000be4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    if (sConfigInjected->InjectedRank <= sConfigInjected->InjectedNbrOfConversion)
 8000be8:	42be      	cmp	r6, r7
      MODIFY_REG(hadc->Instance->JSQR                                         ,
 8000bea:	f104 040f 	add.w	r4, r4, #15
    if (sConfigInjected->InjectedRank <= sConfigInjected->InjectedNbrOfConversion)
 8000bee:	d810      	bhi.n	8000c12 <HAL_ADCEx_InjectedConfigChannel+0x156>
      MODIFY_REG(hadc->Instance->JSQR                                         ,
 8000bf0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000bf4:	fa05 f704 	lsl.w	r7, r5, r4
 8000bf8:	ea47 570c 	orr.w	r7, r7, ip, lsl #20
 8000bfc:	f04f 0c1f 	mov.w	ip, #31
 8000c00:	fa0c f404 	lsl.w	r4, ip, r4
 8000c04:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8000c08:	ea2e 0404 	bic.w	r4, lr, r4
 8000c0c:	433c      	orrs	r4, r7
      MODIFY_REG(hadc->Instance->JSQR                                       ,
 8000c0e:	639c      	str	r4, [r3, #56]	; 0x38
 8000c10:	e771      	b.n	8000af6 <HAL_ADCEx_InjectedConfigChannel+0x3a>
 8000c12:	271f      	movs	r7, #31
 8000c14:	fa07 f404 	lsl.w	r4, r7, r4
 8000c18:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8000c1c:	ea2e 0404 	bic.w	r4, lr, r4
 8000c20:	e7f5      	b.n	8000c0e <HAL_ADCEx_InjectedConfigChannel+0x152>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c22:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8000c24:	f040 0020 	orr.w	r0, r0, #32
 8000c28:	6290      	str	r0, [r2, #40]	; 0x28
        tmp_hal_status = HAL_ERROR;
 8000c2a:	4638      	mov	r0, r7
 8000c2c:	e788      	b.n	8000b40 <HAL_ADCEx_InjectedConfigChannel+0x84>
    MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 8000c2e:	f04f 0c07 	mov.w	ip, #7
 8000c32:	691f      	ldr	r7, [r3, #16]
 8000c34:	442c      	add	r4, r5
 8000c36:	fa0c fc04 	lsl.w	ip, ip, r4
 8000c3a:	ea27 070c 	bic.w	r7, r7, ip
 8000c3e:	fa0e f404 	lsl.w	r4, lr, r4
 8000c42:	433c      	orrs	r4, r7
 8000c44:	611c      	str	r4, [r3, #16]
 8000c46:	e78e      	b.n	8000b66 <HAL_ADCEx_InjectedConfigChannel+0xaa>
      MODIFY_REG(hadc->Instance->JOFR2,
 8000c48:	6999      	ldr	r1, [r3, #24]
 8000c4a:	ea01 010e 	and.w	r1, r1, lr
 8000c4e:	4339      	orrs	r1, r7
 8000c50:	6199      	str	r1, [r3, #24]
      break;
 8000c52:	e79f      	b.n	8000b94 <HAL_ADCEx_InjectedConfigChannel+0xd8>
      MODIFY_REG(hadc->Instance->JOFR3,
 8000c54:	69d9      	ldr	r1, [r3, #28]
 8000c56:	ea01 010e 	and.w	r1, r1, lr
 8000c5a:	4339      	orrs	r1, r7
 8000c5c:	61d9      	str	r1, [r3, #28]
      break;
 8000c5e:	e799      	b.n	8000b94 <HAL_ADCEx_InjectedConfigChannel+0xd8>
      MODIFY_REG(hadc->Instance->JOFR4,
 8000c60:	6a19      	ldr	r1, [r3, #32]
 8000c62:	ea01 010e 	and.w	r1, r1, lr
 8000c66:	4339      	orrs	r1, r7
 8000c68:	6219      	str	r1, [r3, #32]
      break;
 8000c6a:	e793      	b.n	8000b94 <HAL_ADCEx_InjectedConfigChannel+0xd8>
            wait_loop_index--;
 8000c6c:	9b01      	ldr	r3, [sp, #4]
 8000c6e:	3b01      	subs	r3, #1
 8000c70:	e7a5      	b.n	8000bbe <HAL_ADCEx_InjectedConfigChannel+0x102>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c72:	6a93      	ldr	r3, [r2, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8000c74:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c76:	f043 0320 	orr.w	r3, r3, #32
 8000c7a:	6293      	str	r3, [r2, #40]	; 0x28
 8000c7c:	e7a3      	b.n	8000bc6 <HAL_ADCEx_InjectedConfigChannel+0x10a>
  __HAL_LOCK(hadc);
 8000c7e:	2002      	movs	r0, #2
 8000c80:	e7a4      	b.n	8000bcc <HAL_ADCEx_InjectedConfigChannel+0x110>
 8000c82:	bf00      	nop
 8000c84:	40012400 	.word	0x40012400
 8000c88:	20000050 	.word	0x20000050
 8000c8c:	000f4240 	.word	0x000f4240
 8000c90:	fffff000 	.word	0xfffff000

08000c94 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c94:	4a07      	ldr	r2, [pc, #28]	; (8000cb4 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000c96:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c98:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000c9a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c9e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000ca2:	041b      	lsls	r3, r3, #16
 8000ca4:	0c1b      	lsrs	r3, r3, #16
 8000ca6:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000caa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000cae:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000cb0:	60d3      	str	r3, [r2, #12]
 8000cb2:	4770      	bx	lr
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cb8:	4b17      	ldr	r3, [pc, #92]	; (8000d18 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cba:	b530      	push	{r4, r5, lr}
 8000cbc:	68dc      	ldr	r4, [r3, #12]
 8000cbe:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cc2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cc6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cc8:	2b04      	cmp	r3, #4
 8000cca:	bf28      	it	cs
 8000ccc:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cce:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd0:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cd4:	bf98      	it	ls
 8000cd6:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd8:	fa05 f303 	lsl.w	r3, r5, r3
 8000cdc:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ce0:	bf88      	it	hi
 8000ce2:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ce4:	4019      	ands	r1, r3
 8000ce6:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ce8:	fa05 f404 	lsl.w	r4, r5, r4
 8000cec:	3c01      	subs	r4, #1
 8000cee:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000cf0:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf2:	ea42 0201 	orr.w	r2, r2, r1
 8000cf6:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cfa:	bfaf      	iteee	ge
 8000cfc:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d00:	4b06      	ldrlt	r3, [pc, #24]	; (8000d1c <HAL_NVIC_SetPriority+0x64>)
 8000d02:	f000 000f 	andlt.w	r0, r0, #15
 8000d06:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d08:	bfa5      	ittet	ge
 8000d0a:	b2d2      	uxtbge	r2, r2
 8000d0c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d10:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d12:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000d16:	bd30      	pop	{r4, r5, pc}
 8000d18:	e000ed00 	.word	0xe000ed00
 8000d1c:	e000ed14 	.word	0xe000ed14

08000d20 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000d20:	2301      	movs	r3, #1
 8000d22:	0942      	lsrs	r2, r0, #5
 8000d24:	f000 001f 	and.w	r0, r0, #31
 8000d28:	fa03 f000 	lsl.w	r0, r3, r0
 8000d2c:	4b01      	ldr	r3, [pc, #4]	; (8000d34 <HAL_NVIC_EnableIRQ+0x14>)
 8000d2e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000d32:	4770      	bx	lr
 8000d34:	e000e100 	.word	0xe000e100

08000d38 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d38:	3801      	subs	r0, #1
 8000d3a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d3e:	d20a      	bcs.n	8000d56 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d40:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d42:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d44:	4a06      	ldr	r2, [pc, #24]	; (8000d60 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d46:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d48:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d4c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d4e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d50:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000d56:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	e000e010 	.word	0xe000e010
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d64:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000d66:	2800      	cmp	r0, #0
 8000d68:	d032      	beq.n	8000dd0 <HAL_DMA_Init+0x6c>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (STM32F101xE) || defined (STM32F101xG) || defined (STM32F103xE) || defined (STM32F103xG) || defined (STM32F100xE) || defined (STM32F105xC) || defined (STM32F107xC)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000d6a:	6801      	ldr	r1, [r0, #0]
 8000d6c:	4b19      	ldr	r3, [pc, #100]	; (8000dd4 <HAL_DMA_Init+0x70>)
 8000d6e:	2414      	movs	r4, #20
 8000d70:	4299      	cmp	r1, r3
 8000d72:	d825      	bhi.n	8000dc0 <HAL_DMA_Init+0x5c>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000d74:	4a18      	ldr	r2, [pc, #96]	; (8000dd8 <HAL_DMA_Init+0x74>)
    hdma->DmaBaseAddress = DMA1;
 8000d76:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000d7a:	440a      	add	r2, r1
 8000d7c:	fbb2 f2f4 	udiv	r2, r2, r4
 8000d80:	0092      	lsls	r2, r2, #2
 8000d82:	6402      	str	r2, [r0, #64]	; 0x40
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000d84:	6884      	ldr	r4, [r0, #8]
    hdma->DmaBaseAddress = DMA2;
 8000d86:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp |=  hdma->Init.Direction        |
 8000d88:	6843      	ldr	r3, [r0, #4]
  tmp = hdma->Instance->CCR;
 8000d8a:	680a      	ldr	r2, [r1, #0]
  tmp |=  hdma->Init.Direction        |
 8000d8c:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d8e:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000d90:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d94:	4323      	orrs	r3, r4
 8000d96:	6904      	ldr	r4, [r0, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000d98:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d9c:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d9e:	6944      	ldr	r4, [r0, #20]
 8000da0:	4323      	orrs	r3, r4
 8000da2:	6984      	ldr	r4, [r0, #24]
 8000da4:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8000da6:	69c4      	ldr	r4, [r0, #28]
 8000da8:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8000daa:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000dac:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000dae:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000db0:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 8000db2:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000db6:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000db8:	f880 3020 	strb.w	r3, [r0, #32]

  return HAL_OK;
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8000dc0:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <HAL_DMA_Init+0x78>)
 8000dc2:	440b      	add	r3, r1
 8000dc4:	fbb3 f3f4 	udiv	r3, r3, r4
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	6403      	str	r3, [r0, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8000dcc:	4b04      	ldr	r3, [pc, #16]	; (8000de0 <HAL_DMA_Init+0x7c>)
 8000dce:	e7d9      	b.n	8000d84 <HAL_DMA_Init+0x20>
    return HAL_ERROR;
 8000dd0:	2001      	movs	r0, #1
}
 8000dd2:	bd10      	pop	{r4, pc}
 8000dd4:	40020407 	.word	0x40020407
 8000dd8:	bffdfff8 	.word	0xbffdfff8
 8000ddc:	bffdfbf8 	.word	0xbffdfbf8
 8000de0:	40020400 	.word	0x40020400

08000de4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000de4:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000de6:	f890 4020 	ldrb.w	r4, [r0, #32]
 8000dea:	2c01      	cmp	r4, #1
 8000dec:	d035      	beq.n	8000e5a <HAL_DMA_Start_IT+0x76>
 8000dee:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000df0:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8000df4:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8000df8:	42a5      	cmp	r5, r4
 8000dfa:	f04f 0600 	mov.w	r6, #0
 8000dfe:	f04f 0402 	mov.w	r4, #2
 8000e02:	d128      	bne.n	8000e56 <HAL_DMA_Start_IT+0x72>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000e04:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000e08:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e0a:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8000e0c:	6826      	ldr	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000e0e:	6c07      	ldr	r7, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 8000e10:	f026 0601 	bic.w	r6, r6, #1
 8000e14:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000e16:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 8000e18:	40bd      	lsls	r5, r7
 8000e1a:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000e1c:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000e1e:	6843      	ldr	r3, [r0, #4]
 8000e20:	6805      	ldr	r5, [r0, #0]
 8000e22:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8000e24:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000e26:	bf0b      	itete	eq
 8000e28:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8000e2a:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000e2c:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8000e2e:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8000e30:	b14b      	cbz	r3, 8000e46 <HAL_DMA_Start_IT+0x62>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e32:	6823      	ldr	r3, [r4, #0]
 8000e34:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000e38:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8000e3a:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000e3c:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8000e3e:	f043 0301 	orr.w	r3, r3, #1
 8000e42:	602b      	str	r3, [r5, #0]
 8000e44:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000e46:	6823      	ldr	r3, [r4, #0]
 8000e48:	f023 0304 	bic.w	r3, r3, #4
 8000e4c:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000e4e:	6823      	ldr	r3, [r4, #0]
 8000e50:	f043 030a 	orr.w	r3, r3, #10
 8000e54:	e7f0      	b.n	8000e38 <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 8000e56:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 8000e5a:	2002      	movs	r0, #2
}
 8000e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000e60 <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000e60:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 8000e64:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000e66:	2b02      	cmp	r3, #2
 8000e68:	d003      	beq.n	8000e72 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e6a:	2304      	movs	r3, #4
 8000e6c:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8000e6e:	2001      	movs	r0, #1
 8000e70:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e72:	6803      	ldr	r3, [r0, #0]
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	f022 020e 	bic.w	r2, r2, #14
 8000e7a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	f022 0201 	bic.w	r2, r2, #1
 8000e82:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000e84:	4a29      	ldr	r2, [pc, #164]	; (8000f2c <HAL_DMA_Abort_IT+0xcc>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d924      	bls.n	8000ed4 <HAL_DMA_Abort_IT+0x74>
 8000e8a:	f502 7262 	add.w	r2, r2, #904	; 0x388
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d019      	beq.n	8000ec6 <HAL_DMA_Abort_IT+0x66>
 8000e92:	3214      	adds	r2, #20
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d018      	beq.n	8000eca <HAL_DMA_Abort_IT+0x6a>
 8000e98:	3214      	adds	r2, #20
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d017      	beq.n	8000ece <HAL_DMA_Abort_IT+0x6e>
 8000e9e:	3214      	adds	r2, #20
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	bf0c      	ite	eq
 8000ea4:	f44f 5380 	moveq.w	r3, #4096	; 0x1000
 8000ea8:	f44f 3380 	movne.w	r3, #65536	; 0x10000
 8000eac:	4a20      	ldr	r2, [pc, #128]	; (8000f30 <HAL_DMA_Abort_IT+0xd0>)
 8000eae:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000eb0:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 8000eb2:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 8000eb4:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    if(hdma->XferAbortCallback != NULL)
 8000eb8:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 8000eba:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8000ebe:	b39b      	cbz	r3, 8000f28 <HAL_DMA_Abort_IT+0xc8>
      hdma->XferAbortCallback(hdma);
 8000ec0:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000ec2:	4620      	mov	r0, r4
 8000ec4:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e7f0      	b.n	8000eac <HAL_DMA_Abort_IT+0x4c>
 8000eca:	2310      	movs	r3, #16
 8000ecc:	e7ee      	b.n	8000eac <HAL_DMA_Abort_IT+0x4c>
 8000ece:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ed2:	e7eb      	b.n	8000eac <HAL_DMA_Abort_IT+0x4c>
 8000ed4:	4917      	ldr	r1, [pc, #92]	; (8000f34 <HAL_DMA_Abort_IT+0xd4>)
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	d016      	beq.n	8000f08 <HAL_DMA_Abort_IT+0xa8>
 8000eda:	3114      	adds	r1, #20
 8000edc:	428b      	cmp	r3, r1
 8000ede:	d015      	beq.n	8000f0c <HAL_DMA_Abort_IT+0xac>
 8000ee0:	3114      	adds	r1, #20
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	d014      	beq.n	8000f10 <HAL_DMA_Abort_IT+0xb0>
 8000ee6:	3114      	adds	r1, #20
 8000ee8:	428b      	cmp	r3, r1
 8000eea:	d014      	beq.n	8000f16 <HAL_DMA_Abort_IT+0xb6>
 8000eec:	3114      	adds	r1, #20
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	d014      	beq.n	8000f1c <HAL_DMA_Abort_IT+0xbc>
 8000ef2:	3114      	adds	r1, #20
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d014      	beq.n	8000f22 <HAL_DMA_Abort_IT+0xc2>
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	bf14      	ite	ne
 8000efc:	f44f 3380 	movne.w	r3, #65536	; 0x10000
 8000f00:	f04f 7380 	moveq.w	r3, #16777216	; 0x1000000
 8000f04:	4a0c      	ldr	r2, [pc, #48]	; (8000f38 <HAL_DMA_Abort_IT+0xd8>)
 8000f06:	e7d2      	b.n	8000eae <HAL_DMA_Abort_IT+0x4e>
 8000f08:	2301      	movs	r3, #1
 8000f0a:	e7fb      	b.n	8000f04 <HAL_DMA_Abort_IT+0xa4>
 8000f0c:	2310      	movs	r3, #16
 8000f0e:	e7f9      	b.n	8000f04 <HAL_DMA_Abort_IT+0xa4>
 8000f10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f14:	e7f6      	b.n	8000f04 <HAL_DMA_Abort_IT+0xa4>
 8000f16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f1a:	e7f3      	b.n	8000f04 <HAL_DMA_Abort_IT+0xa4>
 8000f1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f20:	e7f0      	b.n	8000f04 <HAL_DMA_Abort_IT+0xa4>
 8000f22:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000f26:	e7ed      	b.n	8000f04 <HAL_DMA_Abort_IT+0xa4>
  HAL_StatusTypeDef status = HAL_OK;
 8000f28:	4618      	mov	r0, r3
}
 8000f2a:	bd10      	pop	{r4, pc}
 8000f2c:	40020080 	.word	0x40020080
 8000f30:	40020400 	.word	0x40020400
 8000f34:	40020008 	.word	0x40020008
 8000f38:	40020000 	.word	0x40020000

08000f3c <HAL_DMA_IRQHandler>:
{
 8000f3c:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000f3e:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000f40:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000f42:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000f44:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000f46:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000f48:	4095      	lsls	r5, r2
 8000f4a:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8000f4c:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000f4e:	d055      	beq.n	8000ffc <HAL_DMA_IRQHandler+0xc0>
 8000f50:	074d      	lsls	r5, r1, #29
 8000f52:	d553      	bpl.n	8000ffc <HAL_DMA_IRQHandler+0xc0>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000f58:	bf5e      	ittt	pl
 8000f5a:	681a      	ldrpl	r2, [r3, #0]
 8000f5c:	f022 0204 	bicpl.w	r2, r2, #4
 8000f60:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000f62:	4a60      	ldr	r2, [pc, #384]	; (80010e4 <HAL_DMA_IRQHandler+0x1a8>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d91f      	bls.n	8000fa8 <HAL_DMA_IRQHandler+0x6c>
 8000f68:	f502 7262 	add.w	r2, r2, #904	; 0x388
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d014      	beq.n	8000f9a <HAL_DMA_IRQHandler+0x5e>
 8000f70:	3214      	adds	r2, #20
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d013      	beq.n	8000f9e <HAL_DMA_IRQHandler+0x62>
 8000f76:	3214      	adds	r2, #20
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d012      	beq.n	8000fa2 <HAL_DMA_IRQHandler+0x66>
 8000f7c:	3214      	adds	r2, #20
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	bf0c      	ite	eq
 8000f82:	f44f 4380 	moveq.w	r3, #16384	; 0x4000
 8000f86:	f44f 2380 	movne.w	r3, #262144	; 0x40000
 8000f8a:	4a57      	ldr	r2, [pc, #348]	; (80010e8 <HAL_DMA_IRQHandler+0x1ac>)
 8000f8c:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8000f8e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	f000 80a5 	beq.w	80010e0 <HAL_DMA_IRQHandler+0x1a4>
}
 8000f96:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8000f98:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000f9a:	2304      	movs	r3, #4
 8000f9c:	e7f5      	b.n	8000f8a <HAL_DMA_IRQHandler+0x4e>
 8000f9e:	2340      	movs	r3, #64	; 0x40
 8000fa0:	e7f3      	b.n	8000f8a <HAL_DMA_IRQHandler+0x4e>
 8000fa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fa6:	e7f0      	b.n	8000f8a <HAL_DMA_IRQHandler+0x4e>
 8000fa8:	4950      	ldr	r1, [pc, #320]	; (80010ec <HAL_DMA_IRQHandler+0x1b0>)
 8000faa:	428b      	cmp	r3, r1
 8000fac:	d016      	beq.n	8000fdc <HAL_DMA_IRQHandler+0xa0>
 8000fae:	3114      	adds	r1, #20
 8000fb0:	428b      	cmp	r3, r1
 8000fb2:	d015      	beq.n	8000fe0 <HAL_DMA_IRQHandler+0xa4>
 8000fb4:	3114      	adds	r1, #20
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d014      	beq.n	8000fe4 <HAL_DMA_IRQHandler+0xa8>
 8000fba:	3114      	adds	r1, #20
 8000fbc:	428b      	cmp	r3, r1
 8000fbe:	d014      	beq.n	8000fea <HAL_DMA_IRQHandler+0xae>
 8000fc0:	3114      	adds	r1, #20
 8000fc2:	428b      	cmp	r3, r1
 8000fc4:	d014      	beq.n	8000ff0 <HAL_DMA_IRQHandler+0xb4>
 8000fc6:	3114      	adds	r1, #20
 8000fc8:	428b      	cmp	r3, r1
 8000fca:	d014      	beq.n	8000ff6 <HAL_DMA_IRQHandler+0xba>
 8000fcc:	4293      	cmp	r3, r2
 8000fce:	bf14      	ite	ne
 8000fd0:	f44f 2380 	movne.w	r3, #262144	; 0x40000
 8000fd4:	f04f 6380 	moveq.w	r3, #67108864	; 0x4000000
 8000fd8:	4a45      	ldr	r2, [pc, #276]	; (80010f0 <HAL_DMA_IRQHandler+0x1b4>)
 8000fda:	e7d7      	b.n	8000f8c <HAL_DMA_IRQHandler+0x50>
 8000fdc:	2304      	movs	r3, #4
 8000fde:	e7fb      	b.n	8000fd8 <HAL_DMA_IRQHandler+0x9c>
 8000fe0:	2340      	movs	r3, #64	; 0x40
 8000fe2:	e7f9      	b.n	8000fd8 <HAL_DMA_IRQHandler+0x9c>
 8000fe4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fe8:	e7f6      	b.n	8000fd8 <HAL_DMA_IRQHandler+0x9c>
 8000fea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000fee:	e7f3      	b.n	8000fd8 <HAL_DMA_IRQHandler+0x9c>
 8000ff0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000ff4:	e7f0      	b.n	8000fd8 <HAL_DMA_IRQHandler+0x9c>
 8000ff6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ffa:	e7ed      	b.n	8000fd8 <HAL_DMA_IRQHandler+0x9c>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000ffc:	2502      	movs	r5, #2
 8000ffe:	4095      	lsls	r5, r2
 8001000:	4225      	tst	r5, r4
 8001002:	d057      	beq.n	80010b4 <HAL_DMA_IRQHandler+0x178>
 8001004:	078d      	lsls	r5, r1, #30
 8001006:	d555      	bpl.n	80010b4 <HAL_DMA_IRQHandler+0x178>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	0694      	lsls	r4, r2, #26
 800100c:	d406      	bmi.n	800101c <HAL_DMA_IRQHandler+0xe0>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	f022 020a 	bic.w	r2, r2, #10
 8001014:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001016:	2201      	movs	r2, #1
 8001018:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800101c:	4a31      	ldr	r2, [pc, #196]	; (80010e4 <HAL_DMA_IRQHandler+0x1a8>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d91e      	bls.n	8001060 <HAL_DMA_IRQHandler+0x124>
 8001022:	f502 7262 	add.w	r2, r2, #904	; 0x388
 8001026:	4293      	cmp	r3, r2
 8001028:	d013      	beq.n	8001052 <HAL_DMA_IRQHandler+0x116>
 800102a:	3214      	adds	r2, #20
 800102c:	4293      	cmp	r3, r2
 800102e:	d012      	beq.n	8001056 <HAL_DMA_IRQHandler+0x11a>
 8001030:	3214      	adds	r2, #20
 8001032:	4293      	cmp	r3, r2
 8001034:	d011      	beq.n	800105a <HAL_DMA_IRQHandler+0x11e>
 8001036:	3214      	adds	r2, #20
 8001038:	4293      	cmp	r3, r2
 800103a:	bf0c      	ite	eq
 800103c:	f44f 5300 	moveq.w	r3, #8192	; 0x2000
 8001040:	f44f 3300 	movne.w	r3, #131072	; 0x20000
 8001044:	4a28      	ldr	r2, [pc, #160]	; (80010e8 <HAL_DMA_IRQHandler+0x1ac>)
 8001046:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8001048:	2300      	movs	r3, #0
 800104a:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 800104e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001050:	e79e      	b.n	8000f90 <HAL_DMA_IRQHandler+0x54>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001052:	2302      	movs	r3, #2
 8001054:	e7f6      	b.n	8001044 <HAL_DMA_IRQHandler+0x108>
 8001056:	2320      	movs	r3, #32
 8001058:	e7f4      	b.n	8001044 <HAL_DMA_IRQHandler+0x108>
 800105a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800105e:	e7f1      	b.n	8001044 <HAL_DMA_IRQHandler+0x108>
 8001060:	4922      	ldr	r1, [pc, #136]	; (80010ec <HAL_DMA_IRQHandler+0x1b0>)
 8001062:	428b      	cmp	r3, r1
 8001064:	d016      	beq.n	8001094 <HAL_DMA_IRQHandler+0x158>
 8001066:	3114      	adds	r1, #20
 8001068:	428b      	cmp	r3, r1
 800106a:	d015      	beq.n	8001098 <HAL_DMA_IRQHandler+0x15c>
 800106c:	3114      	adds	r1, #20
 800106e:	428b      	cmp	r3, r1
 8001070:	d014      	beq.n	800109c <HAL_DMA_IRQHandler+0x160>
 8001072:	3114      	adds	r1, #20
 8001074:	428b      	cmp	r3, r1
 8001076:	d014      	beq.n	80010a2 <HAL_DMA_IRQHandler+0x166>
 8001078:	3114      	adds	r1, #20
 800107a:	428b      	cmp	r3, r1
 800107c:	d014      	beq.n	80010a8 <HAL_DMA_IRQHandler+0x16c>
 800107e:	3114      	adds	r1, #20
 8001080:	428b      	cmp	r3, r1
 8001082:	d014      	beq.n	80010ae <HAL_DMA_IRQHandler+0x172>
 8001084:	4293      	cmp	r3, r2
 8001086:	bf14      	ite	ne
 8001088:	f44f 3300 	movne.w	r3, #131072	; 0x20000
 800108c:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8001090:	4a17      	ldr	r2, [pc, #92]	; (80010f0 <HAL_DMA_IRQHandler+0x1b4>)
 8001092:	e7d8      	b.n	8001046 <HAL_DMA_IRQHandler+0x10a>
 8001094:	2302      	movs	r3, #2
 8001096:	e7fb      	b.n	8001090 <HAL_DMA_IRQHandler+0x154>
 8001098:	2320      	movs	r3, #32
 800109a:	e7f9      	b.n	8001090 <HAL_DMA_IRQHandler+0x154>
 800109c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010a0:	e7f6      	b.n	8001090 <HAL_DMA_IRQHandler+0x154>
 80010a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010a6:	e7f3      	b.n	8001090 <HAL_DMA_IRQHandler+0x154>
 80010a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010ac:	e7f0      	b.n	8001090 <HAL_DMA_IRQHandler+0x154>
 80010ae:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80010b2:	e7ed      	b.n	8001090 <HAL_DMA_IRQHandler+0x154>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80010b4:	2508      	movs	r5, #8
 80010b6:	4095      	lsls	r5, r2
 80010b8:	4225      	tst	r5, r4
 80010ba:	d011      	beq.n	80010e0 <HAL_DMA_IRQHandler+0x1a4>
 80010bc:	0709      	lsls	r1, r1, #28
 80010be:	d50f      	bpl.n	80010e0 <HAL_DMA_IRQHandler+0x1a4>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010c0:	6819      	ldr	r1, [r3, #0]
 80010c2:	f021 010e 	bic.w	r1, r1, #14
 80010c6:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80010c8:	2301      	movs	r3, #1
 80010ca:	fa03 f202 	lsl.w	r2, r3, r2
 80010ce:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80010d0:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 80010d2:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 80010d6:	2300      	movs	r3, #0
 80010d8:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 80010dc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80010de:	e757      	b.n	8000f90 <HAL_DMA_IRQHandler+0x54>
}
 80010e0:	bc70      	pop	{r4, r5, r6}
 80010e2:	4770      	bx	lr
 80010e4:	40020080 	.word	0x40020080
 80010e8:	40020400 	.word	0x40020400
 80010ec:	40020008 	.word	0x40020008
 80010f0:	40020000 	.word	0x40020000

080010f4 <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80010f4:	4a11      	ldr	r2, [pc, #68]	; (800113c <FLASH_SetErrorCode+0x48>)
 80010f6:	68d3      	ldr	r3, [r2, #12]
 80010f8:	f013 0310 	ands.w	r3, r3, #16
 80010fc:	d005      	beq.n	800110a <FLASH_SetErrorCode+0x16>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80010fe:	4910      	ldr	r1, [pc, #64]	; (8001140 <FLASH_SetErrorCode+0x4c>)
 8001100:	69cb      	ldr	r3, [r1, #28]
 8001102:	f043 0302 	orr.w	r3, r3, #2
 8001106:	61cb      	str	r3, [r1, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8001108:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800110a:	68d2      	ldr	r2, [r2, #12]
 800110c:	0750      	lsls	r0, r2, #29
 800110e:	d506      	bpl.n	800111e <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001110:	490b      	ldr	r1, [pc, #44]	; (8001140 <FLASH_SetErrorCode+0x4c>)
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8001112:	f043 0304 	orr.w	r3, r3, #4
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001116:	69ca      	ldr	r2, [r1, #28]
 8001118:	f042 0201 	orr.w	r2, r2, #1
 800111c:	61ca      	str	r2, [r1, #28]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800111e:	4a07      	ldr	r2, [pc, #28]	; (800113c <FLASH_SetErrorCode+0x48>)
 8001120:	69d1      	ldr	r1, [r2, #28]
 8001122:	07c9      	lsls	r1, r1, #31
 8001124:	d508      	bpl.n	8001138 <FLASH_SetErrorCode+0x44>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8001126:	4806      	ldr	r0, [pc, #24]	; (8001140 <FLASH_SetErrorCode+0x4c>)
 8001128:	69c1      	ldr	r1, [r0, #28]
 800112a:	f041 0104 	orr.w	r1, r1, #4
 800112e:	61c1      	str	r1, [r0, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001130:	69d1      	ldr	r1, [r2, #28]
 8001132:	f021 0101 	bic.w	r1, r1, #1
 8001136:	61d1      	str	r1, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001138:	60d3      	str	r3, [r2, #12]
 800113a:	4770      	bx	lr
 800113c:	40022000 	.word	0x40022000
 8001140:	200052c0 	.word	0x200052c0

08001144 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001144:	4b06      	ldr	r3, [pc, #24]	; (8001160 <HAL_FLASH_Unlock+0x1c>)
 8001146:	6918      	ldr	r0, [r3, #16]
 8001148:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800114c:	d007      	beq.n	800115e <HAL_FLASH_Unlock+0x1a>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800114e:	4a05      	ldr	r2, [pc, #20]	; (8001164 <HAL_FLASH_Unlock+0x20>)
 8001150:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001152:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8001156:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001158:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 800115a:	f3c0 10c0 	ubfx	r0, r0, #7, #1
}
 800115e:	4770      	bx	lr
 8001160:	40022000 	.word	0x40022000
 8001164:	45670123 	.word	0x45670123

08001168 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001168:	4a03      	ldr	r2, [pc, #12]	; (8001178 <HAL_FLASH_Lock+0x10>)
}
 800116a:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800116c:	6913      	ldr	r3, [r2, #16]
 800116e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001172:	6113      	str	r3, [r2, #16]
}
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	40022000 	.word	0x40022000

0800117c <FLASH_WaitForLastOperation>:
{
 800117c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800117e:	4606      	mov	r6, r0
  uint32_t tickstart = HAL_GetTick();
 8001180:	f7ff fa34 	bl	80005ec <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001184:	4c11      	ldr	r4, [pc, #68]	; (80011cc <FLASH_WaitForLastOperation+0x50>)
  uint32_t tickstart = HAL_GetTick();
 8001186:	4607      	mov	r7, r0
 8001188:	4625      	mov	r5, r4
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800118a:	68e3      	ldr	r3, [r4, #12]
 800118c:	07d8      	lsls	r0, r3, #31
 800118e:	d412      	bmi.n	80011b6 <FLASH_WaitForLastOperation+0x3a>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001190:	68e3      	ldr	r3, [r4, #12]
 8001192:	0699      	lsls	r1, r3, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001194:	bf44      	itt	mi
 8001196:	2320      	movmi	r3, #32
 8001198:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800119a:	68eb      	ldr	r3, [r5, #12]
 800119c:	06da      	lsls	r2, r3, #27
 800119e:	d406      	bmi.n	80011ae <FLASH_WaitForLastOperation+0x32>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80011a0:	69eb      	ldr	r3, [r5, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80011a2:	07db      	lsls	r3, r3, #31
 80011a4:	d403      	bmi.n	80011ae <FLASH_WaitForLastOperation+0x32>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80011a6:	68e8      	ldr	r0, [r5, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80011a8:	f010 0004 	ands.w	r0, r0, #4
 80011ac:	d002      	beq.n	80011b4 <FLASH_WaitForLastOperation+0x38>
    FLASH_SetErrorCode();
 80011ae:	f7ff ffa1 	bl	80010f4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80011b2:	2001      	movs	r0, #1
}
 80011b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 80011b6:	1c73      	adds	r3, r6, #1
 80011b8:	d0e7      	beq.n	800118a <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80011ba:	b90e      	cbnz	r6, 80011c0 <FLASH_WaitForLastOperation+0x44>
        return HAL_TIMEOUT;
 80011bc:	2003      	movs	r0, #3
 80011be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80011c0:	f7ff fa14 	bl	80005ec <HAL_GetTick>
 80011c4:	1bc0      	subs	r0, r0, r7
 80011c6:	4286      	cmp	r6, r0
 80011c8:	d2df      	bcs.n	800118a <FLASH_WaitForLastOperation+0xe>
 80011ca:	e7f7      	b.n	80011bc <FLASH_WaitForLastOperation+0x40>
 80011cc:	40022000 	.word	0x40022000

080011d0 <HAL_FLASH_Program>:
{
 80011d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_LOCK(&pFlash);
 80011d4:	4c1f      	ldr	r4, [pc, #124]	; (8001254 <HAL_FLASH_Program+0x84>)
{
 80011d6:	4699      	mov	r9, r3
  __HAL_LOCK(&pFlash);
 80011d8:	7e23      	ldrb	r3, [r4, #24]
{
 80011da:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 80011dc:	2b01      	cmp	r3, #1
{
 80011de:	460f      	mov	r7, r1
 80011e0:	4690      	mov	r8, r2
  __HAL_LOCK(&pFlash);
 80011e2:	d033      	beq.n	800124c <HAL_FLASH_Program+0x7c>
 80011e4:	2301      	movs	r3, #1
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80011e6:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 80011ea:	7623      	strb	r3, [r4, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80011ec:	f7ff ffc6 	bl	800117c <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80011f0:	bb40      	cbnz	r0, 8001244 <HAL_FLASH_Program+0x74>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80011f2:	2d01      	cmp	r5, #1
 80011f4:	d003      	beq.n	80011fe <HAL_FLASH_Program+0x2e>
      nbiterations = 4U;
 80011f6:	2d02      	cmp	r5, #2
 80011f8:	bf0c      	ite	eq
 80011fa:	2502      	moveq	r5, #2
 80011fc:	2504      	movne	r5, #4
 80011fe:	2600      	movs	r6, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001200:	46b2      	mov	sl, r6
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001202:	f8df b054 	ldr.w	fp, [pc, #84]	; 8001258 <HAL_FLASH_Program+0x88>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001206:	0132      	lsls	r2, r6, #4
 8001208:	4640      	mov	r0, r8
 800120a:	4649      	mov	r1, r9
 800120c:	f7ff f818 	bl	8000240 <__aeabi_llsr>
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001210:	f8c4 a01c 	str.w	sl, [r4, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001214:	f8db 3010 	ldr.w	r3, [fp, #16]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001218:	b280      	uxth	r0, r0
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800121a:	f043 0301 	orr.w	r3, r3, #1
 800121e:	f8cb 3010 	str.w	r3, [fp, #16]
  *(__IO uint16_t*)Address = Data;
 8001222:	f827 0016 	strh.w	r0, [r7, r6, lsl #1]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001226:	f24c 3050 	movw	r0, #50000	; 0xc350
 800122a:	f7ff ffa7 	bl	800117c <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800122e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8001232:	f023 0301 	bic.w	r3, r3, #1
 8001236:	f8cb 3010 	str.w	r3, [fp, #16]
      if (status != HAL_OK)
 800123a:	b918      	cbnz	r0, 8001244 <HAL_FLASH_Program+0x74>
 800123c:	3601      	adds	r6, #1
    for (index = 0U; index < nbiterations; index++)
 800123e:	b2f3      	uxtb	r3, r6
 8001240:	429d      	cmp	r5, r3
 8001242:	d8e0      	bhi.n	8001206 <HAL_FLASH_Program+0x36>
  __HAL_UNLOCK(&pFlash);
 8001244:	2300      	movs	r3, #0
 8001246:	7623      	strb	r3, [r4, #24]
  return status;
 8001248:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(&pFlash);
 800124c:	2002      	movs	r0, #2
}
 800124e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001252:	bf00      	nop
 8001254:	200052c0 	.word	0x200052c0
 8001258:	40022000 	.word	0x40022000

0800125c <FLASH_MassErase.isra.0>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800125c:	2200      	movs	r2, #0
 800125e:	4b06      	ldr	r3, [pc, #24]	; (8001278 <FLASH_MassErase.isra.0+0x1c>)
 8001260:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8001262:	4b06      	ldr	r3, [pc, #24]	; (800127c <FLASH_MassErase.isra.0+0x20>)
 8001264:	691a      	ldr	r2, [r3, #16]
 8001266:	f042 0204 	orr.w	r2, r2, #4
 800126a:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800126c:	691a      	ldr	r2, [r3, #16]
 800126e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001272:	611a      	str	r2, [r3, #16]
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	200052c0 	.word	0x200052c0
 800127c:	40022000 	.word	0x40022000

08001280 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001280:	2200      	movs	r2, #0
 8001282:	4b06      	ldr	r3, [pc, #24]	; (800129c <FLASH_PageErase+0x1c>)
 8001284:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001286:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <FLASH_PageErase+0x20>)
 8001288:	691a      	ldr	r2, [r3, #16]
 800128a:	f042 0202 	orr.w	r2, r2, #2
 800128e:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001290:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001292:	691a      	ldr	r2, [r3, #16]
 8001294:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001298:	611a      	str	r2, [r3, #16]
 800129a:	4770      	bx	lr
 800129c:	200052c0 	.word	0x200052c0
 80012a0:	40022000 	.word	0x40022000

080012a4 <HAL_FLASHEx_Erase>:
{
 80012a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 80012a8:	4d23      	ldr	r5, [pc, #140]	; (8001338 <HAL_FLASHEx_Erase+0x94>)
{
 80012aa:	4607      	mov	r7, r0
  __HAL_LOCK(&pFlash);
 80012ac:	7e2b      	ldrb	r3, [r5, #24]
{
 80012ae:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d03d      	beq.n	8001330 <HAL_FLASHEx_Erase+0x8c>
 80012b4:	2401      	movs	r4, #1
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80012b6:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(&pFlash);
 80012b8:	762c      	strb	r4, [r5, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80012ba:	2b02      	cmp	r3, #2
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80012bc:	f24c 3050 	movw	r0, #50000	; 0xc350
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80012c0:	d113      	bne.n	80012ea <HAL_FLASHEx_Erase+0x46>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80012c2:	f7ff ff5b 	bl	800117c <FLASH_WaitForLastOperation>
 80012c6:	b120      	cbz	r0, 80012d2 <HAL_FLASHEx_Erase+0x2e>
  HAL_StatusTypeDef status = HAL_ERROR;
 80012c8:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 80012ca:	2300      	movs	r3, #0
 80012cc:	762b      	strb	r3, [r5, #24]
  return status;
 80012ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        FLASH_MassErase(FLASH_BANK_1);
 80012d2:	f7ff ffc3 	bl	800125c <FLASH_MassErase.isra.0>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80012d6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80012da:	f7ff ff4f 	bl	800117c <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80012de:	4a17      	ldr	r2, [pc, #92]	; (800133c <HAL_FLASHEx_Erase+0x98>)
 80012e0:	6913      	ldr	r3, [r2, #16]
 80012e2:	f023 0304 	bic.w	r3, r3, #4
 80012e6:	6113      	str	r3, [r2, #16]
 80012e8:	e7ef      	b.n	80012ca <HAL_FLASHEx_Erase+0x26>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80012ea:	f7ff ff47 	bl	800117c <FLASH_WaitForLastOperation>
 80012ee:	2800      	cmp	r0, #0
 80012f0:	d1ea      	bne.n	80012c8 <HAL_FLASHEx_Erase+0x24>
        *PageError = 0xFFFFFFFFU;
 80012f2:	f04f 33ff 	mov.w	r3, #4294967295
 80012f6:	f8c8 3000 	str.w	r3, [r8]
  HAL_StatusTypeDef status = HAL_ERROR;
 80012fa:	4620      	mov	r0, r4
        for(address = pEraseInit->PageAddress;
 80012fc:	68be      	ldr	r6, [r7, #8]
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80012fe:	4c0f      	ldr	r4, [pc, #60]	; (800133c <HAL_FLASHEx_Erase+0x98>)
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001300:	68fa      	ldr	r2, [r7, #12]
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	eb03 23c2 	add.w	r3, r3, r2, lsl #11
        for(address = pEraseInit->PageAddress;
 8001308:	429e      	cmp	r6, r3
 800130a:	d2de      	bcs.n	80012ca <HAL_FLASHEx_Erase+0x26>
          FLASH_PageErase(address);
 800130c:	4630      	mov	r0, r6
 800130e:	f7ff ffb7 	bl	8001280 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001312:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001316:	f7ff ff31 	bl	800117c <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800131a:	6923      	ldr	r3, [r4, #16]
 800131c:	f023 0302 	bic.w	r3, r3, #2
 8001320:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 8001322:	b110      	cbz	r0, 800132a <HAL_FLASHEx_Erase+0x86>
            *PageError = address;
 8001324:	f8c8 6000 	str.w	r6, [r8]
            break;
 8001328:	e7cf      	b.n	80012ca <HAL_FLASHEx_Erase+0x26>
            address += FLASH_PAGE_SIZE)
 800132a:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 800132e:	e7e7      	b.n	8001300 <HAL_FLASHEx_Erase+0x5c>
  __HAL_LOCK(&pFlash);
 8001330:	2002      	movs	r0, #2
}
 8001332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001336:	bf00      	nop
 8001338:	200052c0 	.word	0x200052c0
 800133c:	40022000 	.word	0x40022000

08001340 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001340:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8001344:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001346:	4616      	mov	r6, r2
 8001348:	4b65      	ldr	r3, [pc, #404]	; (80014e0 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800134a:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 80014f0 <HAL_GPIO_Init+0x1b0>
 800134e:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 80014f4 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 8001352:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001356:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8001358:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800135c:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8001360:	45a0      	cmp	r8, r4
 8001362:	d17f      	bne.n	8001464 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8001364:	684d      	ldr	r5, [r1, #4]
 8001366:	2d12      	cmp	r5, #18
 8001368:	f000 80af 	beq.w	80014ca <HAL_GPIO_Init+0x18a>
 800136c:	f200 8088 	bhi.w	8001480 <HAL_GPIO_Init+0x140>
 8001370:	2d02      	cmp	r5, #2
 8001372:	f000 80a7 	beq.w	80014c4 <HAL_GPIO_Init+0x184>
 8001376:	d87c      	bhi.n	8001472 <HAL_GPIO_Init+0x132>
 8001378:	2d00      	cmp	r5, #0
 800137a:	f000 808e 	beq.w	800149a <HAL_GPIO_Init+0x15a>
 800137e:	2d01      	cmp	r5, #1
 8001380:	f000 809e 	beq.w	80014c0 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001384:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001388:	2cff      	cmp	r4, #255	; 0xff
 800138a:	bf93      	iteet	ls
 800138c:	4682      	movls	sl, r0
 800138e:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8001392:	3d08      	subhi	r5, #8
 8001394:	f8d0 b000 	ldrls.w	fp, [r0]
 8001398:	bf92      	itee	ls
 800139a:	00b5      	lslls	r5, r6, #2
 800139c:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 80013a0:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013a2:	fa09 f805 	lsl.w	r8, r9, r5
 80013a6:	ea2b 0808 	bic.w	r8, fp, r8
 80013aa:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80013ae:	bf88      	it	hi
 80013b0:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013b4:	ea48 0505 	orr.w	r5, r8, r5
 80013b8:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013bc:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80013c0:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80013c4:	d04e      	beq.n	8001464 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013c6:	4d47      	ldr	r5, [pc, #284]	; (80014e4 <HAL_GPIO_Init+0x1a4>)
 80013c8:	4f46      	ldr	r7, [pc, #280]	; (80014e4 <HAL_GPIO_Init+0x1a4>)
 80013ca:	69ad      	ldr	r5, [r5, #24]
 80013cc:	f026 0803 	bic.w	r8, r6, #3
 80013d0:	f045 0501 	orr.w	r5, r5, #1
 80013d4:	61bd      	str	r5, [r7, #24]
 80013d6:	69bd      	ldr	r5, [r7, #24]
 80013d8:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80013dc:	f005 0501 	and.w	r5, r5, #1
 80013e0:	9501      	str	r5, [sp, #4]
 80013e2:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80013e6:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013ea:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80013ec:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 80013f0:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80013f4:	fa09 f90b 	lsl.w	r9, r9, fp
 80013f8:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013fc:	4d3a      	ldr	r5, [pc, #232]	; (80014e8 <HAL_GPIO_Init+0x1a8>)
 80013fe:	42a8      	cmp	r0, r5
 8001400:	d068      	beq.n	80014d4 <HAL_GPIO_Init+0x194>
 8001402:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001406:	42a8      	cmp	r0, r5
 8001408:	d066      	beq.n	80014d8 <HAL_GPIO_Init+0x198>
 800140a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800140e:	42a8      	cmp	r0, r5
 8001410:	d064      	beq.n	80014dc <HAL_GPIO_Init+0x19c>
 8001412:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001416:	42a8      	cmp	r0, r5
 8001418:	bf0c      	ite	eq
 800141a:	2503      	moveq	r5, #3
 800141c:	2504      	movne	r5, #4
 800141e:	fa05 f50b 	lsl.w	r5, r5, fp
 8001422:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 8001426:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800142a:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800142c:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8001430:	bf14      	ite	ne
 8001432:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001434:	43a5      	biceq	r5, r4
 8001436:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001438:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800143a:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 800143e:	bf14      	ite	ne
 8001440:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001442:	43a5      	biceq	r5, r4
 8001444:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001446:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001448:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 800144c:	bf14      	ite	ne
 800144e:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001450:	43a5      	biceq	r5, r4
 8001452:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001454:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001456:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800145a:	bf14      	ite	ne
 800145c:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800145e:	ea25 0404 	biceq.w	r4, r5, r4
 8001462:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8001464:	3601      	adds	r6, #1
 8001466:	2e10      	cmp	r6, #16
 8001468:	f47f af73 	bne.w	8001352 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 800146c:	b003      	add	sp, #12
 800146e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8001472:	2d03      	cmp	r5, #3
 8001474:	d022      	beq.n	80014bc <HAL_GPIO_Init+0x17c>
 8001476:	2d11      	cmp	r5, #17
 8001478:	d184      	bne.n	8001384 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800147a:	68ca      	ldr	r2, [r1, #12]
 800147c:	3204      	adds	r2, #4
          break;
 800147e:	e781      	b.n	8001384 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8001480:	4f1a      	ldr	r7, [pc, #104]	; (80014ec <HAL_GPIO_Init+0x1ac>)
 8001482:	42bd      	cmp	r5, r7
 8001484:	d009      	beq.n	800149a <HAL_GPIO_Init+0x15a>
 8001486:	d812      	bhi.n	80014ae <HAL_GPIO_Init+0x16e>
 8001488:	f8df 906c 	ldr.w	r9, [pc, #108]	; 80014f8 <HAL_GPIO_Init+0x1b8>
 800148c:	454d      	cmp	r5, r9
 800148e:	d004      	beq.n	800149a <HAL_GPIO_Init+0x15a>
 8001490:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8001494:	454d      	cmp	r5, r9
 8001496:	f47f af75 	bne.w	8001384 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800149a:	688a      	ldr	r2, [r1, #8]
 800149c:	b1c2      	cbz	r2, 80014d0 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800149e:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 80014a0:	bf0c      	ite	eq
 80014a2:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 80014a6:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014aa:	2208      	movs	r2, #8
 80014ac:	e76a      	b.n	8001384 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80014ae:	4575      	cmp	r5, lr
 80014b0:	d0f3      	beq.n	800149a <HAL_GPIO_Init+0x15a>
 80014b2:	4565      	cmp	r5, ip
 80014b4:	d0f1      	beq.n	800149a <HAL_GPIO_Init+0x15a>
 80014b6:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80014fc <HAL_GPIO_Init+0x1bc>
 80014ba:	e7eb      	b.n	8001494 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80014bc:	2200      	movs	r2, #0
 80014be:	e761      	b.n	8001384 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014c0:	68ca      	ldr	r2, [r1, #12]
          break;
 80014c2:	e75f      	b.n	8001384 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014c4:	68ca      	ldr	r2, [r1, #12]
 80014c6:	3208      	adds	r2, #8
          break;
 80014c8:	e75c      	b.n	8001384 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014ca:	68ca      	ldr	r2, [r1, #12]
 80014cc:	320c      	adds	r2, #12
          break;
 80014ce:	e759      	b.n	8001384 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014d0:	2204      	movs	r2, #4
 80014d2:	e757      	b.n	8001384 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014d4:	2500      	movs	r5, #0
 80014d6:	e7a2      	b.n	800141e <HAL_GPIO_Init+0xde>
 80014d8:	2501      	movs	r5, #1
 80014da:	e7a0      	b.n	800141e <HAL_GPIO_Init+0xde>
 80014dc:	2502      	movs	r5, #2
 80014de:	e79e      	b.n	800141e <HAL_GPIO_Init+0xde>
 80014e0:	40010400 	.word	0x40010400
 80014e4:	40021000 	.word	0x40021000
 80014e8:	40010800 	.word	0x40010800
 80014ec:	10210000 	.word	0x10210000
 80014f0:	10310000 	.word	0x10310000
 80014f4:	10320000 	.word	0x10320000
 80014f8:	10110000 	.word	0x10110000
 80014fc:	10220000 	.word	0x10220000

08001500 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001500:	6883      	ldr	r3, [r0, #8]
 8001502:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001504:	bf14      	ite	ne
 8001506:	2001      	movne	r0, #1
 8001508:	2000      	moveq	r0, #0
 800150a:	4770      	bx	lr

0800150c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800150c:	b10a      	cbz	r2, 8001512 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800150e:	6101      	str	r1, [r0, #16]
 8001510:	4770      	bx	lr
 8001512:	0409      	lsls	r1, r1, #16
 8001514:	e7fb      	b.n	800150e <HAL_GPIO_WritePin+0x2>
	...

08001518 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001518:	6803      	ldr	r3, [r0, #0]
{
 800151a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800151e:	07db      	lsls	r3, r3, #31
{
 8001520:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001522:	d414      	bmi.n	800154e <HAL_RCC_OscConfig+0x36>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001524:	682b      	ldr	r3, [r5, #0]
 8001526:	079f      	lsls	r7, r3, #30
 8001528:	d462      	bmi.n	80015f0 <HAL_RCC_OscConfig+0xd8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800152a:	682b      	ldr	r3, [r5, #0]
 800152c:	0719      	lsls	r1, r3, #28
 800152e:	f100 8099 	bmi.w	8001664 <HAL_RCC_OscConfig+0x14c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001532:	682b      	ldr	r3, [r5, #0]
 8001534:	075a      	lsls	r2, r3, #29
 8001536:	f100 80c3 	bmi.w	80016c0 <HAL_RCC_OscConfig+0x1a8>

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 800153a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800153c:	2a00      	cmp	r2, #0
 800153e:	f040 8131 	bne.w	80017a4 <HAL_RCC_OscConfig+0x28c>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001542:	6a2a      	ldr	r2, [r5, #32]
 8001544:	2a00      	cmp	r2, #0
 8001546:	f040 8184 	bne.w	8001852 <HAL_RCC_OscConfig+0x33a>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 800154a:	2000      	movs	r0, #0
 800154c:	e014      	b.n	8001578 <HAL_RCC_OscConfig+0x60>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800154e:	4c90      	ldr	r4, [pc, #576]	; (8001790 <HAL_RCC_OscConfig+0x278>)
 8001550:	6863      	ldr	r3, [r4, #4]
 8001552:	f003 030c 	and.w	r3, r3, #12
 8001556:	2b04      	cmp	r3, #4
 8001558:	d007      	beq.n	800156a <HAL_RCC_OscConfig+0x52>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800155a:	6863      	ldr	r3, [r4, #4]
 800155c:	f003 030c 	and.w	r3, r3, #12
 8001560:	2b08      	cmp	r3, #8
 8001562:	d10c      	bne.n	800157e <HAL_RCC_OscConfig+0x66>
 8001564:	6863      	ldr	r3, [r4, #4]
 8001566:	03de      	lsls	r6, r3, #15
 8001568:	d509      	bpl.n	800157e <HAL_RCC_OscConfig+0x66>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800156a:	6823      	ldr	r3, [r4, #0]
 800156c:	039c      	lsls	r4, r3, #14
 800156e:	d5d9      	bpl.n	8001524 <HAL_RCC_OscConfig+0xc>
 8001570:	68ab      	ldr	r3, [r5, #8]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d1d6      	bne.n	8001524 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8001576:	2001      	movs	r0, #1
}
 8001578:	b002      	add	sp, #8
 800157a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800157e:	68ab      	ldr	r3, [r5, #8]
 8001580:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001584:	d110      	bne.n	80015a8 <HAL_RCC_OscConfig+0x90>
 8001586:	6823      	ldr	r3, [r4, #0]
 8001588:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800158c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800158e:	f7ff f82d 	bl	80005ec <HAL_GetTick>
 8001592:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001594:	6823      	ldr	r3, [r4, #0]
 8001596:	0398      	lsls	r0, r3, #14
 8001598:	d4c4      	bmi.n	8001524 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800159a:	f7ff f827 	bl	80005ec <HAL_GetTick>
 800159e:	1b80      	subs	r0, r0, r6
 80015a0:	2864      	cmp	r0, #100	; 0x64
 80015a2:	d9f7      	bls.n	8001594 <HAL_RCC_OscConfig+0x7c>
            return HAL_TIMEOUT;
 80015a4:	2003      	movs	r0, #3
 80015a6:	e7e7      	b.n	8001578 <HAL_RCC_OscConfig+0x60>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015a8:	b99b      	cbnz	r3, 80015d2 <HAL_RCC_OscConfig+0xba>
 80015aa:	6823      	ldr	r3, [r4, #0]
 80015ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015b0:	6023      	str	r3, [r4, #0]
 80015b2:	6823      	ldr	r3, [r4, #0]
 80015b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015b8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80015ba:	f7ff f817 	bl	80005ec <HAL_GetTick>
 80015be:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015c0:	6823      	ldr	r3, [r4, #0]
 80015c2:	0399      	lsls	r1, r3, #14
 80015c4:	d5ae      	bpl.n	8001524 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015c6:	f7ff f811 	bl	80005ec <HAL_GetTick>
 80015ca:	1b80      	subs	r0, r0, r6
 80015cc:	2864      	cmp	r0, #100	; 0x64
 80015ce:	d9f7      	bls.n	80015c0 <HAL_RCC_OscConfig+0xa8>
 80015d0:	e7e8      	b.n	80015a4 <HAL_RCC_OscConfig+0x8c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015d6:	6823      	ldr	r3, [r4, #0]
 80015d8:	d103      	bne.n	80015e2 <HAL_RCC_OscConfig+0xca>
 80015da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015de:	6023      	str	r3, [r4, #0]
 80015e0:	e7d1      	b.n	8001586 <HAL_RCC_OscConfig+0x6e>
 80015e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015e6:	6023      	str	r3, [r4, #0]
 80015e8:	6823      	ldr	r3, [r4, #0]
 80015ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015ee:	e7cd      	b.n	800158c <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80015f0:	4c67      	ldr	r4, [pc, #412]	; (8001790 <HAL_RCC_OscConfig+0x278>)
 80015f2:	6863      	ldr	r3, [r4, #4]
 80015f4:	f013 0f0c 	tst.w	r3, #12
 80015f8:	d007      	beq.n	800160a <HAL_RCC_OscConfig+0xf2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80015fa:	6863      	ldr	r3, [r4, #4]
 80015fc:	f003 030c 	and.w	r3, r3, #12
 8001600:	2b08      	cmp	r3, #8
 8001602:	d110      	bne.n	8001626 <HAL_RCC_OscConfig+0x10e>
 8001604:	6863      	ldr	r3, [r4, #4]
 8001606:	03da      	lsls	r2, r3, #15
 8001608:	d40d      	bmi.n	8001626 <HAL_RCC_OscConfig+0x10e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800160a:	6823      	ldr	r3, [r4, #0]
 800160c:	079b      	lsls	r3, r3, #30
 800160e:	d502      	bpl.n	8001616 <HAL_RCC_OscConfig+0xfe>
 8001610:	696b      	ldr	r3, [r5, #20]
 8001612:	2b01      	cmp	r3, #1
 8001614:	d1af      	bne.n	8001576 <HAL_RCC_OscConfig+0x5e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001616:	6823      	ldr	r3, [r4, #0]
 8001618:	69aa      	ldr	r2, [r5, #24]
 800161a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800161e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001622:	6023      	str	r3, [r4, #0]
 8001624:	e781      	b.n	800152a <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001626:	696a      	ldr	r2, [r5, #20]
 8001628:	4b5a      	ldr	r3, [pc, #360]	; (8001794 <HAL_RCC_OscConfig+0x27c>)
 800162a:	b16a      	cbz	r2, 8001648 <HAL_RCC_OscConfig+0x130>
        __HAL_RCC_HSI_ENABLE();
 800162c:	2201      	movs	r2, #1
 800162e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001630:	f7fe ffdc 	bl	80005ec <HAL_GetTick>
 8001634:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001636:	6823      	ldr	r3, [r4, #0]
 8001638:	079f      	lsls	r7, r3, #30
 800163a:	d4ec      	bmi.n	8001616 <HAL_RCC_OscConfig+0xfe>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800163c:	f7fe ffd6 	bl	80005ec <HAL_GetTick>
 8001640:	1b80      	subs	r0, r0, r6
 8001642:	2802      	cmp	r0, #2
 8001644:	d9f7      	bls.n	8001636 <HAL_RCC_OscConfig+0x11e>
 8001646:	e7ad      	b.n	80015a4 <HAL_RCC_OscConfig+0x8c>
        __HAL_RCC_HSI_DISABLE();
 8001648:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800164a:	f7fe ffcf 	bl	80005ec <HAL_GetTick>
 800164e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001650:	6823      	ldr	r3, [r4, #0]
 8001652:	0798      	lsls	r0, r3, #30
 8001654:	f57f af69 	bpl.w	800152a <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001658:	f7fe ffc8 	bl	80005ec <HAL_GetTick>
 800165c:	1b80      	subs	r0, r0, r6
 800165e:	2802      	cmp	r0, #2
 8001660:	d9f6      	bls.n	8001650 <HAL_RCC_OscConfig+0x138>
 8001662:	e79f      	b.n	80015a4 <HAL_RCC_OscConfig+0x8c>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001664:	69ea      	ldr	r2, [r5, #28]
 8001666:	4c4a      	ldr	r4, [pc, #296]	; (8001790 <HAL_RCC_OscConfig+0x278>)
 8001668:	4b4b      	ldr	r3, [pc, #300]	; (8001798 <HAL_RCC_OscConfig+0x280>)
 800166a:	b1da      	cbz	r2, 80016a4 <HAL_RCC_OscConfig+0x18c>
      __HAL_RCC_LSI_ENABLE();
 800166c:	2201      	movs	r2, #1
 800166e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001670:	f7fe ffbc 	bl	80005ec <HAL_GetTick>
 8001674:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001676:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001678:	079b      	lsls	r3, r3, #30
 800167a:	d50d      	bpl.n	8001698 <HAL_RCC_OscConfig+0x180>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800167c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001680:	4b46      	ldr	r3, [pc, #280]	; (800179c <HAL_RCC_OscConfig+0x284>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	fbb3 f3f2 	udiv	r3, r3, r2
 8001688:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 800168a:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 800168c:	9b01      	ldr	r3, [sp, #4]
 800168e:	1e5a      	subs	r2, r3, #1
 8001690:	9201      	str	r2, [sp, #4]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d1f9      	bne.n	800168a <HAL_RCC_OscConfig+0x172>
 8001696:	e74c      	b.n	8001532 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001698:	f7fe ffa8 	bl	80005ec <HAL_GetTick>
 800169c:	1b80      	subs	r0, r0, r6
 800169e:	2802      	cmp	r0, #2
 80016a0:	d9e9      	bls.n	8001676 <HAL_RCC_OscConfig+0x15e>
 80016a2:	e77f      	b.n	80015a4 <HAL_RCC_OscConfig+0x8c>
      __HAL_RCC_LSI_DISABLE();
 80016a4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80016a6:	f7fe ffa1 	bl	80005ec <HAL_GetTick>
 80016aa:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80016ae:	079f      	lsls	r7, r3, #30
 80016b0:	f57f af3f 	bpl.w	8001532 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016b4:	f7fe ff9a 	bl	80005ec <HAL_GetTick>
 80016b8:	1b80      	subs	r0, r0, r6
 80016ba:	2802      	cmp	r0, #2
 80016bc:	d9f6      	bls.n	80016ac <HAL_RCC_OscConfig+0x194>
 80016be:	e771      	b.n	80015a4 <HAL_RCC_OscConfig+0x8c>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016c0:	4c33      	ldr	r4, [pc, #204]	; (8001790 <HAL_RCC_OscConfig+0x278>)
 80016c2:	69e3      	ldr	r3, [r4, #28]
 80016c4:	00de      	lsls	r6, r3, #3
 80016c6:	d424      	bmi.n	8001712 <HAL_RCC_OscConfig+0x1fa>
      pwrclkchanged = SET;
 80016c8:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80016ca:	69e3      	ldr	r3, [r4, #28]
 80016cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016d0:	61e3      	str	r3, [r4, #28]
 80016d2:	69e3      	ldr	r3, [r4, #28]
 80016d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d8:	9300      	str	r3, [sp, #0]
 80016da:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016dc:	4e30      	ldr	r6, [pc, #192]	; (80017a0 <HAL_RCC_OscConfig+0x288>)
 80016de:	6833      	ldr	r3, [r6, #0]
 80016e0:	05d8      	lsls	r0, r3, #23
 80016e2:	d518      	bpl.n	8001716 <HAL_RCC_OscConfig+0x1fe>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016e4:	692b      	ldr	r3, [r5, #16]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d126      	bne.n	8001738 <HAL_RCC_OscConfig+0x220>
 80016ea:	6a23      	ldr	r3, [r4, #32]
 80016ec:	f043 0301 	orr.w	r3, r3, #1
 80016f0:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80016f2:	f7fe ff7b 	bl	80005ec <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016f6:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80016fa:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016fc:	6a23      	ldr	r3, [r4, #32]
 80016fe:	079a      	lsls	r2, r3, #30
 8001700:	d53f      	bpl.n	8001782 <HAL_RCC_OscConfig+0x26a>
    if(pwrclkchanged == SET)
 8001702:	2f00      	cmp	r7, #0
 8001704:	f43f af19 	beq.w	800153a <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001708:	69e3      	ldr	r3, [r4, #28]
 800170a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800170e:	61e3      	str	r3, [r4, #28]
 8001710:	e713      	b.n	800153a <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8001712:	2700      	movs	r7, #0
 8001714:	e7e2      	b.n	80016dc <HAL_RCC_OscConfig+0x1c4>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001716:	6833      	ldr	r3, [r6, #0]
 8001718:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800171c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800171e:	f7fe ff65 	bl	80005ec <HAL_GetTick>
 8001722:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001724:	6833      	ldr	r3, [r6, #0]
 8001726:	05d9      	lsls	r1, r3, #23
 8001728:	d4dc      	bmi.n	80016e4 <HAL_RCC_OscConfig+0x1cc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800172a:	f7fe ff5f 	bl	80005ec <HAL_GetTick>
 800172e:	eba0 0008 	sub.w	r0, r0, r8
 8001732:	2864      	cmp	r0, #100	; 0x64
 8001734:	d9f6      	bls.n	8001724 <HAL_RCC_OscConfig+0x20c>
 8001736:	e735      	b.n	80015a4 <HAL_RCC_OscConfig+0x8c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001738:	b9ab      	cbnz	r3, 8001766 <HAL_RCC_OscConfig+0x24e>
 800173a:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800173c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001740:	f023 0301 	bic.w	r3, r3, #1
 8001744:	6223      	str	r3, [r4, #32]
 8001746:	6a23      	ldr	r3, [r4, #32]
 8001748:	f023 0304 	bic.w	r3, r3, #4
 800174c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800174e:	f7fe ff4d 	bl	80005ec <HAL_GetTick>
 8001752:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001754:	6a23      	ldr	r3, [r4, #32]
 8001756:	079b      	lsls	r3, r3, #30
 8001758:	d5d3      	bpl.n	8001702 <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800175a:	f7fe ff47 	bl	80005ec <HAL_GetTick>
 800175e:	1b80      	subs	r0, r0, r6
 8001760:	4540      	cmp	r0, r8
 8001762:	d9f7      	bls.n	8001754 <HAL_RCC_OscConfig+0x23c>
 8001764:	e71e      	b.n	80015a4 <HAL_RCC_OscConfig+0x8c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001766:	2b05      	cmp	r3, #5
 8001768:	6a23      	ldr	r3, [r4, #32]
 800176a:	d103      	bne.n	8001774 <HAL_RCC_OscConfig+0x25c>
 800176c:	f043 0304 	orr.w	r3, r3, #4
 8001770:	6223      	str	r3, [r4, #32]
 8001772:	e7ba      	b.n	80016ea <HAL_RCC_OscConfig+0x1d2>
 8001774:	f023 0301 	bic.w	r3, r3, #1
 8001778:	6223      	str	r3, [r4, #32]
 800177a:	6a23      	ldr	r3, [r4, #32]
 800177c:	f023 0304 	bic.w	r3, r3, #4
 8001780:	e7b6      	b.n	80016f0 <HAL_RCC_OscConfig+0x1d8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001782:	f7fe ff33 	bl	80005ec <HAL_GetTick>
 8001786:	eba0 0008 	sub.w	r0, r0, r8
 800178a:	42b0      	cmp	r0, r6
 800178c:	d9b6      	bls.n	80016fc <HAL_RCC_OscConfig+0x1e4>
 800178e:	e709      	b.n	80015a4 <HAL_RCC_OscConfig+0x8c>
 8001790:	40021000 	.word	0x40021000
 8001794:	42420000 	.word	0x42420000
 8001798:	42420480 	.word	0x42420480
 800179c:	20000050 	.word	0x20000050
 80017a0:	40007000 	.word	0x40007000
    if((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80017a4:	4c4f      	ldr	r4, [pc, #316]	; (80018e4 <HAL_RCC_OscConfig+0x3cc>)
 80017a6:	6863      	ldr	r3, [r4, #4]
 80017a8:	03d8      	lsls	r0, r3, #15
 80017aa:	d508      	bpl.n	80017be <HAL_RCC_OscConfig+0x2a6>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80017ac:	6863      	ldr	r3, [r4, #4]
 80017ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80017b2:	2b08      	cmp	r3, #8
 80017b4:	d103      	bne.n	80017be <HAL_RCC_OscConfig+0x2a6>
        ((READ_BIT(RCC->CFGR2,RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 80017b6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80017b8:	03d9      	lsls	r1, r3, #15
 80017ba:	f53f aedc 	bmi.w	8001576 <HAL_RCC_OscConfig+0x5e>
      if((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 80017be:	2a02      	cmp	r2, #2
 80017c0:	d133      	bne.n	800182a <HAL_RCC_OscConfig+0x312>
        if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLL3ON) && \
 80017c2:	6823      	ldr	r3, [r4, #0]
 80017c4:	00da      	lsls	r2, r3, #3
 80017c6:	d506      	bpl.n	80017d6 <HAL_RCC_OscConfig+0x2be>
          (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 80017c8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLL3ON) && \
 80017ca:	6b6a      	ldr	r2, [r5, #52]	; 0x34
          (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 80017cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
        if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLL3ON) && \
 80017d0:	4293      	cmp	r3, r2
 80017d2:	f47f aed0 	bne.w	8001576 <HAL_RCC_OscConfig+0x5e>
        __HAL_RCC_PLL2_DISABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	4e43      	ldr	r6, [pc, #268]	; (80018e8 <HAL_RCC_OscConfig+0x3d0>)
 80017da:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80017dc:	f7fe ff06 	bl	80005ec <HAL_GetTick>
 80017e0:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80017e2:	6823      	ldr	r3, [r4, #0]
 80017e4:	011b      	lsls	r3, r3, #4
 80017e6:	d41a      	bmi.n	800181e <HAL_RCC_OscConfig+0x306>
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 80017e8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80017ea:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80017ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80017f0:	4313      	orrs	r3, r2
 80017f2:	62e3      	str	r3, [r4, #44]	; 0x2c
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 80017f4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80017f6:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80017f8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80017fc:	4313      	orrs	r3, r2
 80017fe:	62e3      	str	r3, [r4, #44]	; 0x2c
        __HAL_RCC_PLL2_ENABLE();
 8001800:	2301      	movs	r3, #1
 8001802:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001804:	f7fe fef2 	bl	80005ec <HAL_GetTick>
 8001808:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 800180a:	6823      	ldr	r3, [r4, #0]
 800180c:	011f      	lsls	r7, r3, #4
 800180e:	f53f ae98 	bmi.w	8001542 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8001812:	f7fe feeb 	bl	80005ec <HAL_GetTick>
 8001816:	1b80      	subs	r0, r0, r6
 8001818:	2864      	cmp	r0, #100	; 0x64
 800181a:	d9f6      	bls.n	800180a <HAL_RCC_OscConfig+0x2f2>
 800181c:	e6c2      	b.n	80015a4 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800181e:	f7fe fee5 	bl	80005ec <HAL_GetTick>
 8001822:	1bc0      	subs	r0, r0, r7
 8001824:	2864      	cmp	r0, #100	; 0x64
 8001826:	d9dc      	bls.n	80017e2 <HAL_RCC_OscConfig+0x2ca>
 8001828:	e6bc      	b.n	80015a4 <HAL_RCC_OscConfig+0x8c>
        __HAL_RCC_PLL2_DISABLE();
 800182a:	2200      	movs	r2, #0
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 800182c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800182e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001832:	62e3      	str	r3, [r4, #44]	; 0x2c
        __HAL_RCC_PLL2_DISABLE();
 8001834:	4b2c      	ldr	r3, [pc, #176]	; (80018e8 <HAL_RCC_OscConfig+0x3d0>)
 8001836:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001838:	f7fe fed8 	bl	80005ec <HAL_GetTick>
 800183c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 800183e:	6823      	ldr	r3, [r4, #0]
 8001840:	0118      	lsls	r0, r3, #4
 8001842:	f57f ae7e 	bpl.w	8001542 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8001846:	f7fe fed1 	bl	80005ec <HAL_GetTick>
 800184a:	1b80      	subs	r0, r0, r6
 800184c:	2864      	cmp	r0, #100	; 0x64
 800184e:	d9f6      	bls.n	800183e <HAL_RCC_OscConfig+0x326>
 8001850:	e6a8      	b.n	80015a4 <HAL_RCC_OscConfig+0x8c>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001852:	4c24      	ldr	r4, [pc, #144]	; (80018e4 <HAL_RCC_OscConfig+0x3cc>)
 8001854:	6863      	ldr	r3, [r4, #4]
 8001856:	f003 030c 	and.w	r3, r3, #12
 800185a:	2b08      	cmp	r3, #8
 800185c:	f43f ae8b 	beq.w	8001576 <HAL_RCC_OscConfig+0x5e>
 8001860:	2300      	movs	r3, #0
 8001862:	4e22      	ldr	r6, [pc, #136]	; (80018ec <HAL_RCC_OscConfig+0x3d4>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001864:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001866:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001868:	d12f      	bne.n	80018ca <HAL_RCC_OscConfig+0x3b2>
        tickstart = HAL_GetTick();
 800186a:	f7fe febf 	bl	80005ec <HAL_GetTick>
 800186e:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001870:	6823      	ldr	r3, [r4, #0]
 8001872:	0199      	lsls	r1, r3, #6
 8001874:	d423      	bmi.n	80018be <HAL_RCC_OscConfig+0x3a6>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001876:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001878:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800187c:	d109      	bne.n	8001892 <HAL_RCC_OscConfig+0x37a>
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 800187e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001880:	6869      	ldr	r1, [r5, #4]
 8001882:	430a      	orrs	r2, r1
 8001884:	62e2      	str	r2, [r4, #44]	; 0x2c
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001886:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001888:	68e9      	ldr	r1, [r5, #12]
 800188a:	f022 020f 	bic.w	r2, r2, #15
 800188e:	430a      	orrs	r2, r1
 8001890:	62e2      	str	r2, [r4, #44]	; 0x2c
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001892:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8001894:	6862      	ldr	r2, [r4, #4]
 8001896:	430b      	orrs	r3, r1
 8001898:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800189c:	4313      	orrs	r3, r2
 800189e:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80018a0:	2301      	movs	r3, #1
 80018a2:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80018a4:	f7fe fea2 	bl	80005ec <HAL_GetTick>
 80018a8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018aa:	6823      	ldr	r3, [r4, #0]
 80018ac:	019a      	lsls	r2, r3, #6
 80018ae:	f53f ae4c 	bmi.w	800154a <HAL_RCC_OscConfig+0x32>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018b2:	f7fe fe9b 	bl	80005ec <HAL_GetTick>
 80018b6:	1b40      	subs	r0, r0, r5
 80018b8:	2802      	cmp	r0, #2
 80018ba:	d9f6      	bls.n	80018aa <HAL_RCC_OscConfig+0x392>
 80018bc:	e672      	b.n	80015a4 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018be:	f7fe fe95 	bl	80005ec <HAL_GetTick>
 80018c2:	1bc0      	subs	r0, r0, r7
 80018c4:	2802      	cmp	r0, #2
 80018c6:	d9d3      	bls.n	8001870 <HAL_RCC_OscConfig+0x358>
 80018c8:	e66c      	b.n	80015a4 <HAL_RCC_OscConfig+0x8c>
        tickstart = HAL_GetTick();
 80018ca:	f7fe fe8f 	bl	80005ec <HAL_GetTick>
 80018ce:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018d0:	6823      	ldr	r3, [r4, #0]
 80018d2:	019b      	lsls	r3, r3, #6
 80018d4:	f57f ae39 	bpl.w	800154a <HAL_RCC_OscConfig+0x32>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018d8:	f7fe fe88 	bl	80005ec <HAL_GetTick>
 80018dc:	1b40      	subs	r0, r0, r5
 80018de:	2802      	cmp	r0, #2
 80018e0:	d9f6      	bls.n	80018d0 <HAL_RCC_OscConfig+0x3b8>
 80018e2:	e65f      	b.n	80015a4 <HAL_RCC_OscConfig+0x8c>
 80018e4:	40021000 	.word	0x40021000
 80018e8:	42420068 	.word	0x42420068
 80018ec:	42420060 	.word	0x42420060

080018f0 <HAL_RCC_GetSysClockFreq>:
{
 80018f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018f2:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 80018f4:	466a      	mov	r2, sp
 80018f6:	4b2a      	ldr	r3, [pc, #168]	; (80019a0 <HAL_RCC_GetSysClockFreq+0xb0>)
 80018f8:	f103 0508 	add.w	r5, r3, #8
 80018fc:	4614      	mov	r4, r2
 80018fe:	6818      	ldr	r0, [r3, #0]
 8001900:	6859      	ldr	r1, [r3, #4]
 8001902:	3308      	adds	r3, #8
 8001904:	c403      	stmia	r4!, {r0, r1}
 8001906:	42ab      	cmp	r3, r5
 8001908:	4622      	mov	r2, r4
 800190a:	d1f7      	bne.n	80018fc <HAL_RCC_GetSysClockFreq+0xc>
 800190c:	6818      	ldr	r0, [r3, #0]
 800190e:	889b      	ldrh	r3, [r3, #4]
 8001910:	6020      	str	r0, [r4, #0]
 8001912:	80a3      	strh	r3, [r4, #4]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8001914:	4b23      	ldr	r3, [pc, #140]	; (80019a4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001916:	ac04      	add	r4, sp, #16
 8001918:	f103 0510 	add.w	r5, r3, #16
 800191c:	4622      	mov	r2, r4
 800191e:	6818      	ldr	r0, [r3, #0]
 8001920:	6859      	ldr	r1, [r3, #4]
 8001922:	3308      	adds	r3, #8
 8001924:	c203      	stmia	r2!, {r0, r1}
 8001926:	42ab      	cmp	r3, r5
 8001928:	4614      	mov	r4, r2
 800192a:	d1f7      	bne.n	800191c <HAL_RCC_GetSysClockFreq+0x2c>
  tmpreg = RCC->CFGR;
 800192c:	491e      	ldr	r1, [pc, #120]	; (80019a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800192e:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001930:	f003 020c 	and.w	r2, r3, #12
 8001934:	2a08      	cmp	r2, #8
 8001936:	d131      	bne.n	800199c <HAL_RCC_GetSysClockFreq+0xac>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001938:	f3c3 4283 	ubfx	r2, r3, #18, #4
 800193c:	a808      	add	r0, sp, #32
 800193e:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001940:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001942:	f812 6c20 	ldrb.w	r6, [r2, #-32]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001946:	d526      	bpl.n	8001996 <HAL_RCC_GetSysClockFreq+0xa6>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8001948:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800194a:	f003 030f 	and.w	r3, r3, #15
 800194e:	4403      	add	r3, r0
 8001950:	f813 2c10 	ldrb.w	r2, [r3, #-16]
        if(HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8001954:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8001956:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800195a:	4b14      	ldr	r3, [pc, #80]	; (80019ac <HAL_RCC_GetSysClockFreq+0xbc>)
 800195c:	d016      	beq.n	800198c <HAL_RCC_GetSysClockFreq+0x9c>
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 800195e:	6acf      	ldr	r7, [r1, #44]	; 0x2c
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8001960:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8001962:	f3c4 2403 	ubfx	r4, r4, #8, #4
 8001966:	3402      	adds	r4, #2
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8001968:	fba4 4506 	umull	r4, r5, r4, r6
 800196c:	fba4 0103 	umull	r0, r1, r4, r3
 8001970:	fb03 1105 	mla	r1, r3, r5, r1
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8001974:	f3c7 1303 	ubfx	r3, r7, #4, #4
 8001978:	3301      	adds	r3, #1
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 800197a:	fba3 2302 	umull	r2, r3, r3, r2
 800197e:	f7fe fc6b 	bl	8000258 <__aeabi_uldivmod>
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8001982:	2e0d      	cmp	r6, #13
 8001984:	d100      	bne.n	8001988 <HAL_RCC_GetSysClockFreq+0x98>
            pllclk = pllclk / 2;
 8001986:	0840      	lsrs	r0, r0, #1
}
 8001988:	b009      	add	sp, #36	; 0x24
 800198a:	bdf0      	pop	{r4, r5, r6, r7, pc}
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 800198c:	fb03 f006 	mul.w	r0, r3, r6
 8001990:	fbb0 f0f2 	udiv	r0, r0, r2
 8001994:	e7f5      	b.n	8001982 <HAL_RCC_GetSysClockFreq+0x92>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001996:	4806      	ldr	r0, [pc, #24]	; (80019b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001998:	4370      	muls	r0, r6
 800199a:	e7f5      	b.n	8001988 <HAL_RCC_GetSysClockFreq+0x98>
      sysclockfreq = HSE_VALUE;
 800199c:	4803      	ldr	r0, [pc, #12]	; (80019ac <HAL_RCC_GetSysClockFreq+0xbc>)
  return sysclockfreq;
 800199e:	e7f3      	b.n	8001988 <HAL_RCC_GetSysClockFreq+0x98>
 80019a0:	080061b4 	.word	0x080061b4
 80019a4:	080061c2 	.word	0x080061c2
 80019a8:	40021000 	.word	0x40021000
 80019ac:	007a1200 	.word	0x007a1200
 80019b0:	003d0900 	.word	0x003d0900

080019b4 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80019b4:	4a54      	ldr	r2, [pc, #336]	; (8001b08 <HAL_RCC_ClockConfig+0x154>)
{
 80019b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80019ba:	6813      	ldr	r3, [r2, #0]
{
 80019bc:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80019be:	f003 0307 	and.w	r3, r3, #7
 80019c2:	428b      	cmp	r3, r1
{
 80019c4:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80019c6:	d32a      	bcc.n	8001a1e <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019c8:	6829      	ldr	r1, [r5, #0]
 80019ca:	078c      	lsls	r4, r1, #30
 80019cc:	d434      	bmi.n	8001a38 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019ce:	07ca      	lsls	r2, r1, #31
 80019d0:	d447      	bmi.n	8001a62 <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80019d2:	4a4d      	ldr	r2, [pc, #308]	; (8001b08 <HAL_RCC_ClockConfig+0x154>)
 80019d4:	6813      	ldr	r3, [r2, #0]
 80019d6:	f003 0307 	and.w	r3, r3, #7
 80019da:	429e      	cmp	r6, r3
 80019dc:	f0c0 8082 	bcc.w	8001ae4 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019e0:	682a      	ldr	r2, [r5, #0]
 80019e2:	4c4a      	ldr	r4, [pc, #296]	; (8001b0c <HAL_RCC_ClockConfig+0x158>)
 80019e4:	f012 0f04 	tst.w	r2, #4
 80019e8:	f040 8087 	bne.w	8001afa <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ec:	0713      	lsls	r3, r2, #28
 80019ee:	d506      	bpl.n	80019fe <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019f0:	6863      	ldr	r3, [r4, #4]
 80019f2:	692a      	ldr	r2, [r5, #16]
 80019f4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80019f8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80019fc:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019fe:	f7ff ff77 	bl	80018f0 <HAL_RCC_GetSysClockFreq>
 8001a02:	6863      	ldr	r3, [r4, #4]
 8001a04:	4a42      	ldr	r2, [pc, #264]	; (8001b10 <HAL_RCC_ClockConfig+0x15c>)
 8001a06:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001a0a:	5cd3      	ldrb	r3, [r2, r3]
 8001a0c:	40d8      	lsrs	r0, r3
 8001a0e:	4b41      	ldr	r3, [pc, #260]	; (8001b14 <HAL_RCC_ClockConfig+0x160>)
 8001a10:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001a12:	200f      	movs	r0, #15
 8001a14:	f7fe fda8 	bl	8000568 <HAL_InitTick>
  return HAL_OK;
 8001a18:	2000      	movs	r0, #0
}
 8001a1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a1e:	6813      	ldr	r3, [r2, #0]
 8001a20:	f023 0307 	bic.w	r3, r3, #7
 8001a24:	430b      	orrs	r3, r1
 8001a26:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a28:	6813      	ldr	r3, [r2, #0]
 8001a2a:	f003 0307 	and.w	r3, r3, #7
 8001a2e:	4299      	cmp	r1, r3
 8001a30:	d0ca      	beq.n	80019c8 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8001a32:	2001      	movs	r0, #1
 8001a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a38:	4b34      	ldr	r3, [pc, #208]	; (8001b0c <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a3a:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a3e:	bf1e      	ittt	ne
 8001a40:	685a      	ldrne	r2, [r3, #4]
 8001a42:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8001a46:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a48:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a4a:	bf42      	ittt	mi
 8001a4c:	685a      	ldrmi	r2, [r3, #4]
 8001a4e:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8001a52:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a54:	685a      	ldr	r2, [r3, #4]
 8001a56:	68a8      	ldr	r0, [r5, #8]
 8001a58:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001a5c:	4302      	orrs	r2, r0
 8001a5e:	605a      	str	r2, [r3, #4]
 8001a60:	e7b5      	b.n	80019ce <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a62:	686a      	ldr	r2, [r5, #4]
 8001a64:	4c29      	ldr	r4, [pc, #164]	; (8001b0c <HAL_RCC_ClockConfig+0x158>)
 8001a66:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a68:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a6a:	d11c      	bne.n	8001aa6 <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a6c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a70:	d0df      	beq.n	8001a32 <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a72:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a74:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a78:	f023 0303 	bic.w	r3, r3, #3
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8001a80:	f7fe fdb4 	bl	80005ec <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a84:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8001a86:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d114      	bne.n	8001ab6 <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a8c:	6863      	ldr	r3, [r4, #4]
 8001a8e:	f003 030c 	and.w	r3, r3, #12
 8001a92:	2b04      	cmp	r3, #4
 8001a94:	d09d      	beq.n	80019d2 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a96:	f7fe fda9 	bl	80005ec <HAL_GetTick>
 8001a9a:	1bc0      	subs	r0, r0, r7
 8001a9c:	4540      	cmp	r0, r8
 8001a9e:	d9f5      	bls.n	8001a8c <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 8001aa0:	2003      	movs	r0, #3
 8001aa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001aa6:	2a02      	cmp	r2, #2
 8001aa8:	d102      	bne.n	8001ab0 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aaa:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001aae:	e7df      	b.n	8001a70 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ab0:	f013 0f02 	tst.w	r3, #2
 8001ab4:	e7dc      	b.n	8001a70 <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d10f      	bne.n	8001ada <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001aba:	6863      	ldr	r3, [r4, #4]
 8001abc:	f003 030c 	and.w	r3, r3, #12
 8001ac0:	2b08      	cmp	r3, #8
 8001ac2:	d086      	beq.n	80019d2 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ac4:	f7fe fd92 	bl	80005ec <HAL_GetTick>
 8001ac8:	1bc0      	subs	r0, r0, r7
 8001aca:	4540      	cmp	r0, r8
 8001acc:	d9f5      	bls.n	8001aba <HAL_RCC_ClockConfig+0x106>
 8001ace:	e7e7      	b.n	8001aa0 <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ad0:	f7fe fd8c 	bl	80005ec <HAL_GetTick>
 8001ad4:	1bc0      	subs	r0, r0, r7
 8001ad6:	4540      	cmp	r0, r8
 8001ad8:	d8e2      	bhi.n	8001aa0 <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ada:	6863      	ldr	r3, [r4, #4]
 8001adc:	f013 0f0c 	tst.w	r3, #12
 8001ae0:	d1f6      	bne.n	8001ad0 <HAL_RCC_ClockConfig+0x11c>
 8001ae2:	e776      	b.n	80019d2 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ae4:	6813      	ldr	r3, [r2, #0]
 8001ae6:	f023 0307 	bic.w	r3, r3, #7
 8001aea:	4333      	orrs	r3, r6
 8001aec:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001aee:	6813      	ldr	r3, [r2, #0]
 8001af0:	f003 0307 	and.w	r3, r3, #7
 8001af4:	429e      	cmp	r6, r3
 8001af6:	d19c      	bne.n	8001a32 <HAL_RCC_ClockConfig+0x7e>
 8001af8:	e772      	b.n	80019e0 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001afa:	6863      	ldr	r3, [r4, #4]
 8001afc:	68e9      	ldr	r1, [r5, #12]
 8001afe:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001b02:	430b      	orrs	r3, r1
 8001b04:	6063      	str	r3, [r4, #4]
 8001b06:	e771      	b.n	80019ec <HAL_RCC_ClockConfig+0x38>
 8001b08:	40022000 	.word	0x40022000
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	080063d6 	.word	0x080063d6
 8001b14:	20000050 	.word	0x20000050

08001b18 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b18:	4b04      	ldr	r3, [pc, #16]	; (8001b2c <HAL_RCC_GetPCLK1Freq+0x14>)
 8001b1a:	4a05      	ldr	r2, [pc, #20]	; (8001b30 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001b22:	5cd3      	ldrb	r3, [r2, r3]
 8001b24:	4a03      	ldr	r2, [pc, #12]	; (8001b34 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001b26:	6810      	ldr	r0, [r2, #0]
}    
 8001b28:	40d8      	lsrs	r0, r3
 8001b2a:	4770      	bx	lr
 8001b2c:	40021000 	.word	0x40021000
 8001b30:	080063e6 	.word	0x080063e6
 8001b34:	20000050 	.word	0x20000050

08001b38 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b38:	4b04      	ldr	r3, [pc, #16]	; (8001b4c <HAL_RCC_GetPCLK2Freq+0x14>)
 8001b3a:	4a05      	ldr	r2, [pc, #20]	; (8001b50 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001b42:	5cd3      	ldrb	r3, [r2, r3]
 8001b44:	4a03      	ldr	r2, [pc, #12]	; (8001b54 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001b46:	6810      	ldr	r0, [r2, #0]
} 
 8001b48:	40d8      	lsrs	r0, r3
 8001b4a:	4770      	bx	lr
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	080063e6 	.word	0x080063e6
 8001b54:	20000050 	.word	0x20000050

08001b58 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001b58:	6803      	ldr	r3, [r0, #0]
{
 8001b5a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001b5e:	f013 0f01 	tst.w	r3, #1
{
 8001b62:	4605      	mov	r5, r0
 8001b64:	4c57      	ldr	r4, [pc, #348]	; (8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001b66:	d01f      	beq.n	8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x50>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b68:	69e3      	ldr	r3, [r4, #28]
 8001b6a:	00da      	lsls	r2, r3, #3
 8001b6c:	d447      	bmi.n	8001bfe <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8001b6e:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b70:	69e3      	ldr	r3, [r4, #28]
 8001b72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b76:	61e3      	str	r3, [r4, #28]
 8001b78:	69e3      	ldr	r3, [r4, #28]
 8001b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b7e:	9301      	str	r3, [sp, #4]
 8001b80:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b82:	4e51      	ldr	r6, [pc, #324]	; (8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 8001b84:	6833      	ldr	r3, [r6, #0]
 8001b86:	05db      	lsls	r3, r3, #23
 8001b88:	d53b      	bpl.n	8001c02 <HAL_RCCEx_PeriphCLKConfig+0xaa>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001b8a:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001b8c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001b90:	d14b      	bne.n	8001c2a <HAL_RCCEx_PeriphCLKConfig+0xd2>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001b92:	6a23      	ldr	r3, [r4, #32]
 8001b94:	686a      	ldr	r2, [r5, #4]
 8001b96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b9e:	b11f      	cbz	r7, 8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ba0:	69e3      	ldr	r3, [r4, #28]
 8001ba2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ba6:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001ba8:	682a      	ldr	r2, [r5, #0]
 8001baa:	0793      	lsls	r3, r2, #30
 8001bac:	d505      	bpl.n	8001bba <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001bae:	6863      	ldr	r3, [r4, #4]
 8001bb0:	68a9      	ldr	r1, [r5, #8]
 8001bb2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001bb6:	430b      	orrs	r3, r1
 8001bb8:	6063      	str	r3, [r4, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8001bba:	0757      	lsls	r7, r2, #29
 8001bbc:	d505      	bpl.n	8001bca <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8001bbe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001bc0:	68e9      	ldr	r1, [r5, #12]
 8001bc2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001bc6:	430b      	orrs	r3, r1
 8001bc8:	62e3      	str	r3, [r4, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 8001bca:	0716      	lsls	r6, r2, #28
 8001bcc:	d505      	bpl.n	8001bda <HAL_RCCEx_PeriphCLKConfig+0x82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));
    
    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 8001bce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001bd0:	692a      	ldr	r2, [r5, #16]
 8001bd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	62e3      	str	r3, [r4, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/ 
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 8001bda:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001bdc:	0398      	lsls	r0, r3, #14
 8001bde:	d466      	bmi.n	8001cae <HAL_RCCEx_PeriphCLKConfig+0x156>
 8001be0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001be2:	0359      	lsls	r1, r3, #13
 8001be4:	d463      	bmi.n	8001cae <HAL_RCCEx_PeriphCLKConfig+0x156>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001be6:	6828      	ldr	r0, [r5, #0]
 8001be8:	f010 0010 	ands.w	r0, r0, #16
 8001bec:	d01a      	beq.n	8001c24 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001bee:	6863      	ldr	r3, [r4, #4]
 8001bf0:	69ea      	ldr	r2, [r5, #28]
 8001bf2:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	6063      	str	r3, [r4, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001bfa:	2000      	movs	r0, #0
 8001bfc:	e012      	b.n	8001c24 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    FlagStatus       pwrclkchanged = RESET;
 8001bfe:	2700      	movs	r7, #0
 8001c00:	e7bf      	b.n	8001b82 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c02:	6833      	ldr	r3, [r6, #0]
 8001c04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c08:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001c0a:	f7fe fcef 	bl	80005ec <HAL_GetTick>
 8001c0e:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c10:	6833      	ldr	r3, [r6, #0]
 8001c12:	05d8      	lsls	r0, r3, #23
 8001c14:	d4b9      	bmi.n	8001b8a <HAL_RCCEx_PeriphCLKConfig+0x32>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c16:	f7fe fce9 	bl	80005ec <HAL_GetTick>
 8001c1a:	eba0 0008 	sub.w	r0, r0, r8
 8001c1e:	2864      	cmp	r0, #100	; 0x64
 8001c20:	d9f6      	bls.n	8001c10 <HAL_RCCEx_PeriphCLKConfig+0xb8>
          return HAL_TIMEOUT;
 8001c22:	2003      	movs	r0, #3
}
 8001c24:	b002      	add	sp, #8
 8001c26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001c2a:	686a      	ldr	r2, [r5, #4]
 8001c2c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d0ae      	beq.n	8001b92 <HAL_RCCEx_PeriphCLKConfig+0x3a>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c34:	2001      	movs	r0, #1
 8001c36:	4a25      	ldr	r2, [pc, #148]	; (8001ccc <HAL_RCCEx_PeriphCLKConfig+0x174>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001c38:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c3a:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c3c:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001c3e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c42:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8001c44:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001c46:	07d9      	lsls	r1, r3, #31
 8001c48:	d5a3      	bpl.n	8001b92 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        tickstart = HAL_GetTick();
 8001c4a:	f7fe fccf 	bl	80005ec <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c4e:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001c52:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c54:	6a23      	ldr	r3, [r4, #32]
 8001c56:	079a      	lsls	r2, r3, #30
 8001c58:	d49b      	bmi.n	8001b92 <HAL_RCCEx_PeriphCLKConfig+0x3a>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c5a:	f7fe fcc7 	bl	80005ec <HAL_GetTick>
 8001c5e:	1b80      	subs	r0, r0, r6
 8001c60:	4540      	cmp	r0, r8
 8001c62:	d9f7      	bls.n	8001c54 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8001c64:	e7dd      	b.n	8001c22 <HAL_RCCEx_PeriphCLKConfig+0xca>
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLL2ON) && \
 8001c66:	6823      	ldr	r3, [r4, #0]
 8001c68:	69a9      	ldr	r1, [r5, #24]
 8001c6a:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8001c6e:	d004      	beq.n	8001c7a <HAL_RCCEx_PeriphCLKConfig+0x122>
        (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 8001c70:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001c72:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLL2ON) && \
 8001c76:	428a      	cmp	r2, r1
 8001c78:	d122      	bne.n	8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x168>
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 8001c7a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001c7c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c80:	430b      	orrs	r3, r1
 8001c82:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 8001c84:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001c86:	696a      	ldr	r2, [r5, #20]
 8001c88:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001c8c:	4313      	orrs	r3, r2
      __HAL_RCC_PLLI2S_ENABLE();
 8001c8e:	2201      	movs	r2, #1
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 8001c90:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_RCC_PLLI2S_ENABLE();
 8001c92:	4b0f      	ldr	r3, [pc, #60]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8001c94:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001c96:	f7fe fca9 	bl	80005ec <HAL_GetTick>
 8001c9a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001c9c:	6823      	ldr	r3, [r4, #0]
 8001c9e:	009a      	lsls	r2, r3, #2
 8001ca0:	d4a1      	bmi.n	8001be6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001ca2:	f7fe fca3 	bl	80005ec <HAL_GetTick>
 8001ca6:	1b80      	subs	r0, r0, r6
 8001ca8:	2864      	cmp	r0, #100	; 0x64
 8001caa:	d9f7      	bls.n	8001c9c <HAL_RCCEx_PeriphCLKConfig+0x144>
 8001cac:	e7b9      	b.n	8001c22 <HAL_RCCEx_PeriphCLKConfig+0xca>
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 8001cae:	6823      	ldr	r3, [r4, #0]
 8001cb0:	00db      	lsls	r3, r3, #3
 8001cb2:	d5d8      	bpl.n	8001c66 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 8001cb4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001cb6:	696a      	ldr	r2, [r5, #20]
 8001cb8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d092      	beq.n	8001be6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
        return HAL_ERROR;
 8001cc0:	2001      	movs	r0, #1
 8001cc2:	e7af      	b.n	8001c24 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	40007000 	.word	0x40007000
 8001ccc:	42420440 	.word	0x42420440
 8001cd0:	42420070 	.word	0x42420070

08001cd4 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001cd4:	6a03      	ldr	r3, [r0, #32]
{
 8001cd6:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001cd8:	f023 0301 	bic.w	r3, r3, #1
 8001cdc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001cde:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001ce0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001ce2:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001ce4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001ce6:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001cea:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001cec:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8001cee:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8001cf2:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001cf4:	4d0a      	ldr	r5, [pc, #40]	; (8001d20 <TIM_OC1_SetConfig+0x4c>)
 8001cf6:	42a8      	cmp	r0, r5
 8001cf8:	d10b      	bne.n	8001d12 <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001cfa:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8001cfc:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001d00:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001d02:	698e      	ldr	r6, [r1, #24]
 8001d04:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001d06:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8001d0a:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8001d0c:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001d10:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001d12:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001d14:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001d16:	684a      	ldr	r2, [r1, #4]
 8001d18:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001d1a:	6203      	str	r3, [r0, #32]
 8001d1c:	bd70      	pop	{r4, r5, r6, pc}
 8001d1e:	bf00      	nop
 8001d20:	40012c00 	.word	0x40012c00

08001d24 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001d24:	6a03      	ldr	r3, [r0, #32]
{
 8001d26:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001d28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d2c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001d2e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001d30:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001d32:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001d34:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001d36:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001d3a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001d3c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8001d3e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001d42:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001d46:	4d0b      	ldr	r5, [pc, #44]	; (8001d74 <TIM_OC3_SetConfig+0x50>)
 8001d48:	42a8      	cmp	r0, r5
 8001d4a:	d10d      	bne.n	8001d68 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001d4c:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8001d4e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001d52:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001d56:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001d58:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001d5a:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001d5e:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8001d60:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001d64:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001d68:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001d6a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001d6c:	684a      	ldr	r2, [r1, #4]
 8001d6e:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001d70:	6203      	str	r3, [r0, #32]
 8001d72:	bd70      	pop	{r4, r5, r6, pc}
 8001d74:	40012c00 	.word	0x40012c00

08001d78 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001d78:	6a03      	ldr	r3, [r0, #32]
{
 8001d7a:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001d7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001d80:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001d82:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001d84:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001d86:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001d88:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001d8a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001d8e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001d92:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8001d94:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001d98:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001d9c:	4d06      	ldr	r5, [pc, #24]	; (8001db8 <TIM_OC4_SetConfig+0x40>)
 8001d9e:	42a8      	cmp	r0, r5
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8001da0:	bf02      	ittt	eq
 8001da2:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001da4:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8001da8:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001dac:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001dae:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001db0:	684a      	ldr	r2, [r1, #4]
 8001db2:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001db4:	6203      	str	r3, [r0, #32]
 8001db6:	bd30      	pop	{r4, r5, pc}
 8001db8:	40012c00 	.word	0x40012c00

08001dbc <HAL_TIM_PWM_MspInit>:
 8001dbc:	4770      	bx	lr

08001dbe <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001dbe:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001dc2:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	f04f 0302 	mov.w	r3, #2
 8001dca:	d01c      	beq.n	8001e06 <HAL_TIM_ConfigClockSource+0x48>
 8001dcc:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8001dce:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001dd2:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8001dd4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001dd8:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001dda:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001dde:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001de2:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8001de4:	680a      	ldr	r2, [r1, #0]
 8001de6:	2a40      	cmp	r2, #64	; 0x40
 8001de8:	d079      	beq.n	8001ede <HAL_TIM_ConfigClockSource+0x120>
 8001dea:	d819      	bhi.n	8001e20 <HAL_TIM_ConfigClockSource+0x62>
 8001dec:	2a10      	cmp	r2, #16
 8001dee:	f000 8093 	beq.w	8001f18 <HAL_TIM_ConfigClockSource+0x15a>
 8001df2:	d80a      	bhi.n	8001e0a <HAL_TIM_ConfigClockSource+0x4c>
 8001df4:	2a00      	cmp	r2, #0
 8001df6:	f000 8089 	beq.w	8001f0c <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001e00:	2300      	movs	r3, #0
 8001e02:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8001e06:	4618      	mov	r0, r3
}
 8001e08:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001e0a:	2a20      	cmp	r2, #32
 8001e0c:	f000 808a 	beq.w	8001f24 <HAL_TIM_ConfigClockSource+0x166>
 8001e10:	2a30      	cmp	r2, #48	; 0x30
 8001e12:	d1f2      	bne.n	8001dfa <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001e14:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001e16:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001e1a:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8001e1e:	e036      	b.n	8001e8e <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8001e20:	2a70      	cmp	r2, #112	; 0x70
 8001e22:	d036      	beq.n	8001e92 <HAL_TIM_ConfigClockSource+0xd4>
 8001e24:	d81b      	bhi.n	8001e5e <HAL_TIM_ConfigClockSource+0xa0>
 8001e26:	2a50      	cmp	r2, #80	; 0x50
 8001e28:	d042      	beq.n	8001eb0 <HAL_TIM_ConfigClockSource+0xf2>
 8001e2a:	2a60      	cmp	r2, #96	; 0x60
 8001e2c:	d1e5      	bne.n	8001dfa <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e2e:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e30:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e32:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e36:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e38:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e3a:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8001e3c:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001e3e:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001e42:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001e46:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001e4a:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8001e4e:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8001e50:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001e52:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001e54:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001e58:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8001e5c:	e017      	b.n	8001e8e <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8001e5e:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001e62:	d011      	beq.n	8001e88 <HAL_TIM_ConfigClockSource+0xca>
 8001e64:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001e68:	d1c7      	bne.n	8001dfa <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001e6a:	688a      	ldr	r2, [r1, #8]
 8001e6c:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8001e6e:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001e70:	68c9      	ldr	r1, [r1, #12]
 8001e72:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e74:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001e78:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001e7c:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001e7e:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001e80:	689a      	ldr	r2, [r3, #8]
 8001e82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e86:	e002      	b.n	8001e8e <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001e88:	689a      	ldr	r2, [r3, #8]
 8001e8a:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8001e8e:	609a      	str	r2, [r3, #8]
 8001e90:	e7b3      	b.n	8001dfa <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001e92:	688a      	ldr	r2, [r1, #8]
 8001e94:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8001e96:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001e98:	68c9      	ldr	r1, [r1, #12]
 8001e9a:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e9c:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001ea0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001ea4:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8001ea6:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8001ea8:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001eaa:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8001eae:	e7ee      	b.n	8001e8e <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001eb0:	684c      	ldr	r4, [r1, #4]
 8001eb2:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001eb4:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001eb6:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001eb8:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ebc:	f025 0501 	bic.w	r5, r5, #1
 8001ec0:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001ec2:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8001ec4:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001ec6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001eca:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001ece:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001ed0:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001ed2:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001ed4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001ed8:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8001edc:	e7d7      	b.n	8001e8e <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ede:	684c      	ldr	r4, [r1, #4]
 8001ee0:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001ee2:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ee4:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001ee6:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001eea:	f025 0501 	bic.w	r5, r5, #1
 8001eee:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001ef0:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8001ef2:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001ef4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001ef8:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001efc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001efe:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001f00:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001f02:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001f06:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8001f0a:	e7c0      	b.n	8001e8e <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001f0c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001f0e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001f12:	f042 0207 	orr.w	r2, r2, #7
 8001f16:	e7ba      	b.n	8001e8e <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001f18:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001f1a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001f1e:	f042 0217 	orr.w	r2, r2, #23
 8001f22:	e7b4      	b.n	8001e8e <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001f24:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001f26:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001f2a:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8001f2e:	e7ae      	b.n	8001e8e <HAL_TIM_ConfigClockSource+0xd0>

08001f30 <HAL_TIM_PeriodElapsedCallback>:
 8001f30:	4770      	bx	lr

08001f32 <HAL_TIM_OC_DelayElapsedCallback>:
 8001f32:	4770      	bx	lr

08001f34 <HAL_TIM_IC_CaptureCallback>:
 8001f34:	4770      	bx	lr

08001f36 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001f36:	4770      	bx	lr

08001f38 <HAL_TIM_TriggerCallback>:
 8001f38:	4770      	bx	lr

08001f3a <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f3a:	6803      	ldr	r3, [r0, #0]
{
 8001f3c:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f3e:	691a      	ldr	r2, [r3, #16]
{
 8001f40:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f42:	0791      	lsls	r1, r2, #30
 8001f44:	d50e      	bpl.n	8001f64 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001f46:	68da      	ldr	r2, [r3, #12]
 8001f48:	0792      	lsls	r2, r2, #30
 8001f4a:	d50b      	bpl.n	8001f64 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f4c:	f06f 0202 	mvn.w	r2, #2
 8001f50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f52:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f54:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f56:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f58:	079b      	lsls	r3, r3, #30
 8001f5a:	d077      	beq.n	800204c <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8001f5c:	f7ff ffea 	bl	8001f34 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f60:	2300      	movs	r3, #0
 8001f62:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f64:	6823      	ldr	r3, [r4, #0]
 8001f66:	691a      	ldr	r2, [r3, #16]
 8001f68:	0750      	lsls	r0, r2, #29
 8001f6a:	d510      	bpl.n	8001f8e <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001f6c:	68da      	ldr	r2, [r3, #12]
 8001f6e:	0751      	lsls	r1, r2, #29
 8001f70:	d50d      	bpl.n	8001f8e <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f72:	f06f 0204 	mvn.w	r2, #4
 8001f76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f78:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f7a:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f7c:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f7e:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8001f82:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f84:	d068      	beq.n	8002058 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8001f86:	f7ff ffd5 	bl	8001f34 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f8e:	6823      	ldr	r3, [r4, #0]
 8001f90:	691a      	ldr	r2, [r3, #16]
 8001f92:	0712      	lsls	r2, r2, #28
 8001f94:	d50f      	bpl.n	8001fb6 <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001f96:	68da      	ldr	r2, [r3, #12]
 8001f98:	0710      	lsls	r0, r2, #28
 8001f9a:	d50c      	bpl.n	8001fb6 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f9c:	f06f 0208 	mvn.w	r2, #8
 8001fa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fa2:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fa4:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fa6:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fa8:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8001faa:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fac:	d05a      	beq.n	8002064 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001fae:	f7ff ffc1 	bl	8001f34 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001fb6:	6823      	ldr	r3, [r4, #0]
 8001fb8:	691a      	ldr	r2, [r3, #16]
 8001fba:	06d2      	lsls	r2, r2, #27
 8001fbc:	d510      	bpl.n	8001fe0 <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001fbe:	68da      	ldr	r2, [r3, #12]
 8001fc0:	06d0      	lsls	r0, r2, #27
 8001fc2:	d50d      	bpl.n	8001fe0 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001fc4:	f06f 0210 	mvn.w	r2, #16
 8001fc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fca:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fcc:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fce:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fd0:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8001fd4:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fd6:	d04b      	beq.n	8002070 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8001fd8:	f7ff ffac 	bl	8001f34 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001fe0:	6823      	ldr	r3, [r4, #0]
 8001fe2:	691a      	ldr	r2, [r3, #16]
 8001fe4:	07d1      	lsls	r1, r2, #31
 8001fe6:	d508      	bpl.n	8001ffa <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001fe8:	68da      	ldr	r2, [r3, #12]
 8001fea:	07d2      	lsls	r2, r2, #31
 8001fec:	d505      	bpl.n	8001ffa <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001fee:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ff2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ff4:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ff6:	f7ff ff9b 	bl	8001f30 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ffa:	6823      	ldr	r3, [r4, #0]
 8001ffc:	691a      	ldr	r2, [r3, #16]
 8001ffe:	0610      	lsls	r0, r2, #24
 8002000:	d508      	bpl.n	8002014 <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002002:	68da      	ldr	r2, [r3, #12]
 8002004:	0611      	lsls	r1, r2, #24
 8002006:	d505      	bpl.n	8002014 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002008:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800200c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800200e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002010:	f000 f97d 	bl	800230e <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002014:	6823      	ldr	r3, [r4, #0]
 8002016:	691a      	ldr	r2, [r3, #16]
 8002018:	0652      	lsls	r2, r2, #25
 800201a:	d508      	bpl.n	800202e <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800201c:	68da      	ldr	r2, [r3, #12]
 800201e:	0650      	lsls	r0, r2, #25
 8002020:	d505      	bpl.n	800202e <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002022:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8002026:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002028:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800202a:	f7ff ff85 	bl	8001f38 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800202e:	6823      	ldr	r3, [r4, #0]
 8002030:	691a      	ldr	r2, [r3, #16]
 8002032:	0691      	lsls	r1, r2, #26
 8002034:	d522      	bpl.n	800207c <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002036:	68da      	ldr	r2, [r3, #12]
 8002038:	0692      	lsls	r2, r2, #26
 800203a:	d51f      	bpl.n	800207c <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800203c:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8002040:	4620      	mov	r0, r4
}
 8002042:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002046:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8002048:	f000 b960 	b.w	800230c <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800204c:	f7ff ff71 	bl	8001f32 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002050:	4620      	mov	r0, r4
 8002052:	f7ff ff70 	bl	8001f36 <HAL_TIM_PWM_PulseFinishedCallback>
 8002056:	e783      	b.n	8001f60 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002058:	f7ff ff6b 	bl	8001f32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800205c:	4620      	mov	r0, r4
 800205e:	f7ff ff6a 	bl	8001f36 <HAL_TIM_PWM_PulseFinishedCallback>
 8002062:	e792      	b.n	8001f8a <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002064:	f7ff ff65 	bl	8001f32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002068:	4620      	mov	r0, r4
 800206a:	f7ff ff64 	bl	8001f36 <HAL_TIM_PWM_PulseFinishedCallback>
 800206e:	e7a0      	b.n	8001fb2 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002070:	f7ff ff5f 	bl	8001f32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002074:	4620      	mov	r0, r4
 8002076:	f7ff ff5e 	bl	8001f36 <HAL_TIM_PWM_PulseFinishedCallback>
 800207a:	e7af      	b.n	8001fdc <HAL_TIM_IRQHandler+0xa2>
 800207c:	bd10      	pop	{r4, pc}
	...

08002080 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002080:	4a1e      	ldr	r2, [pc, #120]	; (80020fc <TIM_Base_SetConfig+0x7c>)
  tmpcr1 = TIMx->CR1;
 8002082:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002084:	4290      	cmp	r0, r2
 8002086:	d00e      	beq.n	80020a6 <TIM_Base_SetConfig+0x26>
 8002088:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800208c:	d00b      	beq.n	80020a6 <TIM_Base_SetConfig+0x26>
 800208e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002092:	4290      	cmp	r0, r2
 8002094:	d007      	beq.n	80020a6 <TIM_Base_SetConfig+0x26>
 8002096:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800209a:	4290      	cmp	r0, r2
 800209c:	d003      	beq.n	80020a6 <TIM_Base_SetConfig+0x26>
 800209e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80020a2:	4290      	cmp	r0, r2
 80020a4:	d119      	bne.n	80020da <TIM_Base_SetConfig+0x5a>
    tmpcr1 |= Structure->CounterMode;
 80020a6:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80020ac:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020ae:	4a13      	ldr	r2, [pc, #76]	; (80020fc <TIM_Base_SetConfig+0x7c>)
 80020b0:	4290      	cmp	r0, r2
 80020b2:	d00e      	beq.n	80020d2 <TIM_Base_SetConfig+0x52>
 80020b4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80020b8:	d00b      	beq.n	80020d2 <TIM_Base_SetConfig+0x52>
 80020ba:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80020be:	4290      	cmp	r0, r2
 80020c0:	d007      	beq.n	80020d2 <TIM_Base_SetConfig+0x52>
 80020c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80020c6:	4290      	cmp	r0, r2
 80020c8:	d003      	beq.n	80020d2 <TIM_Base_SetConfig+0x52>
 80020ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80020ce:	4290      	cmp	r0, r2
 80020d0:	d103      	bne.n	80020da <TIM_Base_SetConfig+0x5a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020d2:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80020d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020d8:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 80020da:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 80020dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 80020e0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80020e2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020e4:	688b      	ldr	r3, [r1, #8]
 80020e6:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80020e8:	680b      	ldr	r3, [r1, #0]
 80020ea:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020ec:	4b03      	ldr	r3, [pc, #12]	; (80020fc <TIM_Base_SetConfig+0x7c>)
 80020ee:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 80020f0:	bf04      	itt	eq
 80020f2:	690b      	ldreq	r3, [r1, #16]
 80020f4:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80020f6:	2301      	movs	r3, #1
 80020f8:	6143      	str	r3, [r0, #20]
 80020fa:	4770      	bx	lr
 80020fc:	40012c00 	.word	0x40012c00

08002100 <HAL_TIM_Base_Init>:
{
 8002100:	b510      	push	{r4, lr}
  if(htim == NULL)
 8002102:	4604      	mov	r4, r0
 8002104:	b1a0      	cbz	r0, 8002130 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002106:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800210a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800210e:	b91b      	cbnz	r3, 8002118 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002110:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002114:	f002 fdd6 	bl	8004cc4 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002118:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800211a:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 800211c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002120:	1d21      	adds	r1, r4, #4
 8002122:	f7ff ffad 	bl	8002080 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002126:	2301      	movs	r3, #1
  return HAL_OK;
 8002128:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 800212a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800212e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002130:	2001      	movs	r0, #1
}
 8002132:	bd10      	pop	{r4, pc}

08002134 <HAL_TIM_PWM_Init>:
{
 8002134:	b510      	push	{r4, lr}
  if(htim == NULL)
 8002136:	4604      	mov	r4, r0
 8002138:	b1a0      	cbz	r0, 8002164 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800213a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800213e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002142:	b91b      	cbnz	r3, 800214c <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002144:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8002148:	f7ff fe38 	bl	8001dbc <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 800214c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800214e:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8002150:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002154:	1d21      	adds	r1, r4, #4
 8002156:	f7ff ff93 	bl	8002080 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800215a:	2301      	movs	r3, #1
  return HAL_OK;
 800215c:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 800215e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002162:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002164:	2001      	movs	r0, #1
}
 8002166:	bd10      	pop	{r4, pc}

08002168 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002168:	6a03      	ldr	r3, [r0, #32]
{
 800216a:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800216c:	f023 0310 	bic.w	r3, r3, #16
 8002170:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002172:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8002174:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002176:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002178:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800217a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800217e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002182:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8002184:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002188:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800218c:	4d0b      	ldr	r5, [pc, #44]	; (80021bc <TIM_OC2_SetConfig+0x54>)
 800218e:	42a8      	cmp	r0, r5
 8002190:	d10d      	bne.n	80021ae <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002192:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8002194:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002198:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 800219c:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 800219e:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80021a0:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80021a4:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 80021a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80021aa:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 80021ae:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80021b0:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80021b2:	684a      	ldr	r2, [r1, #4]
 80021b4:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80021b6:	6203      	str	r3, [r0, #32]
 80021b8:	bd70      	pop	{r4, r5, r6, pc}
 80021ba:	bf00      	nop
 80021bc:	40012c00 	.word	0x40012c00

080021c0 <HAL_TIM_PWM_ConfigChannel>:
{
 80021c0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80021c2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80021c6:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	f04f 0002 	mov.w	r0, #2
 80021ce:	d025      	beq.n	800221c <HAL_TIM_PWM_ConfigChannel+0x5c>
 80021d0:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80021d2:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 80021d6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 80021da:	2a0c      	cmp	r2, #12
 80021dc:	d818      	bhi.n	8002210 <HAL_TIM_PWM_ConfigChannel+0x50>
 80021de:	e8df f002 	tbb	[pc, r2]
 80021e2:	1707      	.short	0x1707
 80021e4:	171e1717 	.word	0x171e1717
 80021e8:	172f1717 	.word	0x172f1717
 80021ec:	1717      	.short	0x1717
 80021ee:	40          	.byte	0x40
 80021ef:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80021f0:	6820      	ldr	r0, [r4, #0]
 80021f2:	f7ff fd6f 	bl	8001cd4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80021f6:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80021f8:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80021fa:	699a      	ldr	r2, [r3, #24]
 80021fc:	f042 0208 	orr.w	r2, r2, #8
 8002200:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002202:	699a      	ldr	r2, [r3, #24]
 8002204:	f022 0204 	bic.w	r2, r2, #4
 8002208:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800220a:	699a      	ldr	r2, [r3, #24]
 800220c:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 800220e:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8002210:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002212:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002214:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002218:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800221c:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800221e:	6820      	ldr	r0, [r4, #0]
 8002220:	f7ff ffa2 	bl	8002168 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002224:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8002226:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002228:	699a      	ldr	r2, [r3, #24]
 800222a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800222e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002230:	699a      	ldr	r2, [r3, #24]
 8002232:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002236:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8002238:	699a      	ldr	r2, [r3, #24]
 800223a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800223e:	e7e6      	b.n	800220e <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002240:	6820      	ldr	r0, [r4, #0]
 8002242:	f7ff fd6f 	bl	8001d24 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002246:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002248:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800224a:	69da      	ldr	r2, [r3, #28]
 800224c:	f042 0208 	orr.w	r2, r2, #8
 8002250:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002252:	69da      	ldr	r2, [r3, #28]
 8002254:	f022 0204 	bic.w	r2, r2, #4
 8002258:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800225a:	69da      	ldr	r2, [r3, #28]
 800225c:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 800225e:	61da      	str	r2, [r3, #28]
    break;
 8002260:	e7d6      	b.n	8002210 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002262:	6820      	ldr	r0, [r4, #0]
 8002264:	f7ff fd88 	bl	8001d78 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002268:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 800226a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800226c:	69da      	ldr	r2, [r3, #28]
 800226e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002272:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002274:	69da      	ldr	r2, [r3, #28]
 8002276:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800227a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 800227c:	69da      	ldr	r2, [r3, #28]
 800227e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002282:	e7ec      	b.n	800225e <HAL_TIM_PWM_ConfigChannel+0x9e>

08002284 <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002284:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8002286:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002288:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << Channel;
 800228a:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 800228c:	ea23 0304 	bic.w	r3, r3, r4
 8002290:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8002292:	6a03      	ldr	r3, [r0, #32]
 8002294:	408a      	lsls	r2, r1
 8002296:	431a      	orrs	r2, r3
 8002298:	6202      	str	r2, [r0, #32]
 800229a:	bd10      	pop	{r4, pc}

0800229c <HAL_TIM_PWM_Start>:
{
 800229c:	b510      	push	{r4, lr}
 800229e:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80022a0:	2201      	movs	r2, #1
 80022a2:	6800      	ldr	r0, [r0, #0]
 80022a4:	f7ff ffee 	bl	8002284 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80022a8:	6823      	ldr	r3, [r4, #0]
 80022aa:	4a06      	ldr	r2, [pc, #24]	; (80022c4 <HAL_TIM_PWM_Start+0x28>)
}
 80022ac:	2000      	movs	r0, #0
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80022ae:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 80022b0:	bf02      	ittt	eq
 80022b2:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 80022b4:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 80022b8:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	f042 0201 	orr.w	r2, r2, #1
 80022c0:	601a      	str	r2, [r3, #0]
}
 80022c2:	bd10      	pop	{r4, pc}
 80022c4:	40012c00 	.word	0x40012c00

080022c8 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 80022c8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80022cc:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	f04f 0302 	mov.w	r3, #2
 80022d4:	d018      	beq.n	8002308 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 80022d6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80022da:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80022dc:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80022de:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80022e0:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80022e2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80022e6:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80022e8:	685a      	ldr	r2, [r3, #4]
 80022ea:	4322      	orrs	r2, r4
 80022ec:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80022ee:	689a      	ldr	r2, [r3, #8]
 80022f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022f4:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80022f6:	689a      	ldr	r2, [r3, #8]
 80022f8:	430a      	orrs	r2, r1
 80022fa:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 80022fc:	2301      	movs	r3, #1
 80022fe:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002302:	2300      	movs	r3, #0
 8002304:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8002308:	4618      	mov	r0, r3

  return HAL_OK;
}
 800230a:	bd10      	pop	{r4, pc}

0800230c <HAL_TIMEx_CommutationCallback>:
 800230c:	4770      	bx	lr

0800230e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800230e:	4770      	bx	lr

08002310 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002310:	6803      	ldr	r3, [r0, #0]
 8002312:	68da      	ldr	r2, [r3, #12]
 8002314:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002318:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800231a:	695a      	ldr	r2, [r3, #20]
 800231c:	f022 0201 	bic.w	r2, r2, #1
 8002320:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002322:	2320      	movs	r3, #32
 8002324:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8002328:	4770      	bx	lr
	...

0800232c <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800232c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002330:	6805      	ldr	r5, [r0, #0]
 8002332:	68c2      	ldr	r2, [r0, #12]
 8002334:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002336:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002338:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800233c:	4313      	orrs	r3, r2
 800233e:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002340:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 8002342:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002344:	430b      	orrs	r3, r1
 8002346:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8002348:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 800234c:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002350:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8002352:	4313      	orrs	r3, r2
 8002354:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002356:	696b      	ldr	r3, [r5, #20]
 8002358:	6982      	ldr	r2, [r0, #24]
 800235a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800235e:	4313      	orrs	r3, r2
 8002360:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002362:	4b40      	ldr	r3, [pc, #256]	; (8002464 <UART_SetConfig+0x138>)
{
 8002364:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 8002366:	429d      	cmp	r5, r3
 8002368:	f04f 0419 	mov.w	r4, #25
 800236c:	d146      	bne.n	80023fc <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800236e:	f7ff fbe3 	bl	8001b38 <HAL_RCC_GetPCLK2Freq>
 8002372:	fb04 f300 	mul.w	r3, r4, r0
 8002376:	f8d9 6004 	ldr.w	r6, [r9, #4]
 800237a:	f04f 0864 	mov.w	r8, #100	; 0x64
 800237e:	00b6      	lsls	r6, r6, #2
 8002380:	fbb3 f3f6 	udiv	r3, r3, r6
 8002384:	fbb3 f3f8 	udiv	r3, r3, r8
 8002388:	011e      	lsls	r6, r3, #4
 800238a:	f7ff fbd5 	bl	8001b38 <HAL_RCC_GetPCLK2Freq>
 800238e:	4360      	muls	r0, r4
 8002390:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	fbb0 f7f3 	udiv	r7, r0, r3
 800239a:	f7ff fbcd 	bl	8001b38 <HAL_RCC_GetPCLK2Freq>
 800239e:	4360      	muls	r0, r4
 80023a0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80023aa:	fbb3 f3f8 	udiv	r3, r3, r8
 80023ae:	fb08 7313 	mls	r3, r8, r3, r7
 80023b2:	011b      	lsls	r3, r3, #4
 80023b4:	3332      	adds	r3, #50	; 0x32
 80023b6:	fbb3 f3f8 	udiv	r3, r3, r8
 80023ba:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 80023be:	f7ff fbbb 	bl	8001b38 <HAL_RCC_GetPCLK2Freq>
 80023c2:	4360      	muls	r0, r4
 80023c4:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80023c8:	0092      	lsls	r2, r2, #2
 80023ca:	fbb0 faf2 	udiv	sl, r0, r2
 80023ce:	f7ff fbb3 	bl	8001b38 <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80023d2:	4360      	muls	r0, r4
 80023d4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	fbb0 f3f3 	udiv	r3, r0, r3
 80023de:	fbb3 f3f8 	udiv	r3, r3, r8
 80023e2:	fb08 a313 	mls	r3, r8, r3, sl
 80023e6:	011b      	lsls	r3, r3, #4
 80023e8:	3332      	adds	r3, #50	; 0x32
 80023ea:	fbb3 f3f8 	udiv	r3, r3, r8
 80023ee:	f003 030f 	and.w	r3, r3, #15
 80023f2:	433b      	orrs	r3, r7
 80023f4:	4433      	add	r3, r6
 80023f6:	60ab      	str	r3, [r5, #8]
 80023f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80023fc:	f7ff fb8c 	bl	8001b18 <HAL_RCC_GetPCLK1Freq>
 8002400:	fb04 f300 	mul.w	r3, r4, r0
 8002404:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8002408:	f04f 0864 	mov.w	r8, #100	; 0x64
 800240c:	00b6      	lsls	r6, r6, #2
 800240e:	fbb3 f3f6 	udiv	r3, r3, r6
 8002412:	fbb3 f3f8 	udiv	r3, r3, r8
 8002416:	011e      	lsls	r6, r3, #4
 8002418:	f7ff fb7e 	bl	8001b18 <HAL_RCC_GetPCLK1Freq>
 800241c:	4360      	muls	r0, r4
 800241e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	fbb0 f7f3 	udiv	r7, r0, r3
 8002428:	f7ff fb76 	bl	8001b18 <HAL_RCC_GetPCLK1Freq>
 800242c:	4360      	muls	r0, r4
 800242e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	fbb0 f3f3 	udiv	r3, r0, r3
 8002438:	fbb3 f3f8 	udiv	r3, r3, r8
 800243c:	fb08 7313 	mls	r3, r8, r3, r7
 8002440:	011b      	lsls	r3, r3, #4
 8002442:	3332      	adds	r3, #50	; 0x32
 8002444:	fbb3 f3f8 	udiv	r3, r3, r8
 8002448:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 800244c:	f7ff fb64 	bl	8001b18 <HAL_RCC_GetPCLK1Freq>
 8002450:	4360      	muls	r0, r4
 8002452:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8002456:	0092      	lsls	r2, r2, #2
 8002458:	fbb0 faf2 	udiv	sl, r0, r2
 800245c:	f7ff fb5c 	bl	8001b18 <HAL_RCC_GetPCLK1Freq>
 8002460:	e7b7      	b.n	80023d2 <UART_SetConfig+0xa6>
 8002462:	bf00      	nop
 8002464:	40013800 	.word	0x40013800

08002468 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8002468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800246a:	4604      	mov	r4, r0
 800246c:	460e      	mov	r6, r1
 800246e:	4617      	mov	r7, r2
 8002470:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8002472:	6821      	ldr	r1, [r4, #0]
 8002474:	680b      	ldr	r3, [r1, #0]
 8002476:	ea36 0303 	bics.w	r3, r6, r3
 800247a:	d101      	bne.n	8002480 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 800247c:	2000      	movs	r0, #0
}
 800247e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8002480:	1c6b      	adds	r3, r5, #1
 8002482:	d0f7      	beq.n	8002474 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002484:	b995      	cbnz	r5, 80024ac <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002486:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8002488:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800248a:	68da      	ldr	r2, [r3, #12]
 800248c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002490:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002492:	695a      	ldr	r2, [r3, #20]
 8002494:	f022 0201 	bic.w	r2, r2, #1
 8002498:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 800249a:	2320      	movs	r3, #32
 800249c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80024a0:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 80024a4:	2300      	movs	r3, #0
 80024a6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 80024aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80024ac:	f7fe f89e 	bl	80005ec <HAL_GetTick>
 80024b0:	1bc0      	subs	r0, r0, r7
 80024b2:	4285      	cmp	r5, r0
 80024b4:	d2dd      	bcs.n	8002472 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 80024b6:	e7e6      	b.n	8002486 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

080024b8 <HAL_UART_Init>:
{
 80024b8:	b510      	push	{r4, lr}
  if(huart == NULL)
 80024ba:	4604      	mov	r4, r0
 80024bc:	b340      	cbz	r0, 8002510 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 80024be:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80024c2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80024c6:	b91b      	cbnz	r3, 80024d0 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80024c8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80024cc:	f002 fc52 	bl	8004d74 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80024d0:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80024d2:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80024d4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80024d8:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80024da:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80024dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80024e0:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80024e2:	f7ff ff23 	bl	800232c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024e6:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024e8:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024ea:	691a      	ldr	r2, [r3, #16]
 80024ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024f2:	695a      	ldr	r2, [r3, #20]
 80024f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024f8:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80024fa:	68da      	ldr	r2, [r3, #12]
 80024fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002500:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 8002502:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002504:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8002506:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800250a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800250e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002510:	2001      	movs	r0, #1
}
 8002512:	bd10      	pop	{r4, pc}

08002514 <HAL_UART_Transmit>:
{
 8002514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002518:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 800251a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 800251e:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_READY)
 8002520:	2b20      	cmp	r3, #32
{
 8002522:	460d      	mov	r5, r1
 8002524:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8002526:	d14e      	bne.n	80025c6 <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0U))
 8002528:	2900      	cmp	r1, #0
 800252a:	d049      	beq.n	80025c0 <HAL_UART_Transmit+0xac>
 800252c:	2a00      	cmp	r2, #0
 800252e:	d047      	beq.n	80025c0 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8002530:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002534:	2b01      	cmp	r3, #1
 8002536:	d046      	beq.n	80025c6 <HAL_UART_Transmit+0xb2>
 8002538:	2301      	movs	r3, #1
 800253a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800253e:	2300      	movs	r3, #0
 8002540:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002542:	2321      	movs	r3, #33	; 0x21
 8002544:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8002548:	f7fe f850 	bl	80005ec <HAL_GetTick>
 800254c:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 800254e:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8002552:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8002556:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002558:	b29b      	uxth	r3, r3
 800255a:	b96b      	cbnz	r3, 8002578 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800255c:	463b      	mov	r3, r7
 800255e:	4632      	mov	r2, r6
 8002560:	2140      	movs	r1, #64	; 0x40
 8002562:	4620      	mov	r0, r4
 8002564:	f7ff ff80 	bl	8002468 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002568:	b9a8      	cbnz	r0, 8002596 <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 800256a:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 800256c:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8002570:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8002574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8002578:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800257a:	4632      	mov	r2, r6
      huart->TxXferCount--;
 800257c:	3b01      	subs	r3, #1
 800257e:	b29b      	uxth	r3, r3
 8002580:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002582:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002584:	2180      	movs	r1, #128	; 0x80
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002586:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800258a:	4620      	mov	r0, r4
 800258c:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800258e:	d10e      	bne.n	80025ae <HAL_UART_Transmit+0x9a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002590:	f7ff ff6a 	bl	8002468 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002594:	b110      	cbz	r0, 800259c <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 8002596:	2003      	movs	r0, #3
 8002598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800259c:	882b      	ldrh	r3, [r5, #0]
 800259e:	6822      	ldr	r2, [r4, #0]
 80025a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025a4:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80025a6:	6923      	ldr	r3, [r4, #16]
 80025a8:	b943      	cbnz	r3, 80025bc <HAL_UART_Transmit+0xa8>
          pData +=2U;
 80025aa:	3502      	adds	r5, #2
 80025ac:	e7d3      	b.n	8002556 <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025ae:	f7ff ff5b 	bl	8002468 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80025b2:	2800      	cmp	r0, #0
 80025b4:	d1ef      	bne.n	8002596 <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80025b6:	6823      	ldr	r3, [r4, #0]
 80025b8:	782a      	ldrb	r2, [r5, #0]
 80025ba:	605a      	str	r2, [r3, #4]
 80025bc:	3501      	adds	r5, #1
 80025be:	e7ca      	b.n	8002556 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 80025c0:	2001      	movs	r0, #1
 80025c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80025c6:	2002      	movs	r0, #2
}
 80025c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080025cc <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 80025cc:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80025d0:	2b20      	cmp	r3, #32
 80025d2:	d120      	bne.n	8002616 <HAL_UART_Receive_IT+0x4a>
    if((pData == NULL) || (Size == 0U))
 80025d4:	b1e9      	cbz	r1, 8002612 <HAL_UART_Receive_IT+0x46>
 80025d6:	b1e2      	cbz	r2, 8002612 <HAL_UART_Receive_IT+0x46>
    __HAL_LOCK(huart);
 80025d8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d01a      	beq.n	8002616 <HAL_UART_Receive_IT+0x4a>
    huart->RxXferCount = Size;
 80025e0:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 80025e2:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025e4:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80025e6:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025e8:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80025ea:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80025ee:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 80025f0:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80025f2:	68d1      	ldr	r1, [r2, #12]
    __HAL_UNLOCK(huart);
 80025f4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80025f8:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80025fc:	60d1      	str	r1, [r2, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80025fe:	6951      	ldr	r1, [r2, #20]
    return HAL_OK;
 8002600:	4618      	mov	r0, r3
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002602:	f041 0101 	orr.w	r1, r1, #1
 8002606:	6151      	str	r1, [r2, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002608:	68d1      	ldr	r1, [r2, #12]
 800260a:	f041 0120 	orr.w	r1, r1, #32
 800260e:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 8002610:	4770      	bx	lr
      return HAL_ERROR;
 8002612:	2001      	movs	r0, #1
 8002614:	4770      	bx	lr
    return HAL_BUSY;
 8002616:	2002      	movs	r0, #2
}
 8002618:	4770      	bx	lr
	...

0800261c <HAL_UART_Transmit_DMA>:
{
 800261c:	b538      	push	{r3, r4, r5, lr}
 800261e:	4604      	mov	r4, r0
 8002620:	4613      	mov	r3, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8002622:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8002626:	2a20      	cmp	r2, #32
 8002628:	d12a      	bne.n	8002680 <HAL_UART_Transmit_DMA+0x64>
    if((pData == NULL) || (Size == 0U))
 800262a:	b339      	cbz	r1, 800267c <HAL_UART_Transmit_DMA+0x60>
 800262c:	b333      	cbz	r3, 800267c <HAL_UART_Transmit_DMA+0x60>
    __HAL_LOCK(huart);
 800262e:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8002632:	2a01      	cmp	r2, #1
 8002634:	d024      	beq.n	8002680 <HAL_UART_Transmit_DMA+0x64>
 8002636:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002638:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 800263a:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800263e:	2221      	movs	r2, #33	; 0x21
    huart->TxXferCount = Size;
 8002640:	84e3      	strh	r3, [r4, #38]	; 0x26
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002642:	6b20      	ldr	r0, [r4, #48]	; 0x30
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002644:	63e5      	str	r5, [r4, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002646:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800264a:	4a0e      	ldr	r2, [pc, #56]	; (8002684 <HAL_UART_Transmit_DMA+0x68>)
    huart->TxXferSize = Size;
 800264c:	84a3      	strh	r3, [r4, #36]	; 0x24
    huart->pTxBuffPtr = pData;
 800264e:	6221      	str	r1, [r4, #32]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002650:	6282      	str	r2, [r0, #40]	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002652:	4a0d      	ldr	r2, [pc, #52]	; (8002688 <HAL_UART_Transmit_DMA+0x6c>)
    huart->hdmatx->XferAbortCallback = NULL;
 8002654:	6345      	str	r5, [r0, #52]	; 0x34
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002656:	62c2      	str	r2, [r0, #44]	; 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002658:	4a0c      	ldr	r2, [pc, #48]	; (800268c <HAL_UART_Transmit_DMA+0x70>)
 800265a:	6302      	str	r2, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 800265c:	6822      	ldr	r2, [r4, #0]
 800265e:	3204      	adds	r2, #4
 8002660:	f7fe fbc0 	bl	8000de4 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8002664:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002668:	6823      	ldr	r3, [r4, #0]
    return HAL_OK;
 800266a:	4628      	mov	r0, r5
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800266c:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800266e:	695a      	ldr	r2, [r3, #20]
    __HAL_UNLOCK(huart);
 8002670:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002674:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002678:	615a      	str	r2, [r3, #20]
    return HAL_OK;
 800267a:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 800267c:	2001      	movs	r0, #1
 800267e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 8002680:	2002      	movs	r0, #2
}
 8002682:	bd38      	pop	{r3, r4, r5, pc}
 8002684:	08002693 	.word	0x08002693
 8002688:	080026c1 	.word	0x080026c1
 800268c:	08002749 	.word	0x08002749

08002690 <HAL_UART_TxCpltCallback>:
 8002690:	4770      	bx	lr

08002692 <UART_DMATransmitCplt>:
{
 8002692:	b508      	push	{r3, lr}
  if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002694:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002696:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f013 0320 	ands.w	r3, r3, #32
 800269e:	d10a      	bne.n	80026b6 <UART_DMATransmitCplt+0x24>
    huart->TxXferCount = 0U;
 80026a0:	84d3      	strh	r3, [r2, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80026a2:	6813      	ldr	r3, [r2, #0]
 80026a4:	695a      	ldr	r2, [r3, #20]
 80026a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026aa:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80026ac:	68da      	ldr	r2, [r3, #12]
 80026ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026b2:	60da      	str	r2, [r3, #12]
 80026b4:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 80026b6:	4610      	mov	r0, r2
 80026b8:	f7ff ffea 	bl	8002690 <HAL_UART_TxCpltCallback>
 80026bc:	bd08      	pop	{r3, pc}

080026be <HAL_UART_TxHalfCpltCallback>:
 80026be:	4770      	bx	lr

080026c0 <UART_DMATxHalfCplt>:
{
 80026c0:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 80026c2:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80026c4:	f7ff fffb 	bl	80026be <HAL_UART_TxHalfCpltCallback>
 80026c8:	bd08      	pop	{r3, pc}

080026ca <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 80026ca:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 80026ce:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 80026d0:	2b22      	cmp	r3, #34	; 0x22
 80026d2:	d136      	bne.n	8002742 <UART_Receive_IT+0x78>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80026d4:	6883      	ldr	r3, [r0, #8]
 80026d6:	6901      	ldr	r1, [r0, #16]
 80026d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026dc:	6802      	ldr	r2, [r0, #0]
 80026de:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80026e0:	d123      	bne.n	800272a <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80026e2:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80026e4:	b9e9      	cbnz	r1, 8002722 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80026e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026ea:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 80026ee:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 80026f0:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 80026f2:	3c01      	subs	r4, #1
 80026f4:	b2a4      	uxth	r4, r4
 80026f6:	85c4      	strh	r4, [r0, #46]	; 0x2e
 80026f8:	b98c      	cbnz	r4, 800271e <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80026fa:	6803      	ldr	r3, [r0, #0]
 80026fc:	68da      	ldr	r2, [r3, #12]
 80026fe:	f022 0220 	bic.w	r2, r2, #32
 8002702:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002704:	68da      	ldr	r2, [r3, #12]
 8002706:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800270a:	60da      	str	r2, [r3, #12]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800270c:	695a      	ldr	r2, [r3, #20]
 800270e:	f022 0201 	bic.w	r2, r2, #1
 8002712:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002714:	2320      	movs	r3, #32
 8002716:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 800271a:	f002 f825 	bl	8004768 <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 800271e:	2000      	movs	r0, #0
}
 8002720:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002722:	b2d2      	uxtb	r2, r2
 8002724:	f823 2b01 	strh.w	r2, [r3], #1
 8002728:	e7e1      	b.n	80026ee <UART_Receive_IT+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 800272a:	b921      	cbnz	r1, 8002736 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800272c:	1c59      	adds	r1, r3, #1
 800272e:	6852      	ldr	r2, [r2, #4]
 8002730:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002732:	701a      	strb	r2, [r3, #0]
 8002734:	e7dc      	b.n	80026f0 <UART_Receive_IT+0x26>
 8002736:	6852      	ldr	r2, [r2, #4]
 8002738:	1c59      	adds	r1, r3, #1
 800273a:	6281      	str	r1, [r0, #40]	; 0x28
 800273c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002740:	e7f7      	b.n	8002732 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8002742:	2002      	movs	r0, #2
 8002744:	bd10      	pop	{r4, pc}

08002746 <HAL_UART_ErrorCallback>:
 8002746:	4770      	bx	lr

08002748 <UART_DMAError>:
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002748:	6a41      	ldr	r1, [r0, #36]	; 0x24
{
 800274a:	b508      	push	{r3, lr}
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800274c:	680b      	ldr	r3, [r1, #0]
 800274e:	695a      	ldr	r2, [r3, #20]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002750:	f891 0039 	ldrb.w	r0, [r1, #57]	; 0x39
 8002754:	2821      	cmp	r0, #33	; 0x21
 8002756:	d10a      	bne.n	800276e <UART_DMAError+0x26>
 8002758:	0612      	lsls	r2, r2, #24
 800275a:	d508      	bpl.n	800276e <UART_DMAError+0x26>
    huart->TxXferCount = 0U;
 800275c:	2200      	movs	r2, #0
 800275e:	84ca      	strh	r2, [r1, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002760:	68da      	ldr	r2, [r3, #12]
 8002762:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002766:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002768:	2220      	movs	r2, #32
 800276a:	f881 2039 	strb.w	r2, [r1, #57]	; 0x39
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 800276e:	695b      	ldr	r3, [r3, #20]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002770:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
 8002774:	2a22      	cmp	r2, #34	; 0x22
 8002776:	d106      	bne.n	8002786 <UART_DMAError+0x3e>
 8002778:	065b      	lsls	r3, r3, #25
 800277a:	d504      	bpl.n	8002786 <UART_DMAError+0x3e>
    huart->RxXferCount = 0U;
 800277c:	2300      	movs	r3, #0
    UART_EndRxTransfer(huart);
 800277e:	4608      	mov	r0, r1
    huart->RxXferCount = 0U;
 8002780:	85cb      	strh	r3, [r1, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002782:	f7ff fdc5 	bl	8002310 <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002786:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8002788:	4608      	mov	r0, r1
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800278a:	f043 0310 	orr.w	r3, r3, #16
 800278e:	63cb      	str	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8002790:	f7ff ffd9 	bl	8002746 <HAL_UART_ErrorCallback>
 8002794:	bd08      	pop	{r3, pc}
	...

08002798 <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002798:	6803      	ldr	r3, [r0, #0]
{
 800279a:	b570      	push	{r4, r5, r6, lr}
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800279c:	681a      	ldr	r2, [r3, #0]
{
 800279e:	4604      	mov	r4, r0
  if(errorflags == RESET)
 80027a0:	0716      	lsls	r6, r2, #28
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80027a2:	68d9      	ldr	r1, [r3, #12]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80027a4:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 80027a6:	d107      	bne.n	80027b8 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80027a8:	0696      	lsls	r6, r2, #26
 80027aa:	d55a      	bpl.n	8002862 <HAL_UART_IRQHandler+0xca>
 80027ac:	068d      	lsls	r5, r1, #26
 80027ae:	d558      	bpl.n	8002862 <HAL_UART_IRQHandler+0xca>
}
 80027b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 80027b4:	f7ff bf89 	b.w	80026ca <UART_Receive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80027b8:	f015 0501 	ands.w	r5, r5, #1
 80027bc:	d102      	bne.n	80027c4 <HAL_UART_IRQHandler+0x2c>
 80027be:	f411 7f90 	tst.w	r1, #288	; 0x120
 80027c2:	d04e      	beq.n	8002862 <HAL_UART_IRQHandler+0xca>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80027c4:	07d3      	lsls	r3, r2, #31
 80027c6:	d505      	bpl.n	80027d4 <HAL_UART_IRQHandler+0x3c>
 80027c8:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80027ca:	bf42      	ittt	mi
 80027cc:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 80027ce:	f043 0301 	orrmi.w	r3, r3, #1
 80027d2:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80027d4:	0750      	lsls	r0, r2, #29
 80027d6:	d504      	bpl.n	80027e2 <HAL_UART_IRQHandler+0x4a>
 80027d8:	b11d      	cbz	r5, 80027e2 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80027da:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80027dc:	f043 0302 	orr.w	r3, r3, #2
 80027e0:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80027e2:	0793      	lsls	r3, r2, #30
 80027e4:	d504      	bpl.n	80027f0 <HAL_UART_IRQHandler+0x58>
 80027e6:	b11d      	cbz	r5, 80027f0 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80027e8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80027ea:	f043 0304 	orr.w	r3, r3, #4
 80027ee:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80027f0:	0716      	lsls	r6, r2, #28
 80027f2:	d504      	bpl.n	80027fe <HAL_UART_IRQHandler+0x66>
 80027f4:	b11d      	cbz	r5, 80027fe <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80027f6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80027f8:	f043 0308 	orr.w	r3, r3, #8
 80027fc:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80027fe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002800:	2b00      	cmp	r3, #0
 8002802:	d066      	beq.n	80028d2 <HAL_UART_IRQHandler+0x13a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002804:	0695      	lsls	r5, r2, #26
 8002806:	d504      	bpl.n	8002812 <HAL_UART_IRQHandler+0x7a>
 8002808:	0688      	lsls	r0, r1, #26
 800280a:	d502      	bpl.n	8002812 <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 800280c:	4620      	mov	r0, r4
 800280e:	f7ff ff5c 	bl	80026ca <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002812:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 8002814:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002816:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002818:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800281a:	0711      	lsls	r1, r2, #28
 800281c:	d402      	bmi.n	8002824 <HAL_UART_IRQHandler+0x8c>
 800281e:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8002822:	d01a      	beq.n	800285a <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8002824:	f7ff fd74 	bl	8002310 <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002828:	6823      	ldr	r3, [r4, #0]
 800282a:	695a      	ldr	r2, [r3, #20]
 800282c:	0652      	lsls	r2, r2, #25
 800282e:	d510      	bpl.n	8002852 <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002830:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8002832:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002834:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002838:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 800283a:	b150      	cbz	r0, 8002852 <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800283c:	4b25      	ldr	r3, [pc, #148]	; (80028d4 <HAL_UART_IRQHandler+0x13c>)
 800283e:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002840:	f7fe fb0e 	bl	8000e60 <HAL_DMA_Abort_IT>
 8002844:	2800      	cmp	r0, #0
 8002846:	d044      	beq.n	80028d2 <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002848:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 800284a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800284e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002850:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8002852:	4620      	mov	r0, r4
 8002854:	f7ff ff77 	bl	8002746 <HAL_UART_ErrorCallback>
 8002858:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 800285a:	f7ff ff74 	bl	8002746 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800285e:	63e5      	str	r5, [r4, #60]	; 0x3c
 8002860:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002862:	0616      	lsls	r6, r2, #24
 8002864:	d527      	bpl.n	80028b6 <HAL_UART_IRQHandler+0x11e>
 8002866:	060d      	lsls	r5, r1, #24
 8002868:	d525      	bpl.n	80028b6 <HAL_UART_IRQHandler+0x11e>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 800286a:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 800286e:	2a21      	cmp	r2, #33	; 0x21
 8002870:	d12f      	bne.n	80028d2 <HAL_UART_IRQHandler+0x13a>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002872:	68a2      	ldr	r2, [r4, #8]
 8002874:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002878:	6a22      	ldr	r2, [r4, #32]
 800287a:	d117      	bne.n	80028ac <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800287c:	8811      	ldrh	r1, [r2, #0]
 800287e:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002882:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002884:	6921      	ldr	r1, [r4, #16]
 8002886:	b979      	cbnz	r1, 80028a8 <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 8002888:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 800288a:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 800288c:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800288e:	3a01      	subs	r2, #1
 8002890:	b292      	uxth	r2, r2
 8002892:	84e2      	strh	r2, [r4, #38]	; 0x26
 8002894:	b9ea      	cbnz	r2, 80028d2 <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002896:	68da      	ldr	r2, [r3, #12]
 8002898:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800289c:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800289e:	68da      	ldr	r2, [r3, #12]
 80028a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028a4:	60da      	str	r2, [r3, #12]
 80028a6:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 80028a8:	3201      	adds	r2, #1
 80028aa:	e7ee      	b.n	800288a <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80028ac:	1c51      	adds	r1, r2, #1
 80028ae:	6221      	str	r1, [r4, #32]
 80028b0:	7812      	ldrb	r2, [r2, #0]
 80028b2:	605a      	str	r2, [r3, #4]
 80028b4:	e7ea      	b.n	800288c <HAL_UART_IRQHandler+0xf4>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80028b6:	0650      	lsls	r0, r2, #25
 80028b8:	d50b      	bpl.n	80028d2 <HAL_UART_IRQHandler+0x13a>
 80028ba:	064a      	lsls	r2, r1, #25
 80028bc:	d509      	bpl.n	80028d2 <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80028be:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 80028c0:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80028c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028c6:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80028c8:	2320      	movs	r3, #32
 80028ca:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80028ce:	f7ff fedf 	bl	8002690 <HAL_UART_TxCpltCallback>
 80028d2:	bd70      	pop	{r4, r5, r6, pc}
 80028d4:	080028d9 	.word	0x080028d9

080028d8 <UART_DMAAbortOnError>:
{
 80028d8:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 80028da:	2300      	movs	r3, #0
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80028dc:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 80028de:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80028e0:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80028e2:	f7ff ff30 	bl	8002746 <HAL_UART_ErrorCallback>
 80028e6:	bd08      	pop	{r3, pc}

080028e8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80028e8:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80028ea:	f000 fe75 	bl	80035d8 <vTaskStartScheduler>
  
  return osOK;
}
 80028ee:	2000      	movs	r0, #0
 80028f0:	bd08      	pop	{r3, pc}

080028f2 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 80028f2:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80028f4:	f001 f902 	bl	8003afc <xTaskGetSchedulerState>
 80028f8:	2801      	cmp	r0, #1
 80028fa:	d003      	beq.n	8002904 <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 80028fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8002900:	f000 b8e8 	b.w	8002ad4 <xPortSysTickHandler>
 8002904:	bd08      	pop	{r3, pc}

08002906 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002906:	f100 0308 	add.w	r3, r0, #8
 800290a:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800290c:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002910:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002912:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002914:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002916:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002918:	6003      	str	r3, [r0, #0]
 800291a:	4770      	bx	lr

0800291c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800291c:	2300      	movs	r3, #0
 800291e:	6103      	str	r3, [r0, #16]
 8002920:	4770      	bx	lr

08002922 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8002922:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002924:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8002926:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002928:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800292a:	689a      	ldr	r2, [r3, #8]
 800292c:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800292e:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8002930:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002932:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8002934:	3301      	adds	r3, #1
 8002936:	6003      	str	r3, [r0, #0]
 8002938:	4770      	bx	lr

0800293a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800293a:	680a      	ldr	r2, [r1, #0]
{
 800293c:	b530      	push	{r4, r5, lr}
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800293e:	1c53      	adds	r3, r2, #1
 8002940:	d10a      	bne.n	8002958 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002942:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002944:	685a      	ldr	r2, [r3, #4]
 8002946:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002948:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800294a:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800294c:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800294e:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002950:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8002952:	3301      	adds	r3, #1
 8002954:	6003      	str	r3, [r0, #0]
 8002956:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002958:	f100 0308 	add.w	r3, r0, #8
 800295c:	685c      	ldr	r4, [r3, #4]
 800295e:	6825      	ldr	r5, [r4, #0]
 8002960:	42aa      	cmp	r2, r5
 8002962:	d3ef      	bcc.n	8002944 <vListInsert+0xa>
 8002964:	4623      	mov	r3, r4
 8002966:	e7f9      	b.n	800295c <vListInsert+0x22>

08002968 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002968:	6841      	ldr	r1, [r0, #4]
 800296a:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800296c:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800296e:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002970:	6882      	ldr	r2, [r0, #8]
 8002972:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002974:	6859      	ldr	r1, [r3, #4]
 8002976:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002978:	bf08      	it	eq
 800297a:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800297c:	2200      	movs	r2, #0
 800297e:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8002980:	6818      	ldr	r0, [r3, #0]
 8002982:	3801      	subs	r0, #1
 8002984:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8002986:	4770      	bx	lr

08002988 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002988:	4b0a      	ldr	r3, [pc, #40]	; (80029b4 <prvTaskExitError+0x2c>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	3301      	adds	r3, #1
 800298e:	d008      	beq.n	80029a2 <prvTaskExitError+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002994:	f383 8811 	msr	BASEPRI, r3
 8002998:	f3bf 8f6f 	isb	sy
 800299c:	f3bf 8f4f 	dsb	sy
 80029a0:	e7fe      	b.n	80029a0 <prvTaskExitError+0x18>
 80029a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029a6:	f383 8811 	msr	BASEPRI, r3
 80029aa:	f3bf 8f6f 	isb	sy
 80029ae:	f3bf 8f4f 	dsb	sy
 80029b2:	e7fe      	b.n	80029b2 <prvTaskExitError+0x2a>
 80029b4:	20000008 	.word	0x20000008

080029b8 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80029b8:	4806      	ldr	r0, [pc, #24]	; (80029d4 <prvPortStartFirstTask+0x1c>)
 80029ba:	6800      	ldr	r0, [r0, #0]
 80029bc:	6800      	ldr	r0, [r0, #0]
 80029be:	f380 8808 	msr	MSP, r0
 80029c2:	b662      	cpsie	i
 80029c4:	b661      	cpsie	f
 80029c6:	f3bf 8f4f 	dsb	sy
 80029ca:	f3bf 8f6f 	isb	sy
 80029ce:	df00      	svc	0
 80029d0:	bf00      	nop
 80029d2:	0000      	.short	0x0000
 80029d4:	e000ed08 	.word	0xe000ed08

080029d8 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80029d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029dc:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80029e0:	4b05      	ldr	r3, [pc, #20]	; (80029f8 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80029e2:	f021 0101 	bic.w	r1, r1, #1
 80029e6:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80029ea:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80029ee:	f840 2c20 	str.w	r2, [r0, #-32]
}
 80029f2:	3840      	subs	r0, #64	; 0x40
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	08002989 	.word	0x08002989
 80029fc:	00000000 	.word	0x00000000

08002a00 <SVC_Handler>:
	__asm volatile (
 8002a00:	4b07      	ldr	r3, [pc, #28]	; (8002a20 <pxCurrentTCBConst2>)
 8002a02:	6819      	ldr	r1, [r3, #0]
 8002a04:	6808      	ldr	r0, [r1, #0]
 8002a06:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002a0a:	f380 8809 	msr	PSP, r0
 8002a0e:	f3bf 8f6f 	isb	sy
 8002a12:	f04f 0000 	mov.w	r0, #0
 8002a16:	f380 8811 	msr	BASEPRI, r0
 8002a1a:	f04e 0e0d 	orr.w	lr, lr, #13
 8002a1e:	4770      	bx	lr

08002a20 <pxCurrentTCBConst2>:
 8002a20:	20005084 	.word	0x20005084

08002a24 <vPortEnterCritical>:
 8002a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a28:	f383 8811 	msr	BASEPRI, r3
 8002a2c:	f3bf 8f6f 	isb	sy
 8002a30:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002a34:	4a0a      	ldr	r2, [pc, #40]	; (8002a60 <vPortEnterCritical+0x3c>)
 8002a36:	6813      	ldr	r3, [r2, #0]
 8002a38:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002a3a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8002a3c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8002a3e:	d10d      	bne.n	8002a5c <vPortEnterCritical+0x38>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002a40:	4b08      	ldr	r3, [pc, #32]	; (8002a64 <vPortEnterCritical+0x40>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f013 0fff 	tst.w	r3, #255	; 0xff
 8002a48:	d008      	beq.n	8002a5c <vPortEnterCritical+0x38>
 8002a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a4e:	f383 8811 	msr	BASEPRI, r3
 8002a52:	f3bf 8f6f 	isb	sy
 8002a56:	f3bf 8f4f 	dsb	sy
 8002a5a:	e7fe      	b.n	8002a5a <vPortEnterCritical+0x36>
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	20000008 	.word	0x20000008
 8002a64:	e000ed04 	.word	0xe000ed04

08002a68 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8002a68:	4a08      	ldr	r2, [pc, #32]	; (8002a8c <vPortExitCritical+0x24>)
 8002a6a:	6813      	ldr	r3, [r2, #0]
 8002a6c:	b943      	cbnz	r3, 8002a80 <vPortExitCritical+0x18>
 8002a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a72:	f383 8811 	msr	BASEPRI, r3
 8002a76:	f3bf 8f6f 	isb	sy
 8002a7a:	f3bf 8f4f 	dsb	sy
 8002a7e:	e7fe      	b.n	8002a7e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8002a80:	3b01      	subs	r3, #1
 8002a82:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002a84:	b90b      	cbnz	r3, 8002a8a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002a86:	f383 8811 	msr	BASEPRI, r3
 8002a8a:	4770      	bx	lr
 8002a8c:	20000008 	.word	0x20000008

08002a90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002a90:	f3ef 8009 	mrs	r0, PSP
 8002a94:	f3bf 8f6f 	isb	sy
 8002a98:	4b0d      	ldr	r3, [pc, #52]	; (8002ad0 <pxCurrentTCBConst>)
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002aa0:	6010      	str	r0, [r2, #0]
 8002aa2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8002aa6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002aaa:	f380 8811 	msr	BASEPRI, r0
 8002aae:	f000 ff3f 	bl	8003930 <vTaskSwitchContext>
 8002ab2:	f04f 0000 	mov.w	r0, #0
 8002ab6:	f380 8811 	msr	BASEPRI, r0
 8002aba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002abe:	6819      	ldr	r1, [r3, #0]
 8002ac0:	6808      	ldr	r0, [r1, #0]
 8002ac2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002ac6:	f380 8809 	msr	PSP, r0
 8002aca:	f3bf 8f6f 	isb	sy
 8002ace:	4770      	bx	lr

08002ad0 <pxCurrentTCBConst>:
 8002ad0:	20005084 	.word	0x20005084

08002ad4 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002ad4:	b508      	push	{r3, lr}
	__asm volatile
 8002ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ada:	f383 8811 	msr	BASEPRI, r3
 8002ade:	f3bf 8f6f 	isb	sy
 8002ae2:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002ae6:	f000 fdbb 	bl	8003660 <xTaskIncrementTick>
 8002aea:	b118      	cbz	r0, 8002af4 <xPortSysTickHandler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002aec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002af0:	4b02      	ldr	r3, [pc, #8]	; (8002afc <xPortSysTickHandler+0x28>)
 8002af2:	601a      	str	r2, [r3, #0]
	__asm volatile
 8002af4:	2300      	movs	r3, #0
 8002af6:	f383 8811 	msr	BASEPRI, r3
 8002afa:	bd08      	pop	{r3, pc}
 8002afc:	e000ed04 	.word	0xe000ed04

08002b00 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002b00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002b04:	4b05      	ldr	r3, [pc, #20]	; (8002b1c <vPortSetupTimerInterrupt+0x1c>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	fbb3 f3f2 	udiv	r3, r3, r2
 8002b0c:	4a04      	ldr	r2, [pc, #16]	; (8002b20 <vPortSetupTimerInterrupt+0x20>)
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002b12:	2207      	movs	r2, #7
 8002b14:	4b03      	ldr	r3, [pc, #12]	; (8002b24 <vPortSetupTimerInterrupt+0x24>)
 8002b16:	601a      	str	r2, [r3, #0]
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	20000050 	.word	0x20000050
 8002b20:	e000e014 	.word	0xe000e014
 8002b24:	e000e010 	.word	0xe000e010

08002b28 <xPortStartScheduler>:
{
 8002b28:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002b2a:	4b1f      	ldr	r3, [pc, #124]	; (8002ba8 <xPortStartScheduler+0x80>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002b2c:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002b2e:	781a      	ldrb	r2, [r3, #0]
 8002b30:	b2d2      	uxtb	r2, r2
 8002b32:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002b34:	22ff      	movs	r2, #255	; 0xff
 8002b36:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002b38:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002b3a:	4a1c      	ldr	r2, [pc, #112]	; (8002bac <xPortStartScheduler+0x84>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002b42:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002b46:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002b4a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002b4c:	2207      	movs	r2, #7
 8002b4e:	4b18      	ldr	r3, [pc, #96]	; (8002bb0 <xPortStartScheduler+0x88>)
 8002b50:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002b52:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8002b56:	1e54      	subs	r4, r2, #1
 8002b58:	0600      	lsls	r0, r0, #24
 8002b5a:	d41c      	bmi.n	8002b96 <xPortStartScheduler+0x6e>
 8002b5c:	b101      	cbz	r1, 8002b60 <xPortStartScheduler+0x38>
 8002b5e:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002b64:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8002b68:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002b6a:	9b01      	ldr	r3, [sp, #4]
 8002b6c:	4a0e      	ldr	r2, [pc, #56]	; (8002ba8 <xPortStartScheduler+0x80>)
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002b72:	4b10      	ldr	r3, [pc, #64]	; (8002bb4 <xPortStartScheduler+0x8c>)
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8002b7a:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8002b82:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8002b84:	f7ff ffbc 	bl	8002b00 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8002b88:	2200      	movs	r2, #0
 8002b8a:	4b0b      	ldr	r3, [pc, #44]	; (8002bb8 <xPortStartScheduler+0x90>)
 8002b8c:	601a      	str	r2, [r3, #0]
	prvPortStartFirstTask();
 8002b8e:	f7ff ff13 	bl	80029b8 <prvPortStartFirstTask>
	prvTaskExitError();
 8002b92:	f7ff fef9 	bl	8002988 <prvTaskExitError>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002b96:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8002b9a:	2101      	movs	r1, #1
 8002b9c:	0052      	lsls	r2, r2, #1
 8002b9e:	b2d2      	uxtb	r2, r2
 8002ba0:	f88d 2003 	strb.w	r2, [sp, #3]
 8002ba4:	4622      	mov	r2, r4
 8002ba6:	e7d4      	b.n	8002b52 <xPortStartScheduler+0x2a>
 8002ba8:	e000e400 	.word	0xe000e400
 8002bac:	20000244 	.word	0x20000244
 8002bb0:	20000248 	.word	0x20000248
 8002bb4:	e000ed20 	.word	0xe000ed20
 8002bb8:	20000008 	.word	0x20000008

08002bbc <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8002bbc:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002bc0:	2b0f      	cmp	r3, #15
 8002bc2:	d90e      	bls.n	8002be2 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002bc4:	4a10      	ldr	r2, [pc, #64]	; (8002c08 <vPortValidateInterruptPriority+0x4c>)
 8002bc6:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002bc8:	4a10      	ldr	r2, [pc, #64]	; (8002c0c <vPortValidateInterruptPriority+0x50>)
 8002bca:	7812      	ldrb	r2, [r2, #0]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d908      	bls.n	8002be2 <vPortValidateInterruptPriority+0x26>
	__asm volatile
 8002bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bd4:	f383 8811 	msr	BASEPRI, r3
 8002bd8:	f3bf 8f6f 	isb	sy
 8002bdc:	f3bf 8f4f 	dsb	sy
 8002be0:	e7fe      	b.n	8002be0 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002be2:	4b0b      	ldr	r3, [pc, #44]	; (8002c10 <vPortValidateInterruptPriority+0x54>)
 8002be4:	4a0b      	ldr	r2, [pc, #44]	; (8002c14 <vPortValidateInterruptPriority+0x58>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	6812      	ldr	r2, [r2, #0]
 8002bea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d908      	bls.n	8002c04 <vPortValidateInterruptPriority+0x48>
 8002bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bf6:	f383 8811 	msr	BASEPRI, r3
 8002bfa:	f3bf 8f6f 	isb	sy
 8002bfe:	f3bf 8f4f 	dsb	sy
 8002c02:	e7fe      	b.n	8002c02 <vPortValidateInterruptPriority+0x46>
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	e000e3f0 	.word	0xe000e3f0
 8002c0c:	20000244 	.word	0x20000244
 8002c10:	e000ed0c 	.word	0xe000ed0c
 8002c14:	20000248 	.word	0x20000248

08002c18 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002c18:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002c1a:	4b0f      	ldr	r3, [pc, #60]	; (8002c58 <prvInsertBlockIntoFreeList+0x40>)
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	4282      	cmp	r2, r0
 8002c20:	d318      	bcc.n	8002c54 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002c22:	685c      	ldr	r4, [r3, #4]
 8002c24:	1919      	adds	r1, r3, r4
 8002c26:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002c28:	bf01      	itttt	eq
 8002c2a:	6841      	ldreq	r1, [r0, #4]
 8002c2c:	4618      	moveq	r0, r3
 8002c2e:	1909      	addeq	r1, r1, r4
 8002c30:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002c32:	6844      	ldr	r4, [r0, #4]
 8002c34:	1901      	adds	r1, r0, r4
 8002c36:	428a      	cmp	r2, r1
 8002c38:	d107      	bne.n	8002c4a <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002c3a:	4908      	ldr	r1, [pc, #32]	; (8002c5c <prvInsertBlockIntoFreeList+0x44>)
 8002c3c:	6809      	ldr	r1, [r1, #0]
 8002c3e:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002c40:	bf1f      	itttt	ne
 8002c42:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002c44:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002c46:	1909      	addne	r1, r1, r4
 8002c48:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002c4a:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002c4c:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002c4e:	bf18      	it	ne
 8002c50:	6018      	strne	r0, [r3, #0]
 8002c52:	bd10      	pop	{r4, pc}
 8002c54:	4613      	mov	r3, r2
 8002c56:	e7e1      	b.n	8002c1c <prvInsertBlockIntoFreeList+0x4>
 8002c58:	2000507c 	.word	0x2000507c
 8002c5c:	2000024c 	.word	0x2000024c

08002c60 <pvPortMalloc>:
{
 8002c60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c64:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8002c66:	f000 fcf3 	bl	8003650 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8002c6a:	493d      	ldr	r1, [pc, #244]	; (8002d60 <pvPortMalloc+0x100>)
 8002c6c:	4d3d      	ldr	r5, [pc, #244]	; (8002d64 <pvPortMalloc+0x104>)
 8002c6e:	680b      	ldr	r3, [r1, #0]
 8002c70:	b9fb      	cbnz	r3, 8002cb2 <pvPortMalloc+0x52>
	uxAddress = ( size_t ) ucHeap;
 8002c72:	4a3d      	ldr	r2, [pc, #244]	; (8002d68 <pvPortMalloc+0x108>)
	xStart.xBlockSize = ( size_t ) 0;
 8002c74:	2000      	movs	r0, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002c76:	0756      	lsls	r6, r2, #29
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002c78:	bf0f      	iteee	eq
 8002c7a:	f644 6320 	movweq	r3, #20000	; 0x4e20
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002c7e:	3207      	addne	r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002c80:	4b3a      	ldrne	r3, [pc, #232]	; (8002d6c <pvPortMalloc+0x10c>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002c82:	f022 0207 	bicne.w	r2, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002c86:	bf18      	it	ne
 8002c88:	1a9b      	subne	r3, r3, r2
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002c8a:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002c8c:	4e38      	ldr	r6, [pc, #224]	; (8002d70 <pvPortMalloc+0x110>)
	uxAddress -= xHeapStructSize;
 8002c8e:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002c90:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 8002c94:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002c96:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 8002c98:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002c9a:	6018      	str	r0, [r3, #0]
	pxEnd = ( void * ) uxAddress;
 8002c9c:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002c9e:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002ca0:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002ca2:	4b34      	ldr	r3, [pc, #208]	; (8002d74 <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002ca4:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002ca6:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002ca8:	4b33      	ldr	r3, [pc, #204]	; (8002d78 <pvPortMalloc+0x118>)
 8002caa:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002cac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002cb0:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002cb2:	682f      	ldr	r7, [r5, #0]
 8002cb4:	4227      	tst	r7, r4
 8002cb6:	d116      	bne.n	8002ce6 <pvPortMalloc+0x86>
			if( xWantedSize > 0 )
 8002cb8:	2c00      	cmp	r4, #0
 8002cba:	d040      	beq.n	8002d3e <pvPortMalloc+0xde>
				xWantedSize += xHeapStructSize;
 8002cbc:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002cc0:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002cc2:	bf1c      	itt	ne
 8002cc4:	f023 0307 	bicne.w	r3, r3, #7
 8002cc8:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002cca:	b163      	cbz	r3, 8002ce6 <pvPortMalloc+0x86>
 8002ccc:	4a2a      	ldr	r2, [pc, #168]	; (8002d78 <pvPortMalloc+0x118>)
 8002cce:	6816      	ldr	r6, [r2, #0]
 8002cd0:	4690      	mov	r8, r2
 8002cd2:	42b3      	cmp	r3, r6
 8002cd4:	d807      	bhi.n	8002ce6 <pvPortMalloc+0x86>
				pxBlock = xStart.pxNextFreeBlock;
 8002cd6:	4a26      	ldr	r2, [pc, #152]	; (8002d70 <pvPortMalloc+0x110>)
 8002cd8:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002cda:	6868      	ldr	r0, [r5, #4]
 8002cdc:	4283      	cmp	r3, r0
 8002cde:	d804      	bhi.n	8002cea <pvPortMalloc+0x8a>
				if( pxBlock != pxEnd )
 8002ce0:	6809      	ldr	r1, [r1, #0]
 8002ce2:	428d      	cmp	r5, r1
 8002ce4:	d107      	bne.n	8002cf6 <pvPortMalloc+0x96>
void *pvReturn = NULL;
 8002ce6:	2400      	movs	r4, #0
 8002ce8:	e029      	b.n	8002d3e <pvPortMalloc+0xde>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002cea:	682c      	ldr	r4, [r5, #0]
 8002cec:	2c00      	cmp	r4, #0
 8002cee:	d0f7      	beq.n	8002ce0 <pvPortMalloc+0x80>
 8002cf0:	462a      	mov	r2, r5
 8002cf2:	4625      	mov	r5, r4
 8002cf4:	e7f1      	b.n	8002cda <pvPortMalloc+0x7a>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002cf6:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002cf8:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002cfa:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002cfc:	1ac2      	subs	r2, r0, r3
 8002cfe:	2a10      	cmp	r2, #16
 8002d00:	d90f      	bls.n	8002d22 <pvPortMalloc+0xc2>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002d02:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002d04:	0741      	lsls	r1, r0, #29
 8002d06:	d008      	beq.n	8002d1a <pvPortMalloc+0xba>
 8002d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d0c:	f383 8811 	msr	BASEPRI, r3
 8002d10:	f3bf 8f6f 	isb	sy
 8002d14:	f3bf 8f4f 	dsb	sy
 8002d18:	e7fe      	b.n	8002d18 <pvPortMalloc+0xb8>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002d1a:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002d1c:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002d1e:	f7ff ff7b 	bl	8002c18 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002d22:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002d24:	4913      	ldr	r1, [pc, #76]	; (8002d74 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002d26:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002d28:	431f      	orrs	r7, r3
					pxBlock->pxNextFreeBlock = NULL;
 8002d2a:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002d2c:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002d2e:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002d32:	4286      	cmp	r6, r0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002d34:	bf38      	it	cc
 8002d36:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002d38:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002d3a:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002d3c:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8002d3e:	f000 fd21 	bl	8003784 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002d42:	0763      	lsls	r3, r4, #29
 8002d44:	d008      	beq.n	8002d58 <pvPortMalloc+0xf8>
 8002d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d4a:	f383 8811 	msr	BASEPRI, r3
 8002d4e:	f3bf 8f6f 	isb	sy
 8002d52:	f3bf 8f4f 	dsb	sy
 8002d56:	e7fe      	b.n	8002d56 <pvPortMalloc+0xf6>
}
 8002d58:	4620      	mov	r0, r4
 8002d5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d5e:	bf00      	nop
 8002d60:	2000024c 	.word	0x2000024c
 8002d64:	20005070 	.word	0x20005070
 8002d68:	20000250 	.word	0x20000250
 8002d6c:	20005070 	.word	0x20005070
 8002d70:	2000507c 	.word	0x2000507c
 8002d74:	20005078 	.word	0x20005078
 8002d78:	20005074 	.word	0x20005074

08002d7c <vPortFree>:
{
 8002d7c:	b510      	push	{r4, lr}
	if( pv != NULL )
 8002d7e:	4604      	mov	r4, r0
 8002d80:	b370      	cbz	r0, 8002de0 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002d82:	4a18      	ldr	r2, [pc, #96]	; (8002de4 <vPortFree+0x68>)
 8002d84:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8002d88:	6812      	ldr	r2, [r2, #0]
 8002d8a:	4213      	tst	r3, r2
 8002d8c:	d108      	bne.n	8002da0 <vPortFree+0x24>
 8002d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d92:	f383 8811 	msr	BASEPRI, r3
 8002d96:	f3bf 8f6f 	isb	sy
 8002d9a:	f3bf 8f4f 	dsb	sy
 8002d9e:	e7fe      	b.n	8002d9e <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002da0:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8002da4:	b141      	cbz	r1, 8002db8 <vPortFree+0x3c>
 8002da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002daa:	f383 8811 	msr	BASEPRI, r3
 8002dae:	f3bf 8f6f 	isb	sy
 8002db2:	f3bf 8f4f 	dsb	sy
 8002db6:	e7fe      	b.n	8002db6 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002db8:	ea23 0302 	bic.w	r3, r3, r2
 8002dbc:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8002dc0:	f000 fc46 	bl	8003650 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002dc4:	4a08      	ldr	r2, [pc, #32]	; (8002de8 <vPortFree+0x6c>)
 8002dc6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8002dca:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002dcc:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002dd0:	440b      	add	r3, r1
 8002dd2:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002dd4:	f7ff ff20 	bl	8002c18 <prvInsertBlockIntoFreeList>
}
 8002dd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8002ddc:	f000 bcd2 	b.w	8003784 <xTaskResumeAll>
 8002de0:	bd10      	pop	{r4, pc}
 8002de2:	bf00      	nop
 8002de4:	20005070 	.word	0x20005070
 8002de8:	20005074 	.word	0x20005074

08002dec <xPortGetFreeHeapSize>:
}
 8002dec:	4b01      	ldr	r3, [pc, #4]	; (8002df4 <xPortGetFreeHeapSize+0x8>)
 8002dee:	6818      	ldr	r0, [r3, #0]
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	20005074 	.word	0x20005074

08002df8 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002df8:	b570      	push	{r4, r5, r6, lr}
 8002dfa:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002dfc:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8002dfe:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e00:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002e02:	b942      	cbnz	r2, 8002e16 <prvCopyDataToQueue+0x1e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002e04:	6805      	ldr	r5, [r0, #0]
 8002e06:	b99d      	cbnz	r5, 8002e30 <prvCopyDataToQueue+0x38>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002e08:	6840      	ldr	r0, [r0, #4]
 8002e0a:	f000 fecf 	bl	8003bac <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8002e0e:	6065      	str	r5, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8002e10:	3601      	adds	r6, #1
 8002e12:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 8002e14:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8002e16:	b96d      	cbnz	r5, 8002e34 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002e18:	6880      	ldr	r0, [r0, #8]
 8002e1a:	f002 f89d 	bl	8004f58 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002e1e:	68a3      	ldr	r3, [r4, #8]
 8002e20:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002e22:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e24:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002e26:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d301      	bcc.n	8002e30 <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002e2c:	6823      	ldr	r3, [r4, #0]
 8002e2e:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8002e30:	2000      	movs	r0, #0
 8002e32:	e7ed      	b.n	8002e10 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e34:	68c0      	ldr	r0, [r0, #12]
 8002e36:	f002 f88f 	bl	8004f58 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002e3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002e3c:	68e2      	ldr	r2, [r4, #12]
 8002e3e:	425b      	negs	r3, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e40:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002e42:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e44:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002e46:	60e2      	str	r2, [r4, #12]
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002e48:	bf3e      	ittt	cc
 8002e4a:	6862      	ldrcc	r2, [r4, #4]
 8002e4c:	189b      	addcc	r3, r3, r2
 8002e4e:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8002e50:	2d02      	cmp	r5, #2
 8002e52:	d1ed      	bne.n	8002e30 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e54:	b10e      	cbz	r6, 8002e5a <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8002e56:	3e01      	subs	r6, #1
 8002e58:	e7ea      	b.n	8002e30 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 8002e5a:	4630      	mov	r0, r6
 8002e5c:	e7d8      	b.n	8002e10 <prvCopyDataToQueue+0x18>

08002e5e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002e5e:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002e60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8002e62:	b410      	push	{r4}
 8002e64:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002e66:	b162      	cbz	r2, 8002e82 <prvCopyDataFromQueue+0x24>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002e68:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002e6a:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002e6c:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002e6e:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002e70:	60d9      	str	r1, [r3, #12]
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002e72:	bf28      	it	cs
 8002e74:	6819      	ldrcs	r1, [r3, #0]
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
	}
}
 8002e76:	bc10      	pop	{r4}
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002e78:	bf28      	it	cs
 8002e7a:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002e7c:	68d9      	ldr	r1, [r3, #12]
 8002e7e:	f002 b86b 	b.w	8004f58 <memcpy>
}
 8002e82:	bc10      	pop	{r4}
 8002e84:	4770      	bx	lr

08002e86 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002e86:	b570      	push	{r4, r5, r6, lr}
 8002e88:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002e8a:	f7ff fdcb 	bl	8002a24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002e8e:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e92:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8002e96:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002e98:	2d00      	cmp	r5, #0
 8002e9a:	dc14      	bgt.n	8002ec6 <prvUnlockQueue+0x40>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002e9c:	23ff      	movs	r3, #255	; 0xff
 8002e9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002ea2:	f7ff fde1 	bl	8002a68 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002ea6:	f7ff fdbd 	bl	8002a24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002eaa:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44

		while( cRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002eae:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8002eb2:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002eb4:	2d00      	cmp	r5, #0
 8002eb6:	dc12      	bgt.n	8002ede <prvUnlockQueue+0x58>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002eb8:	23ff      	movs	r3, #255	; 0xff
 8002eba:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 8002ebe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8002ec2:	f7ff bdd1 	b.w	8002a68 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ec6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d0e7      	beq.n	8002e9c <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ecc:	4630      	mov	r0, r6
 8002ece:	f000 fd83 	bl	80039d8 <xTaskRemoveFromEventList>
 8002ed2:	b108      	cbz	r0, 8002ed8 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8002ed4:	f000 fe0c 	bl	8003af0 <vTaskMissedYield>
 8002ed8:	3d01      	subs	r5, #1
 8002eda:	b26d      	sxtb	r5, r5
 8002edc:	e7dc      	b.n	8002e98 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ede:	6923      	ldr	r3, [r4, #16]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d0e9      	beq.n	8002eb8 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ee4:	4630      	mov	r0, r6
 8002ee6:	f000 fd77 	bl	80039d8 <xTaskRemoveFromEventList>
 8002eea:	b108      	cbz	r0, 8002ef0 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8002eec:	f000 fe00 	bl	8003af0 <vTaskMissedYield>
 8002ef0:	3d01      	subs	r5, #1
 8002ef2:	b26d      	sxtb	r5, r5
 8002ef4:	e7de      	b.n	8002eb4 <prvUnlockQueue+0x2e>
	...

08002ef8 <xQueueGenericReset>:
{
 8002ef8:	b538      	push	{r3, r4, r5, lr}
 8002efa:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8002efc:	4604      	mov	r4, r0
 8002efe:	b940      	cbnz	r0, 8002f12 <xQueueGenericReset+0x1a>
 8002f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f04:	f383 8811 	msr	BASEPRI, r3
 8002f08:	f3bf 8f6f 	isb	sy
 8002f0c:	f3bf 8f4f 	dsb	sy
 8002f10:	e7fe      	b.n	8002f10 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8002f12:	f7ff fd87 	bl	8002a24 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002f16:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002f18:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002f1a:	6822      	ldr	r2, [r4, #0]
 8002f1c:	4343      	muls	r3, r0
 8002f1e:	18d1      	adds	r1, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002f20:	1a1b      	subs	r3, r3, r0
 8002f22:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002f24:	6061      	str	r1, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002f26:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002f28:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 8002f2a:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002f2c:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002f2e:	60a2      	str	r2, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
 8002f30:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002f34:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8002f38:	b995      	cbnz	r5, 8002f60 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f3a:	6923      	ldr	r3, [r4, #16]
 8002f3c:	b163      	cbz	r3, 8002f58 <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f3e:	f104 0010 	add.w	r0, r4, #16
 8002f42:	f000 fd49 	bl	80039d8 <xTaskRemoveFromEventList>
 8002f46:	b138      	cbz	r0, 8002f58 <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 8002f48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f4c:	4b09      	ldr	r3, [pc, #36]	; (8002f74 <xQueueGenericReset+0x7c>)
 8002f4e:	601a      	str	r2, [r3, #0]
 8002f50:	f3bf 8f4f 	dsb	sy
 8002f54:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8002f58:	f7ff fd86 	bl	8002a68 <vPortExitCritical>
}
 8002f5c:	2001      	movs	r0, #1
 8002f5e:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002f60:	f104 0010 	add.w	r0, r4, #16
 8002f64:	f7ff fccf 	bl	8002906 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002f68:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002f6c:	f7ff fccb 	bl	8002906 <vListInitialise>
 8002f70:	e7f2      	b.n	8002f58 <xQueueGenericReset+0x60>
 8002f72:	bf00      	nop
 8002f74:	e000ed04 	.word	0xe000ed04

08002f78 <xQueueGenericCreate>:
	{
 8002f78:	b570      	push	{r4, r5, r6, lr}
 8002f7a:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002f7c:	4606      	mov	r6, r0
 8002f7e:	b940      	cbnz	r0, 8002f92 <xQueueGenericCreate+0x1a>
 8002f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f84:	f383 8811 	msr	BASEPRI, r3
 8002f88:	f3bf 8f6f 	isb	sy
 8002f8c:	f3bf 8f4f 	dsb	sy
 8002f90:	e7fe      	b.n	8002f90 <xQueueGenericCreate+0x18>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f92:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002f94:	3048      	adds	r0, #72	; 0x48
 8002f96:	f7ff fe63 	bl	8002c60 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8002f9a:	4604      	mov	r4, r0
 8002f9c:	b138      	cbz	r0, 8002fae <xQueueGenericCreate+0x36>
	if( uxItemSize == ( UBaseType_t ) 0 )
 8002f9e:	b945      	cbnz	r5, 8002fb2 <xQueueGenericCreate+0x3a>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002fa0:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8002fa2:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002fa4:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002fa6:	2101      	movs	r1, #1
 8002fa8:	4620      	mov	r0, r4
 8002faa:	f7ff ffa5 	bl	8002ef8 <xQueueGenericReset>
	}
 8002fae:	4620      	mov	r0, r4
 8002fb0:	bd70      	pop	{r4, r5, r6, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002fb2:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002fb6:	6003      	str	r3, [r0, #0]
 8002fb8:	e7f3      	b.n	8002fa2 <xQueueGenericCreate+0x2a>
	...

08002fbc <xQueueGenericSend>:
{
 8002fbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002fc0:	4689      	mov	r9, r1
 8002fc2:	9201      	str	r2, [sp, #4]
 8002fc4:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8002fc6:	4604      	mov	r4, r0
 8002fc8:	b940      	cbnz	r0, 8002fdc <xQueueGenericSend+0x20>
 8002fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fce:	f383 8811 	msr	BASEPRI, r3
 8002fd2:	f3bf 8f6f 	isb	sy
 8002fd6:	f3bf 8f4f 	dsb	sy
 8002fda:	e7fe      	b.n	8002fda <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002fdc:	2900      	cmp	r1, #0
 8002fde:	f040 8088 	bne.w	80030f2 <xQueueGenericSend+0x136>
 8002fe2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	f000 8084 	beq.w	80030f2 <xQueueGenericSend+0x136>
 8002fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fee:	f383 8811 	msr	BASEPRI, r3
 8002ff2:	f3bf 8f6f 	isb	sy
 8002ff6:	f3bf 8f4f 	dsb	sy
 8002ffa:	e7fe      	b.n	8002ffa <xQueueGenericSend+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ffc:	9e01      	ldr	r6, [sp, #4]
 8002ffe:	2e00      	cmp	r6, #0
 8003000:	f000 8082 	beq.w	8003108 <xQueueGenericSend+0x14c>
 8003004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003008:	f383 8811 	msr	BASEPRI, r3
 800300c:	f3bf 8f6f 	isb	sy
 8003010:	f3bf 8f4f 	dsb	sy
 8003014:	e7fe      	b.n	8003014 <xQueueGenericSend+0x58>
				if( xTicksToWait == ( TickType_t ) 0 )
 8003016:	9d01      	ldr	r5, [sp, #4]
 8003018:	b91d      	cbnz	r5, 8003022 <xQueueGenericSend+0x66>
					taskEXIT_CRITICAL();
 800301a:	f7ff fd25 	bl	8002a68 <vPortExitCritical>
			return errQUEUE_FULL;
 800301e:	2000      	movs	r0, #0
 8003020:	e058      	b.n	80030d4 <xQueueGenericSend+0x118>
				else if( xEntryTimeSet == pdFALSE )
 8003022:	b916      	cbnz	r6, 800302a <xQueueGenericSend+0x6e>
					vTaskSetTimeOutState( &xTimeOut );
 8003024:	a802      	add	r0, sp, #8
 8003026:	f000 fd19 	bl	8003a5c <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 800302a:	f7ff fd1d 	bl	8002a68 <vPortExitCritical>
		vTaskSuspendAll();
 800302e:	f000 fb0f 	bl	8003650 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003032:	f7ff fcf7 	bl	8002a24 <vPortEnterCritical>
 8003036:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800303a:	2bff      	cmp	r3, #255	; 0xff
 800303c:	bf08      	it	eq
 800303e:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 8003042:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8003046:	2bff      	cmp	r3, #255	; 0xff
 8003048:	bf08      	it	eq
 800304a:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 800304e:	f7ff fd0b 	bl	8002a68 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003052:	a901      	add	r1, sp, #4
 8003054:	a802      	add	r0, sp, #8
 8003056:	f000 fd11 	bl	8003a7c <xTaskCheckForTimeOut>
 800305a:	2800      	cmp	r0, #0
 800305c:	d143      	bne.n	80030e6 <xQueueGenericSend+0x12a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800305e:	f7ff fce1 	bl	8002a24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003062:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8003064:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8003066:	f7ff fcff 	bl	8002a68 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800306a:	42ae      	cmp	r6, r5
 800306c:	d135      	bne.n	80030da <xQueueGenericSend+0x11e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800306e:	9901      	ldr	r1, [sp, #4]
 8003070:	f104 0010 	add.w	r0, r4, #16
 8003074:	f000 fc96 	bl	80039a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003078:	4620      	mov	r0, r4
 800307a:	f7ff ff04 	bl	8002e86 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800307e:	f000 fb81 	bl	8003784 <xTaskResumeAll>
 8003082:	b938      	cbnz	r0, 8003094 <xQueueGenericSend+0xd8>
					portYIELD_WITHIN_API();
 8003084:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003088:	f8ca 3000 	str.w	r3, [sl]
 800308c:	f3bf 8f4f 	dsb	sy
 8003090:	f3bf 8f6f 	isb	sy
 8003094:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8003096:	f7ff fcc5 	bl	8002a24 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800309a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800309c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800309e:	429a      	cmp	r2, r3
 80030a0:	d301      	bcc.n	80030a6 <xQueueGenericSend+0xea>
 80030a2:	2f02      	cmp	r7, #2
 80030a4:	d1b7      	bne.n	8003016 <xQueueGenericSend+0x5a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80030a6:	463a      	mov	r2, r7
 80030a8:	4649      	mov	r1, r9
 80030aa:	4620      	mov	r0, r4
 80030ac:	f7ff fea4 	bl	8002df8 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80030b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80030b2:	b11b      	cbz	r3, 80030bc <xQueueGenericSend+0x100>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80030b4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80030b8:	f000 fc8e 	bl	80039d8 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 80030bc:	b138      	cbz	r0, 80030ce <xQueueGenericSend+0x112>
						queueYIELD_IF_USING_PREEMPTION();
 80030be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030c2:	4b18      	ldr	r3, [pc, #96]	; (8003124 <xQueueGenericSend+0x168>)
 80030c4:	601a      	str	r2, [r3, #0]
 80030c6:	f3bf 8f4f 	dsb	sy
 80030ca:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80030ce:	f7ff fccb 	bl	8002a68 <vPortExitCritical>
				return pdPASS;
 80030d2:	2001      	movs	r0, #1
}
 80030d4:	b004      	add	sp, #16
 80030d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 80030da:	4620      	mov	r0, r4
 80030dc:	f7ff fed3 	bl	8002e86 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80030e0:	f000 fb50 	bl	8003784 <xTaskResumeAll>
 80030e4:	e7d6      	b.n	8003094 <xQueueGenericSend+0xd8>
			prvUnlockQueue( pxQueue );
 80030e6:	4620      	mov	r0, r4
 80030e8:	f7ff fecd 	bl	8002e86 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80030ec:	f000 fb4a 	bl	8003784 <xTaskResumeAll>
 80030f0:	e795      	b.n	800301e <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80030f2:	2f02      	cmp	r7, #2
 80030f4:	d102      	bne.n	80030fc <xQueueGenericSend+0x140>
 80030f6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d10a      	bne.n	8003112 <xQueueGenericSend+0x156>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80030fc:	f000 fcfe 	bl	8003afc <xTaskGetSchedulerState>
 8003100:	2800      	cmp	r0, #0
 8003102:	f43f af7b 	beq.w	8002ffc <xQueueGenericSend+0x40>
 8003106:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8003108:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 800310c:	f8df a014 	ldr.w	sl, [pc, #20]	; 8003124 <xQueueGenericSend+0x168>
 8003110:	e7c1      	b.n	8003096 <xQueueGenericSend+0xda>
 8003112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003116:	f383 8811 	msr	BASEPRI, r3
 800311a:	f3bf 8f6f 	isb	sy
 800311e:	f3bf 8f4f 	dsb	sy
 8003122:	e7fe      	b.n	8003122 <xQueueGenericSend+0x166>
 8003124:	e000ed04 	.word	0xe000ed04

08003128 <xQueueGenericSendFromISR>:
{
 8003128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800312c:	4688      	mov	r8, r1
 800312e:	4691      	mov	r9, r2
 8003130:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8003132:	4604      	mov	r4, r0
 8003134:	b940      	cbnz	r0, 8003148 <xQueueGenericSendFromISR+0x20>
 8003136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800313a:	f383 8811 	msr	BASEPRI, r3
 800313e:	f3bf 8f6f 	isb	sy
 8003142:	f3bf 8f4f 	dsb	sy
 8003146:	e7fe      	b.n	8003146 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003148:	bb09      	cbnz	r1, 800318e <xQueueGenericSendFromISR+0x66>
 800314a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800314c:	b1fb      	cbz	r3, 800318e <xQueueGenericSendFromISR+0x66>
 800314e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003152:	f383 8811 	msr	BASEPRI, r3
 8003156:	f3bf 8f6f 	isb	sy
 800315a:	f3bf 8f4f 	dsb	sy
 800315e:	e7fe      	b.n	800315e <xQueueGenericSendFromISR+0x36>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003160:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003164:	f000 fc38 	bl	80039d8 <xTaskRemoveFromEventList>
 8003168:	2800      	cmp	r0, #0
 800316a:	d034      	beq.n	80031d6 <xQueueGenericSendFromISR+0xae>
							if( pxHigherPriorityTaskWoken != NULL )
 800316c:	f1b9 0f00 	cmp.w	r9, #0
 8003170:	d031      	beq.n	80031d6 <xQueueGenericSendFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003172:	2001      	movs	r0, #1
 8003174:	f8c9 0000 	str.w	r0, [r9]
	__asm volatile
 8003178:	f386 8811 	msr	BASEPRI, r6
}
 800317c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003180:	3501      	adds	r5, #1
 8003182:	b26d      	sxtb	r5, r5
 8003184:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8003188:	e025      	b.n	80031d6 <xQueueGenericSendFromISR+0xae>
			xReturn = errQUEUE_FULL;
 800318a:	2000      	movs	r0, #0
 800318c:	e7f4      	b.n	8003178 <xQueueGenericSendFromISR+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800318e:	2f02      	cmp	r7, #2
 8003190:	d102      	bne.n	8003198 <xQueueGenericSendFromISR+0x70>
 8003192:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003194:	2b01      	cmp	r3, #1
 8003196:	d120      	bne.n	80031da <xQueueGenericSendFromISR+0xb2>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003198:	f7ff fd10 	bl	8002bbc <vPortValidateInterruptPriority>
	__asm volatile
 800319c:	f3ef 8611 	mrs	r6, BASEPRI
 80031a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031a4:	f383 8811 	msr	BASEPRI, r3
 80031a8:	f3bf 8f6f 	isb	sy
 80031ac:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80031b0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80031b2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d301      	bcc.n	80031bc <xQueueGenericSendFromISR+0x94>
 80031b8:	2f02      	cmp	r7, #2
 80031ba:	d1e6      	bne.n	800318a <xQueueGenericSendFromISR+0x62>
			const int8_t cTxLock = pxQueue->cTxLock;
 80031bc:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80031c0:	463a      	mov	r2, r7
			const int8_t cTxLock = pxQueue->cTxLock;
 80031c2:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80031c4:	4641      	mov	r1, r8
 80031c6:	4620      	mov	r0, r4
 80031c8:	f7ff fe16 	bl	8002df8 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80031cc:	1c6b      	adds	r3, r5, #1
 80031ce:	d1d7      	bne.n	8003180 <xQueueGenericSendFromISR+0x58>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80031d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1c4      	bne.n	8003160 <xQueueGenericSendFromISR+0x38>
			xReturn = pdPASS;
 80031d6:	2001      	movs	r0, #1
 80031d8:	e7ce      	b.n	8003178 <xQueueGenericSendFromISR+0x50>
	__asm volatile
 80031da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031de:	f383 8811 	msr	BASEPRI, r3
 80031e2:	f3bf 8f6f 	isb	sy
 80031e6:	f3bf 8f4f 	dsb	sy
 80031ea:	e7fe      	b.n	80031ea <xQueueGenericSendFromISR+0xc2>

080031ec <xQueueGenericReceive>:
{
 80031ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80031f0:	4688      	mov	r8, r1
 80031f2:	9201      	str	r2, [sp, #4]
 80031f4:	4699      	mov	r9, r3
	configASSERT( pxQueue );
 80031f6:	4604      	mov	r4, r0
 80031f8:	b940      	cbnz	r0, 800320c <xQueueGenericReceive+0x20>
 80031fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031fe:	f383 8811 	msr	BASEPRI, r3
 8003202:	f3bf 8f6f 	isb	sy
 8003206:	f3bf 8f4f 	dsb	sy
 800320a:	e7fe      	b.n	800320a <xQueueGenericReceive+0x1e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800320c:	2900      	cmp	r1, #0
 800320e:	f040 80a5 	bne.w	800335c <xQueueGenericReceive+0x170>
 8003212:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003214:	2b00      	cmp	r3, #0
 8003216:	f000 80a1 	beq.w	800335c <xQueueGenericReceive+0x170>
 800321a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800321e:	f383 8811 	msr	BASEPRI, r3
 8003222:	f3bf 8f6f 	isb	sy
 8003226:	f3bf 8f4f 	dsb	sy
 800322a:	e7fe      	b.n	800322a <xQueueGenericReceive+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800322c:	9e01      	ldr	r6, [sp, #4]
 800322e:	2e00      	cmp	r6, #0
 8003230:	f000 809a 	beq.w	8003368 <xQueueGenericReceive+0x17c>
 8003234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003238:	f383 8811 	msr	BASEPRI, r3
 800323c:	f3bf 8f6f 	isb	sy
 8003240:	f3bf 8f4f 	dsb	sy
 8003244:	e7fe      	b.n	8003244 <xQueueGenericReceive+0x58>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003246:	6a63      	ldr	r3, [r4, #36]	; 0x24
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8003248:	60e6      	str	r6, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800324a:	2b00      	cmp	r3, #0
 800324c:	d06d      	beq.n	800332a <xQueueGenericReceive+0x13e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800324e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003252:	e05f      	b.n	8003314 <xQueueGenericReceive+0x128>
				if( xTicksToWait == ( TickType_t ) 0 )
 8003254:	9d01      	ldr	r5, [sp, #4]
 8003256:	b91d      	cbnz	r5, 8003260 <xQueueGenericReceive+0x74>
					taskEXIT_CRITICAL();
 8003258:	f7ff fc06 	bl	8002a68 <vPortExitCritical>
				return errQUEUE_EMPTY;
 800325c:	4628      	mov	r0, r5
 800325e:	e067      	b.n	8003330 <xQueueGenericReceive+0x144>
				else if( xEntryTimeSet == pdFALSE )
 8003260:	b916      	cbnz	r6, 8003268 <xQueueGenericReceive+0x7c>
					vTaskSetTimeOutState( &xTimeOut );
 8003262:	a802      	add	r0, sp, #8
 8003264:	f000 fbfa 	bl	8003a5c <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 8003268:	f7ff fbfe 	bl	8002a68 <vPortExitCritical>
		vTaskSuspendAll();
 800326c:	f000 f9f0 	bl	8003650 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003270:	f7ff fbd8 	bl	8002a24 <vPortEnterCritical>
 8003274:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8003278:	2bff      	cmp	r3, #255	; 0xff
 800327a:	bf08      	it	eq
 800327c:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 8003280:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8003284:	2bff      	cmp	r3, #255	; 0xff
 8003286:	bf08      	it	eq
 8003288:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 800328c:	f7ff fbec 	bl	8002a68 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003290:	a901      	add	r1, sp, #4
 8003292:	a802      	add	r0, sp, #8
 8003294:	f000 fbf2 	bl	8003a7c <xTaskCheckForTimeOut>
 8003298:	2800      	cmp	r0, #0
 800329a:	d152      	bne.n	8003342 <xQueueGenericReceive+0x156>
	taskENTER_CRITICAL();
 800329c:	f7ff fbc2 	bl	8002a24 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80032a0:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 80032a2:	f7ff fbe1 	bl	8002a68 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80032a6:	2d00      	cmp	r5, #0
 80032a8:	d145      	bne.n	8003336 <xQueueGenericReceive+0x14a>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80032aa:	6823      	ldr	r3, [r4, #0]
 80032ac:	b933      	cbnz	r3, 80032bc <xQueueGenericReceive+0xd0>
						taskENTER_CRITICAL();
 80032ae:	f7ff fbb9 	bl	8002a24 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80032b2:	6860      	ldr	r0, [r4, #4]
 80032b4:	f000 fc32 	bl	8003b1c <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 80032b8:	f7ff fbd6 	bl	8002a68 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80032bc:	9901      	ldr	r1, [sp, #4]
 80032be:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80032c2:	f000 fb6f 	bl	80039a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80032c6:	4620      	mov	r0, r4
 80032c8:	f7ff fddd 	bl	8002e86 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80032cc:	f000 fa5a 	bl	8003784 <xTaskResumeAll>
 80032d0:	b938      	cbnz	r0, 80032e2 <xQueueGenericReceive+0xf6>
					portYIELD_WITHIN_API();
 80032d2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80032d6:	f8ca 3000 	str.w	r3, [sl]
 80032da:	f3bf 8f4f 	dsb	sy
 80032de:	f3bf 8f6f 	isb	sy
 80032e2:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 80032e4:	f7ff fb9e 	bl	8002a24 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80032e8:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80032ea:	2d00      	cmp	r5, #0
 80032ec:	d0b2      	beq.n	8003254 <xQueueGenericReceive+0x68>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80032ee:	4641      	mov	r1, r8
 80032f0:	4620      	mov	r0, r4
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 80032f2:	68e6      	ldr	r6, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80032f4:	f7ff fdb3 	bl	8002e5e <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 80032f8:	f1b9 0f00 	cmp.w	r9, #0
 80032fc:	d1a3      	bne.n	8003246 <xQueueGenericReceive+0x5a>
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80032fe:	6823      	ldr	r3, [r4, #0]
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8003300:	3d01      	subs	r5, #1
 8003302:	63a5      	str	r5, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003304:	b913      	cbnz	r3, 800330c <xQueueGenericReceive+0x120>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8003306:	f000 fca1 	bl	8003c4c <pvTaskIncrementMutexHeldCount>
 800330a:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800330c:	6923      	ldr	r3, [r4, #16]
 800330e:	b163      	cbz	r3, 800332a <xQueueGenericReceive+0x13e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003310:	f104 0010 	add.w	r0, r4, #16
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003314:	f000 fb60 	bl	80039d8 <xTaskRemoveFromEventList>
 8003318:	b138      	cbz	r0, 800332a <xQueueGenericReceive+0x13e>
							queueYIELD_IF_USING_PREEMPTION();
 800331a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800331e:	4b14      	ldr	r3, [pc, #80]	; (8003370 <xQueueGenericReceive+0x184>)
 8003320:	601a      	str	r2, [r3, #0]
 8003322:	f3bf 8f4f 	dsb	sy
 8003326:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800332a:	f7ff fb9d 	bl	8002a68 <vPortExitCritical>
				return pdPASS;
 800332e:	2001      	movs	r0, #1
}
 8003330:	b004      	add	sp, #16
 8003332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 8003336:	4620      	mov	r0, r4
 8003338:	f7ff fda5 	bl	8002e86 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800333c:	f000 fa22 	bl	8003784 <xTaskResumeAll>
 8003340:	e7cf      	b.n	80032e2 <xQueueGenericReceive+0xf6>
			prvUnlockQueue( pxQueue );
 8003342:	4620      	mov	r0, r4
 8003344:	f7ff fd9f 	bl	8002e86 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003348:	f000 fa1c 	bl	8003784 <xTaskResumeAll>
	taskENTER_CRITICAL();
 800334c:	f7ff fb6a 	bl	8002a24 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003350:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 8003352:	f7ff fb89 	bl	8002a68 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003356:	2d00      	cmp	r5, #0
 8003358:	d1c3      	bne.n	80032e2 <xQueueGenericReceive+0xf6>
 800335a:	e77f      	b.n	800325c <xQueueGenericReceive+0x70>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800335c:	f000 fbce 	bl	8003afc <xTaskGetSchedulerState>
 8003360:	2800      	cmp	r0, #0
 8003362:	f43f af63 	beq.w	800322c <xQueueGenericReceive+0x40>
 8003366:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8003368:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 800336a:	f8df a004 	ldr.w	sl, [pc, #4]	; 8003370 <xQueueGenericReceive+0x184>
 800336e:	e7b9      	b.n	80032e4 <xQueueGenericReceive+0xf8>
 8003370:	e000ed04 	.word	0xe000ed04

08003374 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003374:	4a06      	ldr	r2, [pc, #24]	; (8003390 <prvResetNextTaskUnblockTime+0x1c>)
 8003376:	6813      	ldr	r3, [r2, #0]
 8003378:	6819      	ldr	r1, [r3, #0]
 800337a:	4b06      	ldr	r3, [pc, #24]	; (8003394 <prvResetNextTaskUnblockTime+0x20>)
 800337c:	b919      	cbnz	r1, 8003386 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800337e:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003382:	601a      	str	r2, [r3, #0]
 8003384:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003386:	6812      	ldr	r2, [r2, #0]
 8003388:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800338a:	68d2      	ldr	r2, [r2, #12]
 800338c:	6852      	ldr	r2, [r2, #4]
 800338e:	e7f8      	b.n	8003382 <prvResetNextTaskUnblockTime+0xe>
 8003390:	20005088 	.word	0x20005088
 8003394:	20005160 	.word	0x20005160

08003398 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800339a:	4b1b      	ldr	r3, [pc, #108]	; (8003408 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800339c:	4e1b      	ldr	r6, [pc, #108]	; (800340c <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 800339e:	681d      	ldr	r5, [r3, #0]
{
 80033a0:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80033a2:	6830      	ldr	r0, [r6, #0]
{
 80033a4:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80033a6:	3004      	adds	r0, #4
 80033a8:	f7ff fade 	bl	8002968 <uxListRemove>
 80033ac:	4633      	mov	r3, r6
 80033ae:	b940      	cbnz	r0, 80033c2 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80033b0:	2001      	movs	r0, #1
 80033b2:	6831      	ldr	r1, [r6, #0]
 80033b4:	4e16      	ldr	r6, [pc, #88]	; (8003410 <prvAddCurrentTaskToDelayedList+0x78>)
 80033b6:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80033b8:	6832      	ldr	r2, [r6, #0]
 80033ba:	4088      	lsls	r0, r1
 80033bc:	ea22 0200 	bic.w	r2, r2, r0
 80033c0:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80033c2:	1c62      	adds	r2, r4, #1
 80033c4:	d107      	bne.n	80033d6 <prvAddCurrentTaskToDelayedList+0x3e>
 80033c6:	b137      	cbz	r7, 80033d6 <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033c8:	6819      	ldr	r1, [r3, #0]
 80033ca:	4812      	ldr	r0, [pc, #72]	; (8003414 <prvAddCurrentTaskToDelayedList+0x7c>)
 80033cc:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80033ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033d2:	f7ff baa6 	b.w	8002922 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80033d6:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80033d8:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 80033da:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80033dc:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 80033de:	d907      	bls.n	80033f0 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033e0:	4a0d      	ldr	r2, [pc, #52]	; (8003418 <prvAddCurrentTaskToDelayedList+0x80>)
 80033e2:	6810      	ldr	r0, [r2, #0]
 80033e4:	6819      	ldr	r1, [r3, #0]
}
 80033e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033ea:	3104      	adds	r1, #4
 80033ec:	f7ff baa5 	b.w	800293a <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80033f0:	4a0a      	ldr	r2, [pc, #40]	; (800341c <prvAddCurrentTaskToDelayedList+0x84>)
 80033f2:	6810      	ldr	r0, [r2, #0]
 80033f4:	6819      	ldr	r1, [r3, #0]
 80033f6:	3104      	adds	r1, #4
 80033f8:	f7ff fa9f 	bl	800293a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80033fc:	4b08      	ldr	r3, [pc, #32]	; (8003420 <prvAddCurrentTaskToDelayedList+0x88>)
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8003402:	bf38      	it	cc
 8003404:	601c      	strcc	r4, [r3, #0]
 8003406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003408:	200051a8 	.word	0x200051a8
 800340c:	20005084 	.word	0x20005084
 8003410:	20005130 	.word	0x20005130
 8003414:	20005180 	.word	0x20005180
 8003418:	2000508c 	.word	0x2000508c
 800341c:	20005088 	.word	0x20005088
 8003420:	20005160 	.word	0x20005160

08003424 <prvTaskIsTaskSuspended.part.0>:
 8003424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003428:	f383 8811 	msr	BASEPRI, r3
 800342c:	f3bf 8f6f 	isb	sy
 8003430:	f3bf 8f4f 	dsb	sy
 8003434:	e7fe      	b.n	8003434 <prvTaskIsTaskSuspended.part.0+0x10>
	...

08003438 <xTaskCreate>:
	{
 8003438:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800343c:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 8003440:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003442:	4650      	mov	r0, sl
	{
 8003444:	460f      	mov	r7, r1
 8003446:	4699      	mov	r9, r3
 8003448:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800344a:	f7ff fc09 	bl	8002c60 <pvPortMalloc>
			if( pxStack != NULL )
 800344e:	4605      	mov	r5, r0
 8003450:	2800      	cmp	r0, #0
 8003452:	f000 8096 	beq.w	8003582 <xTaskCreate+0x14a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003456:	2054      	movs	r0, #84	; 0x54
 8003458:	f7ff fc02 	bl	8002c60 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800345c:	4604      	mov	r4, r0
 800345e:	2800      	cmp	r0, #0
 8003460:	f000 808c 	beq.w	800357c <xTaskCreate+0x144>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003464:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 8003468:	6305      	str	r5, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800346a:	4455      	add	r5, sl
 800346c:	1e7b      	subs	r3, r7, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800346e:	f025 0a07 	bic.w	sl, r5, #7
 8003472:	f100 0234 	add.w	r2, r0, #52	; 0x34
 8003476:	370f      	adds	r7, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003478:	7859      	ldrb	r1, [r3, #1]
 800347a:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 800347e:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8003482:	b109      	cbz	r1, 8003488 <xTaskCreate+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003484:	42bb      	cmp	r3, r7
 8003486:	d1f7      	bne.n	8003478 <xTaskCreate+0x40>
 8003488:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800348a:	f04f 0b00 	mov.w	fp, #0
 800348e:	2d06      	cmp	r5, #6
 8003490:	bf28      	it	cs
 8003492:	2506      	movcs	r5, #6
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003494:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 8003496:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8003498:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800349a:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800349c:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 80034a0:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80034a4:	f7ff fa3a 	bl	800291c <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034a8:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80034ac:	f104 0018 	add.w	r0, r4, #24
 80034b0:	f7ff fa34 	bl	800291c <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 80034b4:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80034b8:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034ba:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80034bc:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80034be:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80034c2:	464a      	mov	r2, r9
 80034c4:	4641      	mov	r1, r8
 80034c6:	4650      	mov	r0, sl
 80034c8:	f7ff fa86 	bl	80029d8 <pxPortInitialiseStack>
 80034cc:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 80034ce:	b106      	cbz	r6, 80034d2 <xTaskCreate+0x9a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80034d0:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 80034d2:	f7ff faa7 	bl	8002a24 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 80034d6:	4b32      	ldr	r3, [pc, #200]	; (80035a0 <xTaskCreate+0x168>)
		if( pxCurrentTCB == NULL )
 80034d8:	4e32      	ldr	r6, [pc, #200]	; (80035a4 <xTaskCreate+0x16c>)
		uxCurrentNumberOfTasks++;
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 80035d0 <xTaskCreate+0x198>
 80034e0:	3201      	adds	r2, #1
 80034e2:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80034e4:	6835      	ldr	r5, [r6, #0]
 80034e6:	2d00      	cmp	r5, #0
 80034e8:	d14e      	bne.n	8003588 <xTaskCreate+0x150>
			pxCurrentTCB = pxNewTCB;
 80034ea:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d11d      	bne.n	800352e <xTaskCreate+0xf6>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80034f2:	eb08 0005 	add.w	r0, r8, r5
 80034f6:	3514      	adds	r5, #20
 80034f8:	f7ff fa05 	bl	8002906 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80034fc:	2d8c      	cmp	r5, #140	; 0x8c
 80034fe:	d1f8      	bne.n	80034f2 <xTaskCreate+0xba>
	vListInitialise( &xDelayedTaskList1 );
 8003500:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 80035d4 <xTaskCreate+0x19c>
	vListInitialise( &xDelayedTaskList2 );
 8003504:	4d28      	ldr	r5, [pc, #160]	; (80035a8 <xTaskCreate+0x170>)
	vListInitialise( &xDelayedTaskList1 );
 8003506:	4648      	mov	r0, r9
 8003508:	f7ff f9fd 	bl	8002906 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800350c:	4628      	mov	r0, r5
 800350e:	f7ff f9fa 	bl	8002906 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003512:	4826      	ldr	r0, [pc, #152]	; (80035ac <xTaskCreate+0x174>)
 8003514:	f7ff f9f7 	bl	8002906 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8003518:	4825      	ldr	r0, [pc, #148]	; (80035b0 <xTaskCreate+0x178>)
 800351a:	f7ff f9f4 	bl	8002906 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800351e:	4825      	ldr	r0, [pc, #148]	; (80035b4 <xTaskCreate+0x17c>)
 8003520:	f7ff f9f1 	bl	8002906 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8003524:	4b24      	ldr	r3, [pc, #144]	; (80035b8 <xTaskCreate+0x180>)
 8003526:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800352a:	4b24      	ldr	r3, [pc, #144]	; (80035bc <xTaskCreate+0x184>)
 800352c:	601d      	str	r5, [r3, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800352e:	2501      	movs	r5, #1
		uxTaskNumber++;
 8003530:	4a23      	ldr	r2, [pc, #140]	; (80035c0 <xTaskCreate+0x188>)
		prvAddTaskToReadyList( pxNewTCB );
 8003532:	4924      	ldr	r1, [pc, #144]	; (80035c4 <xTaskCreate+0x18c>)
		uxTaskNumber++;
 8003534:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8003536:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8003538:	3301      	adds	r3, #1
 800353a:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800353c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800353e:	fa05 f302 	lsl.w	r3, r5, r2
 8003542:	4303      	orrs	r3, r0
 8003544:	2014      	movs	r0, #20
 8003546:	600b      	str	r3, [r1, #0]
 8003548:	fb00 8002 	mla	r0, r0, r2, r8
 800354c:	4639      	mov	r1, r7
 800354e:	f7ff f9e8 	bl	8002922 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8003552:	f7ff fa89 	bl	8002a68 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8003556:	4b1c      	ldr	r3, [pc, #112]	; (80035c8 <xTaskCreate+0x190>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	b163      	cbz	r3, 8003576 <xTaskCreate+0x13e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800355c:	6833      	ldr	r3, [r6, #0]
 800355e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003560:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003562:	429a      	cmp	r2, r3
 8003564:	d207      	bcs.n	8003576 <xTaskCreate+0x13e>
			taskYIELD_IF_USING_PREEMPTION();
 8003566:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800356a:	4b18      	ldr	r3, [pc, #96]	; (80035cc <xTaskCreate+0x194>)
 800356c:	601a      	str	r2, [r3, #0]
 800356e:	f3bf 8f4f 	dsb	sy
 8003572:	f3bf 8f6f 	isb	sy
	}
 8003576:	4628      	mov	r0, r5
 8003578:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 800357c:	4628      	mov	r0, r5
 800357e:	f7ff fbfd 	bl	8002d7c <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003582:	f04f 35ff 	mov.w	r5, #4294967295
 8003586:	e7f6      	b.n	8003576 <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
 8003588:	4b0f      	ldr	r3, [pc, #60]	; (80035c8 <xTaskCreate+0x190>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d1ce      	bne.n	800352e <xTaskCreate+0xf6>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003590:	6833      	ldr	r3, [r6, #0]
 8003592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003594:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003596:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8003598:	bf98      	it	ls
 800359a:	6034      	strls	r4, [r6, #0]
 800359c:	e7c7      	b.n	800352e <xTaskCreate+0xf6>
 800359e:	bf00      	nop
 80035a0:	2000511c 	.word	0x2000511c
 80035a4:	20005084 	.word	0x20005084
 80035a8:	20005148 	.word	0x20005148
 80035ac:	20005168 	.word	0x20005168
 80035b0:	20005194 	.word	0x20005194
 80035b4:	20005180 	.word	0x20005180
 80035b8:	20005088 	.word	0x20005088
 80035bc:	2000508c 	.word	0x2000508c
 80035c0:	2000512c 	.word	0x2000512c
 80035c4:	20005130 	.word	0x20005130
 80035c8:	2000517c 	.word	0x2000517c
 80035cc:	e000ed04 	.word	0xe000ed04
 80035d0:	20005090 	.word	0x20005090
 80035d4:	20005134 	.word	0x20005134

080035d8 <vTaskStartScheduler>:
{
 80035d8:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 80035da:	2400      	movs	r4, #0
 80035dc:	4b16      	ldr	r3, [pc, #88]	; (8003638 <vTaskStartScheduler+0x60>)
 80035de:	9400      	str	r4, [sp, #0]
 80035e0:	9301      	str	r3, [sp, #4]
 80035e2:	2280      	movs	r2, #128	; 0x80
 80035e4:	4623      	mov	r3, r4
 80035e6:	4915      	ldr	r1, [pc, #84]	; (800363c <vTaskStartScheduler+0x64>)
 80035e8:	4815      	ldr	r0, [pc, #84]	; (8003640 <vTaskStartScheduler+0x68>)
 80035ea:	f7ff ff25 	bl	8003438 <xTaskCreate>
	if( xReturn == pdPASS )
 80035ee:	2801      	cmp	r0, #1
 80035f0:	d114      	bne.n	800361c <vTaskStartScheduler+0x44>
 80035f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f6:	f383 8811 	msr	BASEPRI, r3
 80035fa:	f3bf 8f6f 	isb	sy
 80035fe:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8003602:	f04f 32ff 	mov.w	r2, #4294967295
 8003606:	4b0f      	ldr	r3, [pc, #60]	; (8003644 <vTaskStartScheduler+0x6c>)
 8003608:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800360a:	4b0f      	ldr	r3, [pc, #60]	; (8003648 <vTaskStartScheduler+0x70>)
 800360c:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800360e:	4b0f      	ldr	r3, [pc, #60]	; (800364c <vTaskStartScheduler+0x74>)
 8003610:	601c      	str	r4, [r3, #0]
}
 8003612:	b002      	add	sp, #8
 8003614:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8003618:	f7ff ba86 	b.w	8002b28 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800361c:	3001      	adds	r0, #1
 800361e:	d108      	bne.n	8003632 <vTaskStartScheduler+0x5a>
 8003620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003624:	f383 8811 	msr	BASEPRI, r3
 8003628:	f3bf 8f6f 	isb	sy
 800362c:	f3bf 8f4f 	dsb	sy
 8003630:	e7fe      	b.n	8003630 <vTaskStartScheduler+0x58>
}
 8003632:	b002      	add	sp, #8
 8003634:	bd10      	pop	{r4, pc}
 8003636:	bf00      	nop
 8003638:	2000515c 	.word	0x2000515c
 800363c:	08006208 	.word	0x08006208
 8003640:	080038bd 	.word	0x080038bd
 8003644:	20005160 	.word	0x20005160
 8003648:	2000517c 	.word	0x2000517c
 800364c:	200051a8 	.word	0x200051a8

08003650 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8003650:	4a02      	ldr	r2, [pc, #8]	; (800365c <vTaskSuspendAll+0xc>)
 8003652:	6813      	ldr	r3, [r2, #0]
 8003654:	3301      	adds	r3, #1
 8003656:	6013      	str	r3, [r2, #0]
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	20005128 	.word	0x20005128

08003660 <xTaskIncrementTick>:
{
 8003660:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003664:	4b3c      	ldr	r3, [pc, #240]	; (8003758 <xTaskIncrementTick+0xf8>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d153      	bne.n	8003714 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + 1;
 800366c:	4b3b      	ldr	r3, [pc, #236]	; (800375c <xTaskIncrementTick+0xfc>)
 800366e:	681c      	ldr	r4, [r3, #0]
 8003670:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8003672:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 8003674:	b9bc      	cbnz	r4, 80036a6 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8003676:	4b3a      	ldr	r3, [pc, #232]	; (8003760 <xTaskIncrementTick+0x100>)
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	6812      	ldr	r2, [r2, #0]
 800367c:	b142      	cbz	r2, 8003690 <xTaskIncrementTick+0x30>
 800367e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003682:	f383 8811 	msr	BASEPRI, r3
 8003686:	f3bf 8f6f 	isb	sy
 800368a:	f3bf 8f4f 	dsb	sy
 800368e:	e7fe      	b.n	800368e <xTaskIncrementTick+0x2e>
 8003690:	4a34      	ldr	r2, [pc, #208]	; (8003764 <xTaskIncrementTick+0x104>)
 8003692:	6819      	ldr	r1, [r3, #0]
 8003694:	6810      	ldr	r0, [r2, #0]
 8003696:	6018      	str	r0, [r3, #0]
 8003698:	6011      	str	r1, [r2, #0]
 800369a:	4a33      	ldr	r2, [pc, #204]	; (8003768 <xTaskIncrementTick+0x108>)
 800369c:	6813      	ldr	r3, [r2, #0]
 800369e:	3301      	adds	r3, #1
 80036a0:	6013      	str	r3, [r2, #0]
 80036a2:	f7ff fe67 	bl	8003374 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80036a6:	4d31      	ldr	r5, [pc, #196]	; (800376c <xTaskIncrementTick+0x10c>)
 80036a8:	f04f 0b00 	mov.w	fp, #0
 80036ac:	682b      	ldr	r3, [r5, #0]
 80036ae:	4f30      	ldr	r7, [pc, #192]	; (8003770 <xTaskIncrementTick+0x110>)
 80036b0:	429c      	cmp	r4, r3
 80036b2:	d33e      	bcc.n	8003732 <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036b4:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8003760 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 80036b8:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8003780 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036bc:	f8d8 2000 	ldr.w	r2, [r8]
 80036c0:	6812      	ldr	r2, [r2, #0]
 80036c2:	bb72      	cbnz	r2, 8003722 <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036c4:	f04f 32ff 	mov.w	r2, #4294967295
 80036c8:	602a      	str	r2, [r5, #0]
					break;
 80036ca:	e032      	b.n	8003732 <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80036cc:	f106 0a04 	add.w	sl, r6, #4
 80036d0:	4650      	mov	r0, sl
 80036d2:	f7ff f949 	bl	8002968 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80036d6:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 80036d8:	b119      	cbz	r1, 80036e2 <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80036da:	f106 0018 	add.w	r0, r6, #24
 80036de:	f7ff f943 	bl	8002968 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80036e2:	2201      	movs	r2, #1
 80036e4:	f04f 0e14 	mov.w	lr, #20
 80036e8:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 80036ea:	f8d9 3000 	ldr.w	r3, [r9]
 80036ee:	fa02 f100 	lsl.w	r1, r2, r0
 80036f2:	4319      	orrs	r1, r3
 80036f4:	4b1f      	ldr	r3, [pc, #124]	; (8003774 <xTaskIncrementTick+0x114>)
 80036f6:	f8c9 1000 	str.w	r1, [r9]
 80036fa:	fb0e 3000 	mla	r0, lr, r0, r3
 80036fe:	4651      	mov	r1, sl
 8003700:	f7ff f90f 	bl	8002922 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003704:	6838      	ldr	r0, [r7, #0]
 8003706:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8003708:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800370a:	4291      	cmp	r1, r2
 800370c:	bf28      	it	cs
 800370e:	f04f 0b01 	movcs.w	fp, #1
 8003712:	e7d3      	b.n	80036bc <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 8003714:	4a18      	ldr	r2, [pc, #96]	; (8003778 <xTaskIncrementTick+0x118>)
BaseType_t xSwitchRequired = pdFALSE;
 8003716:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 800371a:	6813      	ldr	r3, [r2, #0]
 800371c:	3301      	adds	r3, #1
 800371e:	6013      	str	r3, [r2, #0]
 8003720:	e011      	b.n	8003746 <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003722:	f8d8 2000 	ldr.w	r2, [r8]
 8003726:	68d2      	ldr	r2, [r2, #12]
 8003728:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800372a:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 800372c:	428c      	cmp	r4, r1
 800372e:	d2cd      	bcs.n	80036cc <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 8003730:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003732:	683a      	ldr	r2, [r7, #0]
 8003734:	4b0f      	ldr	r3, [pc, #60]	; (8003774 <xTaskIncrementTick+0x114>)
 8003736:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003738:	2214      	movs	r2, #20
 800373a:	434a      	muls	r2, r1
 800373c:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 800373e:	2a02      	cmp	r2, #2
 8003740:	bf28      	it	cs
 8003742:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8003746:	4a0d      	ldr	r2, [pc, #52]	; (800377c <xTaskIncrementTick+0x11c>)
 8003748:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 800374a:	2a00      	cmp	r2, #0
 800374c:	bf18      	it	ne
 800374e:	f04f 0b01 	movne.w	fp, #1
}
 8003752:	4658      	mov	r0, fp
 8003754:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003758:	20005128 	.word	0x20005128
 800375c:	200051a8 	.word	0x200051a8
 8003760:	20005088 	.word	0x20005088
 8003764:	2000508c 	.word	0x2000508c
 8003768:	20005164 	.word	0x20005164
 800376c:	20005160 	.word	0x20005160
 8003770:	20005084 	.word	0x20005084
 8003774:	20005090 	.word	0x20005090
 8003778:	20005124 	.word	0x20005124
 800377c:	200051ac 	.word	0x200051ac
 8003780:	20005130 	.word	0x20005130

08003784 <xTaskResumeAll>:
{
 8003784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8003788:	4c31      	ldr	r4, [pc, #196]	; (8003850 <xTaskResumeAll+0xcc>)
 800378a:	6823      	ldr	r3, [r4, #0]
 800378c:	b943      	cbnz	r3, 80037a0 <xTaskResumeAll+0x1c>
 800378e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003792:	f383 8811 	msr	BASEPRI, r3
 8003796:	f3bf 8f6f 	isb	sy
 800379a:	f3bf 8f4f 	dsb	sy
 800379e:	e7fe      	b.n	800379e <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 80037a0:	f7ff f940 	bl	8002a24 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80037a4:	6823      	ldr	r3, [r4, #0]
 80037a6:	3b01      	subs	r3, #1
 80037a8:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037aa:	6824      	ldr	r4, [r4, #0]
 80037ac:	b12c      	cbz	r4, 80037ba <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 80037ae:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80037b0:	f7ff f95a 	bl	8002a68 <vPortExitCritical>
}
 80037b4:	4620      	mov	r0, r4
 80037b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80037ba:	4b26      	ldr	r3, [pc, #152]	; (8003854 <xTaskResumeAll+0xd0>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d0f5      	beq.n	80037ae <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80037c2:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 800386c <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 80037c6:	4f24      	ldr	r7, [pc, #144]	; (8003858 <xTaskResumeAll+0xd4>)
 80037c8:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8003870 <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80037cc:	f8d9 3000 	ldr.w	r3, [r9]
 80037d0:	b9e3      	cbnz	r3, 800380c <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 80037d2:	b10c      	cbz	r4, 80037d8 <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 80037d4:	f7ff fdce 	bl	8003374 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80037d8:	4d20      	ldr	r5, [pc, #128]	; (800385c <xTaskResumeAll+0xd8>)
 80037da:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80037dc:	b144      	cbz	r4, 80037f0 <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 80037de:	2701      	movs	r7, #1
 80037e0:	4e1f      	ldr	r6, [pc, #124]	; (8003860 <xTaskResumeAll+0xdc>)
							if( xTaskIncrementTick() != pdFALSE )
 80037e2:	f7ff ff3d 	bl	8003660 <xTaskIncrementTick>
 80037e6:	b100      	cbz	r0, 80037ea <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 80037e8:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80037ea:	3c01      	subs	r4, #1
 80037ec:	d1f9      	bne.n	80037e2 <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 80037ee:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 80037f0:	4b1b      	ldr	r3, [pc, #108]	; (8003860 <xTaskResumeAll+0xdc>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d0da      	beq.n	80037ae <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 80037f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037fc:	4b19      	ldr	r3, [pc, #100]	; (8003864 <xTaskResumeAll+0xe0>)
 80037fe:	601a      	str	r2, [r3, #0]
 8003800:	f3bf 8f4f 	dsb	sy
 8003804:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8003808:	2401      	movs	r4, #1
 800380a:	e7d1      	b.n	80037b0 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800380c:	f8d9 300c 	ldr.w	r3, [r9, #12]
					prvAddTaskToReadyList( pxTCB );
 8003810:	2501      	movs	r5, #1
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003812:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003814:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003816:	f104 0018 	add.w	r0, r4, #24
 800381a:	f7ff f8a5 	bl	8002968 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800381e:	4630      	mov	r0, r6
 8003820:	f7ff f8a2 	bl	8002968 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003824:	2014      	movs	r0, #20
 8003826:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003828:	6839      	ldr	r1, [r7, #0]
 800382a:	fa05 f302 	lsl.w	r3, r5, r2
 800382e:	430b      	orrs	r3, r1
 8003830:	fb00 8002 	mla	r0, r0, r2, r8
 8003834:	4631      	mov	r1, r6
 8003836:	603b      	str	r3, [r7, #0]
 8003838:	f7ff f873 	bl	8002922 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800383c:	4b0a      	ldr	r3, [pc, #40]	; (8003868 <xTaskResumeAll+0xe4>)
 800383e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003844:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 8003846:	bf24      	itt	cs
 8003848:	4b05      	ldrcs	r3, [pc, #20]	; (8003860 <xTaskResumeAll+0xdc>)
 800384a:	601d      	strcs	r5, [r3, #0]
 800384c:	e7be      	b.n	80037cc <xTaskResumeAll+0x48>
 800384e:	bf00      	nop
 8003850:	20005128 	.word	0x20005128
 8003854:	2000511c 	.word	0x2000511c
 8003858:	20005130 	.word	0x20005130
 800385c:	20005124 	.word	0x20005124
 8003860:	200051ac 	.word	0x200051ac
 8003864:	e000ed04 	.word	0xe000ed04
 8003868:	20005084 	.word	0x20005084
 800386c:	20005168 	.word	0x20005168
 8003870:	20005090 	.word	0x20005090

08003874 <vTaskDelay>:
	{
 8003874:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003876:	b940      	cbnz	r0, 800388a <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8003878:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800387c:	4b0d      	ldr	r3, [pc, #52]	; (80038b4 <vTaskDelay+0x40>)
 800387e:	601a      	str	r2, [r3, #0]
 8003880:	f3bf 8f4f 	dsb	sy
 8003884:	f3bf 8f6f 	isb	sy
 8003888:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800388a:	4b0b      	ldr	r3, [pc, #44]	; (80038b8 <vTaskDelay+0x44>)
 800388c:	6819      	ldr	r1, [r3, #0]
 800388e:	b141      	cbz	r1, 80038a2 <vTaskDelay+0x2e>
 8003890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003894:	f383 8811 	msr	BASEPRI, r3
 8003898:	f3bf 8f6f 	isb	sy
 800389c:	f3bf 8f4f 	dsb	sy
 80038a0:	e7fe      	b.n	80038a0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80038a2:	f7ff fed5 	bl	8003650 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80038a6:	f7ff fd77 	bl	8003398 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80038aa:	f7ff ff6b 	bl	8003784 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80038ae:	2800      	cmp	r0, #0
 80038b0:	d0e2      	beq.n	8003878 <vTaskDelay+0x4>
 80038b2:	bd08      	pop	{r3, pc}
 80038b4:	e000ed04 	.word	0xe000ed04
 80038b8:	20005128 	.word	0x20005128

080038bc <prvIdleTask>:
{
 80038bc:	b508      	push	{r3, lr}
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 80038be:	4e17      	ldr	r6, [pc, #92]	; (800391c <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80038c0:	4c17      	ldr	r4, [pc, #92]	; (8003920 <prvIdleTask+0x64>)
 80038c2:	6823      	ldr	r3, [r4, #0]
 80038c4:	b963      	cbnz	r3, 80038e0 <prvIdleTask+0x24>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80038c6:	4b17      	ldr	r3, [pc, #92]	; (8003924 <prvIdleTask+0x68>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d9f8      	bls.n	80038c0 <prvIdleTask+0x4>
				taskYIELD();
 80038ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038d2:	4b15      	ldr	r3, [pc, #84]	; (8003928 <prvIdleTask+0x6c>)
 80038d4:	601a      	str	r2, [r3, #0]
 80038d6:	f3bf 8f4f 	dsb	sy
 80038da:	f3bf 8f6f 	isb	sy
 80038de:	e7ef      	b.n	80038c0 <prvIdleTask+0x4>
			vTaskSuspendAll();
 80038e0:	f7ff feb6 	bl	8003650 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 80038e4:	6835      	ldr	r5, [r6, #0]
			( void ) xTaskResumeAll();
 80038e6:	f7ff ff4d 	bl	8003784 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 80038ea:	2d00      	cmp	r5, #0
 80038ec:	d0e9      	beq.n	80038c2 <prvIdleTask+0x6>
				taskENTER_CRITICAL();
 80038ee:	f7ff f899 	bl	8002a24 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80038f2:	68f3      	ldr	r3, [r6, #12]
 80038f4:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80038f6:	1d28      	adds	r0, r5, #4
 80038f8:	f7ff f836 	bl	8002968 <uxListRemove>
					--uxCurrentNumberOfTasks;
 80038fc:	4a0b      	ldr	r2, [pc, #44]	; (800392c <prvIdleTask+0x70>)
 80038fe:	6813      	ldr	r3, [r2, #0]
 8003900:	3b01      	subs	r3, #1
 8003902:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8003904:	6823      	ldr	r3, [r4, #0]
 8003906:	3b01      	subs	r3, #1
 8003908:	6023      	str	r3, [r4, #0]
				taskEXIT_CRITICAL();
 800390a:	f7ff f8ad 	bl	8002a68 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 800390e:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8003910:	f7ff fa34 	bl	8002d7c <vPortFree>
			vPortFree( pxTCB );
 8003914:	4628      	mov	r0, r5
 8003916:	f7ff fa31 	bl	8002d7c <vPortFree>
 800391a:	e7d2      	b.n	80038c2 <prvIdleTask+0x6>
 800391c:	20005194 	.word	0x20005194
 8003920:	20005120 	.word	0x20005120
 8003924:	20005090 	.word	0x20005090
 8003928:	e000ed04 	.word	0xe000ed04
 800392c:	2000511c 	.word	0x2000511c

08003930 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003930:	4b17      	ldr	r3, [pc, #92]	; (8003990 <vTaskSwitchContext+0x60>)
{
 8003932:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	4b17      	ldr	r3, [pc, #92]	; (8003994 <vTaskSwitchContext+0x64>)
 8003938:	b112      	cbz	r2, 8003940 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800393a:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800393c:	601a      	str	r2, [r3, #0]
 800393e:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8003940:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003942:	4b15      	ldr	r3, [pc, #84]	; (8003998 <vTaskSwitchContext+0x68>)
 8003944:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8003946:	fab3 f383 	clz	r3, r3
 800394a:	2214      	movs	r2, #20
 800394c:	b2db      	uxtb	r3, r3
 800394e:	f1c3 031f 	rsb	r3, r3, #31
 8003952:	435a      	muls	r2, r3
 8003954:	4911      	ldr	r1, [pc, #68]	; (800399c <vTaskSwitchContext+0x6c>)
 8003956:	588c      	ldr	r4, [r1, r2]
 8003958:	1888      	adds	r0, r1, r2
 800395a:	b944      	cbnz	r4, 800396e <vTaskSwitchContext+0x3e>
	__asm volatile
 800395c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003960:	f383 8811 	msr	BASEPRI, r3
 8003964:	f3bf 8f6f 	isb	sy
 8003968:	f3bf 8f4f 	dsb	sy
 800396c:	e7fe      	b.n	800396c <vTaskSwitchContext+0x3c>
 800396e:	6844      	ldr	r4, [r0, #4]
 8003970:	3208      	adds	r2, #8
 8003972:	6864      	ldr	r4, [r4, #4]
 8003974:	440a      	add	r2, r1
 8003976:	4294      	cmp	r4, r2
 8003978:	bf08      	it	eq
 800397a:	6862      	ldreq	r2, [r4, #4]
 800397c:	6044      	str	r4, [r0, #4]
 800397e:	bf08      	it	eq
 8003980:	6042      	streq	r2, [r0, #4]
 8003982:	2214      	movs	r2, #20
 8003984:	fb02 1303 	mla	r3, r2, r3, r1
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	68da      	ldr	r2, [r3, #12]
 800398c:	4b04      	ldr	r3, [pc, #16]	; (80039a0 <vTaskSwitchContext+0x70>)
 800398e:	e7d5      	b.n	800393c <vTaskSwitchContext+0xc>
 8003990:	20005128 	.word	0x20005128
 8003994:	200051ac 	.word	0x200051ac
 8003998:	20005130 	.word	0x20005130
 800399c:	20005090 	.word	0x20005090
 80039a0:	20005084 	.word	0x20005084

080039a4 <vTaskPlaceOnEventList>:
{
 80039a4:	b510      	push	{r4, lr}
 80039a6:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 80039a8:	b940      	cbnz	r0, 80039bc <vTaskPlaceOnEventList+0x18>
 80039aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ae:	f383 8811 	msr	BASEPRI, r3
 80039b2:	f3bf 8f6f 	isb	sy
 80039b6:	f3bf 8f4f 	dsb	sy
 80039ba:	e7fe      	b.n	80039ba <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80039bc:	4b05      	ldr	r3, [pc, #20]	; (80039d4 <vTaskPlaceOnEventList+0x30>)
 80039be:	6819      	ldr	r1, [r3, #0]
 80039c0:	3118      	adds	r1, #24
 80039c2:	f7fe ffba 	bl	800293a <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80039c6:	4620      	mov	r0, r4
}
 80039c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80039cc:	2101      	movs	r1, #1
 80039ce:	f7ff bce3 	b.w	8003398 <prvAddCurrentTaskToDelayedList>
 80039d2:	bf00      	nop
 80039d4:	20005084 	.word	0x20005084

080039d8 <xTaskRemoveFromEventList>:
{
 80039d8:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80039da:	68c3      	ldr	r3, [r0, #12]
 80039dc:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80039de:	b944      	cbnz	r4, 80039f2 <xTaskRemoveFromEventList+0x1a>
 80039e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e4:	f383 8811 	msr	BASEPRI, r3
 80039e8:	f3bf 8f6f 	isb	sy
 80039ec:	f3bf 8f4f 	dsb	sy
 80039f0:	e7fe      	b.n	80039f0 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80039f2:	f104 0518 	add.w	r5, r4, #24
 80039f6:	4628      	mov	r0, r5
 80039f8:	f7fe ffb6 	bl	8002968 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039fc:	4b11      	ldr	r3, [pc, #68]	; (8003a44 <xTaskRemoveFromEventList+0x6c>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	b9e3      	cbnz	r3, 8003a3c <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003a02:	1d25      	adds	r5, r4, #4
 8003a04:	4628      	mov	r0, r5
 8003a06:	f7fe ffaf 	bl	8002968 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	490e      	ldr	r1, [pc, #56]	; (8003a48 <xTaskRemoveFromEventList+0x70>)
 8003a0e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003a10:	6808      	ldr	r0, [r1, #0]
 8003a12:	4093      	lsls	r3, r2
 8003a14:	4303      	orrs	r3, r0
 8003a16:	2014      	movs	r0, #20
 8003a18:	600b      	str	r3, [r1, #0]
 8003a1a:	4629      	mov	r1, r5
 8003a1c:	4b0b      	ldr	r3, [pc, #44]	; (8003a4c <xTaskRemoveFromEventList+0x74>)
 8003a1e:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003a22:	f7fe ff7e 	bl	8002922 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003a26:	4b0a      	ldr	r3, [pc, #40]	; (8003a50 <xTaskRemoveFromEventList+0x78>)
 8003a28:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a2e:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8003a30:	bf85      	ittet	hi
 8003a32:	2001      	movhi	r0, #1
 8003a34:	4b07      	ldrhi	r3, [pc, #28]	; (8003a54 <xTaskRemoveFromEventList+0x7c>)
		xReturn = pdFALSE;
 8003a36:	2000      	movls	r0, #0
		xYieldPending = pdTRUE;
 8003a38:	6018      	strhi	r0, [r3, #0]
}
 8003a3a:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003a3c:	4629      	mov	r1, r5
 8003a3e:	4806      	ldr	r0, [pc, #24]	; (8003a58 <xTaskRemoveFromEventList+0x80>)
 8003a40:	e7ef      	b.n	8003a22 <xTaskRemoveFromEventList+0x4a>
 8003a42:	bf00      	nop
 8003a44:	20005128 	.word	0x20005128
 8003a48:	20005130 	.word	0x20005130
 8003a4c:	20005090 	.word	0x20005090
 8003a50:	20005084 	.word	0x20005084
 8003a54:	200051ac 	.word	0x200051ac
 8003a58:	20005168 	.word	0x20005168

08003a5c <vTaskSetTimeOutState>:
{
 8003a5c:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
 8003a5e:	b908      	cbnz	r0, 8003a64 <vTaskSetTimeOutState+0x8>
 8003a60:	f7ff fce0 	bl	8003424 <prvTaskIsTaskSuspended.part.0>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003a64:	4b03      	ldr	r3, [pc, #12]	; (8003a74 <vTaskSetTimeOutState+0x18>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003a6a:	4b03      	ldr	r3, [pc, #12]	; (8003a78 <vTaskSetTimeOutState+0x1c>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	6043      	str	r3, [r0, #4]
 8003a70:	bd08      	pop	{r3, pc}
 8003a72:	bf00      	nop
 8003a74:	20005164 	.word	0x20005164
 8003a78:	200051a8 	.word	0x200051a8

08003a7c <xTaskCheckForTimeOut>:
{
 8003a7c:	b538      	push	{r3, r4, r5, lr}
 8003a7e:	460d      	mov	r5, r1
	configASSERT( pxTimeOut );
 8003a80:	4604      	mov	r4, r0
 8003a82:	b940      	cbnz	r0, 8003a96 <xTaskCheckForTimeOut+0x1a>
 8003a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a88:	f383 8811 	msr	BASEPRI, r3
 8003a8c:	f3bf 8f6f 	isb	sy
 8003a90:	f3bf 8f4f 	dsb	sy
 8003a94:	e7fe      	b.n	8003a94 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8003a96:	b941      	cbnz	r1, 8003aaa <xTaskCheckForTimeOut+0x2e>
 8003a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a9c:	f383 8811 	msr	BASEPRI, r3
 8003aa0:	f3bf 8f6f 	isb	sy
 8003aa4:	f3bf 8f4f 	dsb	sy
 8003aa8:	e7fe      	b.n	8003aa8 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 8003aaa:	f7fe ffbb 	bl	8002a24 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8003aae:	4b0e      	ldr	r3, [pc, #56]	; (8003ae8 <xTaskCheckForTimeOut+0x6c>)
 8003ab0:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8003ab2:	682b      	ldr	r3, [r5, #0]
 8003ab4:	1c5a      	adds	r2, r3, #1
 8003ab6:	d010      	beq.n	8003ada <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003ab8:	4a0c      	ldr	r2, [pc, #48]	; (8003aec <xTaskCheckForTimeOut+0x70>)
 8003aba:	6820      	ldr	r0, [r4, #0]
 8003abc:	6812      	ldr	r2, [r2, #0]
 8003abe:	4290      	cmp	r0, r2
 8003ac0:	6862      	ldr	r2, [r4, #4]
 8003ac2:	d001      	beq.n	8003ac8 <xTaskCheckForTimeOut+0x4c>
 8003ac4:	4291      	cmp	r1, r2
 8003ac6:	d20d      	bcs.n	8003ae4 <xTaskCheckForTimeOut+0x68>
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003ac8:	1a88      	subs	r0, r1, r2
 8003aca:	4283      	cmp	r3, r0
 8003acc:	d90a      	bls.n	8003ae4 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8003ace:	1a5b      	subs	r3, r3, r1
 8003ad0:	4413      	add	r3, r2
 8003ad2:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8003ad4:	4620      	mov	r0, r4
 8003ad6:	f7ff ffc1 	bl	8003a5c <vTaskSetTimeOutState>
				xReturn = pdFALSE;
 8003ada:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8003adc:	f7fe ffc4 	bl	8002a68 <vPortExitCritical>
}
 8003ae0:	4620      	mov	r0, r4
 8003ae2:	bd38      	pop	{r3, r4, r5, pc}
			xReturn = pdTRUE;
 8003ae4:	2401      	movs	r4, #1
 8003ae6:	e7f9      	b.n	8003adc <xTaskCheckForTimeOut+0x60>
 8003ae8:	200051a8 	.word	0x200051a8
 8003aec:	20005164 	.word	0x20005164

08003af0 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8003af0:	2201      	movs	r2, #1
 8003af2:	4b01      	ldr	r3, [pc, #4]	; (8003af8 <vTaskMissedYield+0x8>)
 8003af4:	601a      	str	r2, [r3, #0]
 8003af6:	4770      	bx	lr
 8003af8:	200051ac 	.word	0x200051ac

08003afc <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8003afc:	4b05      	ldr	r3, [pc, #20]	; (8003b14 <xTaskGetSchedulerState+0x18>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	b133      	cbz	r3, 8003b10 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b02:	4b05      	ldr	r3, [pc, #20]	; (8003b18 <xTaskGetSchedulerState+0x1c>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8003b08:	bf0c      	ite	eq
 8003b0a:	2002      	moveq	r0, #2
 8003b0c:	2000      	movne	r0, #0
 8003b0e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003b10:	2001      	movs	r0, #1
	}
 8003b12:	4770      	bx	lr
 8003b14:	2000517c 	.word	0x2000517c
 8003b18:	20005128 	.word	0x20005128

08003b1c <vTaskPriorityInherit>:
	{
 8003b1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 8003b20:	4604      	mov	r4, r0
 8003b22:	2800      	cmp	r0, #0
 8003b24:	d039      	beq.n	8003b9a <vTaskPriorityInherit+0x7e>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003b26:	4d1e      	ldr	r5, [pc, #120]	; (8003ba0 <vTaskPriorityInherit+0x84>)
 8003b28:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003b2a:	682a      	ldr	r2, [r5, #0]
 8003b2c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d233      	bcs.n	8003b9a <vTaskPriorityInherit+0x7e>
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003b32:	2714      	movs	r7, #20
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003b34:	6982      	ldr	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003b36:	4e1b      	ldr	r6, [pc, #108]	; (8003ba4 <vTaskPriorityInherit+0x88>)
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003b38:	2a00      	cmp	r2, #0
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b3a:	bfa8      	it	ge
 8003b3c:	682a      	ldrge	r2, [r5, #0]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003b3e:	fb07 6303 	mla	r3, r7, r3, r6
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b42:	bfa2      	ittt	ge
 8003b44:	6ad2      	ldrge	r2, [r2, #44]	; 0x2c
 8003b46:	f1c2 0207 	rsbge	r2, r2, #7
 8003b4a:	6182      	strge	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003b4c:	6942      	ldr	r2, [r0, #20]
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d120      	bne.n	8003b94 <vTaskPriorityInherit+0x78>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b52:	f100 0804 	add.w	r8, r0, #4
 8003b56:	4640      	mov	r0, r8
 8003b58:	f7fe ff06 	bl	8002968 <uxListRemove>
 8003b5c:	4a12      	ldr	r2, [pc, #72]	; (8003ba8 <vTaskPriorityInherit+0x8c>)
 8003b5e:	b948      	cbnz	r0, 8003b74 <vTaskPriorityInherit+0x58>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003b60:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003b62:	4347      	muls	r7, r0
 8003b64:	59f3      	ldr	r3, [r6, r7]
 8003b66:	b92b      	cbnz	r3, 8003b74 <vTaskPriorityInherit+0x58>
 8003b68:	2101      	movs	r1, #1
 8003b6a:	6813      	ldr	r3, [r2, #0]
 8003b6c:	4081      	lsls	r1, r0
 8003b6e:	ea23 0301 	bic.w	r3, r3, r1
 8003b72:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003b74:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxTCB );
 8003b76:	6811      	ldr	r1, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003b78:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	4083      	lsls	r3, r0
 8003b7e:	430b      	orrs	r3, r1
 8003b80:	6013      	str	r3, [r2, #0]
 8003b82:	2314      	movs	r3, #20
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003b84:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8003b86:	4641      	mov	r1, r8
 8003b88:	fb03 6000 	mla	r0, r3, r0, r6
	}
 8003b8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					prvAddTaskToReadyList( pxTCB );
 8003b90:	f7fe bec7 	b.w	8002922 <vListInsertEnd>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003b94:	682b      	ldr	r3, [r5, #0]
 8003b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b98:	62c3      	str	r3, [r0, #44]	; 0x2c
 8003b9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b9e:	bf00      	nop
 8003ba0:	20005084 	.word	0x20005084
 8003ba4:	20005090 	.word	0x20005090
 8003ba8:	20005130 	.word	0x20005130

08003bac <xTaskPriorityDisinherit>:
	{
 8003bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8003bae:	4604      	mov	r4, r0
 8003bb0:	b908      	cbnz	r0, 8003bb6 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 8003bb2:	2000      	movs	r0, #0
 8003bb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8003bb6:	4b22      	ldr	r3, [pc, #136]	; (8003c40 <xTaskPriorityDisinherit+0x94>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4298      	cmp	r0, r3
 8003bbc:	d008      	beq.n	8003bd0 <xTaskPriorityDisinherit+0x24>
 8003bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc2:	f383 8811 	msr	BASEPRI, r3
 8003bc6:	f3bf 8f6f 	isb	sy
 8003bca:	f3bf 8f4f 	dsb	sy
 8003bce:	e7fe      	b.n	8003bce <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8003bd0:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8003bd2:	b943      	cbnz	r3, 8003be6 <xTaskPriorityDisinherit+0x3a>
 8003bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bd8:	f383 8811 	msr	BASEPRI, r3
 8003bdc:	f3bf 8f6f 	isb	sy
 8003be0:	f3bf 8f4f 	dsb	sy
 8003be4:	e7fe      	b.n	8003be4 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003be6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8003be8:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 8003bea:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003bec:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8003bee:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003bf0:	d0df      	beq.n	8003bb2 <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d1dd      	bne.n	8003bb2 <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003bf6:	1d05      	adds	r5, r0, #4
 8003bf8:	4628      	mov	r0, r5
 8003bfa:	f7fe feb5 	bl	8002968 <uxListRemove>
 8003bfe:	4e11      	ldr	r6, [pc, #68]	; (8003c44 <xTaskPriorityDisinherit+0x98>)
 8003c00:	4a11      	ldr	r2, [pc, #68]	; (8003c48 <xTaskPriorityDisinherit+0x9c>)
 8003c02:	b950      	cbnz	r0, 8003c1a <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003c04:	2114      	movs	r1, #20
 8003c06:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003c08:	4379      	muls	r1, r7
 8003c0a:	5873      	ldr	r3, [r6, r1]
 8003c0c:	b92b      	cbnz	r3, 8003c1a <xTaskPriorityDisinherit+0x6e>
 8003c0e:	2001      	movs	r0, #1
 8003c10:	6813      	ldr	r3, [r2, #0]
 8003c12:	40b8      	lsls	r0, r7
 8003c14:	ea23 0300 	bic.w	r3, r3, r0
 8003c18:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003c1a:	6c63      	ldr	r3, [r4, #68]	; 0x44
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c1c:	f1c3 0107 	rsb	r1, r3, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003c20:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c22:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8003c24:	2401      	movs	r4, #1
 8003c26:	6811      	ldr	r1, [r2, #0]
 8003c28:	fa04 f003 	lsl.w	r0, r4, r3
 8003c2c:	4308      	orrs	r0, r1
 8003c2e:	6010      	str	r0, [r2, #0]
 8003c30:	2014      	movs	r0, #20
 8003c32:	4629      	mov	r1, r5
 8003c34:	fb00 6003 	mla	r0, r0, r3, r6
 8003c38:	f7fe fe73 	bl	8002922 <vListInsertEnd>
					xReturn = pdTRUE;
 8003c3c:	4620      	mov	r0, r4
	}
 8003c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c40:	20005084 	.word	0x20005084
 8003c44:	20005090 	.word	0x20005090
 8003c48:	20005130 	.word	0x20005130

08003c4c <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8003c4c:	4b04      	ldr	r3, [pc, #16]	; (8003c60 <pvTaskIncrementMutexHeldCount+0x14>)
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	b11a      	cbz	r2, 8003c5a <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8003c52:	6819      	ldr	r1, [r3, #0]
 8003c54:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 8003c56:	3201      	adds	r2, #1
 8003c58:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 8003c5a:	6818      	ldr	r0, [r3, #0]
	}
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	20005084 	.word	0x20005084

08003c64 <fir_filter>:

extern uint16_t ADCRawData[4];
extern uint16_t sensorValue[4];
extern uint16_t filteredData[4];

uint16_t fir_filter(uint16_t *signal, uint16_t sample){
 8003c64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c66:	b08b      	sub	sp, #44	; 0x2c
//	         -581
//		    };
//	uint32_t DCgain = 32768;

	//5 Hz Fcut = 1 Hz
	uint32_t FIRCoef[10] = {
 8003c68:	466c      	mov	r4, sp
uint16_t fir_filter(uint16_t *signal, uint16_t sample){
 8003c6a:	4606      	mov	r6, r0
	uint32_t FIRCoef[10] = {
 8003c6c:	4d0f      	ldr	r5, [pc, #60]	; (8003cac <fir_filter+0x48>)
uint16_t fir_filter(uint16_t *signal, uint16_t sample){
 8003c6e:	460f      	mov	r7, r1
	uint32_t FIRCoef[10] = {
 8003c70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c78:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003c7c:	e884 0003 	stmia.w	r4, {r0, r1}
 8003c80:	f106 0312 	add.w	r3, r6, #18


	uint8_t i = 0;

	for (i = 10 - 1; i> 0; i--){
		signal[i] = signal[i-1];
 8003c84:	f833 2d02 	ldrh.w	r2, [r3, #-2]!
	for (i = 10 - 1; i> 0; i--){
 8003c88:	429e      	cmp	r6, r3
		signal[i] = signal[i-1];
 8003c8a:	805a      	strh	r2, [r3, #2]
	for (i = 10 - 1; i> 0; i--){
 8003c8c:	d1fa      	bne.n	8003c84 <fir_filter+0x20>
	}

	signal[0] = sample;
 8003c8e:	2300      	movs	r3, #0
	filteredSample = 0;
 8003c90:	4618      	mov	r0, r3
	signal[0] = sample;
 8003c92:	8037      	strh	r7, [r6, #0]

	for (i = 0 ; i < 10; i++){
		filteredSample += FIRCoef[i] * (uint32_t)signal[i];
 8003c94:	f836 2013 	ldrh.w	r2, [r6, r3, lsl #1]
 8003c98:	f85d 1023 	ldr.w	r1, [sp, r3, lsl #2]
 8003c9c:	3301      	adds	r3, #1
	for (i = 0 ; i < 10; i++){
 8003c9e:	2b0a      	cmp	r3, #10
		filteredSample += FIRCoef[i] * (uint32_t)signal[i];
 8003ca0:	fb01 0002 	mla	r0, r1, r2, r0
	for (i = 0 ; i < 10; i++){
 8003ca4:	d1f6      	bne.n	8003c94 <fir_filter+0x30>
	}
	filteredSample = filteredSample / DCgain;

	return (uint16_t) filteredSample;
}
 8003ca6:	0c00      	lsrs	r0, r0, #16
 8003ca8:	b00b      	add	sp, #44	; 0x2c
 8003caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cac:	080061d4 	.word	0x080061d4

08003cb0 <xStoreADCDataTask>:

void xStoreADCDataTask(void* arguments){
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b094      	sub	sp, #80	; 0x50

	uint16_t sens1_array[10] = {1};
 8003cb4:	2214      	movs	r2, #20
 8003cb6:	2100      	movs	r1, #0
 8003cb8:	4668      	mov	r0, sp
 8003cba:	f001 f958 	bl	8004f6e <memset>
	uint16_t sens2_array[10] = {2};
 8003cbe:	2214      	movs	r2, #20
	uint16_t sens1_array[10] = {1};
 8003cc0:	2301      	movs	r3, #1
	uint16_t sens2_array[10] = {2};
 8003cc2:	2100      	movs	r1, #0
 8003cc4:	eb0d 0002 	add.w	r0, sp, r2
	uint16_t sens1_array[10] = {1};
 8003cc8:	f8ad 3000 	strh.w	r3, [sp]
	uint16_t sens2_array[10] = {2};
 8003ccc:	f001 f94f 	bl	8004f6e <memset>
 8003cd0:	2302      	movs	r3, #2
	uint16_t sens3_array[10] = {3};
 8003cd2:	2214      	movs	r2, #20
 8003cd4:	2100      	movs	r1, #0
 8003cd6:	a80a      	add	r0, sp, #40	; 0x28
	uint16_t sens2_array[10] = {2};
 8003cd8:	f8ad 3014 	strh.w	r3, [sp, #20]
	uint16_t sens3_array[10] = {3};
 8003cdc:	f001 f947 	bl	8004f6e <memset>
 8003ce0:	2303      	movs	r3, #3
	uint16_t sens4_array[10] = {4};
 8003ce2:	2214      	movs	r2, #20
 8003ce4:	2100      	movs	r1, #0
 8003ce6:	a80f      	add	r0, sp, #60	; 0x3c


	for(;;){

		if (lastTimeCommand > 50){
 8003ce8:	4e56      	ldr	r6, [pc, #344]	; (8003e44 <xStoreADCDataTask+0x194>)
	uint16_t sens3_array[10] = {3};
 8003cea:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	uint16_t sens4_array[10] = {4};
 8003cee:	f001 f93e 	bl	8004f6e <memset>
 8003cf2:	2304      	movs	r3, #4
 8003cf4:	46b0      	mov	r8, r6
			C1_UP_OFF;
 8003cf6:	4c54      	ldr	r4, [pc, #336]	; (8003e48 <xStoreADCDataTask+0x198>)
	uint16_t sens4_array[10] = {4};
 8003cf8:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
		if (lastTimeCommand > 50){
 8003cfc:	8833      	ldrh	r3, [r6, #0]
 8003cfe:	2b32      	cmp	r3, #50	; 0x32
 8003d00:	d96d      	bls.n	8003dde <xStoreADCDataTask+0x12e>
			C1_UP_OFF;
 8003d02:	2200      	movs	r2, #0
 8003d04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003d08:	4620      	mov	r0, r4
 8003d0a:	f7fd fbff 	bl	800150c <HAL_GPIO_WritePin>
			C1_DOWN_OFF;
 8003d0e:	2200      	movs	r2, #0
 8003d10:	2180      	movs	r1, #128	; 0x80
 8003d12:	4620      	mov	r0, r4
 8003d14:	f7fd fbfa 	bl	800150c <HAL_GPIO_WritePin>
			C2_UP_OFF;
 8003d18:	2200      	movs	r2, #0
 8003d1a:	2120      	movs	r1, #32
 8003d1c:	4620      	mov	r0, r4
 8003d1e:	f7fd fbf5 	bl	800150c <HAL_GPIO_WritePin>
			C2_DOWN_OFF;
 8003d22:	2200      	movs	r2, #0
 8003d24:	2108      	movs	r1, #8
 8003d26:	4620      	mov	r0, r4
 8003d28:	f7fd fbf0 	bl	800150c <HAL_GPIO_WritePin>
			C3_UP_OFF;
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003d32:	4620      	mov	r0, r4
 8003d34:	f7fd fbea 	bl	800150c <HAL_GPIO_WritePin>
			C3_DOWN_OFF;
 8003d38:	2200      	movs	r2, #0
 8003d3a:	2140      	movs	r1, #64	; 0x40
 8003d3c:	4620      	mov	r0, r4
 8003d3e:	f7fd fbe5 	bl	800150c <HAL_GPIO_WritePin>
			C4_UP_OFF;
 8003d42:	2200      	movs	r2, #0
 8003d44:	2110      	movs	r1, #16
 8003d46:	4620      	mov	r0, r4
 8003d48:	f7fd fbe0 	bl	800150c <HAL_GPIO_WritePin>
			C4_DOWN_OFF;
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	2104      	movs	r1, #4
 8003d50:	483e      	ldr	r0, [pc, #248]	; (8003e4c <xStoreADCDataTask+0x19c>)
 8003d52:	f7fd fbdb 	bl	800150c <HAL_GPIO_WritePin>

			if (indicationState != SEARCH){
 8003d56:	4a3e      	ldr	r2, [pc, #248]	; (8003e50 <xStoreADCDataTask+0x1a0>)
 8003d58:	7813      	ldrb	r3, [r2, #0]
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d037      	beq.n	8003dce <xStoreADCDataTask+0x11e>
				indicationState = NORMAL_NC;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	7013      	strb	r3, [r2, #0]
				lastTimeCommand = 0;
 8003d62:	2300      	movs	r3, #0
 8003d64:	f8a8 3000 	strh.w	r3, [r8]
		}
		else{
			lastTimeCommand++;
		}

		sensorValue[SENS_1] = ADCRawData[SENS_1];
 8003d68:	4b3a      	ldr	r3, [pc, #232]	; (8003e54 <xStoreADCDataTask+0x1a4>)
 8003d6a:	4d3b      	ldr	r5, [pc, #236]	; (8003e58 <xStoreADCDataTask+0x1a8>)
 8003d6c:	881a      	ldrh	r2, [r3, #0]
		sensorValue[SENS_2] = ADCRawData[SENS_2];
		sensorValue[SENS_3] = ADCRawData[SENS_3];
		sensorValue[SENS_4] = ADCRawData[SENS_4];

		HAL_ADCEx_InjectedStart_IT(&hadc1);
 8003d6e:	483b      	ldr	r0, [pc, #236]	; (8003e5c <xStoreADCDataTask+0x1ac>)
		sensorValue[SENS_1] = ADCRawData[SENS_1];
 8003d70:	802a      	strh	r2, [r5, #0]
		sensorValue[SENS_2] = ADCRawData[SENS_2];
 8003d72:	885a      	ldrh	r2, [r3, #2]


		filteredData[SENS_1] = fir_filter(sens1_array, sensorValue[SENS_1]);
 8003d74:	4f3a      	ldr	r7, [pc, #232]	; (8003e60 <xStoreADCDataTask+0x1b0>)
		sensorValue[SENS_2] = ADCRawData[SENS_2];
 8003d76:	806a      	strh	r2, [r5, #2]
		sensorValue[SENS_3] = ADCRawData[SENS_3];
 8003d78:	889a      	ldrh	r2, [r3, #4]
		sensorValue[SENS_4] = ADCRawData[SENS_4];
 8003d7a:	88db      	ldrh	r3, [r3, #6]
		sensorValue[SENS_3] = ADCRawData[SENS_3];
 8003d7c:	80aa      	strh	r2, [r5, #4]
		sensorValue[SENS_4] = ADCRawData[SENS_4];
 8003d7e:	80eb      	strh	r3, [r5, #6]
		HAL_ADCEx_InjectedStart_IT(&hadc1);
 8003d80:	f7fc fe32 	bl	80009e8 <HAL_ADCEx_InjectedStart_IT>
		filteredData[SENS_1] = fir_filter(sens1_array, sensorValue[SENS_1]);
 8003d84:	8829      	ldrh	r1, [r5, #0]
 8003d86:	4668      	mov	r0, sp
 8003d88:	f7ff ff6c 	bl	8003c64 <fir_filter>
		filteredData[SENS_2] = fir_filter(sens2_array, sensorValue[SENS_2]);
 8003d8c:	8869      	ldrh	r1, [r5, #2]
		filteredData[SENS_1] = fir_filter(sens1_array, sensorValue[SENS_1]);
 8003d8e:	8038      	strh	r0, [r7, #0]
		filteredData[SENS_2] = fir_filter(sens2_array, sensorValue[SENS_2]);
 8003d90:	a805      	add	r0, sp, #20
 8003d92:	f7ff ff67 	bl	8003c64 <fir_filter>
		filteredData[SENS_3] = fir_filter(sens3_array, sensorValue[SENS_3]);
 8003d96:	88a9      	ldrh	r1, [r5, #4]
		filteredData[SENS_2] = fir_filter(sens2_array, sensorValue[SENS_2]);
 8003d98:	8078      	strh	r0, [r7, #2]
		filteredData[SENS_3] = fir_filter(sens3_array, sensorValue[SENS_3]);
 8003d9a:	a80a      	add	r0, sp, #40	; 0x28
 8003d9c:	f7ff ff62 	bl	8003c64 <fir_filter>
		filteredData[SENS_4] = fir_filter(sens4_array, sensorValue[SENS_4]);
 8003da0:	88e9      	ldrh	r1, [r5, #6]
		filteredData[SENS_3] = fir_filter(sens3_array, sensorValue[SENS_3]);
 8003da2:	80b8      	strh	r0, [r7, #4]
		filteredData[SENS_4] = fir_filter(sens4_array, sensorValue[SENS_4]);
 8003da4:	a80f      	add	r0, sp, #60	; 0x3c
 8003da6:	f7ff ff5d 	bl	8003c64 <fir_filter>


		if (pressureCompensation == ON){
 8003daa:	4b2e      	ldr	r3, [pc, #184]	; (8003e64 <xStoreADCDataTask+0x1b4>)
		filteredData[SENS_4] = fir_filter(sens4_array, sensorValue[SENS_4]);
 8003dac:	80f8      	strh	r0, [r7, #6]
		if (pressureCompensation == ON){
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	4d2d      	ldr	r5, [pc, #180]	; (8003e68 <xStoreADCDataTask+0x1b8>)
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d116      	bne.n	8003de4 <xStoreADCDataTask+0x134>
			prevCompensation = ON;
 8003db6:	702b      	strb	r3, [r5, #0]
			xSemaphoreGive(xPressureCompensationSemaphore);
 8003db8:	2300      	movs	r3, #0
 8003dba:	482c      	ldr	r0, [pc, #176]	; (8003e6c <xStoreADCDataTask+0x1bc>)
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	6800      	ldr	r0, [r0, #0]
 8003dc2:	f7ff f8fb 	bl	8002fbc <xQueueGenericSend>
				prevCompensation = OFF;
			}

		}

		vTaskDelay(ADC_DATA_PERIOD / portTICK_RATE_MS);
 8003dc6:	2032      	movs	r0, #50	; 0x32
 8003dc8:	f7ff fd54 	bl	8003874 <vTaskDelay>
		if (lastTimeCommand > 50){
 8003dcc:	e796      	b.n	8003cfc <xStoreADCDataTask+0x4c>
				lastTimeCommand++;
 8003dce:	8833      	ldrh	r3, [r6, #0]
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	b29b      	uxth	r3, r3
				if (lastTimeCommand > 600){
 8003dd4:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
				lastTimeCommand++;
 8003dd8:	8033      	strh	r3, [r6, #0]
				if (lastTimeCommand > 600){
 8003dda:	d8c0      	bhi.n	8003d5e <xStoreADCDataTask+0xae>
 8003ddc:	e7c4      	b.n	8003d68 <xStoreADCDataTask+0xb8>
			lastTimeCommand++;
 8003dde:	3301      	adds	r3, #1
 8003de0:	8033      	strh	r3, [r6, #0]
 8003de2:	e7c1      	b.n	8003d68 <xStoreADCDataTask+0xb8>
			if (prevCompensation == ON){
 8003de4:	782b      	ldrb	r3, [r5, #0]
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d1ed      	bne.n	8003dc6 <xStoreADCDataTask+0x116>
				C1_UP_OFF;
 8003dea:	2200      	movs	r2, #0
 8003dec:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003df0:	4620      	mov	r0, r4
 8003df2:	f7fd fb8b 	bl	800150c <HAL_GPIO_WritePin>
				C1_DOWN_OFF;
 8003df6:	2200      	movs	r2, #0
 8003df8:	2180      	movs	r1, #128	; 0x80
 8003dfa:	4620      	mov	r0, r4
 8003dfc:	f7fd fb86 	bl	800150c <HAL_GPIO_WritePin>
				C2_UP_OFF;
 8003e00:	2200      	movs	r2, #0
 8003e02:	2120      	movs	r1, #32
 8003e04:	4620      	mov	r0, r4
 8003e06:	f7fd fb81 	bl	800150c <HAL_GPIO_WritePin>
				C2_DOWN_OFF;
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	2108      	movs	r1, #8
 8003e0e:	4620      	mov	r0, r4
 8003e10:	f7fd fb7c 	bl	800150c <HAL_GPIO_WritePin>
				C3_UP_OFF;
 8003e14:	2200      	movs	r2, #0
 8003e16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003e1a:	4620      	mov	r0, r4
 8003e1c:	f7fd fb76 	bl	800150c <HAL_GPIO_WritePin>
				C3_DOWN_OFF;
 8003e20:	2200      	movs	r2, #0
 8003e22:	2140      	movs	r1, #64	; 0x40
 8003e24:	4620      	mov	r0, r4
 8003e26:	f7fd fb71 	bl	800150c <HAL_GPIO_WritePin>
				C4_UP_OFF;
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	2110      	movs	r1, #16
 8003e2e:	4620      	mov	r0, r4
 8003e30:	f7fd fb6c 	bl	800150c <HAL_GPIO_WritePin>
				C4_DOWN_OFF;
 8003e34:	2200      	movs	r2, #0
 8003e36:	2104      	movs	r1, #4
 8003e38:	4804      	ldr	r0, [pc, #16]	; (8003e4c <xStoreADCDataTask+0x19c>)
 8003e3a:	f7fd fb67 	bl	800150c <HAL_GPIO_WritePin>
				prevCompensation = OFF;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	702b      	strb	r3, [r5, #0]
 8003e42:	e7c0      	b.n	8003dc6 <xStoreADCDataTask+0x116>
 8003e44:	200051b0 	.word	0x200051b0
 8003e48:	40010c00 	.word	0x40010c00
 8003e4c:	40011400 	.word	0x40011400
 8003e50:	2000000c 	.word	0x2000000c
 8003e54:	20005364 	.word	0x20005364
 8003e58:	20005466 	.word	0x20005466
 8003e5c:	200053f4 	.word	0x200053f4
 8003e60:	20005214 	.word	0x20005214
 8003e64:	200052a6 	.word	0x200052a6
 8003e68:	200051b2 	.word	0x200051b2
 8003e6c:	200053ac 	.word	0x200053ac

08003e70 <xAnalyzeTask>:
	int16_t deltaPressure = 0;
	uint8_t prescalerCounter = 10;
	//uint8_t analyzeCounterRef[4] = {5};
	int16_t pressureThreshold = 10;

	xStatus = xSemaphoreTake(xPressureCompensationSemaphore, portMAX_DELAY);
 8003e70:	2300      	movs	r3, #0
void xAnalyzeTask(void *arguments){
 8003e72:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t prescalerCounter = 10;
 8003e76:	250a      	movs	r5, #10
	xStatus = xSemaphoreTake(xPressureCompensationSemaphore, portMAX_DELAY);
 8003e78:	4c7a      	ldr	r4, [pc, #488]	; (8004064 <xAnalyzeTask+0x1f4>)
 8003e7a:	f04f 32ff 	mov.w	r2, #4294967295
 8003e7e:	4619      	mov	r1, r3
 8003e80:	6820      	ldr	r0, [r4, #0]
				vTaskDelay(1000 / portTICK_RATE_MS);
			}
			else{
				if (prescalerCounter >= 5){
					prescalerCounter = 0;
					workState = FREE;
 8003e82:	4e79      	ldr	r6, [pc, #484]	; (8004068 <xAnalyzeTask+0x1f8>)
	xStatus = xSemaphoreTake(xPressureCompensationSemaphore, portMAX_DELAY);
 8003e84:	f7ff f9b2 	bl	80031ec <xQueueGenericReceive>
 8003e88:	9400      	str	r4, [sp, #0]
		xStatus = xSemaphoreTake(xPressureCompensationSemaphore, portMAX_DELAY);
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	9800      	ldr	r0, [sp, #0]
 8003e8e:	f04f 32ff 	mov.w	r2, #4294967295
 8003e92:	4619      	mov	r1, r3
 8003e94:	6800      	ldr	r0, [r0, #0]
 8003e96:	f7ff f9a9 	bl	80031ec <xQueueGenericReceive>
		if (xStatus == pdPASS){
 8003e9a:	2801      	cmp	r0, #1
 8003e9c:	d1f5      	bne.n	8003e8a <xAnalyzeTask+0x1a>
			if (airSystem == RECEIVER){
 8003e9e:	4b73      	ldr	r3, [pc, #460]	; (800406c <xAnalyzeTask+0x1fc>)
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d16b      	bne.n	8003f7e <xAnalyzeTask+0x10e>
				workState = FREE;
 8003ea6:	2400      	movs	r4, #0
					if (pressIsLower[i]){
 8003ea8:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 800408c <xAnalyzeTask+0x21c>
 8003eac:	4f70      	ldr	r7, [pc, #448]	; (8004070 <xAnalyzeTask+0x200>)
 8003eae:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 8004090 <xAnalyzeTask+0x220>
				workState = FREE;
 8003eb2:	7034      	strb	r4, [r6, #0]
					if (pressIsLower[i]){
 8003eb4:	f814 2009 	ldrb.w	r2, [r4, r9]
 8003eb8:	2a00      	cmp	r2, #0
 8003eba:	d04c      	beq.n	8003f56 <xAnalyzeTask+0xe6>
						deltaPressure = nessPressure[i] - filteredData[i];
 8003ebc:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
 8003ec0:	f838 2014 	ldrh.w	r2, [r8, r4, lsl #1]
 8003ec4:	1a9b      	subs	r3, r3, r2
						if (deltaPressure > pressureThreshold){
 8003ec6:	b21b      	sxth	r3, r3
 8003ec8:	2b0a      	cmp	r3, #10
 8003eca:	dd13      	ble.n	8003ef4 <xAnalyzeTask+0x84>
							HAL_GPIO_WritePin(UP_PORT[i], UP_PIN[i], GPIO_PIN_SET);
 8003ecc:	4b69      	ldr	r3, [pc, #420]	; (8004074 <xAnalyzeTask+0x204>)
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f833 1024 	ldrh.w	r1, [r3, r4, lsl #2]
 8003ed4:	4b68      	ldr	r3, [pc, #416]	; (8004078 <xAnalyzeTask+0x208>)
 8003ed6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003eda:	f7fd fb17 	bl	800150c <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(DOWN_PORT[i], DOWN_PIN[i], GPIO_PIN_RESET);
 8003ede:	2200      	movs	r2, #0
							HAL_GPIO_WritePin(DOWN_PORT[i], DOWN_PIN[i], GPIO_PIN_SET);
 8003ee0:	4b66      	ldr	r3, [pc, #408]	; (800407c <xAnalyzeTask+0x20c>)
 8003ee2:	f833 1024 	ldrh.w	r1, [r3, r4, lsl #2]
 8003ee6:	4b66      	ldr	r3, [pc, #408]	; (8004080 <xAnalyzeTask+0x210>)
 8003ee8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003eec:	f7fd fb0e 	bl	800150c <HAL_GPIO_WritePin>
							workState = WORKING;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	7033      	strb	r3, [r6, #0]
 8003ef4:	3401      	adds	r4, #1
				for (i = 0; i < 4; i++){
 8003ef6:	2c04      	cmp	r4, #4
 8003ef8:	d1dc      	bne.n	8003eb4 <xAnalyzeTask+0x44>
				if (workState == FREE){
 8003efa:	7832      	ldrb	r2, [r6, #0]
 8003efc:	4b61      	ldr	r3, [pc, #388]	; (8004084 <xAnalyzeTask+0x214>)
 8003efe:	2a00      	cmp	r2, #0
 8003f00:	d13b      	bne.n	8003f7a <xAnalyzeTask+0x10a>
				vTaskDelay(500 / portTICK_RATE_MS);
 8003f02:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
					pressureCompensation = ON;
 8003f06:	701a      	strb	r2, [r3, #0]
				vTaskDelay(500 / portTICK_RATE_MS);
 8003f08:	2400      	movs	r4, #0
 8003f0a:	f7ff fcb3 	bl	8003874 <vTaskDelay>
					HAL_GPIO_WritePin(DOWN_PORT[i], DOWN_PIN[i], GPIO_PIN_RESET);
 8003f0e:	f8df 816c 	ldr.w	r8, [pc, #364]	; 800407c <xAnalyzeTask+0x20c>
 8003f12:	4f5b      	ldr	r7, [pc, #364]	; (8004080 <xAnalyzeTask+0x210>)
 8003f14:	f838 1024 	ldrh.w	r1, [r8, r4, lsl #2]
 8003f18:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	3401      	adds	r4, #1
 8003f20:	f7fd faf4 	bl	800150c <HAL_GPIO_WritePin>
				for (i = 0; i < 4; i++){
 8003f24:	2c04      	cmp	r4, #4
 8003f26:	d1f5      	bne.n	8003f14 <xAnalyzeTask+0xa4>
				vTaskDelay(500 / portTICK_RATE_MS);
 8003f28:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003f2c:	f7ff fca2 	bl	8003874 <vTaskDelay>
 8003f30:	2400      	movs	r4, #0
					HAL_GPIO_WritePin(UP_PORT[i], UP_PIN[i], GPIO_PIN_RESET);
 8003f32:	f8df 8140 	ldr.w	r8, [pc, #320]	; 8004074 <xAnalyzeTask+0x204>
 8003f36:	4f50      	ldr	r7, [pc, #320]	; (8004078 <xAnalyzeTask+0x208>)
 8003f38:	f838 1024 	ldrh.w	r1, [r8, r4, lsl #2]
 8003f3c:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
 8003f40:	2200      	movs	r2, #0
 8003f42:	3401      	adds	r4, #1
 8003f44:	f7fd fae2 	bl	800150c <HAL_GPIO_WritePin>
				for (i = 0; i < 4; i++){
 8003f48:	2c04      	cmp	r4, #4
 8003f4a:	d1f5      	bne.n	8003f38 <xAnalyzeTask+0xc8>
				vTaskDelay(1000 / portTICK_RATE_MS);
 8003f4c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003f50:	f7ff fc90 	bl	8003874 <vTaskDelay>
 8003f54:	e799      	b.n	8003e8a <xAnalyzeTask+0x1a>
						deltaPressure = filteredData[i] - nessPressure[i];
 8003f56:	f838 3014 	ldrh.w	r3, [r8, r4, lsl #1]
 8003f5a:	f837 1014 	ldrh.w	r1, [r7, r4, lsl #1]
 8003f5e:	1a5b      	subs	r3, r3, r1
						if (deltaPressure > pressureThreshold){
 8003f60:	b21b      	sxth	r3, r3
 8003f62:	2b0a      	cmp	r3, #10
 8003f64:	ddc6      	ble.n	8003ef4 <xAnalyzeTask+0x84>
							HAL_GPIO_WritePin(UP_PORT[i], UP_PIN[i], GPIO_PIN_RESET);
 8003f66:	4b43      	ldr	r3, [pc, #268]	; (8004074 <xAnalyzeTask+0x204>)
 8003f68:	f833 1024 	ldrh.w	r1, [r3, r4, lsl #2]
 8003f6c:	4b42      	ldr	r3, [pc, #264]	; (8004078 <xAnalyzeTask+0x208>)
 8003f6e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003f72:	f7fd facb 	bl	800150c <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(DOWN_PORT[i], DOWN_PIN[i], GPIO_PIN_SET);
 8003f76:	2201      	movs	r2, #1
 8003f78:	e7b2      	b.n	8003ee0 <xAnalyzeTask+0x70>
					pressureCompensation = ON;
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	e7c1      	b.n	8003f02 <xAnalyzeTask+0x92>
				if (prescalerCounter >= 5){
 8003f7e:	2d04      	cmp	r5, #4
 8003f80:	d96c      	bls.n	800405c <xAnalyzeTask+0x1ec>
					workState = FREE;
 8003f82:	2400      	movs	r4, #0
 8003f84:	4d40      	ldr	r5, [pc, #256]	; (8004088 <xAnalyzeTask+0x218>)
 8003f86:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 8004078 <xAnalyzeTask+0x208>
 8003f8a:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8004074 <xAnalyzeTask+0x204>
 8003f8e:	4f3c      	ldr	r7, [pc, #240]	; (8004080 <xAnalyzeTask+0x210>)
 8003f90:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 800407c <xAnalyzeTask+0x20c>
 8003f94:	7034      	strb	r4, [r6, #0]

					for (i = 0; i < 4; i++){
						if (analyzeCounter[i] < 5){
 8003f96:	782a      	ldrb	r2, [r5, #0]
 8003f98:	00a3      	lsls	r3, r4, #2
 8003f9a:	2a04      	cmp	r2, #4
 8003f9c:	9301      	str	r3, [sp, #4]
 8003f9e:	d84a      	bhi.n	8004036 <xAnalyzeTask+0x1c6>
							workState = WORKING;
 8003fa0:	2301      	movs	r3, #1
							if (pressIsLower[i]){
 8003fa2:	493a      	ldr	r1, [pc, #232]	; (800408c <xAnalyzeTask+0x21c>)
							workState = WORKING;
 8003fa4:	7033      	strb	r3, [r6, #0]
							if (pressIsLower[i]){
 8003fa6:	f814 b001 	ldrb.w	fp, [r4, r1]
 8003faa:	4939      	ldr	r1, [pc, #228]	; (8004090 <xAnalyzeTask+0x220>)
 8003fac:	f1bb 0f00 	cmp.w	fp, #0
 8003fb0:	d02d      	beq.n	800400e <xAnalyzeTask+0x19e>
								if (filteredData[i] < nessPressure[i]){
 8003fb2:	f831 0014 	ldrh.w	r0, [r1, r4, lsl #1]
 8003fb6:	492e      	ldr	r1, [pc, #184]	; (8004070 <xAnalyzeTask+0x200>)
 8003fb8:	f831 1014 	ldrh.w	r1, [r1, r4, lsl #1]
 8003fbc:	4288      	cmp	r0, r1
 8003fbe:	d222      	bcs.n	8004006 <xAnalyzeTask+0x196>
									analyzeCounter[i] = 0;
 8003fc0:	f04f 0b00 	mov.w	fp, #0
									HAL_GPIO_WritePin(UP_PORT[i], UP_PIN[i], GPIO_PIN_SET);
 8003fc4:	461a      	mov	r2, r3
									analyzeCounter[i] = 0;
 8003fc6:	f885 b000 	strb.w	fp, [r5]
									HAL_GPIO_WritePin(DOWN_PORT[i], DOWN_PIN[i], GPIO_PIN_RESET);
								}
								else{
									analyzeCounter[i] += 1;
									HAL_GPIO_WritePin(UP_PORT[i], UP_PIN[i], GPIO_PIN_RESET);
 8003fca:	f8b8 1000 	ldrh.w	r1, [r8]
 8003fce:	f8d9 0000 	ldr.w	r0, [r9]
 8003fd2:	f7fd fa9b 	bl	800150c <HAL_GPIO_WritePin>
									HAL_GPIO_WritePin(DOWN_PORT[i], DOWN_PIN[i], GPIO_PIN_RESET);
 8003fd6:	2200      	movs	r2, #0
							}
							else{
								if (filteredData[i] > nessPressure[i]){
									analyzeCounter[i] = 0;
									HAL_GPIO_WritePin(UP_PORT[i], UP_PIN[i], GPIO_PIN_RESET);
									HAL_GPIO_WritePin(DOWN_PORT[i], DOWN_PIN[i], GPIO_PIN_SET);
 8003fd8:	00a3      	lsls	r3, r4, #2
 8003fda:	f83a 1003 	ldrh.w	r1, [sl, r3]
							}
						}
						else{
							analyzeCounter[i] = 0;
							HAL_GPIO_WritePin(UP_PORT[i], UP_PIN[i], GPIO_PIN_RESET);
							HAL_GPIO_WritePin(DOWN_PORT[i], DOWN_PIN[i], GPIO_PIN_RESET);
 8003fde:	6838      	ldr	r0, [r7, #0]
 8003fe0:	3401      	adds	r4, #1
 8003fe2:	f7fd fa93 	bl	800150c <HAL_GPIO_WritePin>
					for (i = 0; i < 4; i++){
 8003fe6:	2c04      	cmp	r4, #4
 8003fe8:	f105 0501 	add.w	r5, r5, #1
 8003fec:	f109 0904 	add.w	r9, r9, #4
 8003ff0:	f108 0804 	add.w	r8, r8, #4
 8003ff4:	f107 0704 	add.w	r7, r7, #4
 8003ff8:	d1cd      	bne.n	8003f96 <xAnalyzeTask+0x126>
						}
					}

					if (workState == FREE){
 8003ffa:	7832      	ldrb	r2, [r6, #0]
 8003ffc:	4b21      	ldr	r3, [pc, #132]	; (8004084 <xAnalyzeTask+0x214>)
 8003ffe:	bb4a      	cbnz	r2, 8004054 <xAnalyzeTask+0x1e4>
						prescalerCounter = 10;
						pressureCompensation = OFF;
 8004000:	701a      	strb	r2, [r3, #0]
						prescalerCounter = 10;
 8004002:	250a      	movs	r5, #10
 8004004:	e741      	b.n	8003e8a <xAnalyzeTask+0x1a>
									analyzeCounter[i] += 1;
 8004006:	3201      	adds	r2, #1
 8004008:	702a      	strb	r2, [r5, #0]
									HAL_GPIO_WritePin(UP_PORT[i], UP_PIN[i], GPIO_PIN_RESET);
 800400a:	2200      	movs	r2, #0
 800400c:	e7dd      	b.n	8003fca <xAnalyzeTask+0x15a>
 800400e:	9301      	str	r3, [sp, #4]
								if (filteredData[i] > nessPressure[i]){
 8004010:	4b17      	ldr	r3, [pc, #92]	; (8004070 <xAnalyzeTask+0x200>)
 8004012:	f831 0014 	ldrh.w	r0, [r1, r4, lsl #1]
 8004016:	f833 1014 	ldrh.w	r1, [r3, r4, lsl #1]
 800401a:	4288      	cmp	r0, r1
 800401c:	d9f3      	bls.n	8004006 <xAnalyzeTask+0x196>
									HAL_GPIO_WritePin(UP_PORT[i], UP_PIN[i], GPIO_PIN_RESET);
 800401e:	465a      	mov	r2, fp
									analyzeCounter[i] = 0;
 8004020:	f885 b000 	strb.w	fp, [r5]
									HAL_GPIO_WritePin(UP_PORT[i], UP_PIN[i], GPIO_PIN_RESET);
 8004024:	f8b8 1000 	ldrh.w	r1, [r8]
 8004028:	f8d9 0000 	ldr.w	r0, [r9]
 800402c:	f7fd fa6e 	bl	800150c <HAL_GPIO_WritePin>
									HAL_GPIO_WritePin(DOWN_PORT[i], DOWN_PIN[i], GPIO_PIN_SET);
 8004030:	9b01      	ldr	r3, [sp, #4]
 8004032:	461a      	mov	r2, r3
 8004034:	e7d0      	b.n	8003fd8 <xAnalyzeTask+0x168>
							analyzeCounter[i] = 0;
 8004036:	f04f 0b00 	mov.w	fp, #0
							HAL_GPIO_WritePin(UP_PORT[i], UP_PIN[i], GPIO_PIN_RESET);
 800403a:	f8b8 1000 	ldrh.w	r1, [r8]
 800403e:	465a      	mov	r2, fp
							analyzeCounter[i] = 0;
 8004040:	f885 b000 	strb.w	fp, [r5]
							HAL_GPIO_WritePin(UP_PORT[i], UP_PIN[i], GPIO_PIN_RESET);
 8004044:	f8d9 0000 	ldr.w	r0, [r9]
 8004048:	f7fd fa60 	bl	800150c <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(DOWN_PORT[i], DOWN_PIN[i], GPIO_PIN_RESET);
 800404c:	465a      	mov	r2, fp
 800404e:	f83a 1024 	ldrh.w	r1, [sl, r4, lsl #2]
 8004052:	e7c4      	b.n	8003fde <xAnalyzeTask+0x16e>
					}
					else{
						pressureCompensation = ON;
 8004054:	2201      	movs	r2, #1
					prescalerCounter = 0;
 8004056:	2500      	movs	r5, #0
						pressureCompensation = ON;
 8004058:	701a      	strb	r2, [r3, #0]
 800405a:	e716      	b.n	8003e8a <xAnalyzeTask+0x1a>
					}
				}
				else{
					prescalerCounter++;
 800405c:	3501      	adds	r5, #1
 800405e:	b2ed      	uxtb	r5, r5
 8004060:	e713      	b.n	8003e8a <xAnalyzeTask+0x1a>
 8004062:	bf00      	nop
 8004064:	200053ac 	.word	0x200053ac
 8004068:	200052aa 	.word	0x200052aa
 800406c:	20005205 	.word	0x20005205
 8004070:	2000529e 	.word	0x2000529e
 8004074:	20000030 	.word	0x20000030
 8004078:	20000040 	.word	0x20000040
 800407c:	20000010 	.word	0x20000010
 8004080:	20000020 	.word	0x20000020
 8004084:	200052a6 	.word	0x200052a6
 8004088:	200051b3 	.word	0x200051b3
 800408c:	200052ab 	.word	0x200052ab
 8004090:	20005214 	.word	0x20005214

08004094 <xBlynkTask>:
extern uint16_t server_UID;
uint32_t unique_ID[3] = {0};

enum IndicationState indicationState = NORMAL_NC;

void xBlynkTask(void* arguments){
 8004094:	b508      	push	{r3, lr}
	for(;;){
		if (indicationState == NORMAL_C){
 8004096:	4d13      	ldr	r5, [pc, #76]	; (80040e4 <xBlynkTask+0x50>)
 8004098:	4c13      	ldr	r4, [pc, #76]	; (80040e8 <xBlynkTask+0x54>)
 800409a:	782b      	ldrb	r3, [r5, #0]
 800409c:	b97b      	cbnz	r3, 80040be <xBlynkTask+0x2a>
			TIM3->CCR2 = 10000;
 800409e:	f242 7310 	movw	r3, #10000	; 0x2710
 80040a2:	63a3      	str	r3, [r4, #56]	; 0x38
		else if (indicationState == COMPENSATION){
			TIM3->CCR2 = 10000;
			TIM3->CCR3 = 10000;
		}

		vTaskDelay(500 / portTICK_RATE_MS);
 80040a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80040a8:	f7ff fbe4 	bl	8003874 <vTaskDelay>
		TIM3->CCR1 = 0;
 80040ac:	2300      	movs	r3, #0
		TIM3->CCR2 = 0;
		TIM3->CCR3 = 0;
		vTaskDelay(500 / portTICK_RATE_MS);
 80040ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
		TIM3->CCR1 = 0;
 80040b2:	6363      	str	r3, [r4, #52]	; 0x34
		TIM3->CCR2 = 0;
 80040b4:	63a3      	str	r3, [r4, #56]	; 0x38
		TIM3->CCR3 = 0;
 80040b6:	63e3      	str	r3, [r4, #60]	; 0x3c
		vTaskDelay(500 / portTICK_RATE_MS);
 80040b8:	f7ff fbdc 	bl	8003874 <vTaskDelay>
		if (indicationState == NORMAL_C){
 80040bc:	e7ed      	b.n	800409a <xBlynkTask+0x6>
		else if (indicationState == NORMAL_NC){
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d103      	bne.n	80040ca <xBlynkTask+0x36>
			TIM3->CCR1 = 10000;
 80040c2:	f242 7310 	movw	r3, #10000	; 0x2710
 80040c6:	6363      	str	r3, [r4, #52]	; 0x34
 80040c8:	e7ec      	b.n	80040a4 <xBlynkTask+0x10>
		else if (indicationState == SEARCH){
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d103      	bne.n	80040d6 <xBlynkTask+0x42>
			TIM3->CCR3 = 10000;
 80040ce:	f242 7310 	movw	r3, #10000	; 0x2710
			TIM3->CCR3 = 10000;
 80040d2:	63e3      	str	r3, [r4, #60]	; 0x3c
 80040d4:	e7e6      	b.n	80040a4 <xBlynkTask+0x10>
		else if (indicationState == COMPENSATION){
 80040d6:	2b03      	cmp	r3, #3
 80040d8:	d1e4      	bne.n	80040a4 <xBlynkTask+0x10>
			TIM3->CCR2 = 10000;
 80040da:	f242 7310 	movw	r3, #10000	; 0x2710
 80040de:	63a3      	str	r3, [r4, #56]	; 0x38
 80040e0:	e7f7      	b.n	80040d2 <xBlynkTask+0x3e>
 80040e2:	bf00      	nop
 80040e4:	2000000c 	.word	0x2000000c
 80040e8:	40000400 	.word	0x40000400

080040ec <controller_init>:
	}
	vTaskDelete(NULL);
}

void controller_init(){
 80040ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
	mRead_flash();
	if(controllerSettings.rfChannel > 120){
 80040ee:	4c74      	ldr	r4, [pc, #464]	; (80042c0 <controller_init+0x1d4>)
	mRead_flash();
 80040f0:	f000 f9c4 	bl	800447c <mRead_flash>
	if(controllerSettings.rfChannel > 120){
 80040f4:	7823      	ldrb	r3, [r4, #0]
		controllerSettings.rfChannel = 1;
	}

	HAL_GetUID(unique_ID);
 80040f6:	4d73      	ldr	r5, [pc, #460]	; (80042c4 <controller_init+0x1d8>)
	if(controllerSettings.rfChannel > 120){
 80040f8:	2b78      	cmp	r3, #120	; 0x78
		controllerSettings.rfChannel = 1;
 80040fa:	bf88      	it	hi
 80040fc:	2301      	movhi	r3, #1
	HAL_GetUID(unique_ID);
 80040fe:	4628      	mov	r0, r5
		controllerSettings.rfChannel = 1;
 8004100:	bf88      	it	hi
 8004102:	7023      	strbhi	r3, [r4, #0]
	HAL_GetUID(unique_ID);
 8004104:	f7fc fa8a 	bl	800061c <HAL_GetUID>

	server_UID = (unique_ID[0] + unique_ID[1] + unique_ID[2]) / 65536;
 8004108:	e895 000c 	ldmia.w	r5, {r2, r3}
 800410c:	4413      	add	r3, r2
 800410e:	68aa      	ldr	r2, [r5, #8]

	init_rf433(controllerSettings.rfChannel); //TODO: change to more common
 8004110:	7820      	ldrb	r0, [r4, #0]
	server_UID = (unique_ID[0] + unique_ID[1] + unique_ID[2]) / 65536;
 8004112:	4413      	add	r3, r2
 8004114:	4a6c      	ldr	r2, [pc, #432]	; (80042c8 <controller_init+0x1dc>)
 8004116:	0c1b      	lsrs	r3, r3, #16
 8004118:	8013      	strh	r3, [r2, #0]
	init_rf433(controllerSettings.rfChannel); //TODO: change to more common
 800411a:	f000 f921 	bl	8004360 <init_rf433>
//	sprintf(message, "ID: %ld\r\n", server_UID);
//				HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), 0xFFFF);
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800411e:	2100      	movs	r1, #0
 8004120:	486a      	ldr	r0, [pc, #424]	; (80042cc <controller_init+0x1e0>)
 8004122:	f7fe f8bb 	bl	800229c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8004126:	2104      	movs	r1, #4
 8004128:	4868      	ldr	r0, [pc, #416]	; (80042cc <controller_init+0x1e0>)
 800412a:	f7fe f8b7 	bl	800229c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800412e:	2108      	movs	r1, #8
 8004130:	4866      	ldr	r0, [pc, #408]	; (80042cc <controller_init+0x1e0>)
 8004132:	f7fe f8b3 	bl	800229c <HAL_TIM_PWM_Start>
	HAL_UART_Receive_IT(&huart1, &recCommandByte, 1);
 8004136:	2201      	movs	r2, #1
 8004138:	4965      	ldr	r1, [pc, #404]	; (80042d0 <controller_init+0x1e4>)
 800413a:	4866      	ldr	r0, [pc, #408]	; (80042d4 <controller_init+0x1e8>)
 800413c:	f7fe fa46 	bl	80025cc <HAL_UART_Receive_IT>
	HAL_ADCEx_InjectedStart_IT(&hadc1);
 8004140:	4865      	ldr	r0, [pc, #404]	; (80042d8 <controller_init+0x1ec>)
 8004142:	f7fc fc51 	bl	80009e8 <HAL_ADCEx_InjectedStart_IT>

	vSemaphoreCreateBinary(xPressureCompensationSemaphore);
 8004146:	2203      	movs	r2, #3
 8004148:	2100      	movs	r1, #0
 800414a:	2001      	movs	r0, #1
 800414c:	f7fe ff14 	bl	8002f78 <xQueueGenericCreate>
 8004150:	4a62      	ldr	r2, [pc, #392]	; (80042dc <controller_init+0x1f0>)
 8004152:	6010      	str	r0, [r2, #0]
 8004154:	b120      	cbz	r0, 8004160 <controller_init+0x74>
 8004156:	2300      	movs	r3, #0
 8004158:	461a      	mov	r2, r3
 800415a:	4619      	mov	r1, r3
 800415c:	f7fe ff2e 	bl	8002fbc <xQueueGenericSend>


	#if DEBUG_SERIAL
		uint32_t fre=xPortGetFreeHeapSize();
 8004160:	f7fe fe44 	bl	8002dec <xPortGetFreeHeapSize>
		sprintf(message, "Free heap: %ld\r\n", fre);
 8004164:	495e      	ldr	r1, [pc, #376]	; (80042e0 <controller_init+0x1f4>)
 8004166:	4602      	mov	r2, r0
 8004168:	485e      	ldr	r0, [pc, #376]	; (80042e4 <controller_init+0x1f8>)
 800416a:	f000 ff09 	bl	8004f80 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), 0xFFFF);
 800416e:	485d      	ldr	r0, [pc, #372]	; (80042e4 <controller_init+0x1f8>)
 8004170:	f7fc f85e 	bl	8000230 <strlen>
	#endif

	xTaskCreate(xBlynkTask,
 8004174:	2400      	movs	r4, #0
 8004176:	2501      	movs	r5, #1
		HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), 0xFFFF);
 8004178:	b282      	uxth	r2, r0
 800417a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800417e:	4959      	ldr	r1, [pc, #356]	; (80042e4 <controller_init+0x1f8>)
 8004180:	4854      	ldr	r0, [pc, #336]	; (80042d4 <controller_init+0x1e8>)
 8004182:	f7fe f9c7 	bl	8002514 <HAL_UART_Transmit>
	xTaskCreate(xBlynkTask,
 8004186:	4623      	mov	r3, r4
 8004188:	22c8      	movs	r2, #200	; 0xc8
 800418a:	4957      	ldr	r1, [pc, #348]	; (80042e8 <controller_init+0x1fc>)
 800418c:	9401      	str	r4, [sp, #4]
 800418e:	9500      	str	r5, [sp, #0]
 8004190:	4856      	ldr	r0, [pc, #344]	; (80042ec <controller_init+0x200>)
 8004192:	f7ff f951 	bl	8003438 <xTaskCreate>
				NULL,
				1,
				NULL);

	#if DEBUG_SERIAL
		fre=xPortGetFreeHeapSize();
 8004196:	f7fe fe29 	bl	8002dec <xPortGetFreeHeapSize>
		sprintf(message, "heap after Blynk: %ld\r\n", fre);
 800419a:	4955      	ldr	r1, [pc, #340]	; (80042f0 <controller_init+0x204>)
 800419c:	4602      	mov	r2, r0
 800419e:	4851      	ldr	r0, [pc, #324]	; (80042e4 <controller_init+0x1f8>)
 80041a0:	f000 feee 	bl	8004f80 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), 0xFFFF);
 80041a4:	484f      	ldr	r0, [pc, #316]	; (80042e4 <controller_init+0x1f8>)
 80041a6:	f7fc f843 	bl	8000230 <strlen>
 80041aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80041ae:	b282      	uxth	r2, r0
 80041b0:	494c      	ldr	r1, [pc, #304]	; (80042e4 <controller_init+0x1f8>)
 80041b2:	4848      	ldr	r0, [pc, #288]	; (80042d4 <controller_init+0x1e8>)
 80041b4:	f7fe f9ae 	bl	8002514 <HAL_UART_Transmit>
	#endif

	xTaskCreate(xScanInputTask,
 80041b8:	4623      	mov	r3, r4
 80041ba:	22c8      	movs	r2, #200	; 0xc8
 80041bc:	494d      	ldr	r1, [pc, #308]	; (80042f4 <controller_init+0x208>)
 80041be:	9401      	str	r4, [sp, #4]
 80041c0:	9500      	str	r5, [sp, #0]
 80041c2:	484d      	ldr	r0, [pc, #308]	; (80042f8 <controller_init+0x20c>)
 80041c4:	f7ff f938 	bl	8003438 <xTaskCreate>
				NULL,
				1,
				NULL);

	#if DEBUG_SERIAL
		fre=xPortGetFreeHeapSize();
 80041c8:	f7fe fe10 	bl	8002dec <xPortGetFreeHeapSize>
		sprintf(message, "heap after Scan: %ld\r\n", fre);
 80041cc:	494b      	ldr	r1, [pc, #300]	; (80042fc <controller_init+0x210>)
 80041ce:	4602      	mov	r2, r0
 80041d0:	4844      	ldr	r0, [pc, #272]	; (80042e4 <controller_init+0x1f8>)
 80041d2:	f000 fed5 	bl	8004f80 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), 0xFFFF);
 80041d6:	4843      	ldr	r0, [pc, #268]	; (80042e4 <controller_init+0x1f8>)
 80041d8:	f7fc f82a 	bl	8000230 <strlen>
 80041dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80041e0:	b282      	uxth	r2, r0
 80041e2:	4940      	ldr	r1, [pc, #256]	; (80042e4 <controller_init+0x1f8>)
 80041e4:	483b      	ldr	r0, [pc, #236]	; (80042d4 <controller_init+0x1e8>)
 80041e6:	f7fe f995 	bl	8002514 <HAL_UART_Transmit>
	#endif

	xTaskCreate(xStoreADCDataTask,
 80041ea:	4623      	mov	r3, r4
 80041ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041f0:	4943      	ldr	r1, [pc, #268]	; (8004300 <controller_init+0x214>)
 80041f2:	9401      	str	r4, [sp, #4]
 80041f4:	9500      	str	r5, [sp, #0]
 80041f6:	4843      	ldr	r0, [pc, #268]	; (8004304 <controller_init+0x218>)
 80041f8:	f7ff f91e 	bl	8003438 <xTaskCreate>
				NULL,
				1,
				NULL);

	#if DEBUG_SERIAL
		fre=xPortGetFreeHeapSize();
 80041fc:	f7fe fdf6 	bl	8002dec <xPortGetFreeHeapSize>
		sprintf(message, "heap after SADCData: %ld\r\n", fre);
 8004200:	4941      	ldr	r1, [pc, #260]	; (8004308 <controller_init+0x21c>)
 8004202:	4602      	mov	r2, r0
 8004204:	4837      	ldr	r0, [pc, #220]	; (80042e4 <controller_init+0x1f8>)
 8004206:	f000 febb 	bl	8004f80 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), 0xFFFF);
 800420a:	4836      	ldr	r0, [pc, #216]	; (80042e4 <controller_init+0x1f8>)
 800420c:	f7fc f810 	bl	8000230 <strlen>
 8004210:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004214:	b282      	uxth	r2, r0
 8004216:	4933      	ldr	r1, [pc, #204]	; (80042e4 <controller_init+0x1f8>)
 8004218:	482e      	ldr	r0, [pc, #184]	; (80042d4 <controller_init+0x1e8>)
 800421a:	f7fe f97b 	bl	8002514 <HAL_UART_Transmit>
	#endif

	xTaskCreate(xProcessCommandTask,
 800421e:	2303      	movs	r3, #3
 8004220:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004224:	9300      	str	r3, [sp, #0]
 8004226:	4939      	ldr	r1, [pc, #228]	; (800430c <controller_init+0x220>)
 8004228:	4623      	mov	r3, r4
 800422a:	9401      	str	r4, [sp, #4]
 800422c:	4838      	ldr	r0, [pc, #224]	; (8004310 <controller_init+0x224>)
 800422e:	f7ff f903 	bl	8003438 <xTaskCreate>
				NULL,
				3,
				NULL);

	#if DEBUG_SERIAL
		fre=xPortGetFreeHeapSize();
 8004232:	f7fe fddb 	bl	8002dec <xPortGetFreeHeapSize>
		sprintf(message, "heap after ProcCmd: %ld\r\n", fre);
 8004236:	4937      	ldr	r1, [pc, #220]	; (8004314 <controller_init+0x228>)
 8004238:	4602      	mov	r2, r0
 800423a:	482a      	ldr	r0, [pc, #168]	; (80042e4 <controller_init+0x1f8>)
 800423c:	f000 fea0 	bl	8004f80 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), 0xFFFF);
 8004240:	4828      	ldr	r0, [pc, #160]	; (80042e4 <controller_init+0x1f8>)
 8004242:	f7fb fff5 	bl	8000230 <strlen>
 8004246:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800424a:	b282      	uxth	r2, r0
 800424c:	4925      	ldr	r1, [pc, #148]	; (80042e4 <controller_init+0x1f8>)
 800424e:	4821      	ldr	r0, [pc, #132]	; (80042d4 <controller_init+0x1e8>)
 8004250:	f7fe f960 	bl	8002514 <HAL_UART_Transmit>
	#endif

	xTaskCreate(xAnalyzeTask,
 8004254:	4623      	mov	r3, r4
 8004256:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800425a:	492f      	ldr	r1, [pc, #188]	; (8004318 <controller_init+0x22c>)
 800425c:	9401      	str	r4, [sp, #4]
 800425e:	9500      	str	r5, [sp, #0]
 8004260:	482e      	ldr	r0, [pc, #184]	; (800431c <controller_init+0x230>)
 8004262:	f7ff f8e9 	bl	8003438 <xTaskCreate>
				400,
				NULL,
				1,
				NULL);
	#if DEBUG_SERIAL
		fre=xPortGetFreeHeapSize();
 8004266:	f7fe fdc1 	bl	8002dec <xPortGetFreeHeapSize>
		sprintf(message, "heap after AnTask: %ld\r\n", fre);
 800426a:	492d      	ldr	r1, [pc, #180]	; (8004320 <controller_init+0x234>)
 800426c:	4602      	mov	r2, r0
 800426e:	481d      	ldr	r0, [pc, #116]	; (80042e4 <controller_init+0x1f8>)
 8004270:	f000 fe86 	bl	8004f80 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*) message, strlen(message), 0xFFFF);
 8004274:	481b      	ldr	r0, [pc, #108]	; (80042e4 <controller_init+0x1f8>)
 8004276:	f7fb ffdb 	bl	8000230 <strlen>
 800427a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800427e:	b282      	uxth	r2, r0
 8004280:	4918      	ldr	r1, [pc, #96]	; (80042e4 <controller_init+0x1f8>)
 8004282:	4814      	ldr	r0, [pc, #80]	; (80042d4 <controller_init+0x1e8>)
 8004284:	f7fe f946 	bl	8002514 <HAL_UART_Transmit>
	#endif

	xRecCommandQueue = xQueueCreate(COMMAND_QUEUE_SIZE, MAX_COMMAND_LENGTH);
 8004288:	4622      	mov	r2, r4
 800428a:	2140      	movs	r1, #64	; 0x40
 800428c:	2002      	movs	r0, #2
 800428e:	f7fe fe73 	bl	8002f78 <xQueueGenericCreate>
 8004292:	4b24      	ldr	r3, [pc, #144]	; (8004324 <controller_init+0x238>)
 8004294:	6018      	str	r0, [r3, #0]
	//xRecCommandQueue = xQueueCreate(1, 1);

	#if DEBUG_SERIAL
		fre=xPortGetFreeHeapSize();
 8004296:	f7fe fda9 	bl	8002dec <xPortGetFreeHeapSize>
		sprintf(message, "heap after queue: %ld\r\n", fre);
 800429a:	4923      	ldr	r1, [pc, #140]	; (8004328 <controller_init+0x23c>)
 800429c:	4602      	mov	r2, r0
 800429e:	4811      	ldr	r0, [pc, #68]	; (80042e4 <controller_init+0x1f8>)
 80042a0:	f000 fe6e 	bl	8004f80 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), 0xFFFF);
 80042a4:	480f      	ldr	r0, [pc, #60]	; (80042e4 <controller_init+0x1f8>)
 80042a6:	f7fb ffc3 	bl	8000230 <strlen>
 80042aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80042ae:	b282      	uxth	r2, r0
 80042b0:	490c      	ldr	r1, [pc, #48]	; (80042e4 <controller_init+0x1f8>)
 80042b2:	4808      	ldr	r0, [pc, #32]	; (80042d4 <controller_init+0x1e8>)
	#endif
}
 80042b4:	b003      	add	sp, #12
 80042b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), 0xFFFF);
 80042ba:	f7fe b92b 	b.w	8002514 <HAL_UART_Transmit>
 80042be:	bf00      	nop
 80042c0:	20005208 	.word	0x20005208
 80042c4:	200051b8 	.word	0x200051b8
 80042c8:	200052a8 	.word	0x200052a8
 80042cc:	2000536c 	.word	0x2000536c
 80042d0:	20005474 	.word	0x20005474
 80042d4:	20005424 	.word	0x20005424
 80042d8:	200053f4 	.word	0x200053f4
 80042dc:	200053ac 	.word	0x200053ac
 80042e0:	0800620d 	.word	0x0800620d
 80042e4:	2000521c 	.word	0x2000521c
 80042e8:	0800621e 	.word	0x0800621e
 80042ec:	08004095 	.word	0x08004095
 80042f0:	08006224 	.word	0x08006224
 80042f4:	0800623c 	.word	0x0800623c
 80042f8:	08004b81 	.word	0x08004b81
 80042fc:	08006241 	.word	0x08006241
 8004300:	08006258 	.word	0x08006258
 8004304:	08003cb1 	.word	0x08003cb1
 8004308:	08006261 	.word	0x08006261
 800430c:	0800627c 	.word	0x0800627c
 8004310:	08004819 	.word	0x08004819
 8004314:	08006284 	.word	0x08006284
 8004318:	0800629e 	.word	0x0800629e
 800431c:	08003e71 	.word	0x08003e71
 8004320:	080062a4 	.word	0x080062a4
 8004324:	20005470 	.word	0x20005470
 8004328:	080062bd 	.word	0x080062bd

0800432c <print_debug>:
extern UART_HandleTypeDef huart1;

char debugMessage[64] = {};
uint8_t debugMessageLength = 0;

void print_debug(char* msg){
 800432c:	b510      	push	{r4, lr}
	#if DEBUG_SERIAL
		debugMessageLength = sprintf(debugMessage, "%s", msg);
 800432e:	4c08      	ldr	r4, [pc, #32]	; (8004350 <print_debug+0x24>)
 8004330:	4602      	mov	r2, r0
 8004332:	4908      	ldr	r1, [pc, #32]	; (8004354 <print_debug+0x28>)
 8004334:	4620      	mov	r0, r4
 8004336:	f000 fe23 	bl	8004f80 <siprintf>
 800433a:	4b07      	ldr	r3, [pc, #28]	; (8004358 <print_debug+0x2c>)
 800433c:	b2c2      	uxtb	r2, r0
 800433e:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, (uint8_t*) debugMessage, debugMessageLength, 0x2000);
 8004340:	4621      	mov	r1, r4
	#endif
}
 8004342:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_UART_Transmit(&huart1, (uint8_t*) debugMessage, debugMessageLength, 0x2000);
 8004346:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800434a:	4804      	ldr	r0, [pc, #16]	; (800435c <print_debug+0x30>)
 800434c:	f7fe b8e2 	b.w	8002514 <HAL_UART_Transmit>
 8004350:	200051c4 	.word	0x200051c4
 8004354:	080062f2 	.word	0x080062f2
 8004358:	20005204 	.word	0x20005204
 800435c:	20005424 	.word	0x20005424

08004360 <init_rf433>:

void init_rf433(uint8_t channel){
 8004360:	b538      	push	{r3, r4, r5, lr}
 8004362:	4605      	mov	r5, r0
	CMD_RF_ON;
	HAL_Delay(50);

	HAL_UART_Transmit(&huart1, (uint8_t*) "AT+FU1\r", 7, 0x2000);
 8004364:	4c21      	ldr	r4, [pc, #132]	; (80043ec <init_rf433+0x8c>)
	CMD_RF_ON;
 8004366:	2200      	movs	r2, #0
 8004368:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800436c:	4820      	ldr	r0, [pc, #128]	; (80043f0 <init_rf433+0x90>)
 800436e:	f7fd f8cd 	bl	800150c <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8004372:	2032      	movs	r0, #50	; 0x32
 8004374:	f7fc f940 	bl	80005f8 <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*) "AT+FU1\r", 7, 0x2000);
 8004378:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800437c:	2207      	movs	r2, #7
 800437e:	491d      	ldr	r1, [pc, #116]	; (80043f4 <init_rf433+0x94>)
 8004380:	4620      	mov	r0, r4
 8004382:	f7fe f8c7 	bl	8002514 <HAL_UART_Transmit>
	HAL_Delay(200);
 8004386:	20c8      	movs	r0, #200	; 0xc8
 8004388:	f7fc f936 	bl	80005f8 <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*) "AT+B19200\r", 7, 0x2000);
 800438c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004390:	2207      	movs	r2, #7
 8004392:	4919      	ldr	r1, [pc, #100]	; (80043f8 <init_rf433+0x98>)
 8004394:	4620      	mov	r0, r4
 8004396:	f7fe f8bd 	bl	8002514 <HAL_UART_Transmit>
	HAL_Delay(200);
 800439a:	20c8      	movs	r0, #200	; 0xc8
 800439c:	f7fc f92c 	bl	80005f8 <HAL_Delay>
	debugMessageLength = sprintf(debugMessage, "AT+C%03d\r", channel);
 80043a0:	462a      	mov	r2, r5
 80043a2:	4916      	ldr	r1, [pc, #88]	; (80043fc <init_rf433+0x9c>)
 80043a4:	4816      	ldr	r0, [pc, #88]	; (8004400 <init_rf433+0xa0>)
 80043a6:	f000 fdeb 	bl	8004f80 <siprintf>
 80043aa:	4b16      	ldr	r3, [pc, #88]	; (8004404 <init_rf433+0xa4>)
 80043ac:	b2c2      	uxtb	r2, r0
 80043ae:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*) debugMessage, debugMessageLength, 0x2000);
 80043b0:	4913      	ldr	r1, [pc, #76]	; (8004400 <init_rf433+0xa0>)
 80043b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80043b6:	4620      	mov	r0, r4
 80043b8:	f7fe f8ac 	bl	8002514 <HAL_UART_Transmit>
	HAL_Delay(200);
 80043bc:	20c8      	movs	r0, #200	; 0xc8
 80043be:	f7fc f91b 	bl	80005f8 <HAL_Delay>

	CMD_RF_OFF;
 80043c2:	2201      	movs	r2, #1
 80043c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80043c8:	4809      	ldr	r0, [pc, #36]	; (80043f0 <init_rf433+0x90>)
 80043ca:	f7fd f89f 	bl	800150c <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80043ce:	2032      	movs	r0, #50	; 0x32
 80043d0:	f7fc f912 	bl	80005f8 <HAL_Delay>

	huart1.Init.BaudRate = 19200;
 80043d4:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
	if (HAL_UART_Init(&huart1) != HAL_OK){
 80043d8:	4620      	mov	r0, r4
	huart1.Init.BaudRate = 19200;
 80043da:	6063      	str	r3, [r4, #4]
	if (HAL_UART_Init(&huart1) != HAL_OK){
 80043dc:	f7fe f86c 	bl	80024b8 <HAL_UART_Init>
 80043e0:	b118      	cbz	r0, 80043ea <init_rf433+0x8a>
		Error_Handler();
	}
}
 80043e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		Error_Handler();
 80043e6:	f000 ba15 	b.w	8004814 <Error_Handler>
 80043ea:	bd38      	pop	{r3, r4, r5, pc}
 80043ec:	20005424 	.word	0x20005424
 80043f0:	40010800 	.word	0x40010800
 80043f4:	080062d5 	.word	0x080062d5
 80043f8:	080062dd 	.word	0x080062dd
 80043fc:	080062e8 	.word	0x080062e8
 8004400:	200051c4 	.word	0x200051c4
 8004404:	20005204 	.word	0x20005204

08004408 <mWrite_flash>:

#define CONTROLLER_LENGTH_WORDS		(sizeof(controllerSettings)	/ 4)

extern struct controllerData controllerSettings;

void mWrite_flash(void){
 8004408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800440a:	b087      	sub	sp, #28
	FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t pageError;
	uint16_t i;

	HAL_FLASH_Unlock();
 800440c:	f7fc fe9a 	bl	8001144 <HAL_FLASH_Unlock>

	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8004410:	2300      	movs	r3, #0
 8004412:	9302      	str	r3, [sp, #8]
	EraseInitStruct.PageAddress = SETTINGS_FLASH_PAGE_ADDR;
 8004414:	4b13      	ldr	r3, [pc, #76]	; (8004464 <mWrite_flash+0x5c>)
	EraseInitStruct.NbPages = 1;

	if(HAL_FLASHEx_Erase(&EraseInitStruct, &pageError) != HAL_OK){
 8004416:	a901      	add	r1, sp, #4
	EraseInitStruct.PageAddress = SETTINGS_FLASH_PAGE_ADDR;
 8004418:	9304      	str	r3, [sp, #16]
	EraseInitStruct.NbPages = 1;
 800441a:	2301      	movs	r3, #1
	if(HAL_FLASHEx_Erase(&EraseInitStruct, &pageError) != HAL_OK){
 800441c:	a802      	add	r0, sp, #8
	EraseInitStruct.NbPages = 1;
 800441e:	9305      	str	r3, [sp, #20]
	if(HAL_FLASHEx_Erase(&EraseInitStruct, &pageError) != HAL_OK){
 8004420:	f7fc ff40 	bl	80012a4 <HAL_FLASHEx_Erase>
 8004424:	b110      	cbz	r0, 800442c <mWrite_flash+0x24>
		print_debug("Erase Flash Error\n");
 8004426:	4810      	ldr	r0, [pc, #64]	; (8004468 <mWrite_flash+0x60>)
 8004428:	f7ff ff80 	bl	800432c <print_debug>
void mWrite_flash(void){
 800442c:	4c0d      	ldr	r4, [pc, #52]	; (8004464 <mWrite_flash+0x5c>)
	}

	uint32_t *source_addr = (void *)&controllerSettings;
	uint32_t *dest_addr = (uint32_t *) SETTINGS_FLASH_PAGE_ADDR;
	for (i=0; i<CONTROLLER_LENGTH_WORDS; i++) {
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,(uint32_t)dest_addr, *source_addr)!= HAL_OK){
 800442e:	4e0f      	ldr	r6, [pc, #60]	; (800446c <mWrite_flash+0x64>)
			print_debug("Write Flash Error\n");
 8004430:	4f0f      	ldr	r7, [pc, #60]	; (8004470 <mWrite_flash+0x68>)
	for (i=0; i<CONTROLLER_LENGTH_WORDS; i++) {
 8004432:	4d10      	ldr	r5, [pc, #64]	; (8004474 <mWrite_flash+0x6c>)
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,(uint32_t)dest_addr, *source_addr)!= HAL_OK){
 8004434:	f104 4378 	add.w	r3, r4, #4160749568	; 0xf8000000
 8004438:	f5a3 33fe 	sub.w	r3, r3, #130048	; 0x1fc00
 800443c:	599a      	ldr	r2, [r3, r6]
 800443e:	4621      	mov	r1, r4
 8004440:	2300      	movs	r3, #0
 8004442:	2002      	movs	r0, #2
 8004444:	f7fc fec4 	bl	80011d0 <HAL_FLASH_Program>
 8004448:	b110      	cbz	r0, 8004450 <mWrite_flash+0x48>
			print_debug("Write Flash Error\n");
 800444a:	4638      	mov	r0, r7
 800444c:	f7ff ff6e 	bl	800432c <print_debug>
		}
		source_addr++;
		dest_addr++;
 8004450:	3404      	adds	r4, #4
	for (i=0; i<CONTROLLER_LENGTH_WORDS; i++) {
 8004452:	42ac      	cmp	r4, r5
 8004454:	d1ee      	bne.n	8004434 <mWrite_flash+0x2c>
	}

	HAL_FLASH_Lock();
 8004456:	f7fc fe87 	bl	8001168 <HAL_FLASH_Lock>
	print_debug("Flash ok\n");
 800445a:	4807      	ldr	r0, [pc, #28]	; (8004478 <mWrite_flash+0x70>)
 800445c:	f7ff ff66 	bl	800432c <print_debug>
}
 8004460:	b007      	add	sp, #28
 8004462:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004464:	0801fc00 	.word	0x0801fc00
 8004468:	08006310 	.word	0x08006310
 800446c:	20005208 	.word	0x20005208
 8004470:	08006323 	.word	0x08006323
 8004474:	0801fc0c 	.word	0x0801fc0c
 8004478:	08006336 	.word	0x08006336

0800447c <mRead_flash>:

void mRead_flash(void){
 800447c:	b508      	push	{r3, lr}
	print_debug("reading flash\n");
 800447e:	4808      	ldr	r0, [pc, #32]	; (80044a0 <mRead_flash+0x24>)
 8004480:	f7ff ff54 	bl	800432c <print_debug>

	uint32_t *source_addr = (uint32_t *)SETTINGS_FLASH_PAGE_ADDR;
    uint32_t *dest_addr = (void*)&controllerSettings;

    for (uint16_t i=0; i<CONTROLLER_LENGTH_WORDS; i++) {
        *dest_addr = *(__IO uint32_t*)source_addr;
 8004484:	4b07      	ldr	r3, [pc, #28]	; (80044a4 <mRead_flash+0x28>)
        source_addr++;
        dest_addr++;
    }

    print_debug("Flash read\n");
 8004486:	4808      	ldr	r0, [pc, #32]	; (80044a8 <mRead_flash+0x2c>)
        *dest_addr = *(__IO uint32_t*)source_addr;
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	4b08      	ldr	r3, [pc, #32]	; (80044ac <mRead_flash+0x30>)
 800448c:	601a      	str	r2, [r3, #0]
 800448e:	4a08      	ldr	r2, [pc, #32]	; (80044b0 <mRead_flash+0x34>)
 8004490:	6811      	ldr	r1, [r2, #0]
 8004492:	6059      	str	r1, [r3, #4]
 8004494:	6852      	ldr	r2, [r2, #4]
 8004496:	609a      	str	r2, [r3, #8]
}
 8004498:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    print_debug("Flash read\n");
 800449c:	f7ff bf46 	b.w	800432c <print_debug>
 80044a0:	080062f5 	.word	0x080062f5
 80044a4:	0801fc00 	.word	0x0801fc00
 80044a8:	08006304 	.word	0x08006304
 80044ac:	20005208 	.word	0x20005208
 80044b0:	0801fc04 	.word	0x0801fc04

080044b4 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80044b4:	2238      	movs	r2, #56	; 0x38
{
 80044b6:	b530      	push	{r4, r5, lr}
 80044b8:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80044ba:	eb0d 0002 	add.w	r0, sp, r2
 80044be:	2100      	movs	r1, #0
 80044c0:	f000 fd55 	bl	8004f6e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80044c4:	2214      	movs	r2, #20
 80044c6:	2100      	movs	r1, #0
 80044c8:	a801      	add	r0, sp, #4
 80044ca:	f000 fd50 	bl	8004f6e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80044ce:	2220      	movs	r2, #32
 80044d0:	2100      	movs	r1, #0
 80044d2:	a806      	add	r0, sp, #24
 80044d4:	f000 fd4b 	bl	8004f6e <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80044d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80044dc:	2402      	movs	r4, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80044de:	2501      	movs	r5, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80044e0:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80044e2:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80044e4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80044e8:	a80e      	add	r0, sp, #56	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80044ea:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80044ec:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80044ee:	9513      	str	r5, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80044f0:	9416      	str	r4, [sp, #88]	; 0x58
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80044f2:	f7fd f811 	bl	8001518 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80044f6:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80044f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80044fc:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80044fe:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004500:	4621      	mov	r1, r4
 8004502:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004504:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004506:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004508:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800450a:	9402      	str	r4, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800450c:	f7fd fa52 	bl	80019b4 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8004510:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004514:	a806      	add	r0, sp, #24
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8004516:	9308      	str	r3, [sp, #32]
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8004518:	9406      	str	r4, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800451a:	f7fd fb1d 	bl	8001b58 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
  /** Configure the Systick interrupt time 
  */
  __HAL_RCC_PLLI2S_ENABLE();
 800451e:	4b02      	ldr	r3, [pc, #8]	; (8004528 <SystemClock_Config+0x74>)
 8004520:	601d      	str	r5, [r3, #0]
}
 8004522:	b01d      	add	sp, #116	; 0x74
 8004524:	bd30      	pop	{r4, r5, pc}
 8004526:	bf00      	nop
 8004528:	42420070 	.word	0x42420070

0800452c <main>:
{
 800452c:	b580      	push	{r7, lr}
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800452e:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004530:	f44f 7980 	mov.w	r9, #256	; 0x100
{
 8004534:	b092      	sub	sp, #72	; 0x48
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004536:	4d82      	ldr	r5, [pc, #520]	; (8004740 <main+0x214>)
  HAL_Init();
 8004538:	f7fc f83a 	bl	80005b0 <HAL_Init>
  SystemClock_Config();
 800453c:	f7ff ffba 	bl	80044b4 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004540:	2210      	movs	r2, #16
 8004542:	2100      	movs	r1, #0
 8004544:	a80a      	add	r0, sp, #40	; 0x28
 8004546:	f000 fd12 	bl	8004f6e <memset>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800454a:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 800454c:	2201      	movs	r2, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800454e:	f043 0320 	orr.w	r3, r3, #32
 8004552:	61ab      	str	r3, [r5, #24]
 8004554:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8004556:	f44f 6100 	mov.w	r1, #2048	; 0x800
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800455a:	f003 0320 	and.w	r3, r3, #32
 800455e:	9301      	str	r3, [sp, #4]
 8004560:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004562:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8004564:	4877      	ldr	r0, [pc, #476]	; (8004744 <main+0x218>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004566:	f043 0304 	orr.w	r3, r3, #4
 800456a:	61ab      	str	r3, [r5, #24]
 800456c:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800456e:	2601      	movs	r6, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004570:	f003 0304 	and.w	r3, r3, #4
 8004574:	9302      	str	r3, [sp, #8]
 8004576:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004578:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800457a:	2704      	movs	r7, #4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800457c:	f043 0308 	orr.w	r3, r3, #8
 8004580:	61ab      	str	r3, [r5, #24]
 8004582:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004584:	f04f 0803 	mov.w	r8, #3
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004588:	f003 0308 	and.w	r3, r3, #8
 800458c:	9303      	str	r3, [sp, #12]
 800458e:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8004590:	f7fc ffbc 	bl	800150c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8004594:	2200      	movs	r2, #0
 8004596:	2104      	movs	r1, #4
 8004598:	486b      	ldr	r0, [pc, #428]	; (8004748 <main+0x21c>)
 800459a:	f7fc ffb7 	bl	800150c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
 800459e:	2200      	movs	r2, #0
 80045a0:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 80045a4:	4869      	ldr	r0, [pc, #420]	; (800474c <main+0x220>)
 80045a6:	f7fc ffb1 	bl	800150c <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045aa:	a90a      	add	r1, sp, #40	; 0x28
 80045ac:	4865      	ldr	r0, [pc, #404]	; (8004744 <main+0x218>)
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80045ae:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80045b2:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045b4:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045b6:	f7fc fec3 	bl	8001340 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80045ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045be:	a90a      	add	r1, sp, #40	; 0x28
 80045c0:	4860      	ldr	r0, [pc, #384]	; (8004744 <main+0x218>)
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80045c2:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80045c4:	960b      	str	r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80045c6:	960d      	str	r6, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045c8:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045ca:	f7fc feb9 	bl	8001340 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80045ce:	a90a      	add	r1, sp, #40	; 0x28
 80045d0:	485d      	ldr	r0, [pc, #372]	; (8004748 <main+0x21c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80045d2:	960b      	str	r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80045d4:	970a      	str	r7, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045d6:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80045d8:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80045dc:	f7fc feb0 	bl	8001340 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 PB6 
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
 80045e0:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045e4:	a90a      	add	r1, sp, #40	; 0x28
 80045e6:	4859      	ldr	r0, [pc, #356]	; (800474c <main+0x220>)
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
 80045e8:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80045ea:	960b      	str	r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045ec:	940c      	str	r4, [sp, #48]	; 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80045ee:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045f2:	f7fc fea5 	bl	8001340 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80045f6:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 80045f8:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 80045fa:	4333      	orrs	r3, r6
 80045fc:	616b      	str	r3, [r5, #20]
 80045fe:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8004600:	2105      	movs	r1, #5
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004602:	4033      	ands	r3, r6
 8004604:	9300      	str	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8004606:	200e      	movs	r0, #14
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004608:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 800460a:	f7fc fb55 	bl	8000cb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800460e:	200e      	movs	r0, #14
 8004610:	f7fc fb86 	bl	8000d20 <HAL_NVIC_EnableIRQ>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8004614:	2220      	movs	r2, #32
 8004616:	4621      	mov	r1, r4
 8004618:	a80a      	add	r0, sp, #40	; 0x28
  hadc1.Instance = ADC1;
 800461a:	4d4d      	ldr	r5, [pc, #308]	; (8004750 <main+0x224>)
  ADC_ChannelConfTypeDef sConfig = {0};
 800461c:	9406      	str	r4, [sp, #24]
 800461e:	9407      	str	r4, [sp, #28]
 8004620:	9408      	str	r4, [sp, #32]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8004622:	f000 fca4 	bl	8004f6e <memset>
  hadc1.Instance = ADC1;
 8004626:	4b4b      	ldr	r3, [pc, #300]	; (8004754 <main+0x228>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004628:	4628      	mov	r0, r5
  hadc1.Instance = ADC1;
 800462a:	602b      	str	r3, [r5, #0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800462c:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  hadc1.Init.NbrOfConversion = 1;
 8004630:	612e      	str	r6, [r5, #16]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004632:	61eb      	str	r3, [r5, #28]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004634:	f8c5 9008 	str.w	r9, [r5, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8004638:	60ec      	str	r4, [r5, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800463a:	616c      	str	r4, [r5, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800463c:	606c      	str	r4, [r5, #4]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800463e:	f7fc f953 	bl	80008e8 <HAL_ADC_Init>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004642:	a906      	add	r1, sp, #24
 8004644:	4628      	mov	r0, r5
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004646:	9607      	str	r6, [sp, #28]
  sConfig.Channel = ADC_CHANNEL_0;
 8004648:	9406      	str	r4, [sp, #24]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800464a:	9408      	str	r4, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800464c:	f7fc f86e 	bl	800072c <HAL_ADC_ConfigChannel>
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8004650:	2307      	movs	r3, #7
 8004652:	930c      	str	r3, [sp, #48]	; 0x30
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8004654:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8004658:	a90a      	add	r1, sp, #40	; 0x28
 800465a:	4628      	mov	r0, r5
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 800465c:	9311      	str	r3, [sp, #68]	; 0x44
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 800465e:	960b      	str	r6, [sp, #44]	; 0x2c
  sConfigInjected.InjectedChannel = ADC_CHANNEL_0;
 8004660:	940a      	str	r4, [sp, #40]	; 0x28
  sConfigInjected.InjectedNbrOfConversion = 4;
 8004662:	970e      	str	r7, [sp, #56]	; 0x38
  sConfigInjected.AutoInjectedConv = DISABLE;
 8004664:	9410      	str	r4, [sp, #64]	; 0x40
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8004666:	940f      	str	r4, [sp, #60]	; 0x3c
  sConfigInjected.InjectedOffset = 0;
 8004668:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800466a:	f7fc fa27 	bl	8000abc <HAL_ADCEx_InjectedConfigChannel>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 800466e:	960a      	str	r6, [sp, #40]	; 0x28
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8004670:	2602      	movs	r6, #2
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8004672:	a90a      	add	r1, sp, #40	; 0x28
 8004674:	4628      	mov	r0, r5
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8004676:	960b      	str	r6, [sp, #44]	; 0x2c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8004678:	f7fc fa20 	bl	8000abc <HAL_ADCEx_InjectedConfigChannel>
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800467c:	a90a      	add	r1, sp, #40	; 0x28
 800467e:	4628      	mov	r0, r5
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 8004680:	960a      	str	r6, [sp, #40]	; 0x28
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8004682:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8004686:	f7fc fa19 	bl	8000abc <HAL_ADCEx_InjectedConfigChannel>
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800468a:	a90a      	add	r1, sp, #40	; 0x28
 800468c:	4628      	mov	r0, r5
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 800468e:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_4;
 8004692:	970b      	str	r7, [sp, #44]	; 0x2c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8004694:	f7fc fa12 	bl	8000abc <HAL_ADCEx_InjectedConfigChannel>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004698:	2210      	movs	r2, #16
 800469a:	4621      	mov	r1, r4
 800469c:	a806      	add	r0, sp, #24
 800469e:	f000 fc66 	bl	8004f6e <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80046a2:	221c      	movs	r2, #28
 80046a4:	4621      	mov	r1, r4
 80046a6:	a80a      	add	r0, sp, #40	; 0x28
  htim3.Instance = TIM3;
 80046a8:	4d2b      	ldr	r5, [pc, #172]	; (8004758 <main+0x22c>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80046aa:	9404      	str	r4, [sp, #16]
 80046ac:	9405      	str	r4, [sp, #20]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80046ae:	f000 fc5e 	bl	8004f6e <memset>
  htim3.Instance = TIM3;
 80046b2:	4b2a      	ldr	r3, [pc, #168]	; (800475c <main+0x230>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80046b4:	4628      	mov	r0, r5
  htim3.Init.Prescaler = 0;
 80046b6:	e885 0018 	stmia.w	r5, {r3, r4}
  htim3.Init.Period = 65535;
 80046ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80046be:	60ac      	str	r4, [r5, #8]
  htim3.Init.Period = 65535;
 80046c0:	60eb      	str	r3, [r5, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80046c2:	612c      	str	r4, [r5, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80046c4:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80046c6:	f7fd fd1b 	bl	8002100 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80046ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80046ce:	a906      	add	r1, sp, #24
 80046d0:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80046d2:	9306      	str	r3, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80046d4:	f7fd fb73 	bl	8001dbe <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80046d8:	4628      	mov	r0, r5
 80046da:	f7fd fd2b 	bl	8002134 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80046de:	a904      	add	r1, sp, #16
 80046e0:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80046e2:	9404      	str	r4, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80046e4:	9405      	str	r4, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80046e6:	f7fd fdef 	bl	80022c8 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80046ea:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80046ec:	4622      	mov	r2, r4
 80046ee:	a90a      	add	r1, sp, #40	; 0x28
 80046f0:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80046f2:	930a      	str	r3, [sp, #40]	; 0x28
  sConfigOC.Pulse = 0;
 80046f4:	940b      	str	r4, [sp, #44]	; 0x2c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80046f6:	940c      	str	r4, [sp, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80046f8:	940e      	str	r4, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80046fa:	f7fd fd61 	bl	80021c0 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80046fe:	463a      	mov	r2, r7
 8004700:	a90a      	add	r1, sp, #40	; 0x28
 8004702:	4628      	mov	r0, r5
 8004704:	f7fd fd5c 	bl	80021c0 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004708:	a90a      	add	r1, sp, #40	; 0x28
 800470a:	2208      	movs	r2, #8
 800470c:	4628      	mov	r0, r5
 800470e:	f7fd fd57 	bl	80021c0 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim3);
 8004712:	4628      	mov	r0, r5
 8004714:	f000 faf4 	bl	8004d00 <HAL_TIM_MspPostInit>
  huart1.Init.BaudRate = 9600;
 8004718:	f44f 5316 	mov.w	r3, #9600	; 0x2580
  huart1.Instance = USART1;
 800471c:	4810      	ldr	r0, [pc, #64]	; (8004760 <main+0x234>)
  huart1.Init.BaudRate = 9600;
 800471e:	4a11      	ldr	r2, [pc, #68]	; (8004764 <main+0x238>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004720:	6084      	str	r4, [r0, #8]
  huart1.Init.BaudRate = 9600;
 8004722:	e880 000c 	stmia.w	r0, {r2, r3}
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004726:	230c      	movs	r3, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004728:	60c4      	str	r4, [r0, #12]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800472a:	6143      	str	r3, [r0, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 800472c:	6104      	str	r4, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800472e:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004730:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004732:	f7fd fec1 	bl	80024b8 <HAL_UART_Init>
  controller_init();
 8004736:	f7ff fcd9 	bl	80040ec <controller_init>
  osKernelStart();
 800473a:	f7fe f8d5 	bl	80028e8 <osKernelStart>
 800473e:	e7fe      	b.n	800473e <main+0x212>
 8004740:	40021000 	.word	0x40021000
 8004744:	40010800 	.word	0x40010800
 8004748:	40011400 	.word	0x40011400
 800474c:	40010c00 	.word	0x40010c00
 8004750:	200053f4 	.word	0x200053f4
 8004754:	40012400 	.word	0x40012400
 8004758:	2000536c 	.word	0x2000536c
 800475c:	40000400 	.word	0x40000400
 8004760:	20005424 	.word	0x20005424
 8004764:	40013800 	.word	0x40013800

08004768 <HAL_UART_RxCpltCallback>:
}

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
	if(huart->Instance == USART1){
 8004768:	6802      	ldr	r2, [r0, #0]
 800476a:	4b16      	ldr	r3, [pc, #88]	; (80047c4 <HAL_UART_RxCpltCallback+0x5c>)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800476c:	b513      	push	{r0, r1, r4, lr}
	if(huart->Instance == USART1){
 800476e:	429a      	cmp	r2, r3
 8004770:	d125      	bne.n	80047be <HAL_UART_RxCpltCallback+0x56>
		if (recCommandByte != '\r'){
 8004772:	4b15      	ldr	r3, [pc, #84]	; (80047c8 <HAL_UART_RxCpltCallback+0x60>)
 8004774:	781a      	ldrb	r2, [r3, #0]
 8004776:	2a0d      	cmp	r2, #13
 8004778:	d01c      	beq.n	80047b4 <HAL_UART_RxCpltCallback+0x4c>
			recCommandBuffer[p_recCommandBuffer] = recCommandByte;
 800477a:	4c14      	ldr	r4, [pc, #80]	; (80047cc <HAL_UART_RxCpltCallback+0x64>)
 800477c:	4914      	ldr	r1, [pc, #80]	; (80047d0 <HAL_UART_RxCpltCallback+0x68>)
 800477e:	7823      	ldrb	r3, [r4, #0]
 8004780:	54ca      	strb	r2, [r1, r3]
			p_recCommandBuffer++;
 8004782:	3301      	adds	r3, #1
 8004784:	b2db      	uxtb	r3, r3

			if (p_recCommandBuffer == MAX_COMMAND_LENGTH) p_recCommandBuffer = 0;
 8004786:	2b40      	cmp	r3, #64	; 0x40
 8004788:	bf08      	it	eq
 800478a:	2300      	moveq	r3, #0

			if(recCommandByte == '\n'){
 800478c:	2a0a      	cmp	r2, #10
			if (p_recCommandBuffer == MAX_COMMAND_LENGTH) p_recCommandBuffer = 0;
 800478e:	7023      	strb	r3, [r4, #0]
			if(recCommandByte == '\n'){
 8004790:	d10e      	bne.n	80047b0 <HAL_UART_RxCpltCallback+0x48>
				memcpy(commandToProcessBuffer, recCommandBuffer, p_recCommandBuffer);
 8004792:	7822      	ldrb	r2, [r4, #0]
 8004794:	490e      	ldr	r1, [pc, #56]	; (80047d0 <HAL_UART_RxCpltCallback+0x68>)
 8004796:	480f      	ldr	r0, [pc, #60]	; (80047d4 <HAL_UART_RxCpltCallback+0x6c>)
 8004798:	f000 fbde 	bl	8004f58 <memcpy>
				portBASE_TYPE r1;
				xQueueSendToBackFromISR(xRecCommandQueue, &commandToProcessBuffer, &r1);
 800479c:	480e      	ldr	r0, [pc, #56]	; (80047d8 <HAL_UART_RxCpltCallback+0x70>)
 800479e:	2300      	movs	r3, #0
 80047a0:	aa01      	add	r2, sp, #4
 80047a2:	490c      	ldr	r1, [pc, #48]	; (80047d4 <HAL_UART_RxCpltCallback+0x6c>)
 80047a4:	6800      	ldr	r0, [r0, #0]
 80047a6:	f7fe fcbf 	bl	8003128 <xQueueGenericSendFromISR>
				p_recCommandBuffer = 0;
			}
			else if (recCommandByte == 0xFF) {
				p_recCommandBuffer = 0;
 80047aa:	2300      	movs	r3, #0
 80047ac:	7023      	strb	r3, [r4, #0]
 80047ae:	e001      	b.n	80047b4 <HAL_UART_RxCpltCallback+0x4c>
			else if (recCommandByte == 0xFF) {
 80047b0:	2aff      	cmp	r2, #255	; 0xff
 80047b2:	d0fa      	beq.n	80047aa <HAL_UART_RxCpltCallback+0x42>
			}
		}

		HAL_UART_Receive_IT(&huart1, &recCommandByte, 1);
 80047b4:	2201      	movs	r2, #1
 80047b6:	4904      	ldr	r1, [pc, #16]	; (80047c8 <HAL_UART_RxCpltCallback+0x60>)
 80047b8:	4808      	ldr	r0, [pc, #32]	; (80047dc <HAL_UART_RxCpltCallback+0x74>)
 80047ba:	f7fd ff07 	bl	80025cc <HAL_UART_Receive_IT>
	}
}
 80047be:	b002      	add	sp, #8
 80047c0:	bd10      	pop	{r4, pc}
 80047c2:	bf00      	nop
 80047c4:	40013800 	.word	0x40013800
 80047c8:	20005474 	.word	0x20005474
 80047cc:	2000546e 	.word	0x2000546e
 80047d0:	200052e0 	.word	0x200052e0
 80047d4:	20005320 	.word	0x20005320
 80047d8:	20005470 	.word	0x20005470
 80047dc:	20005424 	.word	0x20005424

080047e0 <HAL_ADCEx_InjectedConvCpltCallback>:

void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc1){
 80047e0:	b538      	push	{r3, r4, r5, lr}
	  ADCRawData[0]=HAL_ADCEx_InjectedGetValue(hadc1,ADC_INJECTED_RANK_1);
 80047e2:	2101      	movs	r1, #1
void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc1){
 80047e4:	4605      	mov	r5, r0
	  ADCRawData[0]=HAL_ADCEx_InjectedGetValue(hadc1,ADC_INJECTED_RANK_1);
 80047e6:	f7fc f959 	bl	8000a9c <HAL_ADCEx_InjectedGetValue>
 80047ea:	4c09      	ldr	r4, [pc, #36]	; (8004810 <HAL_ADCEx_InjectedConvCpltCallback+0x30>)
	  ADCRawData[1]=HAL_ADCEx_InjectedGetValue(hadc1,ADC_INJECTED_RANK_2);
 80047ec:	2102      	movs	r1, #2
	  ADCRawData[0]=HAL_ADCEx_InjectedGetValue(hadc1,ADC_INJECTED_RANK_1);
 80047ee:	8020      	strh	r0, [r4, #0]
	  ADCRawData[1]=HAL_ADCEx_InjectedGetValue(hadc1,ADC_INJECTED_RANK_2);
 80047f0:	4628      	mov	r0, r5
 80047f2:	f7fc f953 	bl	8000a9c <HAL_ADCEx_InjectedGetValue>
	  ADCRawData[2]=HAL_ADCEx_InjectedGetValue(hadc1,ADC_INJECTED_RANK_3);
 80047f6:	2103      	movs	r1, #3
	  ADCRawData[1]=HAL_ADCEx_InjectedGetValue(hadc1,ADC_INJECTED_RANK_2);
 80047f8:	8060      	strh	r0, [r4, #2]
	  ADCRawData[2]=HAL_ADCEx_InjectedGetValue(hadc1,ADC_INJECTED_RANK_3);
 80047fa:	4628      	mov	r0, r5
 80047fc:	f7fc f94e 	bl	8000a9c <HAL_ADCEx_InjectedGetValue>
	  ADCRawData[3]=HAL_ADCEx_InjectedGetValue(hadc1,ADC_INJECTED_RANK_4);
 8004800:	2104      	movs	r1, #4
	  ADCRawData[2]=HAL_ADCEx_InjectedGetValue(hadc1,ADC_INJECTED_RANK_3);
 8004802:	80a0      	strh	r0, [r4, #4]
	  ADCRawData[3]=HAL_ADCEx_InjectedGetValue(hadc1,ADC_INJECTED_RANK_4);
 8004804:	4628      	mov	r0, r5
 8004806:	f7fc f949 	bl	8000a9c <HAL_ADCEx_InjectedGetValue>
 800480a:	80e0      	strh	r0, [r4, #6]
 800480c:	bd38      	pop	{r3, r4, r5, pc}
 800480e:	bf00      	nop
 8004810:	20005364 	.word	0x20005364

08004814 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004814:	4770      	bx	lr
	...

08004818 <xProcessCommandTask>:
extern uint8_t lastTimeCommand;

extern uint16_t server_UID;
extern enum AirSystemType airSystem;

void xProcessCommandTask(void* arguments){
 8004818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	portBASE_TYPE xStatus;
	uint8_t command[MAX_COMMAND_LENGTH] = {0};

	uint16_t id = 0;
 800481c:	2500      	movs	r5, #0
void xProcessCommandTask(void* arguments){
 800481e:	b097      	sub	sp, #92	; 0x5c
	uint8_t command[MAX_COMMAND_LENGTH] = {0};
 8004820:	2240      	movs	r2, #64	; 0x40
 8004822:	2100      	movs	r1, #0
 8004824:	a806      	add	r0, sp, #24
						if (id == server_UID){
							pressureCompensation = OFF;
						}
					}
					else if (command[1] == ','){
						sscanf((char*)command, "s,%hu,%hu,%hu,%hu,%hu,%c,\n", &id, 	&nessPressure[0],
 8004826:	f8df a350 	ldr.w	sl, [pc, #848]	; 8004b78 <xProcessCommandTask+0x360>
								mWrite_flash();
								messageLength = sprintf(message, "xc,%05d,ok,\n", controllerSettings.clientID);
								HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);

								vTaskDelay(200 / portTICK_RATE_MS);
								CMD_RF_ON;
 800482a:	f8df 9350 	ldr.w	r9, [pc, #848]	; 8004b7c <xProcessCommandTask+0x364>
	uint8_t command[MAX_COMMAND_LENGTH] = {0};
 800482e:	f000 fb9e 	bl	8004f6e <memset>
	uint16_t id = 0;
 8004832:	f8ad 5014 	strh.w	r5, [sp, #20]
	char co = 0;
 8004836:	f88d 5011 	strb.w	r5, [sp, #17]
	char outputState = 0;
 800483a:	f88d 5012 	strb.w	r5, [sp, #18]
	uint16_t channel = 0;
 800483e:	f8ad 5016 	strh.w	r5, [sp, #22]
	char systemType = 0;
 8004842:	f88d 5013 	strb.w	r5, [sp, #19]
		xStatus = xQueueReceive(xRecCommandQueue, command, portMAX_DELAY);
 8004846:	4cb2      	ldr	r4, [pc, #712]	; (8004b10 <xProcessCommandTask+0x2f8>)
 8004848:	2300      	movs	r3, #0
 800484a:	f04f 32ff 	mov.w	r2, #4294967295
 800484e:	a906      	add	r1, sp, #24
 8004850:	6820      	ldr	r0, [r4, #0]
 8004852:	f7fe fccb 	bl	80031ec <xQueueGenericReceive>
		if (xStatus == pdPASS){
 8004856:	2801      	cmp	r0, #1
		xStatus = xQueueReceive(xRecCommandQueue, command, portMAX_DELAY);
 8004858:	4606      	mov	r6, r0
		if (xStatus == pdPASS){
 800485a:	d1f5      	bne.n	8004848 <xProcessCommandTask+0x30>
			lastTimeCommand = 0;
 800485c:	2400      	movs	r4, #0
 800485e:	4bad      	ldr	r3, [pc, #692]	; (8004b14 <xProcessCommandTask+0x2fc>)
 8004860:	701c      	strb	r4, [r3, #0]
			switch(command[0]){
 8004862:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8004866:	2b73      	cmp	r3, #115	; 0x73
 8004868:	f000 808d 	beq.w	8004986 <xProcessCommandTask+0x16e>
 800486c:	2b78      	cmp	r3, #120	; 0x78
 800486e:	f000 80d3 	beq.w	8004a18 <xProcessCommandTask+0x200>
 8004872:	2b6d      	cmp	r3, #109	; 0x6d
 8004874:	d1e7      	bne.n	8004846 <xProcessCommandTask+0x2e>
					if (indicationState != SEARCH){
 8004876:	4ba8      	ldr	r3, [pc, #672]	; (8004b18 <xProcessCommandTask+0x300>)
					sscanf((char*)command, "m,%hu,%c,%c,\n", &id, &co, &outputState);
 8004878:	49a8      	ldr	r1, [pc, #672]	; (8004b1c <xProcessCommandTask+0x304>)
					if (indicationState != SEARCH){
 800487a:	781a      	ldrb	r2, [r3, #0]
					sscanf((char*)command, "m,%hu,%c,%c,\n", &id, &co, &outputState);
 800487c:	a806      	add	r0, sp, #24
					if (indicationState != SEARCH){
 800487e:	2a02      	cmp	r2, #2
						indicationState = NORMAL_C;
 8004880:	bf18      	it	ne
 8004882:	701c      	strbne	r4, [r3, #0]
					sscanf((char*)command, "m,%hu,%c,%c,\n", &id, &co, &outputState);
 8004884:	f10d 0312 	add.w	r3, sp, #18
 8004888:	9300      	str	r3, [sp, #0]
 800488a:	aa05      	add	r2, sp, #20
 800488c:	f10d 0311 	add.w	r3, sp, #17
 8004890:	f000 fb9a 	bl	8004fc8 <siscanf>
					outputState = command[10];
 8004894:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
					if (id == server_UID){
 8004898:	f8bd 2014 	ldrh.w	r2, [sp, #20]
					outputState = command[10];
 800489c:	f88d 3012 	strb.w	r3, [sp, #18]
					if (id == server_UID){
 80048a0:	4b9f      	ldr	r3, [pc, #636]	; (8004b20 <xProcessCommandTask+0x308>)
 80048a2:	881b      	ldrh	r3, [r3, #0]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d1ce      	bne.n	8004846 <xProcessCommandTask+0x2e>
																						filteredData[SENS_1],
 80048a8:	499e      	ldr	r1, [pc, #632]	; (8004b24 <xProcessCommandTask+0x30c>)
						messageLength = sprintf(message, "m,%hu,%hu,%hu,%hu,%hu,\n", 	controllerSettings.clientID,
 80048aa:	4a9f      	ldr	r2, [pc, #636]	; (8004b28 <xProcessCommandTask+0x310>)
 80048ac:	88c8      	ldrh	r0, [r1, #6]
 80048ae:	880b      	ldrh	r3, [r1, #0]
 80048b0:	8892      	ldrh	r2, [r2, #4]
 80048b2:	9002      	str	r0, [sp, #8]
 80048b4:	8888      	ldrh	r0, [r1, #4]
 80048b6:	9001      	str	r0, [sp, #4]
 80048b8:	8849      	ldrh	r1, [r1, #2]
 80048ba:	489c      	ldr	r0, [pc, #624]	; (8004b2c <xProcessCommandTask+0x314>)
 80048bc:	9100      	str	r1, [sp, #0]
 80048be:	499c      	ldr	r1, [pc, #624]	; (8004b30 <xProcessCommandTask+0x318>)
 80048c0:	f000 fb5e 	bl	8004f80 <siprintf>
 80048c4:	4b9b      	ldr	r3, [pc, #620]	; (8004b34 <xProcessCommandTask+0x31c>)
 80048c6:	b2c2      	uxtb	r2, r0
						HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);
 80048c8:	4998      	ldr	r1, [pc, #608]	; (8004b2c <xProcessCommandTask+0x314>)
 80048ca:	489b      	ldr	r0, [pc, #620]	; (8004b38 <xProcessCommandTask+0x320>)
						messageLength = sprintf(message, "m,%hu,%hu,%hu,%hu,%hu,\n", 	controllerSettings.clientID,
 80048cc:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);
 80048ce:	f7fd fea5 	bl	800261c <HAL_UART_Transmit_DMA>
						if (outputState != prevOutputState){
 80048d2:	f89d 2012 	ldrb.w	r2, [sp, #18]
 80048d6:	4295      	cmp	r5, r2
 80048d8:	d0b5      	beq.n	8004846 <xProcessCommandTask+0x2e>
							pressureCompensation = OFF;
 80048da:	2100      	movs	r1, #0
 80048dc:	4b97      	ldr	r3, [pc, #604]	; (8004b3c <xProcessCommandTask+0x324>)
							if (outputState & 0b00000001) 	C1_UP_ON;
 80048de:	f012 0201 	ands.w	r2, r2, #1
							pressureCompensation = OFF;
 80048e2:	7019      	strb	r1, [r3, #0]
							if (outputState & 0b00000001) 	C1_UP_ON;
 80048e4:	bf18      	it	ne
 80048e6:	2201      	movne	r2, #1
							else 				   			C1_UP_OFF;
 80048e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80048ec:	4894      	ldr	r0, [pc, #592]	; (8004b40 <xProcessCommandTask+0x328>)
 80048ee:	f7fc fe0d 	bl	800150c <HAL_GPIO_WritePin>
							if (outputState & 0b00000010) 	C1_DOWN_ON;
 80048f2:	f89d 2012 	ldrb.w	r2, [sp, #18]
							else 				   			C1_DOWN_OFF;
 80048f6:	2180      	movs	r1, #128	; 0x80
							if (outputState & 0b00000010) 	C1_DOWN_ON;
 80048f8:	f012 0202 	ands.w	r2, r2, #2
 80048fc:	bf18      	it	ne
 80048fe:	2201      	movne	r2, #1
							else 				   			C1_DOWN_OFF;
 8004900:	488f      	ldr	r0, [pc, #572]	; (8004b40 <xProcessCommandTask+0x328>)
 8004902:	f7fc fe03 	bl	800150c <HAL_GPIO_WritePin>
							if (outputState & 0b00000100) 	C2_UP_ON;
 8004906:	f89d 2012 	ldrb.w	r2, [sp, #18]
							else 				   			C2_UP_OFF;
 800490a:	2120      	movs	r1, #32
							if (outputState & 0b00000100) 	C2_UP_ON;
 800490c:	f012 0204 	ands.w	r2, r2, #4
 8004910:	bf18      	it	ne
 8004912:	2201      	movne	r2, #1
							else 				   			C2_UP_OFF;
 8004914:	488a      	ldr	r0, [pc, #552]	; (8004b40 <xProcessCommandTask+0x328>)
 8004916:	f7fc fdf9 	bl	800150c <HAL_GPIO_WritePin>
							if (outputState & 0b00001000) 	C2_DOWN_ON;
 800491a:	f89d 2012 	ldrb.w	r2, [sp, #18]
							else 				   			C2_DOWN_OFF;
 800491e:	2108      	movs	r1, #8
							if (outputState & 0b00001000) 	C2_DOWN_ON;
 8004920:	f012 0208 	ands.w	r2, r2, #8
 8004924:	bf18      	it	ne
 8004926:	2201      	movne	r2, #1
							else 				   			C2_DOWN_OFF;
 8004928:	4885      	ldr	r0, [pc, #532]	; (8004b40 <xProcessCommandTask+0x328>)
 800492a:	f7fc fdef 	bl	800150c <HAL_GPIO_WritePin>
							if (outputState & 0b00010000) 	C3_UP_ON;
 800492e:	f89d 2012 	ldrb.w	r2, [sp, #18]
							else 				   			C3_UP_OFF;
 8004932:	f44f 7180 	mov.w	r1, #256	; 0x100
							if (outputState & 0b00010000) 	C3_UP_ON;
 8004936:	f012 0210 	ands.w	r2, r2, #16
 800493a:	bf18      	it	ne
 800493c:	2201      	movne	r2, #1
							else 				   			C3_UP_OFF;
 800493e:	4880      	ldr	r0, [pc, #512]	; (8004b40 <xProcessCommandTask+0x328>)
 8004940:	f7fc fde4 	bl	800150c <HAL_GPIO_WritePin>
							if (outputState & 0b00100000) 	C3_DOWN_ON;
 8004944:	f89d 2012 	ldrb.w	r2, [sp, #18]
							else 				   			C3_DOWN_OFF;
 8004948:	2140      	movs	r1, #64	; 0x40
							if (outputState & 0b00100000) 	C3_DOWN_ON;
 800494a:	f012 0220 	ands.w	r2, r2, #32
 800494e:	bf18      	it	ne
 8004950:	2201      	movne	r2, #1
							else 				   			C3_DOWN_OFF;
 8004952:	487b      	ldr	r0, [pc, #492]	; (8004b40 <xProcessCommandTask+0x328>)
 8004954:	f7fc fdda 	bl	800150c <HAL_GPIO_WritePin>
							if (outputState & 0b01000000) 	C4_UP_ON;
 8004958:	f89d 2012 	ldrb.w	r2, [sp, #18]
							else 				   			C4_UP_OFF;
 800495c:	2110      	movs	r1, #16
							if (outputState & 0b01000000) 	C4_UP_ON;
 800495e:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 8004962:	bf18      	it	ne
 8004964:	2201      	movne	r2, #1
							else 				   			C4_UP_OFF;
 8004966:	4876      	ldr	r0, [pc, #472]	; (8004b40 <xProcessCommandTask+0x328>)
 8004968:	f7fc fdd0 	bl	800150c <HAL_GPIO_WritePin>
							if (outputState & 0b10000000) 	C4_DOWN_ON;
 800496c:	f99d 3012 	ldrsb.w	r3, [sp, #18]
							else 				   			C4_DOWN_OFF;
 8004970:	2104      	movs	r1, #4
							if (outputState & 0b10000000) 	C4_DOWN_ON;
 8004972:	2b00      	cmp	r3, #0
 8004974:	bfb4      	ite	lt
 8004976:	2201      	movlt	r2, #1
							else 				   			C4_DOWN_OFF;
 8004978:	2200      	movge	r2, #0
 800497a:	4872      	ldr	r0, [pc, #456]	; (8004b44 <xProcessCommandTask+0x32c>)
 800497c:	f7fc fdc6 	bl	800150c <HAL_GPIO_WritePin>
							prevOutputState = outputState;
 8004980:	f89d 5012 	ldrb.w	r5, [sp, #18]
 8004984:	e75f      	b.n	8004846 <xProcessCommandTask+0x2e>
					if (command[1] == 'x'){
 8004986:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800498a:	2b78      	cmp	r3, #120	; 0x78
 800498c:	d10e      	bne.n	80049ac <xProcessCommandTask+0x194>
						sscanf((char*)command, "sx,%hu,\n", &id);
 800498e:	aa05      	add	r2, sp, #20
 8004990:	496d      	ldr	r1, [pc, #436]	; (8004b48 <xProcessCommandTask+0x330>)
 8004992:	a806      	add	r0, sp, #24
 8004994:	f000 fb18 	bl	8004fc8 <siscanf>
						if (id == server_UID){
 8004998:	4b61      	ldr	r3, [pc, #388]	; (8004b20 <xProcessCommandTask+0x308>)
 800499a:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 800499e:	881b      	ldrh	r3, [r3, #0]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	f47f af50 	bne.w	8004846 <xProcessCommandTask+0x2e>
							pressureCompensation = OFF;
 80049a6:	4b65      	ldr	r3, [pc, #404]	; (8004b3c <xProcessCommandTask+0x324>)
 80049a8:	701c      	strb	r4, [r3, #0]
 80049aa:	e74c      	b.n	8004846 <xProcessCommandTask+0x2e>
					else if (command[1] == ','){
 80049ac:	2b2c      	cmp	r3, #44	; 0x2c
 80049ae:	f47f af4a 	bne.w	8004846 <xProcessCommandTask+0x2e>
						sscanf((char*)command, "s,%hu,%hu,%hu,%hu,%hu,%c,\n", &id, 	&nessPressure[0],
 80049b2:	f10d 0313 	add.w	r3, sp, #19
 80049b6:	9303      	str	r3, [sp, #12]
 80049b8:	4b64      	ldr	r3, [pc, #400]	; (8004b4c <xProcessCommandTask+0x334>)
 80049ba:	aa05      	add	r2, sp, #20
 80049bc:	1e9f      	subs	r7, r3, #2
 80049be:	9301      	str	r3, [sp, #4]
 80049c0:	f8cd a008 	str.w	sl, [sp, #8]
 80049c4:	3b04      	subs	r3, #4
 80049c6:	9700      	str	r7, [sp, #0]
 80049c8:	4961      	ldr	r1, [pc, #388]	; (8004b50 <xProcessCommandTask+0x338>)
 80049ca:	a806      	add	r0, sp, #24
 80049cc:	f000 fafc 	bl	8004fc8 <siscanf>
						if (id == server_UID){
 80049d0:	4b53      	ldr	r3, [pc, #332]	; (8004b20 <xProcessCommandTask+0x308>)
 80049d2:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80049d6:	881b      	ldrh	r3, [r3, #0]
 80049d8:	429a      	cmp	r2, r3
 80049da:	f47f af34 	bne.w	8004846 <xProcessCommandTask+0x2e>
							if (systemType == '1'){ // air system choice
 80049de:	f89d 3013 	ldrb.w	r3, [sp, #19]
									pressIsLower[i] = 0;
 80049e2:	4620      	mov	r0, r4
								airSystem = COMPRESSOR; // for compressor
 80049e4:	2b31      	cmp	r3, #49	; 0x31
 80049e6:	bf14      	ite	ne
 80049e8:	4632      	movne	r2, r6
 80049ea:	4622      	moveq	r2, r4
 80049ec:	4b59      	ldr	r3, [pc, #356]	; (8004b54 <xProcessCommandTask+0x33c>)
								if (filteredData[i] > nessPressure[i])
 80049ee:	f8df e134 	ldr.w	lr, [pc, #308]	; 8004b24 <xProcessCommandTask+0x30c>
 80049f2:	4959      	ldr	r1, [pc, #356]	; (8004b58 <xProcessCommandTask+0x340>)
								airSystem = COMPRESSOR; // for compressor
 80049f4:	701a      	strb	r2, [r3, #0]
								if (filteredData[i] > nessPressure[i])
 80049f6:	3f02      	subs	r7, #2
 80049f8:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
 80049fc:	f83e 2014 	ldrh.w	r2, [lr, r4, lsl #1]
 8004a00:	429a      	cmp	r2, r3
									pressIsLower[i] = 0;
 8004a02:	bf94      	ite	ls
 8004a04:	4633      	movls	r3, r6
 8004a06:	4603      	movhi	r3, r0
 8004a08:	550b      	strb	r3, [r1, r4]
 8004a0a:	3401      	adds	r4, #1
							for (i = 0; i < 4; i++){
 8004a0c:	2c04      	cmp	r4, #4
 8004a0e:	d1f3      	bne.n	80049f8 <xProcessCommandTask+0x1e0>
							pressureCompensation = ON;
 8004a10:	2201      	movs	r2, #1
 8004a12:	4b4a      	ldr	r3, [pc, #296]	; (8004b3c <xProcessCommandTask+0x324>)
 8004a14:	701a      	strb	r2, [r3, #0]
 8004a16:	e716      	b.n	8004846 <xProcessCommandTask+0x2e>
					if (indicationState == SEARCH){
 8004a18:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 8004b18 <xProcessCommandTask+0x300>
 8004a1c:	f898 3000 	ldrb.w	r3, [r8]
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	f47f af10 	bne.w	8004846 <xProcessCommandTask+0x2e>
						if (command[1] == '?'){
 8004a26:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8004a2a:	2b3f      	cmp	r3, #63	; 0x3f
 8004a2c:	d114      	bne.n	8004a58 <xProcessCommandTask+0x240>
							sscanf((char*)command, "x?%hu,\n", &controllerSettings.clientID);
 8004a2e:	4a4b      	ldr	r2, [pc, #300]	; (8004b5c <xProcessCommandTask+0x344>)
 8004a30:	494b      	ldr	r1, [pc, #300]	; (8004b60 <xProcessCommandTask+0x348>)
 8004a32:	a806      	add	r0, sp, #24
 8004a34:	f000 fac8 	bl	8004fc8 <siscanf>
							messageLength = sprintf(message, "x,%05d,%05d,\n", controllerSettings.clientID, server_UID);
 8004a38:	4b39      	ldr	r3, [pc, #228]	; (8004b20 <xProcessCommandTask+0x308>)
 8004a3a:	4a3b      	ldr	r2, [pc, #236]	; (8004b28 <xProcessCommandTask+0x310>)
 8004a3c:	881b      	ldrh	r3, [r3, #0]
 8004a3e:	8892      	ldrh	r2, [r2, #4]
 8004a40:	4948      	ldr	r1, [pc, #288]	; (8004b64 <xProcessCommandTask+0x34c>)
 8004a42:	483a      	ldr	r0, [pc, #232]	; (8004b2c <xProcessCommandTask+0x314>)
 8004a44:	f000 fa9c 	bl	8004f80 <siprintf>
 8004a48:	4b3a      	ldr	r3, [pc, #232]	; (8004b34 <xProcessCommandTask+0x31c>)
 8004a4a:	b2c2      	uxtb	r2, r0
							HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);
 8004a4c:	4937      	ldr	r1, [pc, #220]	; (8004b2c <xProcessCommandTask+0x314>)
 8004a4e:	483a      	ldr	r0, [pc, #232]	; (8004b38 <xProcessCommandTask+0x320>)
							messageLength = sprintf(message, "x,%05d,%05d,\n", controllerSettings.clientID, server_UID);
 8004a50:	701a      	strb	r2, [r3, #0]
							HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);
 8004a52:	f7fd fde3 	bl	800261c <HAL_UART_Transmit_DMA>
 8004a56:	e6f6      	b.n	8004846 <xProcessCommandTask+0x2e>
						else if (command[1] == 'c'){
 8004a58:	2b63      	cmp	r3, #99	; 0x63
 8004a5a:	f47f aef4 	bne.w	8004846 <xProcessCommandTask+0x2e>
							sscanf((char*)command, "xc,%hu,%hu,\n", &id, &channel);
 8004a5e:	f10d 0316 	add.w	r3, sp, #22
 8004a62:	aa05      	add	r2, sp, #20
 8004a64:	4940      	ldr	r1, [pc, #256]	; (8004b68 <xProcessCommandTask+0x350>)
 8004a66:	a806      	add	r0, sp, #24
 8004a68:	f000 faae 	bl	8004fc8 <siscanf>
							messageLength = sprintf(message, "id,%05d,%05d,%03d\n", id, server_UID, channel);
 8004a6c:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 8004b20 <xProcessCommandTask+0x308>
 8004a70:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8004a74:	f8bb 3000 	ldrh.w	r3, [fp]
 8004a78:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8004a7c:	9100      	str	r1, [sp, #0]
 8004a7e:	482b      	ldr	r0, [pc, #172]	; (8004b2c <xProcessCommandTask+0x314>)
 8004a80:	493a      	ldr	r1, [pc, #232]	; (8004b6c <xProcessCommandTask+0x354>)
 8004a82:	f000 fa7d 	bl	8004f80 <siprintf>
 8004a86:	4f2b      	ldr	r7, [pc, #172]	; (8004b34 <xProcessCommandTask+0x31c>)
 8004a88:	7038      	strb	r0, [r7, #0]
							print_debug(message);
 8004a8a:	4828      	ldr	r0, [pc, #160]	; (8004b2c <xProcessCommandTask+0x314>)
 8004a8c:	f7ff fc4e 	bl	800432c <print_debug>
							if (id == server_UID){
 8004a90:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8004a94:	f8bb 3000 	ldrh.w	r3, [fp]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	f47f aed4 	bne.w	8004846 <xProcessCommandTask+0x2e>
								controllerSettings.rfChannel = channel;
 8004a9e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8004aa2:	f8df b084 	ldr.w	fp, [pc, #132]	; 8004b28 <xProcessCommandTask+0x310>
 8004aa6:	f88b 3000 	strb.w	r3, [fp]
								mWrite_flash();
 8004aaa:	f7ff fcad 	bl	8004408 <mWrite_flash>
								messageLength = sprintf(message, "xc,%05d,ok,\n", controllerSettings.clientID);
 8004aae:	f8bb 2004 	ldrh.w	r2, [fp, #4]
 8004ab2:	492f      	ldr	r1, [pc, #188]	; (8004b70 <xProcessCommandTask+0x358>)
 8004ab4:	481d      	ldr	r0, [pc, #116]	; (8004b2c <xProcessCommandTask+0x314>)
 8004ab6:	f000 fa63 	bl	8004f80 <siprintf>
								HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);
 8004aba:	491c      	ldr	r1, [pc, #112]	; (8004b2c <xProcessCommandTask+0x314>)
								messageLength = sprintf(message, "xc,%05d,ok,\n", controllerSettings.clientID);
 8004abc:	b2c2      	uxtb	r2, r0
								HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);
 8004abe:	481e      	ldr	r0, [pc, #120]	; (8004b38 <xProcessCommandTask+0x320>)
								messageLength = sprintf(message, "xc,%05d,ok,\n", controllerSettings.clientID);
 8004ac0:	703a      	strb	r2, [r7, #0]
								HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);
 8004ac2:	f7fd fdab 	bl	800261c <HAL_UART_Transmit_DMA>
								vTaskDelay(200 / portTICK_RATE_MS);
 8004ac6:	20c8      	movs	r0, #200	; 0xc8
 8004ac8:	f7fe fed4 	bl	8003874 <vTaskDelay>
								CMD_RF_ON;
 8004acc:	4622      	mov	r2, r4
 8004ace:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004ad2:	4648      	mov	r0, r9
 8004ad4:	f7fc fd1a 	bl	800150c <HAL_GPIO_WritePin>
								vTaskDelay(50 / portTICK_RATE_MS);
 8004ad8:	2032      	movs	r0, #50	; 0x32
 8004ada:	f7fe fecb 	bl	8003874 <vTaskDelay>

								messageLength = sprintf(message, "AT+C%03d\r", channel);
 8004ade:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8004ae2:	4924      	ldr	r1, [pc, #144]	; (8004b74 <xProcessCommandTask+0x35c>)
 8004ae4:	4811      	ldr	r0, [pc, #68]	; (8004b2c <xProcessCommandTask+0x314>)
 8004ae6:	f000 fa4b 	bl	8004f80 <siprintf>
								HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);
 8004aea:	4910      	ldr	r1, [pc, #64]	; (8004b2c <xProcessCommandTask+0x314>)
								messageLength = sprintf(message, "AT+C%03d\r", channel);
 8004aec:	b2c2      	uxtb	r2, r0
								HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);
 8004aee:	4812      	ldr	r0, [pc, #72]	; (8004b38 <xProcessCommandTask+0x320>)
								messageLength = sprintf(message, "AT+C%03d\r", channel);
 8004af0:	703a      	strb	r2, [r7, #0]
								HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);
 8004af2:	f7fd fd93 	bl	800261c <HAL_UART_Transmit_DMA>

								vTaskDelay(50 / portTICK_RATE_MS);
 8004af6:	2032      	movs	r0, #50	; 0x32
 8004af8:	f7fe febc 	bl	8003874 <vTaskDelay>
								CMD_RF_OFF;
 8004afc:	4632      	mov	r2, r6
 8004afe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004b02:	4648      	mov	r0, r9
 8004b04:	f7fc fd02 	bl	800150c <HAL_GPIO_WritePin>

								indicationState = NORMAL_C;
 8004b08:	f888 4000 	strb.w	r4, [r8]
 8004b0c:	e69b      	b.n	8004846 <xProcessCommandTask+0x2e>
 8004b0e:	bf00      	nop
 8004b10:	20005470 	.word	0x20005470
 8004b14:	200051b0 	.word	0x200051b0
 8004b18:	2000000c 	.word	0x2000000c
 8004b1c:	08006340 	.word	0x08006340
 8004b20:	200052a8 	.word	0x200052a8
 8004b24:	20005214 	.word	0x20005214
 8004b28:	20005208 	.word	0x20005208
 8004b2c:	2000521c 	.word	0x2000521c
 8004b30:	0800634e 	.word	0x0800634e
 8004b34:	2000529c 	.word	0x2000529c
 8004b38:	20005424 	.word	0x20005424
 8004b3c:	200052a6 	.word	0x200052a6
 8004b40:	40010c00 	.word	0x40010c00
 8004b44:	40011400 	.word	0x40011400
 8004b48:	08006366 	.word	0x08006366
 8004b4c:	200052a2 	.word	0x200052a2
 8004b50:	0800636f 	.word	0x0800636f
 8004b54:	20005205 	.word	0x20005205
 8004b58:	200052ab 	.word	0x200052ab
 8004b5c:	2000520c 	.word	0x2000520c
 8004b60:	0800638a 	.word	0x0800638a
 8004b64:	08006392 	.word	0x08006392
 8004b68:	080063a0 	.word	0x080063a0
 8004b6c:	080063ad 	.word	0x080063ad
 8004b70:	080063c0 	.word	0x080063c0
 8004b74:	080062e8 	.word	0x080062e8
 8004b78:	200052a4 	.word	0x200052a4
 8004b7c:	40010800 	.word	0x40010800

08004b80 <xScanInputTask>:
#include "controllerUtils.h"

extern UART_HandleTypeDef huart1;
extern enum IndicationState indicationState;

void xScanInputTask(void* arguments){
 8004b80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t prevInputState = 1;
 8004b84:	2501      	movs	r5, #1
	uint8_t curInputState = 1;

	for(;;){
		curInputState = HAL_GPIO_ReadPin(HALL_SENS_PORT, HALL_SENS_PIN);
 8004b86:	4e1c      	ldr	r6, [pc, #112]	; (8004bf8 <xScanInputTask+0x78>)
			if (curInputState != prevInputState){
				prevInputState = curInputState;
				if (!prevInputState){
					//Change indication to searching
					//HAL_GPIO_WritePin(A_LED_PORT, A_LED_PIN, GPIO_PIN_SET);
					indicationState = SEARCH;
 8004b88:	4f1c      	ldr	r7, [pc, #112]	; (8004bfc <xScanInputTask+0x7c>)
					//Change channel
					//rf433_set_channel_1();
					CMD_RF_ON;
					vTaskDelay(50 / portTICK_RATE_MS);

					HAL_UART_Transmit(&huart1, (uint8_t*) "AT+C001\r", 8, 0x2000);
 8004b8a:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8004c04 <xScanInputTask+0x84>
		curInputState = HAL_GPIO_ReadPin(HALL_SENS_PORT, HALL_SENS_PIN);
 8004b8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004b92:	4819      	ldr	r0, [pc, #100]	; (8004bf8 <xScanInputTask+0x78>)
 8004b94:	f7fc fcb4 	bl	8001500 <HAL_GPIO_ReadPin>
		if (curInputState != prevInputState){
 8004b98:	4285      	cmp	r5, r0
		curInputState = HAL_GPIO_ReadPin(HALL_SENS_PORT, HALL_SENS_PIN);
 8004b9a:	4604      	mov	r4, r0
		if (curInputState != prevInputState){
 8004b9c:	d026      	beq.n	8004bec <xScanInputTask+0x6c>
			vTaskDelay(1 / portTICK_RATE_MS);
 8004b9e:	2001      	movs	r0, #1
 8004ba0:	f7fe fe68 	bl	8003874 <vTaskDelay>
			curInputState = HAL_GPIO_ReadPin(HALL_SENS_PORT, HALL_SENS_PIN);
 8004ba4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004ba8:	4630      	mov	r0, r6
 8004baa:	f7fc fca9 	bl	8001500 <HAL_GPIO_ReadPin>
			if (curInputState != prevInputState){
 8004bae:	4285      	cmp	r5, r0
			curInputState = HAL_GPIO_ReadPin(HALL_SENS_PORT, HALL_SENS_PIN);
 8004bb0:	4604      	mov	r4, r0
			if (curInputState != prevInputState){
 8004bb2:	d01b      	beq.n	8004bec <xScanInputTask+0x6c>
				if (!prevInputState){
 8004bb4:	b9d0      	cbnz	r0, 8004bec <xScanInputTask+0x6c>
					indicationState = SEARCH;
 8004bb6:	2302      	movs	r3, #2
					CMD_RF_ON;
 8004bb8:	4602      	mov	r2, r0
 8004bba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004bbe:	4630      	mov	r0, r6
					indicationState = SEARCH;
 8004bc0:	703b      	strb	r3, [r7, #0]
					CMD_RF_ON;
 8004bc2:	f7fc fca3 	bl	800150c <HAL_GPIO_WritePin>
					vTaskDelay(50 / portTICK_RATE_MS);
 8004bc6:	2032      	movs	r0, #50	; 0x32
 8004bc8:	f7fe fe54 	bl	8003874 <vTaskDelay>
					HAL_UART_Transmit(&huart1, (uint8_t*) "AT+C001\r", 8, 0x2000);
 8004bcc:	2208      	movs	r2, #8
 8004bce:	4641      	mov	r1, r8
 8004bd0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004bd4:	480a      	ldr	r0, [pc, #40]	; (8004c00 <xScanInputTask+0x80>)
 8004bd6:	f7fd fc9d 	bl	8002514 <HAL_UART_Transmit>

					vTaskDelay(50 / portTICK_RATE_MS);
 8004bda:	2032      	movs	r0, #50	; 0x32
 8004bdc:	f7fe fe4a 	bl	8003874 <vTaskDelay>
					CMD_RF_OFF;
 8004be0:	2201      	movs	r2, #1
 8004be2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004be6:	4630      	mov	r0, r6
 8004be8:	f7fc fc90 	bl	800150c <HAL_GPIO_WritePin>
				}
			}
		}

		vTaskDelay(10 / portTICK_RATE_MS);
 8004bec:	200a      	movs	r0, #10
 8004bee:	f7fe fe41 	bl	8003874 <vTaskDelay>
		curInputState = HAL_GPIO_ReadPin(HALL_SENS_PORT, HALL_SENS_PIN);
 8004bf2:	4625      	mov	r5, r4
 8004bf4:	e7cb      	b.n	8004b8e <xScanInputTask+0xe>
 8004bf6:	bf00      	nop
 8004bf8:	40010800 	.word	0x40010800
 8004bfc:	2000000c 	.word	0x2000000c
 8004c00:	20005424 	.word	0x20005424
 8004c04:	080063cd 	.word	0x080063cd

08004c08 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004c08:	4b11      	ldr	r3, [pc, #68]	; (8004c50 <HAL_MspInit+0x48>)
{
 8004c0a:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8004c0c:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004c0e:	210f      	movs	r1, #15
  __HAL_RCC_AFIO_CLK_ENABLE();
 8004c10:	f042 0201 	orr.w	r2, r2, #1
 8004c14:	619a      	str	r2, [r3, #24]
 8004c16:	699a      	ldr	r2, [r3, #24]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004c18:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_AFIO_CLK_ENABLE();
 8004c1c:	f002 0201 	and.w	r2, r2, #1
 8004c20:	9200      	str	r2, [sp, #0]
 8004c22:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004c24:	69da      	ldr	r2, [r3, #28]
 8004c26:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004c2a:	61da      	str	r2, [r3, #28]
 8004c2c:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004c2e:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 8004c30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c34:	9301      	str	r3, [sp, #4]
 8004c36:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004c38:	f7fc f83e 	bl	8000cb8 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004c3c:	4a05      	ldr	r2, [pc, #20]	; (8004c54 <HAL_MspInit+0x4c>)
 8004c3e:	6853      	ldr	r3, [r2, #4]
 8004c40:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004c44:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004c48:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004c4a:	b003      	add	sp, #12
 8004c4c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004c50:	40021000 	.word	0x40021000
 8004c54:	40010000 	.word	0x40010000

08004c58 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004c58:	b510      	push	{r4, lr}
 8004c5a:	4604      	mov	r4, r0
 8004c5c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c5e:	2210      	movs	r2, #16
 8004c60:	2100      	movs	r1, #0
 8004c62:	a802      	add	r0, sp, #8
 8004c64:	f000 f983 	bl	8004f6e <memset>
  if(hadc->Instance==ADC1)
 8004c68:	6822      	ldr	r2, [r4, #0]
 8004c6a:	4b14      	ldr	r3, [pc, #80]	; (8004cbc <HAL_ADC_MspInit+0x64>)
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d123      	bne.n	8004cb8 <HAL_ADC_MspInit+0x60>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004c70:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8004c74:	699a      	ldr	r2, [r3, #24]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c76:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004c78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c7c:	619a      	str	r2, [r3, #24]
 8004c7e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c80:	480f      	ldr	r0, [pc, #60]	; (8004cc0 <HAL_ADC_MspInit+0x68>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004c82:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8004c86:	9200      	str	r2, [sp, #0]
 8004c88:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c8a:	699a      	ldr	r2, [r3, #24]
 8004c8c:	f042 0204 	orr.w	r2, r2, #4
 8004c90:	619a      	str	r2, [r3, #24]
 8004c92:	699b      	ldr	r3, [r3, #24]
 8004c94:	f003 0304 	and.w	r3, r3, #4
 8004c98:	9301      	str	r3, [sp, #4]
 8004c9a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8004c9c:	230f      	movs	r3, #15
 8004c9e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ca4:	f7fc fb4c 	bl	8001340 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8004ca8:	2012      	movs	r0, #18
 8004caa:	2200      	movs	r2, #0
 8004cac:	2105      	movs	r1, #5
 8004cae:	f7fc f803 	bl	8000cb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8004cb2:	2012      	movs	r0, #18
 8004cb4:	f7fc f834 	bl	8000d20 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004cb8:	b006      	add	sp, #24
 8004cba:	bd10      	pop	{r4, pc}
 8004cbc:	40012400 	.word	0x40012400
 8004cc0:	40010800 	.word	0x40010800

08004cc4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004cc4:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM3)
 8004cc6:	4b0d      	ldr	r3, [pc, #52]	; (8004cfc <HAL_TIM_Base_MspInit+0x38>)
 8004cc8:	6802      	ldr	r2, [r0, #0]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d112      	bne.n	8004cf4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004cce:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 8004cd2:	69da      	ldr	r2, [r3, #28]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8004cd4:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004cd6:	f042 0202 	orr.w	r2, r2, #2
 8004cda:	61da      	str	r2, [r3, #28]
 8004cdc:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8004cde:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004ce0:	f003 0302 	and.w	r3, r3, #2
 8004ce4:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8004ce6:	2105      	movs	r1, #5
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004ce8:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8004cea:	f7fb ffe5 	bl	8000cb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004cee:	201d      	movs	r0, #29
 8004cf0:	f7fc f816 	bl	8000d20 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004cf4:	b003      	add	sp, #12
 8004cf6:	f85d fb04 	ldr.w	pc, [sp], #4
 8004cfa:	bf00      	nop
 8004cfc:	40000400 	.word	0x40000400

08004d00 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004d00:	b510      	push	{r4, lr}
 8004d02:	4604      	mov	r4, r0
 8004d04:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d06:	2210      	movs	r2, #16
 8004d08:	2100      	movs	r1, #0
 8004d0a:	a802      	add	r0, sp, #8
 8004d0c:	f000 f92f 	bl	8004f6e <memset>
  if(htim->Instance==TIM3)
 8004d10:	6822      	ldr	r2, [r4, #0]
 8004d12:	4b15      	ldr	r3, [pc, #84]	; (8004d68 <HAL_TIM_MspPostInit+0x68>)
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d124      	bne.n	8004d62 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d18:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 8004d1c:	699a      	ldr	r2, [r3, #24]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d1e:	2402      	movs	r4, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d20:	f042 0204 	orr.w	r2, r2, #4
 8004d24:	619a      	str	r2, [r3, #24]
 8004d26:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d28:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d2a:	f002 0204 	and.w	r2, r2, #4
 8004d2e:	9200      	str	r2, [sp, #0]
 8004d30:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d32:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d34:	480d      	ldr	r0, [pc, #52]	; (8004d6c <HAL_TIM_MspPostInit+0x6c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d36:	f042 0208 	orr.w	r2, r2, #8
 8004d3a:	619a      	str	r2, [r3, #24]
 8004d3c:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d3e:	9403      	str	r4, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d40:	f003 0308 	and.w	r3, r3, #8
 8004d44:	9301      	str	r3, [sp, #4]
 8004d46:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004d48:	23c0      	movs	r3, #192	; 0xc0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d4a:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004d4c:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d4e:	f7fc faf7 	bl	8001340 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004d52:	2301      	movs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d54:	a902      	add	r1, sp, #8
 8004d56:	4806      	ldr	r0, [pc, #24]	; (8004d70 <HAL_TIM_MspPostInit+0x70>)
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004d58:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d5a:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d5c:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d5e:	f7fc faef 	bl	8001340 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004d62:	b006      	add	sp, #24
 8004d64:	bd10      	pop	{r4, pc}
 8004d66:	bf00      	nop
 8004d68:	40000400 	.word	0x40000400
 8004d6c:	40010800 	.word	0x40010800
 8004d70:	40010c00 	.word	0x40010c00

08004d74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004d74:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d76:	2710      	movs	r7, #16
{
 8004d78:	4606      	mov	r6, r0
 8004d7a:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d7c:	463a      	mov	r2, r7
 8004d7e:	2100      	movs	r1, #0
 8004d80:	a802      	add	r0, sp, #8
 8004d82:	f000 f8f4 	bl	8004f6e <memset>
  if(huart->Instance==USART1)
 8004d86:	6832      	ldr	r2, [r6, #0]
 8004d88:	4b24      	ldr	r3, [pc, #144]	; (8004e1c <HAL_UART_MspInit+0xa8>)
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d143      	bne.n	8004e16 <HAL_UART_MspInit+0xa2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004d8e:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8004d92:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d94:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8004d96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d9a:	619a      	str	r2, [r3, #24]
 8004d9c:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d9e:	4820      	ldr	r0, [pc, #128]	; (8004e20 <HAL_UART_MspInit+0xac>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8004da0:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8004da4:	9200      	str	r2, [sp, #0]
 8004da6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004da8:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004daa:	2500      	movs	r5, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004dac:	f042 0204 	orr.w	r2, r2, #4
 8004db0:	619a      	str	r2, [r3, #24]
 8004db2:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8004db4:	4c1b      	ldr	r4, [pc, #108]	; (8004e24 <HAL_UART_MspInit+0xb0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004db6:	f003 0304 	and.w	r3, r3, #4
 8004dba:	9301      	str	r3, [sp, #4]
 8004dbc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004dbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004dc2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dc4:	2302      	movs	r3, #2
 8004dc6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004dc8:	2303      	movs	r3, #3
 8004dca:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004dcc:	f7fc fab8 	bl	8001340 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004dd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004dd4:	4812      	ldr	r0, [pc, #72]	; (8004e20 <HAL_UART_MspInit+0xac>)
 8004dd6:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004dd8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004dda:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ddc:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004dde:	f7fc faaf 	bl	8001340 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8004de2:	4b11      	ldr	r3, [pc, #68]	; (8004e28 <HAL_UART_MspInit+0xb4>)
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004de4:	4620      	mov	r0, r4
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004de6:	e884 0088 	stmia.w	r4, {r3, r7}
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004dea:	2380      	movs	r3, #128	; 0x80
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004dec:	60a5      	str	r5, [r4, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004dee:	60e3      	str	r3, [r4, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004df0:	6125      	str	r5, [r4, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004df2:	6165      	str	r5, [r4, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8004df4:	61a5      	str	r5, [r4, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004df6:	61e5      	str	r5, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004df8:	f7fb ffb4 	bl	8000d64 <HAL_DMA_Init>
 8004dfc:	b108      	cbz	r0, 8004e02 <HAL_UART_MspInit+0x8e>
    {
      Error_Handler();
 8004dfe:	f7ff fd09 	bl	8004814 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8004e02:	2025      	movs	r0, #37	; 0x25
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8004e04:	6334      	str	r4, [r6, #48]	; 0x30
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8004e06:	2200      	movs	r2, #0
 8004e08:	2105      	movs	r1, #5
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8004e0a:	6266      	str	r6, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8004e0c:	f7fb ff54 	bl	8000cb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004e10:	2025      	movs	r0, #37	; 0x25
 8004e12:	f7fb ff85 	bl	8000d20 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004e16:	b007      	add	sp, #28
 8004e18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e1a:	bf00      	nop
 8004e1c:	40013800 	.word	0x40013800
 8004e20:	40010800 	.word	0x40010800
 8004e24:	200053b0 	.word	0x200053b0
 8004e28:	40020044 	.word	0x40020044

08004e2c <NMI_Handler>:
 8004e2c:	4770      	bx	lr

08004e2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004e2e:	e7fe      	b.n	8004e2e <HardFault_Handler>

08004e30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004e30:	e7fe      	b.n	8004e30 <MemManage_Handler>

08004e32 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004e32:	e7fe      	b.n	8004e32 <BusFault_Handler>

08004e34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004e34:	e7fe      	b.n	8004e34 <UsageFault_Handler>

08004e36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004e36:	4770      	bx	lr

08004e38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004e38:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004e3a:	f7fb fbcb 	bl	80005d4 <HAL_IncTick>
  osSystickHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004e3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  osSystickHandler();
 8004e42:	f7fd bd56 	b.w	80028f2 <osSystickHandler>
	...

08004e48 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004e48:	4801      	ldr	r0, [pc, #4]	; (8004e50 <DMA1_Channel4_IRQHandler+0x8>)
 8004e4a:	f7fc b877 	b.w	8000f3c <HAL_DMA_IRQHandler>
 8004e4e:	bf00      	nop
 8004e50:	200053b0 	.word	0x200053b0

08004e54 <ADC1_2_IRQHandler>:
void ADC1_2_IRQHandler(void)
{
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004e54:	4801      	ldr	r0, [pc, #4]	; (8004e5c <ADC1_2_IRQHandler+0x8>)
 8004e56:	f7fb bbf3 	b.w	8000640 <HAL_ADC_IRQHandler>
 8004e5a:	bf00      	nop
 8004e5c:	200053f4 	.word	0x200053f4

08004e60 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004e60:	4801      	ldr	r0, [pc, #4]	; (8004e68 <TIM3_IRQHandler+0x8>)
 8004e62:	f7fd b86a 	b.w	8001f3a <HAL_TIM_IRQHandler>
 8004e66:	bf00      	nop
 8004e68:	2000536c 	.word	0x2000536c

08004e6c <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004e6c:	4801      	ldr	r0, [pc, #4]	; (8004e74 <USART1_IRQHandler+0x8>)
 8004e6e:	f7fd bc93 	b.w	8002798 <HAL_UART_IRQHandler>
 8004e72:	bf00      	nop
 8004e74:	20005424 	.word	0x20005424

08004e78 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8004e78:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004e7a:	4b0a      	ldr	r3, [pc, #40]	; (8004ea4 <_sbrk+0x2c>)
{
 8004e7c:	4602      	mov	r2, r0
	if (heap_end == 0)
 8004e7e:	6819      	ldr	r1, [r3, #0]
 8004e80:	b909      	cbnz	r1, 8004e86 <_sbrk+0xe>
		heap_end = &end;
 8004e82:	4909      	ldr	r1, [pc, #36]	; (8004ea8 <_sbrk+0x30>)
 8004e84:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8004e86:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8004e88:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8004e8a:	4402      	add	r2, r0
 8004e8c:	428a      	cmp	r2, r1
 8004e8e:	d906      	bls.n	8004e9e <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8004e90:	f000 f85c 	bl	8004f4c <__errno>
 8004e94:	230c      	movs	r3, #12
 8004e96:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8004e98:	f04f 30ff 	mov.w	r0, #4294967295
 8004e9c:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8004e9e:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8004ea0:	bd08      	pop	{r3, pc}
 8004ea2:	bf00      	nop
 8004ea4:	200052b0 	.word	0x200052b0
 8004ea8:	2000547c 	.word	0x2000547c

08004eac <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8004eac:	4b12      	ldr	r3, [pc, #72]	; (8004ef8 <SystemInit+0x4c>)
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	f042 0201 	orr.w	r2, r2, #1
 8004eb4:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
#else
  RCC->CFGR &= 0xF0FF0000U;
 8004eb6:	6859      	ldr	r1, [r3, #4]
 8004eb8:	4a10      	ldr	r2, [pc, #64]	; (8004efc <SystemInit+0x50>)
 8004eba:	400a      	ands	r2, r1
 8004ebc:	605a      	str	r2, [r3, #4]
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8004ec4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004ec8:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004ed0:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8004ed2:	685a      	ldr	r2, [r3, #4]
 8004ed4:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8004ed8:	605a      	str	r2, [r3, #4]

#if defined(STM32F105xC) || defined(STM32F107xC)
  /* Reset PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEBFFFFFFU;
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	f022 52a0 	bic.w	r2, r2, #335544320	; 0x14000000
 8004ee0:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x00FF0000U;
 8004ee2:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8004ee6:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;
 8004ee8:	2200      	movs	r2, #0
 8004eea:	62da      	str	r2, [r3, #44]	; 0x2c
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8004eec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004ef0:	4b03      	ldr	r3, [pc, #12]	; (8004f00 <SystemInit+0x54>)
 8004ef2:	609a      	str	r2, [r3, #8]
 8004ef4:	4770      	bx	lr
 8004ef6:	bf00      	nop
 8004ef8:	40021000 	.word	0x40021000
 8004efc:	f0ff0000 	.word	0xf0ff0000
 8004f00:	e000ed00 	.word	0xe000ed00

08004f04 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8004f04:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8004f06:	e003      	b.n	8004f10 <LoopCopyDataInit>

08004f08 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004f08:	4b0a      	ldr	r3, [pc, #40]	; (8004f34 <LoopFillZerobss+0x10>)
  ldr r3, [r3, r1]
 8004f0a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004f0c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8004f0e:	3104      	adds	r1, #4

08004f10 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004f10:	4809      	ldr	r0, [pc, #36]	; (8004f38 <LoopFillZerobss+0x14>)
  ldr r3, =_edata
 8004f12:	4b0a      	ldr	r3, [pc, #40]	; (8004f3c <LoopFillZerobss+0x18>)
  adds r2, r0, r1
 8004f14:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8004f16:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004f18:	d3f6      	bcc.n	8004f08 <CopyDataInit>
  ldr r2, =_sbss
 8004f1a:	4a09      	ldr	r2, [pc, #36]	; (8004f40 <LoopFillZerobss+0x1c>)
  b LoopFillZerobss
 8004f1c:	e002      	b.n	8004f24 <LoopFillZerobss>

08004f1e <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004f1e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004f20:	f842 3b04 	str.w	r3, [r2], #4

08004f24 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8004f24:	4b07      	ldr	r3, [pc, #28]	; (8004f44 <LoopFillZerobss+0x20>)
  cmp r2, r3
 8004f26:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004f28:	d3f9      	bcc.n	8004f1e <FillZerobss>
/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004f2a:	f7ff ffbf 	bl	8004eac <SystemInit>
/* Call the application's entry point.*/
  bl main
 8004f2e:	f7ff fafd 	bl	800452c <main>
  bx lr
 8004f32:	4770      	bx	lr
  ldr r3, =_sidata
 8004f34:	080065b8 	.word	0x080065b8
  ldr r0, =_sdata
 8004f38:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004f3c:	20000224 	.word	0x20000224
  ldr r2, =_sbss
 8004f40:	20000228 	.word	0x20000228
  ldr r3, = _ebss
 8004f44:	2000547c 	.word	0x2000547c

08004f48 <CAN1_RX0_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004f48:	e7fe      	b.n	8004f48 <CAN1_RX0_IRQHandler>
	...

08004f4c <__errno>:
 8004f4c:	4b01      	ldr	r3, [pc, #4]	; (8004f54 <__errno+0x8>)
 8004f4e:	6818      	ldr	r0, [r3, #0]
 8004f50:	4770      	bx	lr
 8004f52:	bf00      	nop
 8004f54:	20000054 	.word	0x20000054

08004f58 <memcpy>:
 8004f58:	b510      	push	{r4, lr}
 8004f5a:	1e43      	subs	r3, r0, #1
 8004f5c:	440a      	add	r2, r1
 8004f5e:	4291      	cmp	r1, r2
 8004f60:	d100      	bne.n	8004f64 <memcpy+0xc>
 8004f62:	bd10      	pop	{r4, pc}
 8004f64:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f68:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f6c:	e7f7      	b.n	8004f5e <memcpy+0x6>

08004f6e <memset>:
 8004f6e:	4603      	mov	r3, r0
 8004f70:	4402      	add	r2, r0
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d100      	bne.n	8004f78 <memset+0xa>
 8004f76:	4770      	bx	lr
 8004f78:	f803 1b01 	strb.w	r1, [r3], #1
 8004f7c:	e7f9      	b.n	8004f72 <memset+0x4>
	...

08004f80 <siprintf>:
 8004f80:	b40e      	push	{r1, r2, r3}
 8004f82:	f44f 7102 	mov.w	r1, #520	; 0x208
 8004f86:	b500      	push	{lr}
 8004f88:	b09c      	sub	sp, #112	; 0x70
 8004f8a:	f8ad 1014 	strh.w	r1, [sp, #20]
 8004f8e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004f92:	9104      	str	r1, [sp, #16]
 8004f94:	9107      	str	r1, [sp, #28]
 8004f96:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004f9a:	ab1d      	add	r3, sp, #116	; 0x74
 8004f9c:	9002      	str	r0, [sp, #8]
 8004f9e:	9006      	str	r0, [sp, #24]
 8004fa0:	4808      	ldr	r0, [pc, #32]	; (8004fc4 <siprintf+0x44>)
 8004fa2:	f853 2b04 	ldr.w	r2, [r3], #4
 8004fa6:	f8ad 1016 	strh.w	r1, [sp, #22]
 8004faa:	6800      	ldr	r0, [r0, #0]
 8004fac:	a902      	add	r1, sp, #8
 8004fae:	9301      	str	r3, [sp, #4]
 8004fb0:	f000 f892 	bl	80050d8 <_svfiprintf_r>
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	9b02      	ldr	r3, [sp, #8]
 8004fb8:	701a      	strb	r2, [r3, #0]
 8004fba:	b01c      	add	sp, #112	; 0x70
 8004fbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004fc0:	b003      	add	sp, #12
 8004fc2:	4770      	bx	lr
 8004fc4:	20000054 	.word	0x20000054

08004fc8 <siscanf>:
 8004fc8:	b40e      	push	{r1, r2, r3}
 8004fca:	f44f 7201 	mov.w	r2, #516	; 0x204
 8004fce:	b530      	push	{r4, r5, lr}
 8004fd0:	b09c      	sub	sp, #112	; 0x70
 8004fd2:	ac1f      	add	r4, sp, #124	; 0x7c
 8004fd4:	f854 5b04 	ldr.w	r5, [r4], #4
 8004fd8:	f8ad 2014 	strh.w	r2, [sp, #20]
 8004fdc:	9002      	str	r0, [sp, #8]
 8004fde:	9006      	str	r0, [sp, #24]
 8004fe0:	f7fb f926 	bl	8000230 <strlen>
 8004fe4:	4b0b      	ldr	r3, [pc, #44]	; (8005014 <siscanf+0x4c>)
 8004fe6:	9003      	str	r0, [sp, #12]
 8004fe8:	930b      	str	r3, [sp, #44]	; 0x2c
 8004fea:	2300      	movs	r3, #0
 8004fec:	930f      	str	r3, [sp, #60]	; 0x3c
 8004fee:	9314      	str	r3, [sp, #80]	; 0x50
 8004ff0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004ff4:	9007      	str	r0, [sp, #28]
 8004ff6:	4808      	ldr	r0, [pc, #32]	; (8005018 <siscanf+0x50>)
 8004ff8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004ffc:	462a      	mov	r2, r5
 8004ffe:	4623      	mov	r3, r4
 8005000:	a902      	add	r1, sp, #8
 8005002:	6800      	ldr	r0, [r0, #0]
 8005004:	9401      	str	r4, [sp, #4]
 8005006:	f000 f9b5 	bl	8005374 <__ssvfiscanf_r>
 800500a:	b01c      	add	sp, #112	; 0x70
 800500c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005010:	b003      	add	sp, #12
 8005012:	4770      	bx	lr
 8005014:	0800501d 	.word	0x0800501d
 8005018:	20000054 	.word	0x20000054

0800501c <__seofread>:
 800501c:	2000      	movs	r0, #0
 800501e:	4770      	bx	lr

08005020 <__ssputs_r>:
 8005020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005024:	688e      	ldr	r6, [r1, #8]
 8005026:	4682      	mov	sl, r0
 8005028:	429e      	cmp	r6, r3
 800502a:	460c      	mov	r4, r1
 800502c:	4691      	mov	r9, r2
 800502e:	4698      	mov	r8, r3
 8005030:	d835      	bhi.n	800509e <__ssputs_r+0x7e>
 8005032:	898a      	ldrh	r2, [r1, #12]
 8005034:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005038:	d031      	beq.n	800509e <__ssputs_r+0x7e>
 800503a:	2302      	movs	r3, #2
 800503c:	6825      	ldr	r5, [r4, #0]
 800503e:	6909      	ldr	r1, [r1, #16]
 8005040:	1a6f      	subs	r7, r5, r1
 8005042:	6965      	ldr	r5, [r4, #20]
 8005044:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005048:	fb95 f5f3 	sdiv	r5, r5, r3
 800504c:	f108 0301 	add.w	r3, r8, #1
 8005050:	443b      	add	r3, r7
 8005052:	429d      	cmp	r5, r3
 8005054:	bf38      	it	cc
 8005056:	461d      	movcc	r5, r3
 8005058:	0553      	lsls	r3, r2, #21
 800505a:	d531      	bpl.n	80050c0 <__ssputs_r+0xa0>
 800505c:	4629      	mov	r1, r5
 800505e:	f000 fff1 	bl	8006044 <_malloc_r>
 8005062:	4606      	mov	r6, r0
 8005064:	b950      	cbnz	r0, 800507c <__ssputs_r+0x5c>
 8005066:	230c      	movs	r3, #12
 8005068:	f8ca 3000 	str.w	r3, [sl]
 800506c:	89a3      	ldrh	r3, [r4, #12]
 800506e:	f04f 30ff 	mov.w	r0, #4294967295
 8005072:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005076:	81a3      	strh	r3, [r4, #12]
 8005078:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800507c:	463a      	mov	r2, r7
 800507e:	6921      	ldr	r1, [r4, #16]
 8005080:	f7ff ff6a 	bl	8004f58 <memcpy>
 8005084:	89a3      	ldrh	r3, [r4, #12]
 8005086:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800508a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800508e:	81a3      	strh	r3, [r4, #12]
 8005090:	6126      	str	r6, [r4, #16]
 8005092:	443e      	add	r6, r7
 8005094:	6026      	str	r6, [r4, #0]
 8005096:	4646      	mov	r6, r8
 8005098:	6165      	str	r5, [r4, #20]
 800509a:	1bed      	subs	r5, r5, r7
 800509c:	60a5      	str	r5, [r4, #8]
 800509e:	4546      	cmp	r6, r8
 80050a0:	bf28      	it	cs
 80050a2:	4646      	movcs	r6, r8
 80050a4:	4649      	mov	r1, r9
 80050a6:	4632      	mov	r2, r6
 80050a8:	6820      	ldr	r0, [r4, #0]
 80050aa:	f000 ff65 	bl	8005f78 <memmove>
 80050ae:	68a3      	ldr	r3, [r4, #8]
 80050b0:	2000      	movs	r0, #0
 80050b2:	1b9b      	subs	r3, r3, r6
 80050b4:	60a3      	str	r3, [r4, #8]
 80050b6:	6823      	ldr	r3, [r4, #0]
 80050b8:	441e      	add	r6, r3
 80050ba:	6026      	str	r6, [r4, #0]
 80050bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050c0:	462a      	mov	r2, r5
 80050c2:	f001 f81d 	bl	8006100 <_realloc_r>
 80050c6:	4606      	mov	r6, r0
 80050c8:	2800      	cmp	r0, #0
 80050ca:	d1e1      	bne.n	8005090 <__ssputs_r+0x70>
 80050cc:	6921      	ldr	r1, [r4, #16]
 80050ce:	4650      	mov	r0, sl
 80050d0:	f000 ff6c 	bl	8005fac <_free_r>
 80050d4:	e7c7      	b.n	8005066 <__ssputs_r+0x46>
	...

080050d8 <_svfiprintf_r>:
 80050d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050dc:	b09d      	sub	sp, #116	; 0x74
 80050de:	9303      	str	r3, [sp, #12]
 80050e0:	898b      	ldrh	r3, [r1, #12]
 80050e2:	4680      	mov	r8, r0
 80050e4:	061c      	lsls	r4, r3, #24
 80050e6:	460d      	mov	r5, r1
 80050e8:	4616      	mov	r6, r2
 80050ea:	d50f      	bpl.n	800510c <_svfiprintf_r+0x34>
 80050ec:	690b      	ldr	r3, [r1, #16]
 80050ee:	b96b      	cbnz	r3, 800510c <_svfiprintf_r+0x34>
 80050f0:	2140      	movs	r1, #64	; 0x40
 80050f2:	f000 ffa7 	bl	8006044 <_malloc_r>
 80050f6:	6028      	str	r0, [r5, #0]
 80050f8:	6128      	str	r0, [r5, #16]
 80050fa:	b928      	cbnz	r0, 8005108 <_svfiprintf_r+0x30>
 80050fc:	230c      	movs	r3, #12
 80050fe:	f8c8 3000 	str.w	r3, [r8]
 8005102:	f04f 30ff 	mov.w	r0, #4294967295
 8005106:	e0c4      	b.n	8005292 <_svfiprintf_r+0x1ba>
 8005108:	2340      	movs	r3, #64	; 0x40
 800510a:	616b      	str	r3, [r5, #20]
 800510c:	2300      	movs	r3, #0
 800510e:	9309      	str	r3, [sp, #36]	; 0x24
 8005110:	2320      	movs	r3, #32
 8005112:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005116:	2330      	movs	r3, #48	; 0x30
 8005118:	f04f 0b01 	mov.w	fp, #1
 800511c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005120:	4637      	mov	r7, r6
 8005122:	463c      	mov	r4, r7
 8005124:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005128:	2b00      	cmp	r3, #0
 800512a:	d13c      	bne.n	80051a6 <_svfiprintf_r+0xce>
 800512c:	ebb7 0a06 	subs.w	sl, r7, r6
 8005130:	d00b      	beq.n	800514a <_svfiprintf_r+0x72>
 8005132:	4653      	mov	r3, sl
 8005134:	4632      	mov	r2, r6
 8005136:	4629      	mov	r1, r5
 8005138:	4640      	mov	r0, r8
 800513a:	f7ff ff71 	bl	8005020 <__ssputs_r>
 800513e:	3001      	adds	r0, #1
 8005140:	f000 80a2 	beq.w	8005288 <_svfiprintf_r+0x1b0>
 8005144:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005146:	4453      	add	r3, sl
 8005148:	9309      	str	r3, [sp, #36]	; 0x24
 800514a:	783b      	ldrb	r3, [r7, #0]
 800514c:	2b00      	cmp	r3, #0
 800514e:	f000 809b 	beq.w	8005288 <_svfiprintf_r+0x1b0>
 8005152:	2300      	movs	r3, #0
 8005154:	f04f 32ff 	mov.w	r2, #4294967295
 8005158:	9304      	str	r3, [sp, #16]
 800515a:	9307      	str	r3, [sp, #28]
 800515c:	9205      	str	r2, [sp, #20]
 800515e:	9306      	str	r3, [sp, #24]
 8005160:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005164:	931a      	str	r3, [sp, #104]	; 0x68
 8005166:	2205      	movs	r2, #5
 8005168:	7821      	ldrb	r1, [r4, #0]
 800516a:	4850      	ldr	r0, [pc, #320]	; (80052ac <_svfiprintf_r+0x1d4>)
 800516c:	f000 fef6 	bl	8005f5c <memchr>
 8005170:	1c67      	adds	r7, r4, #1
 8005172:	9b04      	ldr	r3, [sp, #16]
 8005174:	b9d8      	cbnz	r0, 80051ae <_svfiprintf_r+0xd6>
 8005176:	06d9      	lsls	r1, r3, #27
 8005178:	bf44      	itt	mi
 800517a:	2220      	movmi	r2, #32
 800517c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005180:	071a      	lsls	r2, r3, #28
 8005182:	bf44      	itt	mi
 8005184:	222b      	movmi	r2, #43	; 0x2b
 8005186:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800518a:	7822      	ldrb	r2, [r4, #0]
 800518c:	2a2a      	cmp	r2, #42	; 0x2a
 800518e:	d016      	beq.n	80051be <_svfiprintf_r+0xe6>
 8005190:	2100      	movs	r1, #0
 8005192:	200a      	movs	r0, #10
 8005194:	9a07      	ldr	r2, [sp, #28]
 8005196:	4627      	mov	r7, r4
 8005198:	783b      	ldrb	r3, [r7, #0]
 800519a:	3401      	adds	r4, #1
 800519c:	3b30      	subs	r3, #48	; 0x30
 800519e:	2b09      	cmp	r3, #9
 80051a0:	d950      	bls.n	8005244 <_svfiprintf_r+0x16c>
 80051a2:	b1c9      	cbz	r1, 80051d8 <_svfiprintf_r+0x100>
 80051a4:	e011      	b.n	80051ca <_svfiprintf_r+0xf2>
 80051a6:	2b25      	cmp	r3, #37	; 0x25
 80051a8:	d0c0      	beq.n	800512c <_svfiprintf_r+0x54>
 80051aa:	4627      	mov	r7, r4
 80051ac:	e7b9      	b.n	8005122 <_svfiprintf_r+0x4a>
 80051ae:	4a3f      	ldr	r2, [pc, #252]	; (80052ac <_svfiprintf_r+0x1d4>)
 80051b0:	463c      	mov	r4, r7
 80051b2:	1a80      	subs	r0, r0, r2
 80051b4:	fa0b f000 	lsl.w	r0, fp, r0
 80051b8:	4318      	orrs	r0, r3
 80051ba:	9004      	str	r0, [sp, #16]
 80051bc:	e7d3      	b.n	8005166 <_svfiprintf_r+0x8e>
 80051be:	9a03      	ldr	r2, [sp, #12]
 80051c0:	1d11      	adds	r1, r2, #4
 80051c2:	6812      	ldr	r2, [r2, #0]
 80051c4:	9103      	str	r1, [sp, #12]
 80051c6:	2a00      	cmp	r2, #0
 80051c8:	db01      	blt.n	80051ce <_svfiprintf_r+0xf6>
 80051ca:	9207      	str	r2, [sp, #28]
 80051cc:	e004      	b.n	80051d8 <_svfiprintf_r+0x100>
 80051ce:	4252      	negs	r2, r2
 80051d0:	f043 0302 	orr.w	r3, r3, #2
 80051d4:	9207      	str	r2, [sp, #28]
 80051d6:	9304      	str	r3, [sp, #16]
 80051d8:	783b      	ldrb	r3, [r7, #0]
 80051da:	2b2e      	cmp	r3, #46	; 0x2e
 80051dc:	d10d      	bne.n	80051fa <_svfiprintf_r+0x122>
 80051de:	787b      	ldrb	r3, [r7, #1]
 80051e0:	1c79      	adds	r1, r7, #1
 80051e2:	2b2a      	cmp	r3, #42	; 0x2a
 80051e4:	d132      	bne.n	800524c <_svfiprintf_r+0x174>
 80051e6:	9b03      	ldr	r3, [sp, #12]
 80051e8:	3702      	adds	r7, #2
 80051ea:	1d1a      	adds	r2, r3, #4
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	9203      	str	r2, [sp, #12]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	bfb8      	it	lt
 80051f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80051f8:	9305      	str	r3, [sp, #20]
 80051fa:	4c2d      	ldr	r4, [pc, #180]	; (80052b0 <_svfiprintf_r+0x1d8>)
 80051fc:	2203      	movs	r2, #3
 80051fe:	7839      	ldrb	r1, [r7, #0]
 8005200:	4620      	mov	r0, r4
 8005202:	f000 feab 	bl	8005f5c <memchr>
 8005206:	b138      	cbz	r0, 8005218 <_svfiprintf_r+0x140>
 8005208:	2340      	movs	r3, #64	; 0x40
 800520a:	1b00      	subs	r0, r0, r4
 800520c:	fa03 f000 	lsl.w	r0, r3, r0
 8005210:	9b04      	ldr	r3, [sp, #16]
 8005212:	3701      	adds	r7, #1
 8005214:	4303      	orrs	r3, r0
 8005216:	9304      	str	r3, [sp, #16]
 8005218:	7839      	ldrb	r1, [r7, #0]
 800521a:	2206      	movs	r2, #6
 800521c:	4825      	ldr	r0, [pc, #148]	; (80052b4 <_svfiprintf_r+0x1dc>)
 800521e:	1c7e      	adds	r6, r7, #1
 8005220:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005224:	f000 fe9a 	bl	8005f5c <memchr>
 8005228:	2800      	cmp	r0, #0
 800522a:	d035      	beq.n	8005298 <_svfiprintf_r+0x1c0>
 800522c:	4b22      	ldr	r3, [pc, #136]	; (80052b8 <_svfiprintf_r+0x1e0>)
 800522e:	b9fb      	cbnz	r3, 8005270 <_svfiprintf_r+0x198>
 8005230:	9b03      	ldr	r3, [sp, #12]
 8005232:	3307      	adds	r3, #7
 8005234:	f023 0307 	bic.w	r3, r3, #7
 8005238:	3308      	adds	r3, #8
 800523a:	9303      	str	r3, [sp, #12]
 800523c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800523e:	444b      	add	r3, r9
 8005240:	9309      	str	r3, [sp, #36]	; 0x24
 8005242:	e76d      	b.n	8005120 <_svfiprintf_r+0x48>
 8005244:	fb00 3202 	mla	r2, r0, r2, r3
 8005248:	2101      	movs	r1, #1
 800524a:	e7a4      	b.n	8005196 <_svfiprintf_r+0xbe>
 800524c:	2300      	movs	r3, #0
 800524e:	240a      	movs	r4, #10
 8005250:	4618      	mov	r0, r3
 8005252:	9305      	str	r3, [sp, #20]
 8005254:	460f      	mov	r7, r1
 8005256:	783a      	ldrb	r2, [r7, #0]
 8005258:	3101      	adds	r1, #1
 800525a:	3a30      	subs	r2, #48	; 0x30
 800525c:	2a09      	cmp	r2, #9
 800525e:	d903      	bls.n	8005268 <_svfiprintf_r+0x190>
 8005260:	2b00      	cmp	r3, #0
 8005262:	d0ca      	beq.n	80051fa <_svfiprintf_r+0x122>
 8005264:	9005      	str	r0, [sp, #20]
 8005266:	e7c8      	b.n	80051fa <_svfiprintf_r+0x122>
 8005268:	fb04 2000 	mla	r0, r4, r0, r2
 800526c:	2301      	movs	r3, #1
 800526e:	e7f1      	b.n	8005254 <_svfiprintf_r+0x17c>
 8005270:	ab03      	add	r3, sp, #12
 8005272:	9300      	str	r3, [sp, #0]
 8005274:	462a      	mov	r2, r5
 8005276:	4b11      	ldr	r3, [pc, #68]	; (80052bc <_svfiprintf_r+0x1e4>)
 8005278:	a904      	add	r1, sp, #16
 800527a:	4640      	mov	r0, r8
 800527c:	f3af 8000 	nop.w
 8005280:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005284:	4681      	mov	r9, r0
 8005286:	d1d9      	bne.n	800523c <_svfiprintf_r+0x164>
 8005288:	89ab      	ldrh	r3, [r5, #12]
 800528a:	065b      	lsls	r3, r3, #25
 800528c:	f53f af39 	bmi.w	8005102 <_svfiprintf_r+0x2a>
 8005290:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005292:	b01d      	add	sp, #116	; 0x74
 8005294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005298:	ab03      	add	r3, sp, #12
 800529a:	9300      	str	r3, [sp, #0]
 800529c:	462a      	mov	r2, r5
 800529e:	4b07      	ldr	r3, [pc, #28]	; (80052bc <_svfiprintf_r+0x1e4>)
 80052a0:	a904      	add	r1, sp, #16
 80052a2:	4640      	mov	r0, r8
 80052a4:	f000 fa32 	bl	800570c <_printf_i>
 80052a8:	e7ea      	b.n	8005280 <_svfiprintf_r+0x1a8>
 80052aa:	bf00      	nop
 80052ac:	080063ee 	.word	0x080063ee
 80052b0:	080063f4 	.word	0x080063f4
 80052b4:	080063f8 	.word	0x080063f8
 80052b8:	00000000 	.word	0x00000000
 80052bc:	08005021 	.word	0x08005021

080052c0 <_sungetc_r>:
 80052c0:	b538      	push	{r3, r4, r5, lr}
 80052c2:	1c4b      	adds	r3, r1, #1
 80052c4:	4614      	mov	r4, r2
 80052c6:	d103      	bne.n	80052d0 <_sungetc_r+0x10>
 80052c8:	f04f 35ff 	mov.w	r5, #4294967295
 80052cc:	4628      	mov	r0, r5
 80052ce:	bd38      	pop	{r3, r4, r5, pc}
 80052d0:	8993      	ldrh	r3, [r2, #12]
 80052d2:	b2cd      	uxtb	r5, r1
 80052d4:	f023 0320 	bic.w	r3, r3, #32
 80052d8:	8193      	strh	r3, [r2, #12]
 80052da:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80052dc:	6852      	ldr	r2, [r2, #4]
 80052de:	b18b      	cbz	r3, 8005304 <_sungetc_r+0x44>
 80052e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80052e2:	429a      	cmp	r2, r3
 80052e4:	da08      	bge.n	80052f8 <_sungetc_r+0x38>
 80052e6:	6823      	ldr	r3, [r4, #0]
 80052e8:	1e5a      	subs	r2, r3, #1
 80052ea:	6022      	str	r2, [r4, #0]
 80052ec:	f803 5c01 	strb.w	r5, [r3, #-1]
 80052f0:	6863      	ldr	r3, [r4, #4]
 80052f2:	3301      	adds	r3, #1
 80052f4:	6063      	str	r3, [r4, #4]
 80052f6:	e7e9      	b.n	80052cc <_sungetc_r+0xc>
 80052f8:	4621      	mov	r1, r4
 80052fa:	f000 fdd3 	bl	8005ea4 <__submore>
 80052fe:	2800      	cmp	r0, #0
 8005300:	d0f1      	beq.n	80052e6 <_sungetc_r+0x26>
 8005302:	e7e1      	b.n	80052c8 <_sungetc_r+0x8>
 8005304:	6921      	ldr	r1, [r4, #16]
 8005306:	6823      	ldr	r3, [r4, #0]
 8005308:	b151      	cbz	r1, 8005320 <_sungetc_r+0x60>
 800530a:	4299      	cmp	r1, r3
 800530c:	d208      	bcs.n	8005320 <_sungetc_r+0x60>
 800530e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8005312:	428d      	cmp	r5, r1
 8005314:	d104      	bne.n	8005320 <_sungetc_r+0x60>
 8005316:	3b01      	subs	r3, #1
 8005318:	3201      	adds	r2, #1
 800531a:	6023      	str	r3, [r4, #0]
 800531c:	6062      	str	r2, [r4, #4]
 800531e:	e7d5      	b.n	80052cc <_sungetc_r+0xc>
 8005320:	63e3      	str	r3, [r4, #60]	; 0x3c
 8005322:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005326:	6363      	str	r3, [r4, #52]	; 0x34
 8005328:	2303      	movs	r3, #3
 800532a:	63a3      	str	r3, [r4, #56]	; 0x38
 800532c:	4623      	mov	r3, r4
 800532e:	6422      	str	r2, [r4, #64]	; 0x40
 8005330:	f803 5f46 	strb.w	r5, [r3, #70]!
 8005334:	6023      	str	r3, [r4, #0]
 8005336:	2301      	movs	r3, #1
 8005338:	e7dc      	b.n	80052f4 <_sungetc_r+0x34>

0800533a <__ssrefill_r>:
 800533a:	b510      	push	{r4, lr}
 800533c:	460c      	mov	r4, r1
 800533e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005340:	b169      	cbz	r1, 800535e <__ssrefill_r+0x24>
 8005342:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005346:	4299      	cmp	r1, r3
 8005348:	d001      	beq.n	800534e <__ssrefill_r+0x14>
 800534a:	f000 fe2f 	bl	8005fac <_free_r>
 800534e:	2000      	movs	r0, #0
 8005350:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005352:	6360      	str	r0, [r4, #52]	; 0x34
 8005354:	6063      	str	r3, [r4, #4]
 8005356:	b113      	cbz	r3, 800535e <__ssrefill_r+0x24>
 8005358:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800535a:	6023      	str	r3, [r4, #0]
 800535c:	bd10      	pop	{r4, pc}
 800535e:	6923      	ldr	r3, [r4, #16]
 8005360:	f04f 30ff 	mov.w	r0, #4294967295
 8005364:	6023      	str	r3, [r4, #0]
 8005366:	2300      	movs	r3, #0
 8005368:	6063      	str	r3, [r4, #4]
 800536a:	89a3      	ldrh	r3, [r4, #12]
 800536c:	f043 0320 	orr.w	r3, r3, #32
 8005370:	81a3      	strh	r3, [r4, #12]
 8005372:	bd10      	pop	{r4, pc}

08005374 <__ssvfiscanf_r>:
 8005374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005378:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
 800537c:	9301      	str	r3, [sp, #4]
 800537e:	2300      	movs	r3, #0
 8005380:	4606      	mov	r6, r0
 8005382:	460c      	mov	r4, r1
 8005384:	4692      	mov	sl, r2
 8005386:	270a      	movs	r7, #10
 8005388:	9346      	str	r3, [sp, #280]	; 0x118
 800538a:	9347      	str	r3, [sp, #284]	; 0x11c
 800538c:	4b9f      	ldr	r3, [pc, #636]	; (800560c <__ssvfiscanf_r+0x298>)
 800538e:	f10d 080c 	add.w	r8, sp, #12
 8005392:	93a2      	str	r3, [sp, #648]	; 0x288
 8005394:	4b9e      	ldr	r3, [pc, #632]	; (8005610 <__ssvfiscanf_r+0x29c>)
 8005396:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8005614 <__ssvfiscanf_r+0x2a0>
 800539a:	f8cd 8120 	str.w	r8, [sp, #288]	; 0x120
 800539e:	93a3      	str	r3, [sp, #652]	; 0x28c
 80053a0:	f89a 3000 	ldrb.w	r3, [sl]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	f000 812f 	beq.w	8005608 <__ssvfiscanf_r+0x294>
 80053aa:	f000 fdb7 	bl	8005f1c <__locale_ctype_ptr>
 80053ae:	f89a b000 	ldrb.w	fp, [sl]
 80053b2:	4458      	add	r0, fp
 80053b4:	7843      	ldrb	r3, [r0, #1]
 80053b6:	f013 0308 	ands.w	r3, r3, #8
 80053ba:	d143      	bne.n	8005444 <__ssvfiscanf_r+0xd0>
 80053bc:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 80053c0:	f10a 0501 	add.w	r5, sl, #1
 80053c4:	f040 8099 	bne.w	80054fa <__ssvfiscanf_r+0x186>
 80053c8:	9345      	str	r3, [sp, #276]	; 0x114
 80053ca:	9343      	str	r3, [sp, #268]	; 0x10c
 80053cc:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80053d0:	2b2a      	cmp	r3, #42	; 0x2a
 80053d2:	d103      	bne.n	80053dc <__ssvfiscanf_r+0x68>
 80053d4:	2310      	movs	r3, #16
 80053d6:	f10a 0502 	add.w	r5, sl, #2
 80053da:	9343      	str	r3, [sp, #268]	; 0x10c
 80053dc:	7829      	ldrb	r1, [r5, #0]
 80053de:	46aa      	mov	sl, r5
 80053e0:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80053e4:	2a09      	cmp	r2, #9
 80053e6:	f105 0501 	add.w	r5, r5, #1
 80053ea:	d941      	bls.n	8005470 <__ssvfiscanf_r+0xfc>
 80053ec:	2203      	movs	r2, #3
 80053ee:	4889      	ldr	r0, [pc, #548]	; (8005614 <__ssvfiscanf_r+0x2a0>)
 80053f0:	f000 fdb4 	bl	8005f5c <memchr>
 80053f4:	b138      	cbz	r0, 8005406 <__ssvfiscanf_r+0x92>
 80053f6:	eba0 0309 	sub.w	r3, r0, r9
 80053fa:	2001      	movs	r0, #1
 80053fc:	46aa      	mov	sl, r5
 80053fe:	4098      	lsls	r0, r3
 8005400:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8005402:	4318      	orrs	r0, r3
 8005404:	9043      	str	r0, [sp, #268]	; 0x10c
 8005406:	f89a 3000 	ldrb.w	r3, [sl]
 800540a:	f10a 0501 	add.w	r5, sl, #1
 800540e:	2b67      	cmp	r3, #103	; 0x67
 8005410:	d84a      	bhi.n	80054a8 <__ssvfiscanf_r+0x134>
 8005412:	2b65      	cmp	r3, #101	; 0x65
 8005414:	f080 80b7 	bcs.w	8005586 <__ssvfiscanf_r+0x212>
 8005418:	2b47      	cmp	r3, #71	; 0x47
 800541a:	d82f      	bhi.n	800547c <__ssvfiscanf_r+0x108>
 800541c:	2b45      	cmp	r3, #69	; 0x45
 800541e:	f080 80b2 	bcs.w	8005586 <__ssvfiscanf_r+0x212>
 8005422:	2b00      	cmp	r3, #0
 8005424:	f000 8082 	beq.w	800552c <__ssvfiscanf_r+0x1b8>
 8005428:	2b25      	cmp	r3, #37	; 0x25
 800542a:	d066      	beq.n	80054fa <__ssvfiscanf_r+0x186>
 800542c:	2303      	movs	r3, #3
 800542e:	9744      	str	r7, [sp, #272]	; 0x110
 8005430:	9349      	str	r3, [sp, #292]	; 0x124
 8005432:	e045      	b.n	80054c0 <__ssvfiscanf_r+0x14c>
 8005434:	9947      	ldr	r1, [sp, #284]	; 0x11c
 8005436:	3301      	adds	r3, #1
 8005438:	3101      	adds	r1, #1
 800543a:	9147      	str	r1, [sp, #284]	; 0x11c
 800543c:	6861      	ldr	r1, [r4, #4]
 800543e:	6023      	str	r3, [r4, #0]
 8005440:	3901      	subs	r1, #1
 8005442:	6061      	str	r1, [r4, #4]
 8005444:	6863      	ldr	r3, [r4, #4]
 8005446:	2b00      	cmp	r3, #0
 8005448:	dd0b      	ble.n	8005462 <__ssvfiscanf_r+0xee>
 800544a:	f000 fd67 	bl	8005f1c <__locale_ctype_ptr>
 800544e:	6823      	ldr	r3, [r4, #0]
 8005450:	7819      	ldrb	r1, [r3, #0]
 8005452:	4408      	add	r0, r1
 8005454:	7841      	ldrb	r1, [r0, #1]
 8005456:	070d      	lsls	r5, r1, #28
 8005458:	d4ec      	bmi.n	8005434 <__ssvfiscanf_r+0xc0>
 800545a:	f10a 0501 	add.w	r5, sl, #1
 800545e:	46aa      	mov	sl, r5
 8005460:	e79e      	b.n	80053a0 <__ssvfiscanf_r+0x2c>
 8005462:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8005464:	4621      	mov	r1, r4
 8005466:	4630      	mov	r0, r6
 8005468:	4798      	blx	r3
 800546a:	2800      	cmp	r0, #0
 800546c:	d0ed      	beq.n	800544a <__ssvfiscanf_r+0xd6>
 800546e:	e7f4      	b.n	800545a <__ssvfiscanf_r+0xe6>
 8005470:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8005472:	fb07 1303 	mla	r3, r7, r3, r1
 8005476:	3b30      	subs	r3, #48	; 0x30
 8005478:	9345      	str	r3, [sp, #276]	; 0x114
 800547a:	e7af      	b.n	80053dc <__ssvfiscanf_r+0x68>
 800547c:	2b5b      	cmp	r3, #91	; 0x5b
 800547e:	d061      	beq.n	8005544 <__ssvfiscanf_r+0x1d0>
 8005480:	d80c      	bhi.n	800549c <__ssvfiscanf_r+0x128>
 8005482:	2b58      	cmp	r3, #88	; 0x58
 8005484:	d1d2      	bne.n	800542c <__ssvfiscanf_r+0xb8>
 8005486:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8005488:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800548c:	9243      	str	r2, [sp, #268]	; 0x10c
 800548e:	2210      	movs	r2, #16
 8005490:	9244      	str	r2, [sp, #272]	; 0x110
 8005492:	2b6f      	cmp	r3, #111	; 0x6f
 8005494:	bfb4      	ite	lt
 8005496:	2303      	movlt	r3, #3
 8005498:	2304      	movge	r3, #4
 800549a:	e010      	b.n	80054be <__ssvfiscanf_r+0x14a>
 800549c:	2b63      	cmp	r3, #99	; 0x63
 800549e:	d05c      	beq.n	800555a <__ssvfiscanf_r+0x1e6>
 80054a0:	2b64      	cmp	r3, #100	; 0x64
 80054a2:	d1c3      	bne.n	800542c <__ssvfiscanf_r+0xb8>
 80054a4:	9744      	str	r7, [sp, #272]	; 0x110
 80054a6:	e7f4      	b.n	8005492 <__ssvfiscanf_r+0x11e>
 80054a8:	2b70      	cmp	r3, #112	; 0x70
 80054aa:	d042      	beq.n	8005532 <__ssvfiscanf_r+0x1be>
 80054ac:	d81d      	bhi.n	80054ea <__ssvfiscanf_r+0x176>
 80054ae:	2b6e      	cmp	r3, #110	; 0x6e
 80054b0:	d059      	beq.n	8005566 <__ssvfiscanf_r+0x1f2>
 80054b2:	d843      	bhi.n	800553c <__ssvfiscanf_r+0x1c8>
 80054b4:	2b69      	cmp	r3, #105	; 0x69
 80054b6:	d1b9      	bne.n	800542c <__ssvfiscanf_r+0xb8>
 80054b8:	2300      	movs	r3, #0
 80054ba:	9344      	str	r3, [sp, #272]	; 0x110
 80054bc:	2303      	movs	r3, #3
 80054be:	9349      	str	r3, [sp, #292]	; 0x124
 80054c0:	6863      	ldr	r3, [r4, #4]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	dd61      	ble.n	800558a <__ssvfiscanf_r+0x216>
 80054c6:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80054c8:	0659      	lsls	r1, r3, #25
 80054ca:	d56f      	bpl.n	80055ac <__ssvfiscanf_r+0x238>
 80054cc:	9b49      	ldr	r3, [sp, #292]	; 0x124
 80054ce:	2b02      	cmp	r3, #2
 80054d0:	dc7c      	bgt.n	80055cc <__ssvfiscanf_r+0x258>
 80054d2:	ab01      	add	r3, sp, #4
 80054d4:	4622      	mov	r2, r4
 80054d6:	a943      	add	r1, sp, #268	; 0x10c
 80054d8:	4630      	mov	r0, r6
 80054da:	f000 fa37 	bl	800594c <_scanf_chars>
 80054de:	2801      	cmp	r0, #1
 80054e0:	f000 8092 	beq.w	8005608 <__ssvfiscanf_r+0x294>
 80054e4:	2802      	cmp	r0, #2
 80054e6:	d1ba      	bne.n	800545e <__ssvfiscanf_r+0xea>
 80054e8:	e01d      	b.n	8005526 <__ssvfiscanf_r+0x1b2>
 80054ea:	2b75      	cmp	r3, #117	; 0x75
 80054ec:	d0da      	beq.n	80054a4 <__ssvfiscanf_r+0x130>
 80054ee:	2b78      	cmp	r3, #120	; 0x78
 80054f0:	d0c9      	beq.n	8005486 <__ssvfiscanf_r+0x112>
 80054f2:	2b73      	cmp	r3, #115	; 0x73
 80054f4:	d19a      	bne.n	800542c <__ssvfiscanf_r+0xb8>
 80054f6:	2302      	movs	r3, #2
 80054f8:	e7e1      	b.n	80054be <__ssvfiscanf_r+0x14a>
 80054fa:	6863      	ldr	r3, [r4, #4]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	dd0c      	ble.n	800551a <__ssvfiscanf_r+0x1a6>
 8005500:	6823      	ldr	r3, [r4, #0]
 8005502:	781a      	ldrb	r2, [r3, #0]
 8005504:	4593      	cmp	fp, r2
 8005506:	d17f      	bne.n	8005608 <__ssvfiscanf_r+0x294>
 8005508:	3301      	adds	r3, #1
 800550a:	6862      	ldr	r2, [r4, #4]
 800550c:	6023      	str	r3, [r4, #0]
 800550e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8005510:	3a01      	subs	r2, #1
 8005512:	3301      	adds	r3, #1
 8005514:	6062      	str	r2, [r4, #4]
 8005516:	9347      	str	r3, [sp, #284]	; 0x11c
 8005518:	e7a1      	b.n	800545e <__ssvfiscanf_r+0xea>
 800551a:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800551c:	4621      	mov	r1, r4
 800551e:	4630      	mov	r0, r6
 8005520:	4798      	blx	r3
 8005522:	2800      	cmp	r0, #0
 8005524:	d0ec      	beq.n	8005500 <__ssvfiscanf_r+0x18c>
 8005526:	9846      	ldr	r0, [sp, #280]	; 0x118
 8005528:	2800      	cmp	r0, #0
 800552a:	d163      	bne.n	80055f4 <__ssvfiscanf_r+0x280>
 800552c:	f04f 30ff 	mov.w	r0, #4294967295
 8005530:	e066      	b.n	8005600 <__ssvfiscanf_r+0x28c>
 8005532:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8005534:	f042 0220 	orr.w	r2, r2, #32
 8005538:	9243      	str	r2, [sp, #268]	; 0x10c
 800553a:	e7a4      	b.n	8005486 <__ssvfiscanf_r+0x112>
 800553c:	2308      	movs	r3, #8
 800553e:	9344      	str	r3, [sp, #272]	; 0x110
 8005540:	2304      	movs	r3, #4
 8005542:	e7bc      	b.n	80054be <__ssvfiscanf_r+0x14a>
 8005544:	4629      	mov	r1, r5
 8005546:	4640      	mov	r0, r8
 8005548:	f000 fb5a 	bl	8005c00 <__sccl>
 800554c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800554e:	4605      	mov	r5, r0
 8005550:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005554:	9343      	str	r3, [sp, #268]	; 0x10c
 8005556:	2301      	movs	r3, #1
 8005558:	e7b1      	b.n	80054be <__ssvfiscanf_r+0x14a>
 800555a:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800555c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005560:	9343      	str	r3, [sp, #268]	; 0x10c
 8005562:	2300      	movs	r3, #0
 8005564:	e7ab      	b.n	80054be <__ssvfiscanf_r+0x14a>
 8005566:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8005568:	06d0      	lsls	r0, r2, #27
 800556a:	f53f af78 	bmi.w	800545e <__ssvfiscanf_r+0xea>
 800556e:	f012 0f01 	tst.w	r2, #1
 8005572:	9a01      	ldr	r2, [sp, #4]
 8005574:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8005576:	f102 0104 	add.w	r1, r2, #4
 800557a:	9101      	str	r1, [sp, #4]
 800557c:	6812      	ldr	r2, [r2, #0]
 800557e:	bf14      	ite	ne
 8005580:	8013      	strhne	r3, [r2, #0]
 8005582:	6013      	streq	r3, [r2, #0]
 8005584:	e76b      	b.n	800545e <__ssvfiscanf_r+0xea>
 8005586:	2305      	movs	r3, #5
 8005588:	e799      	b.n	80054be <__ssvfiscanf_r+0x14a>
 800558a:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800558c:	4621      	mov	r1, r4
 800558e:	4630      	mov	r0, r6
 8005590:	4798      	blx	r3
 8005592:	2800      	cmp	r0, #0
 8005594:	d097      	beq.n	80054c6 <__ssvfiscanf_r+0x152>
 8005596:	e7c6      	b.n	8005526 <__ssvfiscanf_r+0x1b2>
 8005598:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 800559a:	3201      	adds	r2, #1
 800559c:	9247      	str	r2, [sp, #284]	; 0x11c
 800559e:	6862      	ldr	r2, [r4, #4]
 80055a0:	3a01      	subs	r2, #1
 80055a2:	2a00      	cmp	r2, #0
 80055a4:	6062      	str	r2, [r4, #4]
 80055a6:	dd0a      	ble.n	80055be <__ssvfiscanf_r+0x24a>
 80055a8:	3301      	adds	r3, #1
 80055aa:	6023      	str	r3, [r4, #0]
 80055ac:	f000 fcb6 	bl	8005f1c <__locale_ctype_ptr>
 80055b0:	6823      	ldr	r3, [r4, #0]
 80055b2:	781a      	ldrb	r2, [r3, #0]
 80055b4:	4410      	add	r0, r2
 80055b6:	7842      	ldrb	r2, [r0, #1]
 80055b8:	0712      	lsls	r2, r2, #28
 80055ba:	d4ed      	bmi.n	8005598 <__ssvfiscanf_r+0x224>
 80055bc:	e786      	b.n	80054cc <__ssvfiscanf_r+0x158>
 80055be:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80055c0:	4621      	mov	r1, r4
 80055c2:	4630      	mov	r0, r6
 80055c4:	4798      	blx	r3
 80055c6:	2800      	cmp	r0, #0
 80055c8:	d0f0      	beq.n	80055ac <__ssvfiscanf_r+0x238>
 80055ca:	e7ac      	b.n	8005526 <__ssvfiscanf_r+0x1b2>
 80055cc:	2b04      	cmp	r3, #4
 80055ce:	dc06      	bgt.n	80055de <__ssvfiscanf_r+0x26a>
 80055d0:	ab01      	add	r3, sp, #4
 80055d2:	4622      	mov	r2, r4
 80055d4:	a943      	add	r1, sp, #268	; 0x10c
 80055d6:	4630      	mov	r0, r6
 80055d8:	f000 fa1c 	bl	8005a14 <_scanf_i>
 80055dc:	e77f      	b.n	80054de <__ssvfiscanf_r+0x16a>
 80055de:	4b0e      	ldr	r3, [pc, #56]	; (8005618 <__ssvfiscanf_r+0x2a4>)
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	f43f af3c 	beq.w	800545e <__ssvfiscanf_r+0xea>
 80055e6:	ab01      	add	r3, sp, #4
 80055e8:	4622      	mov	r2, r4
 80055ea:	a943      	add	r1, sp, #268	; 0x10c
 80055ec:	4630      	mov	r0, r6
 80055ee:	f3af 8000 	nop.w
 80055f2:	e774      	b.n	80054de <__ssvfiscanf_r+0x16a>
 80055f4:	89a3      	ldrh	r3, [r4, #12]
 80055f6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80055fa:	bf18      	it	ne
 80055fc:	f04f 30ff 	movne.w	r0, #4294967295
 8005600:	f50d 7d25 	add.w	sp, sp, #660	; 0x294
 8005604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005608:	9846      	ldr	r0, [sp, #280]	; 0x118
 800560a:	e7f9      	b.n	8005600 <__ssvfiscanf_r+0x28c>
 800560c:	080052c1 	.word	0x080052c1
 8005610:	0800533b 	.word	0x0800533b
 8005614:	080063f4 	.word	0x080063f4
 8005618:	00000000 	.word	0x00000000

0800561c <_printf_common>:
 800561c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005620:	4691      	mov	r9, r2
 8005622:	461f      	mov	r7, r3
 8005624:	688a      	ldr	r2, [r1, #8]
 8005626:	690b      	ldr	r3, [r1, #16]
 8005628:	4606      	mov	r6, r0
 800562a:	4293      	cmp	r3, r2
 800562c:	bfb8      	it	lt
 800562e:	4613      	movlt	r3, r2
 8005630:	f8c9 3000 	str.w	r3, [r9]
 8005634:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005638:	460c      	mov	r4, r1
 800563a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800563e:	b112      	cbz	r2, 8005646 <_printf_common+0x2a>
 8005640:	3301      	adds	r3, #1
 8005642:	f8c9 3000 	str.w	r3, [r9]
 8005646:	6823      	ldr	r3, [r4, #0]
 8005648:	0699      	lsls	r1, r3, #26
 800564a:	bf42      	ittt	mi
 800564c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005650:	3302      	addmi	r3, #2
 8005652:	f8c9 3000 	strmi.w	r3, [r9]
 8005656:	6825      	ldr	r5, [r4, #0]
 8005658:	f015 0506 	ands.w	r5, r5, #6
 800565c:	d107      	bne.n	800566e <_printf_common+0x52>
 800565e:	f104 0a19 	add.w	sl, r4, #25
 8005662:	68e3      	ldr	r3, [r4, #12]
 8005664:	f8d9 2000 	ldr.w	r2, [r9]
 8005668:	1a9b      	subs	r3, r3, r2
 800566a:	429d      	cmp	r5, r3
 800566c:	db2a      	blt.n	80056c4 <_printf_common+0xa8>
 800566e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005672:	6822      	ldr	r2, [r4, #0]
 8005674:	3300      	adds	r3, #0
 8005676:	bf18      	it	ne
 8005678:	2301      	movne	r3, #1
 800567a:	0692      	lsls	r2, r2, #26
 800567c:	d42f      	bmi.n	80056de <_printf_common+0xc2>
 800567e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005682:	4639      	mov	r1, r7
 8005684:	4630      	mov	r0, r6
 8005686:	47c0      	blx	r8
 8005688:	3001      	adds	r0, #1
 800568a:	d022      	beq.n	80056d2 <_printf_common+0xb6>
 800568c:	6823      	ldr	r3, [r4, #0]
 800568e:	68e5      	ldr	r5, [r4, #12]
 8005690:	f003 0306 	and.w	r3, r3, #6
 8005694:	2b04      	cmp	r3, #4
 8005696:	bf18      	it	ne
 8005698:	2500      	movne	r5, #0
 800569a:	f8d9 2000 	ldr.w	r2, [r9]
 800569e:	f04f 0900 	mov.w	r9, #0
 80056a2:	bf08      	it	eq
 80056a4:	1aad      	subeq	r5, r5, r2
 80056a6:	68a3      	ldr	r3, [r4, #8]
 80056a8:	6922      	ldr	r2, [r4, #16]
 80056aa:	bf08      	it	eq
 80056ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80056b0:	4293      	cmp	r3, r2
 80056b2:	bfc4      	itt	gt
 80056b4:	1a9b      	subgt	r3, r3, r2
 80056b6:	18ed      	addgt	r5, r5, r3
 80056b8:	341a      	adds	r4, #26
 80056ba:	454d      	cmp	r5, r9
 80056bc:	d11b      	bne.n	80056f6 <_printf_common+0xda>
 80056be:	2000      	movs	r0, #0
 80056c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056c4:	2301      	movs	r3, #1
 80056c6:	4652      	mov	r2, sl
 80056c8:	4639      	mov	r1, r7
 80056ca:	4630      	mov	r0, r6
 80056cc:	47c0      	blx	r8
 80056ce:	3001      	adds	r0, #1
 80056d0:	d103      	bne.n	80056da <_printf_common+0xbe>
 80056d2:	f04f 30ff 	mov.w	r0, #4294967295
 80056d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056da:	3501      	adds	r5, #1
 80056dc:	e7c1      	b.n	8005662 <_printf_common+0x46>
 80056de:	2030      	movs	r0, #48	; 0x30
 80056e0:	18e1      	adds	r1, r4, r3
 80056e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80056e6:	1c5a      	adds	r2, r3, #1
 80056e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80056ec:	4422      	add	r2, r4
 80056ee:	3302      	adds	r3, #2
 80056f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80056f4:	e7c3      	b.n	800567e <_printf_common+0x62>
 80056f6:	2301      	movs	r3, #1
 80056f8:	4622      	mov	r2, r4
 80056fa:	4639      	mov	r1, r7
 80056fc:	4630      	mov	r0, r6
 80056fe:	47c0      	blx	r8
 8005700:	3001      	adds	r0, #1
 8005702:	d0e6      	beq.n	80056d2 <_printf_common+0xb6>
 8005704:	f109 0901 	add.w	r9, r9, #1
 8005708:	e7d7      	b.n	80056ba <_printf_common+0x9e>
	...

0800570c <_printf_i>:
 800570c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005710:	4617      	mov	r7, r2
 8005712:	7e0a      	ldrb	r2, [r1, #24]
 8005714:	b085      	sub	sp, #20
 8005716:	2a6e      	cmp	r2, #110	; 0x6e
 8005718:	4698      	mov	r8, r3
 800571a:	4606      	mov	r6, r0
 800571c:	460c      	mov	r4, r1
 800571e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005720:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8005724:	f000 80bc 	beq.w	80058a0 <_printf_i+0x194>
 8005728:	d81a      	bhi.n	8005760 <_printf_i+0x54>
 800572a:	2a63      	cmp	r2, #99	; 0x63
 800572c:	d02e      	beq.n	800578c <_printf_i+0x80>
 800572e:	d80a      	bhi.n	8005746 <_printf_i+0x3a>
 8005730:	2a00      	cmp	r2, #0
 8005732:	f000 80c8 	beq.w	80058c6 <_printf_i+0x1ba>
 8005736:	2a58      	cmp	r2, #88	; 0x58
 8005738:	f000 808a 	beq.w	8005850 <_printf_i+0x144>
 800573c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005740:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8005744:	e02a      	b.n	800579c <_printf_i+0x90>
 8005746:	2a64      	cmp	r2, #100	; 0x64
 8005748:	d001      	beq.n	800574e <_printf_i+0x42>
 800574a:	2a69      	cmp	r2, #105	; 0x69
 800574c:	d1f6      	bne.n	800573c <_printf_i+0x30>
 800574e:	6821      	ldr	r1, [r4, #0]
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005756:	d023      	beq.n	80057a0 <_printf_i+0x94>
 8005758:	1d11      	adds	r1, r2, #4
 800575a:	6019      	str	r1, [r3, #0]
 800575c:	6813      	ldr	r3, [r2, #0]
 800575e:	e027      	b.n	80057b0 <_printf_i+0xa4>
 8005760:	2a73      	cmp	r2, #115	; 0x73
 8005762:	f000 80b4 	beq.w	80058ce <_printf_i+0x1c2>
 8005766:	d808      	bhi.n	800577a <_printf_i+0x6e>
 8005768:	2a6f      	cmp	r2, #111	; 0x6f
 800576a:	d02a      	beq.n	80057c2 <_printf_i+0xb6>
 800576c:	2a70      	cmp	r2, #112	; 0x70
 800576e:	d1e5      	bne.n	800573c <_printf_i+0x30>
 8005770:	680a      	ldr	r2, [r1, #0]
 8005772:	f042 0220 	orr.w	r2, r2, #32
 8005776:	600a      	str	r2, [r1, #0]
 8005778:	e003      	b.n	8005782 <_printf_i+0x76>
 800577a:	2a75      	cmp	r2, #117	; 0x75
 800577c:	d021      	beq.n	80057c2 <_printf_i+0xb6>
 800577e:	2a78      	cmp	r2, #120	; 0x78
 8005780:	d1dc      	bne.n	800573c <_printf_i+0x30>
 8005782:	2278      	movs	r2, #120	; 0x78
 8005784:	496f      	ldr	r1, [pc, #444]	; (8005944 <_printf_i+0x238>)
 8005786:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800578a:	e064      	b.n	8005856 <_printf_i+0x14a>
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8005792:	1d11      	adds	r1, r2, #4
 8005794:	6019      	str	r1, [r3, #0]
 8005796:	6813      	ldr	r3, [r2, #0]
 8005798:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800579c:	2301      	movs	r3, #1
 800579e:	e0a3      	b.n	80058e8 <_printf_i+0x1dc>
 80057a0:	f011 0f40 	tst.w	r1, #64	; 0x40
 80057a4:	f102 0104 	add.w	r1, r2, #4
 80057a8:	6019      	str	r1, [r3, #0]
 80057aa:	d0d7      	beq.n	800575c <_printf_i+0x50>
 80057ac:	f9b2 3000 	ldrsh.w	r3, [r2]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	da03      	bge.n	80057bc <_printf_i+0xb0>
 80057b4:	222d      	movs	r2, #45	; 0x2d
 80057b6:	425b      	negs	r3, r3
 80057b8:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80057bc:	4962      	ldr	r1, [pc, #392]	; (8005948 <_printf_i+0x23c>)
 80057be:	220a      	movs	r2, #10
 80057c0:	e017      	b.n	80057f2 <_printf_i+0xe6>
 80057c2:	6820      	ldr	r0, [r4, #0]
 80057c4:	6819      	ldr	r1, [r3, #0]
 80057c6:	f010 0f80 	tst.w	r0, #128	; 0x80
 80057ca:	d003      	beq.n	80057d4 <_printf_i+0xc8>
 80057cc:	1d08      	adds	r0, r1, #4
 80057ce:	6018      	str	r0, [r3, #0]
 80057d0:	680b      	ldr	r3, [r1, #0]
 80057d2:	e006      	b.n	80057e2 <_printf_i+0xd6>
 80057d4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80057d8:	f101 0004 	add.w	r0, r1, #4
 80057dc:	6018      	str	r0, [r3, #0]
 80057de:	d0f7      	beq.n	80057d0 <_printf_i+0xc4>
 80057e0:	880b      	ldrh	r3, [r1, #0]
 80057e2:	2a6f      	cmp	r2, #111	; 0x6f
 80057e4:	bf14      	ite	ne
 80057e6:	220a      	movne	r2, #10
 80057e8:	2208      	moveq	r2, #8
 80057ea:	4957      	ldr	r1, [pc, #348]	; (8005948 <_printf_i+0x23c>)
 80057ec:	2000      	movs	r0, #0
 80057ee:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80057f2:	6865      	ldr	r5, [r4, #4]
 80057f4:	2d00      	cmp	r5, #0
 80057f6:	60a5      	str	r5, [r4, #8]
 80057f8:	f2c0 809c 	blt.w	8005934 <_printf_i+0x228>
 80057fc:	6820      	ldr	r0, [r4, #0]
 80057fe:	f020 0004 	bic.w	r0, r0, #4
 8005802:	6020      	str	r0, [r4, #0]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d13f      	bne.n	8005888 <_printf_i+0x17c>
 8005808:	2d00      	cmp	r5, #0
 800580a:	f040 8095 	bne.w	8005938 <_printf_i+0x22c>
 800580e:	4675      	mov	r5, lr
 8005810:	2a08      	cmp	r2, #8
 8005812:	d10b      	bne.n	800582c <_printf_i+0x120>
 8005814:	6823      	ldr	r3, [r4, #0]
 8005816:	07da      	lsls	r2, r3, #31
 8005818:	d508      	bpl.n	800582c <_printf_i+0x120>
 800581a:	6923      	ldr	r3, [r4, #16]
 800581c:	6862      	ldr	r2, [r4, #4]
 800581e:	429a      	cmp	r2, r3
 8005820:	bfde      	ittt	le
 8005822:	2330      	movle	r3, #48	; 0x30
 8005824:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005828:	f105 35ff 	addle.w	r5, r5, #4294967295
 800582c:	ebae 0305 	sub.w	r3, lr, r5
 8005830:	6123      	str	r3, [r4, #16]
 8005832:	f8cd 8000 	str.w	r8, [sp]
 8005836:	463b      	mov	r3, r7
 8005838:	aa03      	add	r2, sp, #12
 800583a:	4621      	mov	r1, r4
 800583c:	4630      	mov	r0, r6
 800583e:	f7ff feed 	bl	800561c <_printf_common>
 8005842:	3001      	adds	r0, #1
 8005844:	d155      	bne.n	80058f2 <_printf_i+0x1e6>
 8005846:	f04f 30ff 	mov.w	r0, #4294967295
 800584a:	b005      	add	sp, #20
 800584c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005850:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8005854:	493c      	ldr	r1, [pc, #240]	; (8005948 <_printf_i+0x23c>)
 8005856:	6822      	ldr	r2, [r4, #0]
 8005858:	6818      	ldr	r0, [r3, #0]
 800585a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800585e:	f100 0504 	add.w	r5, r0, #4
 8005862:	601d      	str	r5, [r3, #0]
 8005864:	d001      	beq.n	800586a <_printf_i+0x15e>
 8005866:	6803      	ldr	r3, [r0, #0]
 8005868:	e002      	b.n	8005870 <_printf_i+0x164>
 800586a:	0655      	lsls	r5, r2, #25
 800586c:	d5fb      	bpl.n	8005866 <_printf_i+0x15a>
 800586e:	8803      	ldrh	r3, [r0, #0]
 8005870:	07d0      	lsls	r0, r2, #31
 8005872:	bf44      	itt	mi
 8005874:	f042 0220 	orrmi.w	r2, r2, #32
 8005878:	6022      	strmi	r2, [r4, #0]
 800587a:	b91b      	cbnz	r3, 8005884 <_printf_i+0x178>
 800587c:	6822      	ldr	r2, [r4, #0]
 800587e:	f022 0220 	bic.w	r2, r2, #32
 8005882:	6022      	str	r2, [r4, #0]
 8005884:	2210      	movs	r2, #16
 8005886:	e7b1      	b.n	80057ec <_printf_i+0xe0>
 8005888:	4675      	mov	r5, lr
 800588a:	fbb3 f0f2 	udiv	r0, r3, r2
 800588e:	fb02 3310 	mls	r3, r2, r0, r3
 8005892:	5ccb      	ldrb	r3, [r1, r3]
 8005894:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005898:	4603      	mov	r3, r0
 800589a:	2800      	cmp	r0, #0
 800589c:	d1f5      	bne.n	800588a <_printf_i+0x17e>
 800589e:	e7b7      	b.n	8005810 <_printf_i+0x104>
 80058a0:	6808      	ldr	r0, [r1, #0]
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	f010 0f80 	tst.w	r0, #128	; 0x80
 80058a8:	6949      	ldr	r1, [r1, #20]
 80058aa:	d004      	beq.n	80058b6 <_printf_i+0x1aa>
 80058ac:	1d10      	adds	r0, r2, #4
 80058ae:	6018      	str	r0, [r3, #0]
 80058b0:	6813      	ldr	r3, [r2, #0]
 80058b2:	6019      	str	r1, [r3, #0]
 80058b4:	e007      	b.n	80058c6 <_printf_i+0x1ba>
 80058b6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80058ba:	f102 0004 	add.w	r0, r2, #4
 80058be:	6018      	str	r0, [r3, #0]
 80058c0:	6813      	ldr	r3, [r2, #0]
 80058c2:	d0f6      	beq.n	80058b2 <_printf_i+0x1a6>
 80058c4:	8019      	strh	r1, [r3, #0]
 80058c6:	2300      	movs	r3, #0
 80058c8:	4675      	mov	r5, lr
 80058ca:	6123      	str	r3, [r4, #16]
 80058cc:	e7b1      	b.n	8005832 <_printf_i+0x126>
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	1d11      	adds	r1, r2, #4
 80058d2:	6019      	str	r1, [r3, #0]
 80058d4:	6815      	ldr	r5, [r2, #0]
 80058d6:	2100      	movs	r1, #0
 80058d8:	6862      	ldr	r2, [r4, #4]
 80058da:	4628      	mov	r0, r5
 80058dc:	f000 fb3e 	bl	8005f5c <memchr>
 80058e0:	b108      	cbz	r0, 80058e6 <_printf_i+0x1da>
 80058e2:	1b40      	subs	r0, r0, r5
 80058e4:	6060      	str	r0, [r4, #4]
 80058e6:	6863      	ldr	r3, [r4, #4]
 80058e8:	6123      	str	r3, [r4, #16]
 80058ea:	2300      	movs	r3, #0
 80058ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058f0:	e79f      	b.n	8005832 <_printf_i+0x126>
 80058f2:	6923      	ldr	r3, [r4, #16]
 80058f4:	462a      	mov	r2, r5
 80058f6:	4639      	mov	r1, r7
 80058f8:	4630      	mov	r0, r6
 80058fa:	47c0      	blx	r8
 80058fc:	3001      	adds	r0, #1
 80058fe:	d0a2      	beq.n	8005846 <_printf_i+0x13a>
 8005900:	6823      	ldr	r3, [r4, #0]
 8005902:	079b      	lsls	r3, r3, #30
 8005904:	d507      	bpl.n	8005916 <_printf_i+0x20a>
 8005906:	2500      	movs	r5, #0
 8005908:	f104 0919 	add.w	r9, r4, #25
 800590c:	68e3      	ldr	r3, [r4, #12]
 800590e:	9a03      	ldr	r2, [sp, #12]
 8005910:	1a9b      	subs	r3, r3, r2
 8005912:	429d      	cmp	r5, r3
 8005914:	db05      	blt.n	8005922 <_printf_i+0x216>
 8005916:	68e0      	ldr	r0, [r4, #12]
 8005918:	9b03      	ldr	r3, [sp, #12]
 800591a:	4298      	cmp	r0, r3
 800591c:	bfb8      	it	lt
 800591e:	4618      	movlt	r0, r3
 8005920:	e793      	b.n	800584a <_printf_i+0x13e>
 8005922:	2301      	movs	r3, #1
 8005924:	464a      	mov	r2, r9
 8005926:	4639      	mov	r1, r7
 8005928:	4630      	mov	r0, r6
 800592a:	47c0      	blx	r8
 800592c:	3001      	adds	r0, #1
 800592e:	d08a      	beq.n	8005846 <_printf_i+0x13a>
 8005930:	3501      	adds	r5, #1
 8005932:	e7eb      	b.n	800590c <_printf_i+0x200>
 8005934:	2b00      	cmp	r3, #0
 8005936:	d1a7      	bne.n	8005888 <_printf_i+0x17c>
 8005938:	780b      	ldrb	r3, [r1, #0]
 800593a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800593e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005942:	e765      	b.n	8005810 <_printf_i+0x104>
 8005944:	08006410 	.word	0x08006410
 8005948:	080063ff 	.word	0x080063ff

0800594c <_scanf_chars>:
 800594c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005950:	4615      	mov	r5, r2
 8005952:	688a      	ldr	r2, [r1, #8]
 8005954:	4680      	mov	r8, r0
 8005956:	460c      	mov	r4, r1
 8005958:	b932      	cbnz	r2, 8005968 <_scanf_chars+0x1c>
 800595a:	698a      	ldr	r2, [r1, #24]
 800595c:	2a00      	cmp	r2, #0
 800595e:	bf0c      	ite	eq
 8005960:	2201      	moveq	r2, #1
 8005962:	f04f 32ff 	movne.w	r2, #4294967295
 8005966:	608a      	str	r2, [r1, #8]
 8005968:	2600      	movs	r6, #0
 800596a:	6822      	ldr	r2, [r4, #0]
 800596c:	06d1      	lsls	r1, r2, #27
 800596e:	bf5f      	itttt	pl
 8005970:	681a      	ldrpl	r2, [r3, #0]
 8005972:	1d11      	addpl	r1, r2, #4
 8005974:	6019      	strpl	r1, [r3, #0]
 8005976:	6817      	ldrpl	r7, [r2, #0]
 8005978:	69a3      	ldr	r3, [r4, #24]
 800597a:	b1db      	cbz	r3, 80059b4 <_scanf_chars+0x68>
 800597c:	2b01      	cmp	r3, #1
 800597e:	d107      	bne.n	8005990 <_scanf_chars+0x44>
 8005980:	682b      	ldr	r3, [r5, #0]
 8005982:	6962      	ldr	r2, [r4, #20]
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	5cd3      	ldrb	r3, [r2, r3]
 8005988:	b9a3      	cbnz	r3, 80059b4 <_scanf_chars+0x68>
 800598a:	2e00      	cmp	r6, #0
 800598c:	d131      	bne.n	80059f2 <_scanf_chars+0xa6>
 800598e:	e006      	b.n	800599e <_scanf_chars+0x52>
 8005990:	2b02      	cmp	r3, #2
 8005992:	d007      	beq.n	80059a4 <_scanf_chars+0x58>
 8005994:	2e00      	cmp	r6, #0
 8005996:	d12c      	bne.n	80059f2 <_scanf_chars+0xa6>
 8005998:	69a3      	ldr	r3, [r4, #24]
 800599a:	2b01      	cmp	r3, #1
 800599c:	d129      	bne.n	80059f2 <_scanf_chars+0xa6>
 800599e:	2001      	movs	r0, #1
 80059a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059a4:	f000 faba 	bl	8005f1c <__locale_ctype_ptr>
 80059a8:	682b      	ldr	r3, [r5, #0]
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	4418      	add	r0, r3
 80059ae:	7843      	ldrb	r3, [r0, #1]
 80059b0:	071b      	lsls	r3, r3, #28
 80059b2:	d4ef      	bmi.n	8005994 <_scanf_chars+0x48>
 80059b4:	6823      	ldr	r3, [r4, #0]
 80059b6:	3601      	adds	r6, #1
 80059b8:	06da      	lsls	r2, r3, #27
 80059ba:	bf5e      	ittt	pl
 80059bc:	682b      	ldrpl	r3, [r5, #0]
 80059be:	781b      	ldrbpl	r3, [r3, #0]
 80059c0:	703b      	strbpl	r3, [r7, #0]
 80059c2:	682a      	ldr	r2, [r5, #0]
 80059c4:	686b      	ldr	r3, [r5, #4]
 80059c6:	f102 0201 	add.w	r2, r2, #1
 80059ca:	602a      	str	r2, [r5, #0]
 80059cc:	68a2      	ldr	r2, [r4, #8]
 80059ce:	f103 33ff 	add.w	r3, r3, #4294967295
 80059d2:	f102 32ff 	add.w	r2, r2, #4294967295
 80059d6:	606b      	str	r3, [r5, #4]
 80059d8:	bf58      	it	pl
 80059da:	3701      	addpl	r7, #1
 80059dc:	60a2      	str	r2, [r4, #8]
 80059de:	b142      	cbz	r2, 80059f2 <_scanf_chars+0xa6>
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	dcc9      	bgt.n	8005978 <_scanf_chars+0x2c>
 80059e4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80059e8:	4629      	mov	r1, r5
 80059ea:	4640      	mov	r0, r8
 80059ec:	4798      	blx	r3
 80059ee:	2800      	cmp	r0, #0
 80059f0:	d0c2      	beq.n	8005978 <_scanf_chars+0x2c>
 80059f2:	6823      	ldr	r3, [r4, #0]
 80059f4:	f013 0310 	ands.w	r3, r3, #16
 80059f8:	d105      	bne.n	8005a06 <_scanf_chars+0xba>
 80059fa:	68e2      	ldr	r2, [r4, #12]
 80059fc:	3201      	adds	r2, #1
 80059fe:	60e2      	str	r2, [r4, #12]
 8005a00:	69a2      	ldr	r2, [r4, #24]
 8005a02:	b102      	cbz	r2, 8005a06 <_scanf_chars+0xba>
 8005a04:	703b      	strb	r3, [r7, #0]
 8005a06:	6923      	ldr	r3, [r4, #16]
 8005a08:	2000      	movs	r0, #0
 8005a0a:	441e      	add	r6, r3
 8005a0c:	6126      	str	r6, [r4, #16]
 8005a0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08005a14 <_scanf_i>:
 8005a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a18:	460c      	mov	r4, r1
 8005a1a:	469a      	mov	sl, r3
 8005a1c:	4b74      	ldr	r3, [pc, #464]	; (8005bf0 <_scanf_i+0x1dc>)
 8005a1e:	b087      	sub	sp, #28
 8005a20:	4683      	mov	fp, r0
 8005a22:	4616      	mov	r6, r2
 8005a24:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005a28:	ab03      	add	r3, sp, #12
 8005a2a:	68a7      	ldr	r7, [r4, #8]
 8005a2c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005a30:	4b70      	ldr	r3, [pc, #448]	; (8005bf4 <_scanf_i+0x1e0>)
 8005a32:	69a1      	ldr	r1, [r4, #24]
 8005a34:	4a70      	ldr	r2, [pc, #448]	; (8005bf8 <_scanf_i+0x1e4>)
 8005a36:	f104 091c 	add.w	r9, r4, #28
 8005a3a:	2903      	cmp	r1, #3
 8005a3c:	bf18      	it	ne
 8005a3e:	461a      	movne	r2, r3
 8005a40:	1e7b      	subs	r3, r7, #1
 8005a42:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8005a46:	bf84      	itt	hi
 8005a48:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005a4c:	60a3      	strhi	r3, [r4, #8]
 8005a4e:	6823      	ldr	r3, [r4, #0]
 8005a50:	bf88      	it	hi
 8005a52:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005a56:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8005a5a:	6023      	str	r3, [r4, #0]
 8005a5c:	bf98      	it	ls
 8005a5e:	2700      	movls	r7, #0
 8005a60:	464b      	mov	r3, r9
 8005a62:	f04f 0800 	mov.w	r8, #0
 8005a66:	9200      	str	r2, [sp, #0]
 8005a68:	bf88      	it	hi
 8005a6a:	197f      	addhi	r7, r7, r5
 8005a6c:	6831      	ldr	r1, [r6, #0]
 8005a6e:	9301      	str	r3, [sp, #4]
 8005a70:	ab03      	add	r3, sp, #12
 8005a72:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8005a76:	2202      	movs	r2, #2
 8005a78:	7809      	ldrb	r1, [r1, #0]
 8005a7a:	f000 fa6f 	bl	8005f5c <memchr>
 8005a7e:	9b01      	ldr	r3, [sp, #4]
 8005a80:	b328      	cbz	r0, 8005ace <_scanf_i+0xba>
 8005a82:	f1b8 0f01 	cmp.w	r8, #1
 8005a86:	d156      	bne.n	8005b36 <_scanf_i+0x122>
 8005a88:	6862      	ldr	r2, [r4, #4]
 8005a8a:	b92a      	cbnz	r2, 8005a98 <_scanf_i+0x84>
 8005a8c:	2208      	movs	r2, #8
 8005a8e:	6062      	str	r2, [r4, #4]
 8005a90:	6822      	ldr	r2, [r4, #0]
 8005a92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a96:	6022      	str	r2, [r4, #0]
 8005a98:	6822      	ldr	r2, [r4, #0]
 8005a9a:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8005a9e:	6022      	str	r2, [r4, #0]
 8005aa0:	68a2      	ldr	r2, [r4, #8]
 8005aa2:	1e51      	subs	r1, r2, #1
 8005aa4:	60a1      	str	r1, [r4, #8]
 8005aa6:	b192      	cbz	r2, 8005ace <_scanf_i+0xba>
 8005aa8:	6832      	ldr	r2, [r6, #0]
 8005aaa:	1c5d      	adds	r5, r3, #1
 8005aac:	1c51      	adds	r1, r2, #1
 8005aae:	6031      	str	r1, [r6, #0]
 8005ab0:	7812      	ldrb	r2, [r2, #0]
 8005ab2:	701a      	strb	r2, [r3, #0]
 8005ab4:	6873      	ldr	r3, [r6, #4]
 8005ab6:	3b01      	subs	r3, #1
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	6073      	str	r3, [r6, #4]
 8005abc:	dc06      	bgt.n	8005acc <_scanf_i+0xb8>
 8005abe:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005ac2:	4631      	mov	r1, r6
 8005ac4:	4658      	mov	r0, fp
 8005ac6:	4798      	blx	r3
 8005ac8:	2800      	cmp	r0, #0
 8005aca:	d177      	bne.n	8005bbc <_scanf_i+0x1a8>
 8005acc:	462b      	mov	r3, r5
 8005ace:	f108 0801 	add.w	r8, r8, #1
 8005ad2:	f1b8 0f03 	cmp.w	r8, #3
 8005ad6:	d1c9      	bne.n	8005a6c <_scanf_i+0x58>
 8005ad8:	6862      	ldr	r2, [r4, #4]
 8005ada:	b90a      	cbnz	r2, 8005ae0 <_scanf_i+0xcc>
 8005adc:	220a      	movs	r2, #10
 8005ade:	6062      	str	r2, [r4, #4]
 8005ae0:	6862      	ldr	r2, [r4, #4]
 8005ae2:	4946      	ldr	r1, [pc, #280]	; (8005bfc <_scanf_i+0x1e8>)
 8005ae4:	6960      	ldr	r0, [r4, #20]
 8005ae6:	1a89      	subs	r1, r1, r2
 8005ae8:	9301      	str	r3, [sp, #4]
 8005aea:	f000 f889 	bl	8005c00 <__sccl>
 8005aee:	9b01      	ldr	r3, [sp, #4]
 8005af0:	f04f 0800 	mov.w	r8, #0
 8005af4:	461d      	mov	r5, r3
 8005af6:	68a3      	ldr	r3, [r4, #8]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d039      	beq.n	8005b70 <_scanf_i+0x15c>
 8005afc:	6831      	ldr	r1, [r6, #0]
 8005afe:	6960      	ldr	r0, [r4, #20]
 8005b00:	780a      	ldrb	r2, [r1, #0]
 8005b02:	5c80      	ldrb	r0, [r0, r2]
 8005b04:	2800      	cmp	r0, #0
 8005b06:	d033      	beq.n	8005b70 <_scanf_i+0x15c>
 8005b08:	2a30      	cmp	r2, #48	; 0x30
 8005b0a:	6822      	ldr	r2, [r4, #0]
 8005b0c:	d121      	bne.n	8005b52 <_scanf_i+0x13e>
 8005b0e:	0510      	lsls	r0, r2, #20
 8005b10:	d51f      	bpl.n	8005b52 <_scanf_i+0x13e>
 8005b12:	f108 0801 	add.w	r8, r8, #1
 8005b16:	b117      	cbz	r7, 8005b1e <_scanf_i+0x10a>
 8005b18:	3301      	adds	r3, #1
 8005b1a:	3f01      	subs	r7, #1
 8005b1c:	60a3      	str	r3, [r4, #8]
 8005b1e:	6873      	ldr	r3, [r6, #4]
 8005b20:	3b01      	subs	r3, #1
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	6073      	str	r3, [r6, #4]
 8005b26:	dd1c      	ble.n	8005b62 <_scanf_i+0x14e>
 8005b28:	6833      	ldr	r3, [r6, #0]
 8005b2a:	3301      	adds	r3, #1
 8005b2c:	6033      	str	r3, [r6, #0]
 8005b2e:	68a3      	ldr	r3, [r4, #8]
 8005b30:	3b01      	subs	r3, #1
 8005b32:	60a3      	str	r3, [r4, #8]
 8005b34:	e7df      	b.n	8005af6 <_scanf_i+0xe2>
 8005b36:	f1b8 0f02 	cmp.w	r8, #2
 8005b3a:	d1b1      	bne.n	8005aa0 <_scanf_i+0x8c>
 8005b3c:	6822      	ldr	r2, [r4, #0]
 8005b3e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8005b42:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8005b46:	d1c2      	bne.n	8005ace <_scanf_i+0xba>
 8005b48:	2110      	movs	r1, #16
 8005b4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b4e:	6061      	str	r1, [r4, #4]
 8005b50:	e7a5      	b.n	8005a9e <_scanf_i+0x8a>
 8005b52:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8005b56:	6022      	str	r2, [r4, #0]
 8005b58:	780b      	ldrb	r3, [r1, #0]
 8005b5a:	3501      	adds	r5, #1
 8005b5c:	f805 3c01 	strb.w	r3, [r5, #-1]
 8005b60:	e7dd      	b.n	8005b1e <_scanf_i+0x10a>
 8005b62:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005b66:	4631      	mov	r1, r6
 8005b68:	4658      	mov	r0, fp
 8005b6a:	4798      	blx	r3
 8005b6c:	2800      	cmp	r0, #0
 8005b6e:	d0de      	beq.n	8005b2e <_scanf_i+0x11a>
 8005b70:	6823      	ldr	r3, [r4, #0]
 8005b72:	05d9      	lsls	r1, r3, #23
 8005b74:	d50c      	bpl.n	8005b90 <_scanf_i+0x17c>
 8005b76:	454d      	cmp	r5, r9
 8005b78:	d908      	bls.n	8005b8c <_scanf_i+0x178>
 8005b7a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8005b7e:	1e6f      	subs	r7, r5, #1
 8005b80:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005b84:	4632      	mov	r2, r6
 8005b86:	4658      	mov	r0, fp
 8005b88:	4798      	blx	r3
 8005b8a:	463d      	mov	r5, r7
 8005b8c:	454d      	cmp	r5, r9
 8005b8e:	d02c      	beq.n	8005bea <_scanf_i+0x1d6>
 8005b90:	6822      	ldr	r2, [r4, #0]
 8005b92:	f012 0210 	ands.w	r2, r2, #16
 8005b96:	d11e      	bne.n	8005bd6 <_scanf_i+0x1c2>
 8005b98:	702a      	strb	r2, [r5, #0]
 8005b9a:	6863      	ldr	r3, [r4, #4]
 8005b9c:	4649      	mov	r1, r9
 8005b9e:	4658      	mov	r0, fp
 8005ba0:	9e00      	ldr	r6, [sp, #0]
 8005ba2:	47b0      	blx	r6
 8005ba4:	6822      	ldr	r2, [r4, #0]
 8005ba6:	f8da 3000 	ldr.w	r3, [sl]
 8005baa:	f012 0f20 	tst.w	r2, #32
 8005bae:	d008      	beq.n	8005bc2 <_scanf_i+0x1ae>
 8005bb0:	1d1a      	adds	r2, r3, #4
 8005bb2:	f8ca 2000 	str.w	r2, [sl]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	6018      	str	r0, [r3, #0]
 8005bba:	e009      	b.n	8005bd0 <_scanf_i+0x1bc>
 8005bbc:	f04f 0800 	mov.w	r8, #0
 8005bc0:	e7d6      	b.n	8005b70 <_scanf_i+0x15c>
 8005bc2:	07d2      	lsls	r2, r2, #31
 8005bc4:	d5f4      	bpl.n	8005bb0 <_scanf_i+0x19c>
 8005bc6:	1d1a      	adds	r2, r3, #4
 8005bc8:	f8ca 2000 	str.w	r2, [sl]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	8018      	strh	r0, [r3, #0]
 8005bd0:	68e3      	ldr	r3, [r4, #12]
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	60e3      	str	r3, [r4, #12]
 8005bd6:	2000      	movs	r0, #0
 8005bd8:	eba5 0509 	sub.w	r5, r5, r9
 8005bdc:	44a8      	add	r8, r5
 8005bde:	6925      	ldr	r5, [r4, #16]
 8005be0:	4445      	add	r5, r8
 8005be2:	6125      	str	r5, [r4, #16]
 8005be4:	b007      	add	sp, #28
 8005be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bea:	2001      	movs	r0, #1
 8005bec:	e7fa      	b.n	8005be4 <_scanf_i+0x1d0>
 8005bee:	bf00      	nop
 8005bf0:	080061fc 	.word	0x080061fc
 8005bf4:	08005e81 	.word	0x08005e81
 8005bf8:	08005d61 	.word	0x08005d61
 8005bfc:	08006431 	.word	0x08006431

08005c00 <__sccl>:
 8005c00:	b570      	push	{r4, r5, r6, lr}
 8005c02:	780b      	ldrb	r3, [r1, #0]
 8005c04:	1e44      	subs	r4, r0, #1
 8005c06:	2b5e      	cmp	r3, #94	; 0x5e
 8005c08:	bf13      	iteet	ne
 8005c0a:	1c4a      	addne	r2, r1, #1
 8005c0c:	1c8a      	addeq	r2, r1, #2
 8005c0e:	784b      	ldrbeq	r3, [r1, #1]
 8005c10:	2100      	movne	r1, #0
 8005c12:	bf08      	it	eq
 8005c14:	2101      	moveq	r1, #1
 8005c16:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8005c1a:	f804 1f01 	strb.w	r1, [r4, #1]!
 8005c1e:	42a5      	cmp	r5, r4
 8005c20:	d1fb      	bne.n	8005c1a <__sccl+0x1a>
 8005c22:	b913      	cbnz	r3, 8005c2a <__sccl+0x2a>
 8005c24:	3a01      	subs	r2, #1
 8005c26:	4610      	mov	r0, r2
 8005c28:	bd70      	pop	{r4, r5, r6, pc}
 8005c2a:	f081 0401 	eor.w	r4, r1, #1
 8005c2e:	4611      	mov	r1, r2
 8005c30:	54c4      	strb	r4, [r0, r3]
 8005c32:	780d      	ldrb	r5, [r1, #0]
 8005c34:	1c4a      	adds	r2, r1, #1
 8005c36:	2d2d      	cmp	r5, #45	; 0x2d
 8005c38:	d006      	beq.n	8005c48 <__sccl+0x48>
 8005c3a:	2d5d      	cmp	r5, #93	; 0x5d
 8005c3c:	d0f3      	beq.n	8005c26 <__sccl+0x26>
 8005c3e:	b90d      	cbnz	r5, 8005c44 <__sccl+0x44>
 8005c40:	460a      	mov	r2, r1
 8005c42:	e7f0      	b.n	8005c26 <__sccl+0x26>
 8005c44:	462b      	mov	r3, r5
 8005c46:	e7f2      	b.n	8005c2e <__sccl+0x2e>
 8005c48:	784e      	ldrb	r6, [r1, #1]
 8005c4a:	2e5d      	cmp	r6, #93	; 0x5d
 8005c4c:	d0fa      	beq.n	8005c44 <__sccl+0x44>
 8005c4e:	42b3      	cmp	r3, r6
 8005c50:	dcf8      	bgt.n	8005c44 <__sccl+0x44>
 8005c52:	3102      	adds	r1, #2
 8005c54:	3301      	adds	r3, #1
 8005c56:	429e      	cmp	r6, r3
 8005c58:	54c4      	strb	r4, [r0, r3]
 8005c5a:	dcfb      	bgt.n	8005c54 <__sccl+0x54>
 8005c5c:	e7e9      	b.n	8005c32 <__sccl+0x32>

08005c5e <_strtol_l.isra.0>:
 8005c5e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c62:	4680      	mov	r8, r0
 8005c64:	4689      	mov	r9, r1
 8005c66:	4692      	mov	sl, r2
 8005c68:	461f      	mov	r7, r3
 8005c6a:	468b      	mov	fp, r1
 8005c6c:	465d      	mov	r5, fp
 8005c6e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005c70:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005c74:	f000 f94f 	bl	8005f16 <__locale_ctype_ptr_l>
 8005c78:	4420      	add	r0, r4
 8005c7a:	7846      	ldrb	r6, [r0, #1]
 8005c7c:	f016 0608 	ands.w	r6, r6, #8
 8005c80:	d10b      	bne.n	8005c9a <_strtol_l.isra.0+0x3c>
 8005c82:	2c2d      	cmp	r4, #45	; 0x2d
 8005c84:	d10b      	bne.n	8005c9e <_strtol_l.isra.0+0x40>
 8005c86:	2601      	movs	r6, #1
 8005c88:	782c      	ldrb	r4, [r5, #0]
 8005c8a:	f10b 0502 	add.w	r5, fp, #2
 8005c8e:	b167      	cbz	r7, 8005caa <_strtol_l.isra.0+0x4c>
 8005c90:	2f10      	cmp	r7, #16
 8005c92:	d114      	bne.n	8005cbe <_strtol_l.isra.0+0x60>
 8005c94:	2c30      	cmp	r4, #48	; 0x30
 8005c96:	d00a      	beq.n	8005cae <_strtol_l.isra.0+0x50>
 8005c98:	e011      	b.n	8005cbe <_strtol_l.isra.0+0x60>
 8005c9a:	46ab      	mov	fp, r5
 8005c9c:	e7e6      	b.n	8005c6c <_strtol_l.isra.0+0xe>
 8005c9e:	2c2b      	cmp	r4, #43	; 0x2b
 8005ca0:	bf04      	itt	eq
 8005ca2:	782c      	ldrbeq	r4, [r5, #0]
 8005ca4:	f10b 0502 	addeq.w	r5, fp, #2
 8005ca8:	e7f1      	b.n	8005c8e <_strtol_l.isra.0+0x30>
 8005caa:	2c30      	cmp	r4, #48	; 0x30
 8005cac:	d127      	bne.n	8005cfe <_strtol_l.isra.0+0xa0>
 8005cae:	782b      	ldrb	r3, [r5, #0]
 8005cb0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005cb4:	2b58      	cmp	r3, #88	; 0x58
 8005cb6:	d14b      	bne.n	8005d50 <_strtol_l.isra.0+0xf2>
 8005cb8:	2710      	movs	r7, #16
 8005cba:	786c      	ldrb	r4, [r5, #1]
 8005cbc:	3502      	adds	r5, #2
 8005cbe:	2e00      	cmp	r6, #0
 8005cc0:	bf0c      	ite	eq
 8005cc2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8005cc6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8005cca:	2200      	movs	r2, #0
 8005ccc:	fbb1 fef7 	udiv	lr, r1, r7
 8005cd0:	4610      	mov	r0, r2
 8005cd2:	fb07 1c1e 	mls	ip, r7, lr, r1
 8005cd6:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8005cda:	2b09      	cmp	r3, #9
 8005cdc:	d811      	bhi.n	8005d02 <_strtol_l.isra.0+0xa4>
 8005cde:	461c      	mov	r4, r3
 8005ce0:	42a7      	cmp	r7, r4
 8005ce2:	dd1d      	ble.n	8005d20 <_strtol_l.isra.0+0xc2>
 8005ce4:	1c53      	adds	r3, r2, #1
 8005ce6:	d007      	beq.n	8005cf8 <_strtol_l.isra.0+0x9a>
 8005ce8:	4586      	cmp	lr, r0
 8005cea:	d316      	bcc.n	8005d1a <_strtol_l.isra.0+0xbc>
 8005cec:	d101      	bne.n	8005cf2 <_strtol_l.isra.0+0x94>
 8005cee:	45a4      	cmp	ip, r4
 8005cf0:	db13      	blt.n	8005d1a <_strtol_l.isra.0+0xbc>
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	fb00 4007 	mla	r0, r0, r7, r4
 8005cf8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005cfc:	e7eb      	b.n	8005cd6 <_strtol_l.isra.0+0x78>
 8005cfe:	270a      	movs	r7, #10
 8005d00:	e7dd      	b.n	8005cbe <_strtol_l.isra.0+0x60>
 8005d02:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8005d06:	2b19      	cmp	r3, #25
 8005d08:	d801      	bhi.n	8005d0e <_strtol_l.isra.0+0xb0>
 8005d0a:	3c37      	subs	r4, #55	; 0x37
 8005d0c:	e7e8      	b.n	8005ce0 <_strtol_l.isra.0+0x82>
 8005d0e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8005d12:	2b19      	cmp	r3, #25
 8005d14:	d804      	bhi.n	8005d20 <_strtol_l.isra.0+0xc2>
 8005d16:	3c57      	subs	r4, #87	; 0x57
 8005d18:	e7e2      	b.n	8005ce0 <_strtol_l.isra.0+0x82>
 8005d1a:	f04f 32ff 	mov.w	r2, #4294967295
 8005d1e:	e7eb      	b.n	8005cf8 <_strtol_l.isra.0+0x9a>
 8005d20:	1c53      	adds	r3, r2, #1
 8005d22:	d108      	bne.n	8005d36 <_strtol_l.isra.0+0xd8>
 8005d24:	2322      	movs	r3, #34	; 0x22
 8005d26:	4608      	mov	r0, r1
 8005d28:	f8c8 3000 	str.w	r3, [r8]
 8005d2c:	f1ba 0f00 	cmp.w	sl, #0
 8005d30:	d107      	bne.n	8005d42 <_strtol_l.isra.0+0xe4>
 8005d32:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d36:	b106      	cbz	r6, 8005d3a <_strtol_l.isra.0+0xdc>
 8005d38:	4240      	negs	r0, r0
 8005d3a:	f1ba 0f00 	cmp.w	sl, #0
 8005d3e:	d00c      	beq.n	8005d5a <_strtol_l.isra.0+0xfc>
 8005d40:	b122      	cbz	r2, 8005d4c <_strtol_l.isra.0+0xee>
 8005d42:	3d01      	subs	r5, #1
 8005d44:	f8ca 5000 	str.w	r5, [sl]
 8005d48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d4c:	464d      	mov	r5, r9
 8005d4e:	e7f9      	b.n	8005d44 <_strtol_l.isra.0+0xe6>
 8005d50:	2430      	movs	r4, #48	; 0x30
 8005d52:	2f00      	cmp	r7, #0
 8005d54:	d1b3      	bne.n	8005cbe <_strtol_l.isra.0+0x60>
 8005d56:	2708      	movs	r7, #8
 8005d58:	e7b1      	b.n	8005cbe <_strtol_l.isra.0+0x60>
 8005d5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08005d60 <_strtol_r>:
 8005d60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005d62:	4c06      	ldr	r4, [pc, #24]	; (8005d7c <_strtol_r+0x1c>)
 8005d64:	4d06      	ldr	r5, [pc, #24]	; (8005d80 <_strtol_r+0x20>)
 8005d66:	6824      	ldr	r4, [r4, #0]
 8005d68:	6a24      	ldr	r4, [r4, #32]
 8005d6a:	2c00      	cmp	r4, #0
 8005d6c:	bf08      	it	eq
 8005d6e:	462c      	moveq	r4, r5
 8005d70:	9400      	str	r4, [sp, #0]
 8005d72:	f7ff ff74 	bl	8005c5e <_strtol_l.isra.0>
 8005d76:	b003      	add	sp, #12
 8005d78:	bd30      	pop	{r4, r5, pc}
 8005d7a:	bf00      	nop
 8005d7c:	20000054 	.word	0x20000054
 8005d80:	200000b8 	.word	0x200000b8

08005d84 <_strtoul_l.isra.0>:
 8005d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d88:	4680      	mov	r8, r0
 8005d8a:	4689      	mov	r9, r1
 8005d8c:	4692      	mov	sl, r2
 8005d8e:	461e      	mov	r6, r3
 8005d90:	460f      	mov	r7, r1
 8005d92:	463d      	mov	r5, r7
 8005d94:	9808      	ldr	r0, [sp, #32]
 8005d96:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005d9a:	f000 f8bc 	bl	8005f16 <__locale_ctype_ptr_l>
 8005d9e:	4420      	add	r0, r4
 8005da0:	7843      	ldrb	r3, [r0, #1]
 8005da2:	f013 0308 	ands.w	r3, r3, #8
 8005da6:	d10a      	bne.n	8005dbe <_strtoul_l.isra.0+0x3a>
 8005da8:	2c2d      	cmp	r4, #45	; 0x2d
 8005daa:	d10a      	bne.n	8005dc2 <_strtoul_l.isra.0+0x3e>
 8005dac:	2301      	movs	r3, #1
 8005dae:	782c      	ldrb	r4, [r5, #0]
 8005db0:	1cbd      	adds	r5, r7, #2
 8005db2:	b15e      	cbz	r6, 8005dcc <_strtoul_l.isra.0+0x48>
 8005db4:	2e10      	cmp	r6, #16
 8005db6:	d113      	bne.n	8005de0 <_strtoul_l.isra.0+0x5c>
 8005db8:	2c30      	cmp	r4, #48	; 0x30
 8005dba:	d009      	beq.n	8005dd0 <_strtoul_l.isra.0+0x4c>
 8005dbc:	e010      	b.n	8005de0 <_strtoul_l.isra.0+0x5c>
 8005dbe:	462f      	mov	r7, r5
 8005dc0:	e7e7      	b.n	8005d92 <_strtoul_l.isra.0+0xe>
 8005dc2:	2c2b      	cmp	r4, #43	; 0x2b
 8005dc4:	bf04      	itt	eq
 8005dc6:	782c      	ldrbeq	r4, [r5, #0]
 8005dc8:	1cbd      	addeq	r5, r7, #2
 8005dca:	e7f2      	b.n	8005db2 <_strtoul_l.isra.0+0x2e>
 8005dcc:	2c30      	cmp	r4, #48	; 0x30
 8005dce:	d125      	bne.n	8005e1c <_strtoul_l.isra.0+0x98>
 8005dd0:	782a      	ldrb	r2, [r5, #0]
 8005dd2:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8005dd6:	2a58      	cmp	r2, #88	; 0x58
 8005dd8:	d14a      	bne.n	8005e70 <_strtoul_l.isra.0+0xec>
 8005dda:	2610      	movs	r6, #16
 8005ddc:	786c      	ldrb	r4, [r5, #1]
 8005dde:	3502      	adds	r5, #2
 8005de0:	f04f 31ff 	mov.w	r1, #4294967295
 8005de4:	fbb1 f1f6 	udiv	r1, r1, r6
 8005de8:	2700      	movs	r7, #0
 8005dea:	fb06 fe01 	mul.w	lr, r6, r1
 8005dee:	4638      	mov	r0, r7
 8005df0:	ea6f 0e0e 	mvn.w	lr, lr
 8005df4:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 8005df8:	2a09      	cmp	r2, #9
 8005dfa:	d811      	bhi.n	8005e20 <_strtoul_l.isra.0+0x9c>
 8005dfc:	4614      	mov	r4, r2
 8005dfe:	42a6      	cmp	r6, r4
 8005e00:	dd1d      	ble.n	8005e3e <_strtoul_l.isra.0+0xba>
 8005e02:	2f00      	cmp	r7, #0
 8005e04:	db18      	blt.n	8005e38 <_strtoul_l.isra.0+0xb4>
 8005e06:	4281      	cmp	r1, r0
 8005e08:	d316      	bcc.n	8005e38 <_strtoul_l.isra.0+0xb4>
 8005e0a:	d101      	bne.n	8005e10 <_strtoul_l.isra.0+0x8c>
 8005e0c:	45a6      	cmp	lr, r4
 8005e0e:	db13      	blt.n	8005e38 <_strtoul_l.isra.0+0xb4>
 8005e10:	2701      	movs	r7, #1
 8005e12:	fb00 4006 	mla	r0, r0, r6, r4
 8005e16:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005e1a:	e7eb      	b.n	8005df4 <_strtoul_l.isra.0+0x70>
 8005e1c:	260a      	movs	r6, #10
 8005e1e:	e7df      	b.n	8005de0 <_strtoul_l.isra.0+0x5c>
 8005e20:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
 8005e24:	2a19      	cmp	r2, #25
 8005e26:	d801      	bhi.n	8005e2c <_strtoul_l.isra.0+0xa8>
 8005e28:	3c37      	subs	r4, #55	; 0x37
 8005e2a:	e7e8      	b.n	8005dfe <_strtoul_l.isra.0+0x7a>
 8005e2c:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
 8005e30:	2a19      	cmp	r2, #25
 8005e32:	d804      	bhi.n	8005e3e <_strtoul_l.isra.0+0xba>
 8005e34:	3c57      	subs	r4, #87	; 0x57
 8005e36:	e7e2      	b.n	8005dfe <_strtoul_l.isra.0+0x7a>
 8005e38:	f04f 37ff 	mov.w	r7, #4294967295
 8005e3c:	e7eb      	b.n	8005e16 <_strtoul_l.isra.0+0x92>
 8005e3e:	2f00      	cmp	r7, #0
 8005e40:	da09      	bge.n	8005e56 <_strtoul_l.isra.0+0xd2>
 8005e42:	2322      	movs	r3, #34	; 0x22
 8005e44:	f04f 30ff 	mov.w	r0, #4294967295
 8005e48:	f8c8 3000 	str.w	r3, [r8]
 8005e4c:	f1ba 0f00 	cmp.w	sl, #0
 8005e50:	d107      	bne.n	8005e62 <_strtoul_l.isra.0+0xde>
 8005e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e56:	b103      	cbz	r3, 8005e5a <_strtoul_l.isra.0+0xd6>
 8005e58:	4240      	negs	r0, r0
 8005e5a:	f1ba 0f00 	cmp.w	sl, #0
 8005e5e:	d00c      	beq.n	8005e7a <_strtoul_l.isra.0+0xf6>
 8005e60:	b127      	cbz	r7, 8005e6c <_strtoul_l.isra.0+0xe8>
 8005e62:	3d01      	subs	r5, #1
 8005e64:	f8ca 5000 	str.w	r5, [sl]
 8005e68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e6c:	464d      	mov	r5, r9
 8005e6e:	e7f9      	b.n	8005e64 <_strtoul_l.isra.0+0xe0>
 8005e70:	2430      	movs	r4, #48	; 0x30
 8005e72:	2e00      	cmp	r6, #0
 8005e74:	d1b4      	bne.n	8005de0 <_strtoul_l.isra.0+0x5c>
 8005e76:	2608      	movs	r6, #8
 8005e78:	e7b2      	b.n	8005de0 <_strtoul_l.isra.0+0x5c>
 8005e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08005e80 <_strtoul_r>:
 8005e80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e82:	4c06      	ldr	r4, [pc, #24]	; (8005e9c <_strtoul_r+0x1c>)
 8005e84:	4d06      	ldr	r5, [pc, #24]	; (8005ea0 <_strtoul_r+0x20>)
 8005e86:	6824      	ldr	r4, [r4, #0]
 8005e88:	6a24      	ldr	r4, [r4, #32]
 8005e8a:	2c00      	cmp	r4, #0
 8005e8c:	bf08      	it	eq
 8005e8e:	462c      	moveq	r4, r5
 8005e90:	9400      	str	r4, [sp, #0]
 8005e92:	f7ff ff77 	bl	8005d84 <_strtoul_l.isra.0>
 8005e96:	b003      	add	sp, #12
 8005e98:	bd30      	pop	{r4, r5, pc}
 8005e9a:	bf00      	nop
 8005e9c:	20000054 	.word	0x20000054
 8005ea0:	200000b8 	.word	0x200000b8

08005ea4 <__submore>:
 8005ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ea8:	460c      	mov	r4, r1
 8005eaa:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005eac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005eb0:	4299      	cmp	r1, r3
 8005eb2:	d11c      	bne.n	8005eee <__submore+0x4a>
 8005eb4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005eb8:	f000 f8c4 	bl	8006044 <_malloc_r>
 8005ebc:	b918      	cbnz	r0, 8005ec6 <__submore+0x22>
 8005ebe:	f04f 30ff 	mov.w	r0, #4294967295
 8005ec2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ec6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005eca:	63a3      	str	r3, [r4, #56]	; 0x38
 8005ecc:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8005ed0:	6360      	str	r0, [r4, #52]	; 0x34
 8005ed2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8005ed6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005eda:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8005ede:	7043      	strb	r3, [r0, #1]
 8005ee0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005ee4:	7003      	strb	r3, [r0, #0]
 8005ee6:	6020      	str	r0, [r4, #0]
 8005ee8:	2000      	movs	r0, #0
 8005eea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005eee:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8005ef0:	0077      	lsls	r7, r6, #1
 8005ef2:	463a      	mov	r2, r7
 8005ef4:	f000 f904 	bl	8006100 <_realloc_r>
 8005ef8:	4605      	mov	r5, r0
 8005efa:	2800      	cmp	r0, #0
 8005efc:	d0df      	beq.n	8005ebe <__submore+0x1a>
 8005efe:	eb00 0806 	add.w	r8, r0, r6
 8005f02:	4601      	mov	r1, r0
 8005f04:	4632      	mov	r2, r6
 8005f06:	4640      	mov	r0, r8
 8005f08:	f7ff f826 	bl	8004f58 <memcpy>
 8005f0c:	f8c4 8000 	str.w	r8, [r4]
 8005f10:	6365      	str	r5, [r4, #52]	; 0x34
 8005f12:	63a7      	str	r7, [r4, #56]	; 0x38
 8005f14:	e7e8      	b.n	8005ee8 <__submore+0x44>

08005f16 <__locale_ctype_ptr_l>:
 8005f16:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8005f1a:	4770      	bx	lr

08005f1c <__locale_ctype_ptr>:
 8005f1c:	4b04      	ldr	r3, [pc, #16]	; (8005f30 <__locale_ctype_ptr+0x14>)
 8005f1e:	4a05      	ldr	r2, [pc, #20]	; (8005f34 <__locale_ctype_ptr+0x18>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	6a1b      	ldr	r3, [r3, #32]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	bf08      	it	eq
 8005f28:	4613      	moveq	r3, r2
 8005f2a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8005f2e:	4770      	bx	lr
 8005f30:	20000054 	.word	0x20000054
 8005f34:	200000b8 	.word	0x200000b8

08005f38 <__ascii_mbtowc>:
 8005f38:	b082      	sub	sp, #8
 8005f3a:	b901      	cbnz	r1, 8005f3e <__ascii_mbtowc+0x6>
 8005f3c:	a901      	add	r1, sp, #4
 8005f3e:	b142      	cbz	r2, 8005f52 <__ascii_mbtowc+0x1a>
 8005f40:	b14b      	cbz	r3, 8005f56 <__ascii_mbtowc+0x1e>
 8005f42:	7813      	ldrb	r3, [r2, #0]
 8005f44:	600b      	str	r3, [r1, #0]
 8005f46:	7812      	ldrb	r2, [r2, #0]
 8005f48:	1c10      	adds	r0, r2, #0
 8005f4a:	bf18      	it	ne
 8005f4c:	2001      	movne	r0, #1
 8005f4e:	b002      	add	sp, #8
 8005f50:	4770      	bx	lr
 8005f52:	4610      	mov	r0, r2
 8005f54:	e7fb      	b.n	8005f4e <__ascii_mbtowc+0x16>
 8005f56:	f06f 0001 	mvn.w	r0, #1
 8005f5a:	e7f8      	b.n	8005f4e <__ascii_mbtowc+0x16>

08005f5c <memchr>:
 8005f5c:	b510      	push	{r4, lr}
 8005f5e:	b2c9      	uxtb	r1, r1
 8005f60:	4402      	add	r2, r0
 8005f62:	4290      	cmp	r0, r2
 8005f64:	4603      	mov	r3, r0
 8005f66:	d101      	bne.n	8005f6c <memchr+0x10>
 8005f68:	2000      	movs	r0, #0
 8005f6a:	bd10      	pop	{r4, pc}
 8005f6c:	781c      	ldrb	r4, [r3, #0]
 8005f6e:	3001      	adds	r0, #1
 8005f70:	428c      	cmp	r4, r1
 8005f72:	d1f6      	bne.n	8005f62 <memchr+0x6>
 8005f74:	4618      	mov	r0, r3
 8005f76:	bd10      	pop	{r4, pc}

08005f78 <memmove>:
 8005f78:	4288      	cmp	r0, r1
 8005f7a:	b510      	push	{r4, lr}
 8005f7c:	eb01 0302 	add.w	r3, r1, r2
 8005f80:	d803      	bhi.n	8005f8a <memmove+0x12>
 8005f82:	1e42      	subs	r2, r0, #1
 8005f84:	4299      	cmp	r1, r3
 8005f86:	d10c      	bne.n	8005fa2 <memmove+0x2a>
 8005f88:	bd10      	pop	{r4, pc}
 8005f8a:	4298      	cmp	r0, r3
 8005f8c:	d2f9      	bcs.n	8005f82 <memmove+0xa>
 8005f8e:	1881      	adds	r1, r0, r2
 8005f90:	1ad2      	subs	r2, r2, r3
 8005f92:	42d3      	cmn	r3, r2
 8005f94:	d100      	bne.n	8005f98 <memmove+0x20>
 8005f96:	bd10      	pop	{r4, pc}
 8005f98:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005f9c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005fa0:	e7f7      	b.n	8005f92 <memmove+0x1a>
 8005fa2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005fa6:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005faa:	e7eb      	b.n	8005f84 <memmove+0xc>

08005fac <_free_r>:
 8005fac:	b538      	push	{r3, r4, r5, lr}
 8005fae:	4605      	mov	r5, r0
 8005fb0:	2900      	cmp	r1, #0
 8005fb2:	d043      	beq.n	800603c <_free_r+0x90>
 8005fb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fb8:	1f0c      	subs	r4, r1, #4
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	bfb8      	it	lt
 8005fbe:	18e4      	addlt	r4, r4, r3
 8005fc0:	f000 f8e1 	bl	8006186 <__malloc_lock>
 8005fc4:	4a1e      	ldr	r2, [pc, #120]	; (8006040 <_free_r+0x94>)
 8005fc6:	6813      	ldr	r3, [r2, #0]
 8005fc8:	4610      	mov	r0, r2
 8005fca:	b933      	cbnz	r3, 8005fda <_free_r+0x2e>
 8005fcc:	6063      	str	r3, [r4, #4]
 8005fce:	6014      	str	r4, [r2, #0]
 8005fd0:	4628      	mov	r0, r5
 8005fd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005fd6:	f000 b8d7 	b.w	8006188 <__malloc_unlock>
 8005fda:	42a3      	cmp	r3, r4
 8005fdc:	d90b      	bls.n	8005ff6 <_free_r+0x4a>
 8005fde:	6821      	ldr	r1, [r4, #0]
 8005fe0:	1862      	adds	r2, r4, r1
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	bf01      	itttt	eq
 8005fe6:	681a      	ldreq	r2, [r3, #0]
 8005fe8:	685b      	ldreq	r3, [r3, #4]
 8005fea:	1852      	addeq	r2, r2, r1
 8005fec:	6022      	streq	r2, [r4, #0]
 8005fee:	6063      	str	r3, [r4, #4]
 8005ff0:	6004      	str	r4, [r0, #0]
 8005ff2:	e7ed      	b.n	8005fd0 <_free_r+0x24>
 8005ff4:	4613      	mov	r3, r2
 8005ff6:	685a      	ldr	r2, [r3, #4]
 8005ff8:	b10a      	cbz	r2, 8005ffe <_free_r+0x52>
 8005ffa:	42a2      	cmp	r2, r4
 8005ffc:	d9fa      	bls.n	8005ff4 <_free_r+0x48>
 8005ffe:	6819      	ldr	r1, [r3, #0]
 8006000:	1858      	adds	r0, r3, r1
 8006002:	42a0      	cmp	r0, r4
 8006004:	d10b      	bne.n	800601e <_free_r+0x72>
 8006006:	6820      	ldr	r0, [r4, #0]
 8006008:	4401      	add	r1, r0
 800600a:	1858      	adds	r0, r3, r1
 800600c:	4282      	cmp	r2, r0
 800600e:	6019      	str	r1, [r3, #0]
 8006010:	d1de      	bne.n	8005fd0 <_free_r+0x24>
 8006012:	6810      	ldr	r0, [r2, #0]
 8006014:	6852      	ldr	r2, [r2, #4]
 8006016:	4401      	add	r1, r0
 8006018:	6019      	str	r1, [r3, #0]
 800601a:	605a      	str	r2, [r3, #4]
 800601c:	e7d8      	b.n	8005fd0 <_free_r+0x24>
 800601e:	d902      	bls.n	8006026 <_free_r+0x7a>
 8006020:	230c      	movs	r3, #12
 8006022:	602b      	str	r3, [r5, #0]
 8006024:	e7d4      	b.n	8005fd0 <_free_r+0x24>
 8006026:	6820      	ldr	r0, [r4, #0]
 8006028:	1821      	adds	r1, r4, r0
 800602a:	428a      	cmp	r2, r1
 800602c:	bf01      	itttt	eq
 800602e:	6811      	ldreq	r1, [r2, #0]
 8006030:	6852      	ldreq	r2, [r2, #4]
 8006032:	1809      	addeq	r1, r1, r0
 8006034:	6021      	streq	r1, [r4, #0]
 8006036:	6062      	str	r2, [r4, #4]
 8006038:	605c      	str	r4, [r3, #4]
 800603a:	e7c9      	b.n	8005fd0 <_free_r+0x24>
 800603c:	bd38      	pop	{r3, r4, r5, pc}
 800603e:	bf00      	nop
 8006040:	200052b4 	.word	0x200052b4

08006044 <_malloc_r>:
 8006044:	b570      	push	{r4, r5, r6, lr}
 8006046:	1ccd      	adds	r5, r1, #3
 8006048:	f025 0503 	bic.w	r5, r5, #3
 800604c:	3508      	adds	r5, #8
 800604e:	2d0c      	cmp	r5, #12
 8006050:	bf38      	it	cc
 8006052:	250c      	movcc	r5, #12
 8006054:	2d00      	cmp	r5, #0
 8006056:	4606      	mov	r6, r0
 8006058:	db01      	blt.n	800605e <_malloc_r+0x1a>
 800605a:	42a9      	cmp	r1, r5
 800605c:	d903      	bls.n	8006066 <_malloc_r+0x22>
 800605e:	230c      	movs	r3, #12
 8006060:	6033      	str	r3, [r6, #0]
 8006062:	2000      	movs	r0, #0
 8006064:	bd70      	pop	{r4, r5, r6, pc}
 8006066:	f000 f88e 	bl	8006186 <__malloc_lock>
 800606a:	4a23      	ldr	r2, [pc, #140]	; (80060f8 <_malloc_r+0xb4>)
 800606c:	6814      	ldr	r4, [r2, #0]
 800606e:	4621      	mov	r1, r4
 8006070:	b991      	cbnz	r1, 8006098 <_malloc_r+0x54>
 8006072:	4c22      	ldr	r4, [pc, #136]	; (80060fc <_malloc_r+0xb8>)
 8006074:	6823      	ldr	r3, [r4, #0]
 8006076:	b91b      	cbnz	r3, 8006080 <_malloc_r+0x3c>
 8006078:	4630      	mov	r0, r6
 800607a:	f000 f867 	bl	800614c <_sbrk_r>
 800607e:	6020      	str	r0, [r4, #0]
 8006080:	4629      	mov	r1, r5
 8006082:	4630      	mov	r0, r6
 8006084:	f000 f862 	bl	800614c <_sbrk_r>
 8006088:	1c43      	adds	r3, r0, #1
 800608a:	d126      	bne.n	80060da <_malloc_r+0x96>
 800608c:	230c      	movs	r3, #12
 800608e:	4630      	mov	r0, r6
 8006090:	6033      	str	r3, [r6, #0]
 8006092:	f000 f879 	bl	8006188 <__malloc_unlock>
 8006096:	e7e4      	b.n	8006062 <_malloc_r+0x1e>
 8006098:	680b      	ldr	r3, [r1, #0]
 800609a:	1b5b      	subs	r3, r3, r5
 800609c:	d41a      	bmi.n	80060d4 <_malloc_r+0x90>
 800609e:	2b0b      	cmp	r3, #11
 80060a0:	d90f      	bls.n	80060c2 <_malloc_r+0x7e>
 80060a2:	600b      	str	r3, [r1, #0]
 80060a4:	18cc      	adds	r4, r1, r3
 80060a6:	50cd      	str	r5, [r1, r3]
 80060a8:	4630      	mov	r0, r6
 80060aa:	f000 f86d 	bl	8006188 <__malloc_unlock>
 80060ae:	f104 000b 	add.w	r0, r4, #11
 80060b2:	1d23      	adds	r3, r4, #4
 80060b4:	f020 0007 	bic.w	r0, r0, #7
 80060b8:	1ac3      	subs	r3, r0, r3
 80060ba:	d01b      	beq.n	80060f4 <_malloc_r+0xb0>
 80060bc:	425a      	negs	r2, r3
 80060be:	50e2      	str	r2, [r4, r3]
 80060c0:	bd70      	pop	{r4, r5, r6, pc}
 80060c2:	428c      	cmp	r4, r1
 80060c4:	bf0b      	itete	eq
 80060c6:	6863      	ldreq	r3, [r4, #4]
 80060c8:	684b      	ldrne	r3, [r1, #4]
 80060ca:	6013      	streq	r3, [r2, #0]
 80060cc:	6063      	strne	r3, [r4, #4]
 80060ce:	bf18      	it	ne
 80060d0:	460c      	movne	r4, r1
 80060d2:	e7e9      	b.n	80060a8 <_malloc_r+0x64>
 80060d4:	460c      	mov	r4, r1
 80060d6:	6849      	ldr	r1, [r1, #4]
 80060d8:	e7ca      	b.n	8006070 <_malloc_r+0x2c>
 80060da:	1cc4      	adds	r4, r0, #3
 80060dc:	f024 0403 	bic.w	r4, r4, #3
 80060e0:	42a0      	cmp	r0, r4
 80060e2:	d005      	beq.n	80060f0 <_malloc_r+0xac>
 80060e4:	1a21      	subs	r1, r4, r0
 80060e6:	4630      	mov	r0, r6
 80060e8:	f000 f830 	bl	800614c <_sbrk_r>
 80060ec:	3001      	adds	r0, #1
 80060ee:	d0cd      	beq.n	800608c <_malloc_r+0x48>
 80060f0:	6025      	str	r5, [r4, #0]
 80060f2:	e7d9      	b.n	80060a8 <_malloc_r+0x64>
 80060f4:	bd70      	pop	{r4, r5, r6, pc}
 80060f6:	bf00      	nop
 80060f8:	200052b4 	.word	0x200052b4
 80060fc:	200052b8 	.word	0x200052b8

08006100 <_realloc_r>:
 8006100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006102:	4607      	mov	r7, r0
 8006104:	4614      	mov	r4, r2
 8006106:	460e      	mov	r6, r1
 8006108:	b921      	cbnz	r1, 8006114 <_realloc_r+0x14>
 800610a:	4611      	mov	r1, r2
 800610c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006110:	f7ff bf98 	b.w	8006044 <_malloc_r>
 8006114:	b922      	cbnz	r2, 8006120 <_realloc_r+0x20>
 8006116:	f7ff ff49 	bl	8005fac <_free_r>
 800611a:	4625      	mov	r5, r4
 800611c:	4628      	mov	r0, r5
 800611e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006120:	f000 f833 	bl	800618a <_malloc_usable_size_r>
 8006124:	4284      	cmp	r4, r0
 8006126:	d90f      	bls.n	8006148 <_realloc_r+0x48>
 8006128:	4621      	mov	r1, r4
 800612a:	4638      	mov	r0, r7
 800612c:	f7ff ff8a 	bl	8006044 <_malloc_r>
 8006130:	4605      	mov	r5, r0
 8006132:	2800      	cmp	r0, #0
 8006134:	d0f2      	beq.n	800611c <_realloc_r+0x1c>
 8006136:	4631      	mov	r1, r6
 8006138:	4622      	mov	r2, r4
 800613a:	f7fe ff0d 	bl	8004f58 <memcpy>
 800613e:	4631      	mov	r1, r6
 8006140:	4638      	mov	r0, r7
 8006142:	f7ff ff33 	bl	8005fac <_free_r>
 8006146:	e7e9      	b.n	800611c <_realloc_r+0x1c>
 8006148:	4635      	mov	r5, r6
 800614a:	e7e7      	b.n	800611c <_realloc_r+0x1c>

0800614c <_sbrk_r>:
 800614c:	b538      	push	{r3, r4, r5, lr}
 800614e:	2300      	movs	r3, #0
 8006150:	4c05      	ldr	r4, [pc, #20]	; (8006168 <_sbrk_r+0x1c>)
 8006152:	4605      	mov	r5, r0
 8006154:	4608      	mov	r0, r1
 8006156:	6023      	str	r3, [r4, #0]
 8006158:	f7fe fe8e 	bl	8004e78 <_sbrk>
 800615c:	1c43      	adds	r3, r0, #1
 800615e:	d102      	bne.n	8006166 <_sbrk_r+0x1a>
 8006160:	6823      	ldr	r3, [r4, #0]
 8006162:	b103      	cbz	r3, 8006166 <_sbrk_r+0x1a>
 8006164:	602b      	str	r3, [r5, #0]
 8006166:	bd38      	pop	{r3, r4, r5, pc}
 8006168:	20005478 	.word	0x20005478

0800616c <__ascii_wctomb>:
 800616c:	b149      	cbz	r1, 8006182 <__ascii_wctomb+0x16>
 800616e:	2aff      	cmp	r2, #255	; 0xff
 8006170:	bf8b      	itete	hi
 8006172:	238a      	movhi	r3, #138	; 0x8a
 8006174:	700a      	strbls	r2, [r1, #0]
 8006176:	6003      	strhi	r3, [r0, #0]
 8006178:	2001      	movls	r0, #1
 800617a:	bf88      	it	hi
 800617c:	f04f 30ff 	movhi.w	r0, #4294967295
 8006180:	4770      	bx	lr
 8006182:	4608      	mov	r0, r1
 8006184:	4770      	bx	lr

08006186 <__malloc_lock>:
 8006186:	4770      	bx	lr

08006188 <__malloc_unlock>:
 8006188:	4770      	bx	lr

0800618a <_malloc_usable_size_r>:
 800618a:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800618e:	2800      	cmp	r0, #0
 8006190:	f1a0 0004 	sub.w	r0, r0, #4
 8006194:	bfbc      	itt	lt
 8006196:	580b      	ldrlt	r3, [r1, r0]
 8006198:	18c0      	addlt	r0, r0, r3
 800619a:	4770      	bx	lr

0800619c <_init>:
 800619c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800619e:	bf00      	nop
 80061a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061a2:	bc08      	pop	{r3}
 80061a4:	469e      	mov	lr, r3
 80061a6:	4770      	bx	lr

080061a8 <_fini>:
 80061a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061aa:	bf00      	nop
 80061ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061ae:	bc08      	pop	{r3}
 80061b0:	469e      	mov	lr, r3
 80061b2:	4770      	bx	lr
