
aride_pressure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008810  080001f0  080001f0  000101f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000047c  08008a00  08008a00  00018a00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008e7c  08008e7c  00018e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008e84  08008e84  00018e84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008e88  08008e88  00018e88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000224  20000000  08008e8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00005274  20000228  080090b0  00020228  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  2000549c  080090b0  0002549c  2**0
                  ALLOC
  9 .ARM.attributes 00000029  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY
 10 .debug_info   00029cc0  00000000  00000000  0002024d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000591b  00000000  00000000  00049f0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000c258  00000000  00000000  0004f828  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001188  00000000  00000000  0005ba80  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001720  00000000  00000000  0005cc08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000b75c  00000000  00000000  0005e328  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00006719  00000000  00000000  00069a84  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0007019d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000041ec  00000000  00000000  0007021c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	; (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	20000228 	.word	0x20000228
 800020c:	00000000 	.word	0x00000000
 8000210:	080089e8 	.word	0x080089e8

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	; (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	; (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	; (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	2000022c 	.word	0x2000022c
 800022c:	080089e8 	.word	0x080089e8

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <__aeabi_llsr>:
 8000240:	40d0      	lsrs	r0, r2
 8000242:	1c0b      	adds	r3, r1, #0
 8000244:	40d1      	lsrs	r1, r2
 8000246:	469c      	mov	ip, r3
 8000248:	3a20      	subs	r2, #32
 800024a:	40d3      	lsrs	r3, r2
 800024c:	4318      	orrs	r0, r3
 800024e:	4252      	negs	r2, r2
 8000250:	4663      	mov	r3, ip
 8000252:	4093      	lsls	r3, r2
 8000254:	4318      	orrs	r0, r3
 8000256:	4770      	bx	lr

08000258 <__aeabi_drsub>:
 8000258:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800025c:	e002      	b.n	8000264 <__adddf3>
 800025e:	bf00      	nop

08000260 <__aeabi_dsub>:
 8000260:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000264 <__adddf3>:
 8000264:	b530      	push	{r4, r5, lr}
 8000266:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800026a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800026e:	ea94 0f05 	teq	r4, r5
 8000272:	bf08      	it	eq
 8000274:	ea90 0f02 	teqeq	r0, r2
 8000278:	bf1f      	itttt	ne
 800027a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800027e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000282:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000286:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800028a:	f000 80e2 	beq.w	8000452 <__adddf3+0x1ee>
 800028e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000292:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000296:	bfb8      	it	lt
 8000298:	426d      	neglt	r5, r5
 800029a:	dd0c      	ble.n	80002b6 <__adddf3+0x52>
 800029c:	442c      	add	r4, r5
 800029e:	ea80 0202 	eor.w	r2, r0, r2
 80002a2:	ea81 0303 	eor.w	r3, r1, r3
 80002a6:	ea82 0000 	eor.w	r0, r2, r0
 80002aa:	ea83 0101 	eor.w	r1, r3, r1
 80002ae:	ea80 0202 	eor.w	r2, r0, r2
 80002b2:	ea81 0303 	eor.w	r3, r1, r3
 80002b6:	2d36      	cmp	r5, #54	; 0x36
 80002b8:	bf88      	it	hi
 80002ba:	bd30      	pophi	{r4, r5, pc}
 80002bc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002c4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002c8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002cc:	d002      	beq.n	80002d4 <__adddf3+0x70>
 80002ce:	4240      	negs	r0, r0
 80002d0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002d4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002dc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002e0:	d002      	beq.n	80002e8 <__adddf3+0x84>
 80002e2:	4252      	negs	r2, r2
 80002e4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e8:	ea94 0f05 	teq	r4, r5
 80002ec:	f000 80a7 	beq.w	800043e <__adddf3+0x1da>
 80002f0:	f1a4 0401 	sub.w	r4, r4, #1
 80002f4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002f8:	db0d      	blt.n	8000316 <__adddf3+0xb2>
 80002fa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002fe:	fa22 f205 	lsr.w	r2, r2, r5
 8000302:	1880      	adds	r0, r0, r2
 8000304:	f141 0100 	adc.w	r1, r1, #0
 8000308:	fa03 f20e 	lsl.w	r2, r3, lr
 800030c:	1880      	adds	r0, r0, r2
 800030e:	fa43 f305 	asr.w	r3, r3, r5
 8000312:	4159      	adcs	r1, r3
 8000314:	e00e      	b.n	8000334 <__adddf3+0xd0>
 8000316:	f1a5 0520 	sub.w	r5, r5, #32
 800031a:	f10e 0e20 	add.w	lr, lr, #32
 800031e:	2a01      	cmp	r2, #1
 8000320:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000324:	bf28      	it	cs
 8000326:	f04c 0c02 	orrcs.w	ip, ip, #2
 800032a:	fa43 f305 	asr.w	r3, r3, r5
 800032e:	18c0      	adds	r0, r0, r3
 8000330:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000334:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000338:	d507      	bpl.n	800034a <__adddf3+0xe6>
 800033a:	f04f 0e00 	mov.w	lr, #0
 800033e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000342:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000346:	eb6e 0101 	sbc.w	r1, lr, r1
 800034a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800034e:	d31b      	bcc.n	8000388 <__adddf3+0x124>
 8000350:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000354:	d30c      	bcc.n	8000370 <__adddf3+0x10c>
 8000356:	0849      	lsrs	r1, r1, #1
 8000358:	ea5f 0030 	movs.w	r0, r0, rrx
 800035c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000360:	f104 0401 	add.w	r4, r4, #1
 8000364:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000368:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800036c:	f080 809a 	bcs.w	80004a4 <__adddf3+0x240>
 8000370:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000374:	bf08      	it	eq
 8000376:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800037a:	f150 0000 	adcs.w	r0, r0, #0
 800037e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000382:	ea41 0105 	orr.w	r1, r1, r5
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800038c:	4140      	adcs	r0, r0
 800038e:	eb41 0101 	adc.w	r1, r1, r1
 8000392:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000396:	f1a4 0401 	sub.w	r4, r4, #1
 800039a:	d1e9      	bne.n	8000370 <__adddf3+0x10c>
 800039c:	f091 0f00 	teq	r1, #0
 80003a0:	bf04      	itt	eq
 80003a2:	4601      	moveq	r1, r0
 80003a4:	2000      	moveq	r0, #0
 80003a6:	fab1 f381 	clz	r3, r1
 80003aa:	bf08      	it	eq
 80003ac:	3320      	addeq	r3, #32
 80003ae:	f1a3 030b 	sub.w	r3, r3, #11
 80003b2:	f1b3 0220 	subs.w	r2, r3, #32
 80003b6:	da0c      	bge.n	80003d2 <__adddf3+0x16e>
 80003b8:	320c      	adds	r2, #12
 80003ba:	dd08      	ble.n	80003ce <__adddf3+0x16a>
 80003bc:	f102 0c14 	add.w	ip, r2, #20
 80003c0:	f1c2 020c 	rsb	r2, r2, #12
 80003c4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003c8:	fa21 f102 	lsr.w	r1, r1, r2
 80003cc:	e00c      	b.n	80003e8 <__adddf3+0x184>
 80003ce:	f102 0214 	add.w	r2, r2, #20
 80003d2:	bfd8      	it	le
 80003d4:	f1c2 0c20 	rsble	ip, r2, #32
 80003d8:	fa01 f102 	lsl.w	r1, r1, r2
 80003dc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003e0:	bfdc      	itt	le
 80003e2:	ea41 010c 	orrle.w	r1, r1, ip
 80003e6:	4090      	lslle	r0, r2
 80003e8:	1ae4      	subs	r4, r4, r3
 80003ea:	bfa2      	ittt	ge
 80003ec:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003f0:	4329      	orrge	r1, r5
 80003f2:	bd30      	popge	{r4, r5, pc}
 80003f4:	ea6f 0404 	mvn.w	r4, r4
 80003f8:	3c1f      	subs	r4, #31
 80003fa:	da1c      	bge.n	8000436 <__adddf3+0x1d2>
 80003fc:	340c      	adds	r4, #12
 80003fe:	dc0e      	bgt.n	800041e <__adddf3+0x1ba>
 8000400:	f104 0414 	add.w	r4, r4, #20
 8000404:	f1c4 0220 	rsb	r2, r4, #32
 8000408:	fa20 f004 	lsr.w	r0, r0, r4
 800040c:	fa01 f302 	lsl.w	r3, r1, r2
 8000410:	ea40 0003 	orr.w	r0, r0, r3
 8000414:	fa21 f304 	lsr.w	r3, r1, r4
 8000418:	ea45 0103 	orr.w	r1, r5, r3
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f1c4 040c 	rsb	r4, r4, #12
 8000422:	f1c4 0220 	rsb	r2, r4, #32
 8000426:	fa20 f002 	lsr.w	r0, r0, r2
 800042a:	fa01 f304 	lsl.w	r3, r1, r4
 800042e:	ea40 0003 	orr.w	r0, r0, r3
 8000432:	4629      	mov	r1, r5
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	fa21 f004 	lsr.w	r0, r1, r4
 800043a:	4629      	mov	r1, r5
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	f094 0f00 	teq	r4, #0
 8000442:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000446:	bf06      	itte	eq
 8000448:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800044c:	3401      	addeq	r4, #1
 800044e:	3d01      	subne	r5, #1
 8000450:	e74e      	b.n	80002f0 <__adddf3+0x8c>
 8000452:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000456:	bf18      	it	ne
 8000458:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800045c:	d029      	beq.n	80004b2 <__adddf3+0x24e>
 800045e:	ea94 0f05 	teq	r4, r5
 8000462:	bf08      	it	eq
 8000464:	ea90 0f02 	teqeq	r0, r2
 8000468:	d005      	beq.n	8000476 <__adddf3+0x212>
 800046a:	ea54 0c00 	orrs.w	ip, r4, r0
 800046e:	bf04      	itt	eq
 8000470:	4619      	moveq	r1, r3
 8000472:	4610      	moveq	r0, r2
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	ea91 0f03 	teq	r1, r3
 800047a:	bf1e      	ittt	ne
 800047c:	2100      	movne	r1, #0
 800047e:	2000      	movne	r0, #0
 8000480:	bd30      	popne	{r4, r5, pc}
 8000482:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000486:	d105      	bne.n	8000494 <__adddf3+0x230>
 8000488:	0040      	lsls	r0, r0, #1
 800048a:	4149      	adcs	r1, r1
 800048c:	bf28      	it	cs
 800048e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000492:	bd30      	pop	{r4, r5, pc}
 8000494:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000498:	bf3c      	itt	cc
 800049a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800049e:	bd30      	popcc	{r4, r5, pc}
 80004a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004a4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004ac:	f04f 0000 	mov.w	r0, #0
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b6:	bf1a      	itte	ne
 80004b8:	4619      	movne	r1, r3
 80004ba:	4610      	movne	r0, r2
 80004bc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004c0:	bf1c      	itt	ne
 80004c2:	460b      	movne	r3, r1
 80004c4:	4602      	movne	r2, r0
 80004c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004ca:	bf06      	itte	eq
 80004cc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004d0:	ea91 0f03 	teqeq	r1, r3
 80004d4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	bf00      	nop

080004dc <__aeabi_ui2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f04f 0500 	mov.w	r5, #0
 80004f4:	f04f 0100 	mov.w	r1, #0
 80004f8:	e750      	b.n	800039c <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_i2d>:
 80004fc:	f090 0f00 	teq	r0, #0
 8000500:	bf04      	itt	eq
 8000502:	2100      	moveq	r1, #0
 8000504:	4770      	bxeq	lr
 8000506:	b530      	push	{r4, r5, lr}
 8000508:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000510:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000514:	bf48      	it	mi
 8000516:	4240      	negmi	r0, r0
 8000518:	f04f 0100 	mov.w	r1, #0
 800051c:	e73e      	b.n	800039c <__adddf3+0x138>
 800051e:	bf00      	nop

08000520 <__aeabi_f2d>:
 8000520:	0042      	lsls	r2, r0, #1
 8000522:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000526:	ea4f 0131 	mov.w	r1, r1, rrx
 800052a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800052e:	bf1f      	itttt	ne
 8000530:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000534:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000538:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800053c:	4770      	bxne	lr
 800053e:	f092 0f00 	teq	r2, #0
 8000542:	bf14      	ite	ne
 8000544:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000548:	4770      	bxeq	lr
 800054a:	b530      	push	{r4, r5, lr}
 800054c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000550:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000554:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000558:	e720      	b.n	800039c <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_ul2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f04f 0500 	mov.w	r5, #0
 800056a:	e00a      	b.n	8000582 <__aeabi_l2d+0x16>

0800056c <__aeabi_l2d>:
 800056c:	ea50 0201 	orrs.w	r2, r0, r1
 8000570:	bf08      	it	eq
 8000572:	4770      	bxeq	lr
 8000574:	b530      	push	{r4, r5, lr}
 8000576:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800057a:	d502      	bpl.n	8000582 <__aeabi_l2d+0x16>
 800057c:	4240      	negs	r0, r0
 800057e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000582:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000586:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800058a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800058e:	f43f aedc 	beq.w	800034a <__adddf3+0xe6>
 8000592:	f04f 0203 	mov.w	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a2:	bf18      	it	ne
 80005a4:	3203      	addne	r2, #3
 80005a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005aa:	f1c2 0320 	rsb	r3, r2, #32
 80005ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80005b2:	fa20 f002 	lsr.w	r0, r0, r2
 80005b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ba:	ea40 000e 	orr.w	r0, r0, lr
 80005be:	fa21 f102 	lsr.w	r1, r1, r2
 80005c2:	4414      	add	r4, r2
 80005c4:	e6c1      	b.n	800034a <__adddf3+0xe6>
 80005c6:	bf00      	nop

080005c8 <__aeabi_dmul>:
 80005c8:	b570      	push	{r4, r5, r6, lr}
 80005ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005d6:	bf1d      	ittte	ne
 80005d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005dc:	ea94 0f0c 	teqne	r4, ip
 80005e0:	ea95 0f0c 	teqne	r5, ip
 80005e4:	f000 f8de 	bleq	80007a4 <__aeabi_dmul+0x1dc>
 80005e8:	442c      	add	r4, r5
 80005ea:	ea81 0603 	eor.w	r6, r1, r3
 80005ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005fa:	bf18      	it	ne
 80005fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000600:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000604:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000608:	d038      	beq.n	800067c <__aeabi_dmul+0xb4>
 800060a:	fba0 ce02 	umull	ip, lr, r0, r2
 800060e:	f04f 0500 	mov.w	r5, #0
 8000612:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000616:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800061a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800061e:	f04f 0600 	mov.w	r6, #0
 8000622:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000626:	f09c 0f00 	teq	ip, #0
 800062a:	bf18      	it	ne
 800062c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000630:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000634:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000638:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800063c:	d204      	bcs.n	8000648 <__aeabi_dmul+0x80>
 800063e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000642:	416d      	adcs	r5, r5
 8000644:	eb46 0606 	adc.w	r6, r6, r6
 8000648:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800064c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000650:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000654:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000658:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800065c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000660:	bf88      	it	hi
 8000662:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000666:	d81e      	bhi.n	80006a6 <__aeabi_dmul+0xde>
 8000668:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800066c:	bf08      	it	eq
 800066e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000672:	f150 0000 	adcs.w	r0, r0, #0
 8000676:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000680:	ea46 0101 	orr.w	r1, r6, r1
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	ea81 0103 	eor.w	r1, r1, r3
 800068c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000690:	bfc2      	ittt	gt
 8000692:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000696:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800069a:	bd70      	popgt	{r4, r5, r6, pc}
 800069c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a0:	f04f 0e00 	mov.w	lr, #0
 80006a4:	3c01      	subs	r4, #1
 80006a6:	f300 80ab 	bgt.w	8000800 <__aeabi_dmul+0x238>
 80006aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ae:	bfde      	ittt	le
 80006b0:	2000      	movle	r0, #0
 80006b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006b6:	bd70      	pople	{r4, r5, r6, pc}
 80006b8:	f1c4 0400 	rsb	r4, r4, #0
 80006bc:	3c20      	subs	r4, #32
 80006be:	da35      	bge.n	800072c <__aeabi_dmul+0x164>
 80006c0:	340c      	adds	r4, #12
 80006c2:	dc1b      	bgt.n	80006fc <__aeabi_dmul+0x134>
 80006c4:	f104 0414 	add.w	r4, r4, #20
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f305 	lsl.w	r3, r0, r5
 80006d0:	fa20 f004 	lsr.w	r0, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ec:	eb42 0106 	adc.w	r1, r2, r6
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 040c 	rsb	r4, r4, #12
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f304 	lsl.w	r3, r0, r4
 8000708:	fa20 f005 	lsr.w	r0, r0, r5
 800070c:	fa01 f204 	lsl.w	r2, r1, r4
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000718:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800071c:	f141 0100 	adc.w	r1, r1, #0
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f205 	lsl.w	r2, r0, r5
 8000734:	ea4e 0e02 	orr.w	lr, lr, r2
 8000738:	fa20 f304 	lsr.w	r3, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea43 0302 	orr.w	r3, r3, r2
 8000744:	fa21 f004 	lsr.w	r0, r1, r4
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800074c:	fa21 f204 	lsr.w	r2, r1, r4
 8000750:	ea20 0002 	bic.w	r0, r0, r2
 8000754:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f094 0f00 	teq	r4, #0
 8000768:	d10f      	bne.n	800078a <__aeabi_dmul+0x1c2>
 800076a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800076e:	0040      	lsls	r0, r0, #1
 8000770:	eb41 0101 	adc.w	r1, r1, r1
 8000774:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3c01      	subeq	r4, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1a6>
 800077e:	ea41 0106 	orr.w	r1, r1, r6
 8000782:	f095 0f00 	teq	r5, #0
 8000786:	bf18      	it	ne
 8000788:	4770      	bxne	lr
 800078a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800078e:	0052      	lsls	r2, r2, #1
 8000790:	eb43 0303 	adc.w	r3, r3, r3
 8000794:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3d01      	subeq	r5, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1c6>
 800079e:	ea43 0306 	orr.w	r3, r3, r6
 80007a2:	4770      	bx	lr
 80007a4:	ea94 0f0c 	teq	r4, ip
 80007a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ac:	bf18      	it	ne
 80007ae:	ea95 0f0c 	teqne	r5, ip
 80007b2:	d00c      	beq.n	80007ce <__aeabi_dmul+0x206>
 80007b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007be:	d1d1      	bne.n	8000764 <__aeabi_dmul+0x19c>
 80007c0:	ea81 0103 	eor.w	r1, r1, r3
 80007c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c8:	f04f 0000 	mov.w	r0, #0
 80007cc:	bd70      	pop	{r4, r5, r6, pc}
 80007ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d2:	bf06      	itte	eq
 80007d4:	4610      	moveq	r0, r2
 80007d6:	4619      	moveq	r1, r3
 80007d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007dc:	d019      	beq.n	8000812 <__aeabi_dmul+0x24a>
 80007de:	ea94 0f0c 	teq	r4, ip
 80007e2:	d102      	bne.n	80007ea <__aeabi_dmul+0x222>
 80007e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e8:	d113      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007ea:	ea95 0f0c 	teq	r5, ip
 80007ee:	d105      	bne.n	80007fc <__aeabi_dmul+0x234>
 80007f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f4:	bf1c      	itt	ne
 80007f6:	4610      	movne	r0, r2
 80007f8:	4619      	movne	r1, r3
 80007fa:	d10a      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007fc:	ea81 0103 	eor.w	r1, r1, r3
 8000800:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000804:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000808:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000816:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800081a:	bd70      	pop	{r4, r5, r6, pc}

0800081c <__aeabi_ddiv>:
 800081c:	b570      	push	{r4, r5, r6, lr}
 800081e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000822:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000826:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800082a:	bf1d      	ittte	ne
 800082c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000830:	ea94 0f0c 	teqne	r4, ip
 8000834:	ea95 0f0c 	teqne	r5, ip
 8000838:	f000 f8a7 	bleq	800098a <__aeabi_ddiv+0x16e>
 800083c:	eba4 0405 	sub.w	r4, r4, r5
 8000840:	ea81 0e03 	eor.w	lr, r1, r3
 8000844:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000848:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800084c:	f000 8088 	beq.w	8000960 <__aeabi_ddiv+0x144>
 8000850:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000854:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000858:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800085c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000860:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000864:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000868:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800086c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000870:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000874:	429d      	cmp	r5, r3
 8000876:	bf08      	it	eq
 8000878:	4296      	cmpeq	r6, r2
 800087a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800087e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000882:	d202      	bcs.n	800088a <__aeabi_ddiv+0x6e>
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	1ab6      	subs	r6, r6, r2
 800088c:	eb65 0503 	sbc.w	r5, r5, r3
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800089a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008fc:	d018      	beq.n	8000930 <__aeabi_ddiv+0x114>
 80008fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000902:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000906:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800090a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800090e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000912:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000916:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800091a:	d1c0      	bne.n	800089e <__aeabi_ddiv+0x82>
 800091c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000920:	d10b      	bne.n	800093a <__aeabi_ddiv+0x11e>
 8000922:	ea41 0100 	orr.w	r1, r1, r0
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800092e:	e7b6      	b.n	800089e <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000934:	bf04      	itt	eq
 8000936:	4301      	orreq	r1, r0
 8000938:	2000      	moveq	r0, #0
 800093a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800093e:	bf88      	it	hi
 8000940:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000944:	f63f aeaf 	bhi.w	80006a6 <__aeabi_dmul+0xde>
 8000948:	ebb5 0c03 	subs.w	ip, r5, r3
 800094c:	bf04      	itt	eq
 800094e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000952:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000956:	f150 0000 	adcs.w	r0, r0, #0
 800095a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800095e:	bd70      	pop	{r4, r5, r6, pc}
 8000960:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000964:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000968:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800096c:	bfc2      	ittt	gt
 800096e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000972:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000976:	bd70      	popgt	{r4, r5, r6, pc}
 8000978:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800097c:	f04f 0e00 	mov.w	lr, #0
 8000980:	3c01      	subs	r4, #1
 8000982:	e690      	b.n	80006a6 <__aeabi_dmul+0xde>
 8000984:	ea45 0e06 	orr.w	lr, r5, r6
 8000988:	e68d      	b.n	80006a6 <__aeabi_dmul+0xde>
 800098a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800098e:	ea94 0f0c 	teq	r4, ip
 8000992:	bf08      	it	eq
 8000994:	ea95 0f0c 	teqeq	r5, ip
 8000998:	f43f af3b 	beq.w	8000812 <__aeabi_dmul+0x24a>
 800099c:	ea94 0f0c 	teq	r4, ip
 80009a0:	d10a      	bne.n	80009b8 <__aeabi_ddiv+0x19c>
 80009a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009a6:	f47f af34 	bne.w	8000812 <__aeabi_dmul+0x24a>
 80009aa:	ea95 0f0c 	teq	r5, ip
 80009ae:	f47f af25 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009b2:	4610      	mov	r0, r2
 80009b4:	4619      	mov	r1, r3
 80009b6:	e72c      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009b8:	ea95 0f0c 	teq	r5, ip
 80009bc:	d106      	bne.n	80009cc <__aeabi_ddiv+0x1b0>
 80009be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009c2:	f43f aefd 	beq.w	80007c0 <__aeabi_dmul+0x1f8>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e722      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009d6:	f47f aec5 	bne.w	8000764 <__aeabi_dmul+0x19c>
 80009da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009de:	f47f af0d 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009e6:	f47f aeeb 	bne.w	80007c0 <__aeabi_dmul+0x1f8>
 80009ea:	e712      	b.n	8000812 <__aeabi_dmul+0x24a>

080009ec <__gedf2>:
 80009ec:	f04f 3cff 	mov.w	ip, #4294967295
 80009f0:	e006      	b.n	8000a00 <__cmpdf2+0x4>
 80009f2:	bf00      	nop

080009f4 <__ledf2>:
 80009f4:	f04f 0c01 	mov.w	ip, #1
 80009f8:	e002      	b.n	8000a00 <__cmpdf2+0x4>
 80009fa:	bf00      	nop

080009fc <__cmpdf2>:
 80009fc:	f04f 0c01 	mov.w	ip, #1
 8000a00:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a16:	d01b      	beq.n	8000a50 <__cmpdf2+0x54>
 8000a18:	b001      	add	sp, #4
 8000a1a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a1e:	bf0c      	ite	eq
 8000a20:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a24:	ea91 0f03 	teqne	r1, r3
 8000a28:	bf02      	ittt	eq
 8000a2a:	ea90 0f02 	teqeq	r0, r2
 8000a2e:	2000      	moveq	r0, #0
 8000a30:	4770      	bxeq	lr
 8000a32:	f110 0f00 	cmn.w	r0, #0
 8000a36:	ea91 0f03 	teq	r1, r3
 8000a3a:	bf58      	it	pl
 8000a3c:	4299      	cmppl	r1, r3
 8000a3e:	bf08      	it	eq
 8000a40:	4290      	cmpeq	r0, r2
 8000a42:	bf2c      	ite	cs
 8000a44:	17d8      	asrcs	r0, r3, #31
 8000a46:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a4a:	f040 0001 	orr.w	r0, r0, #1
 8000a4e:	4770      	bx	lr
 8000a50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__cmpdf2+0x64>
 8000a5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5e:	d107      	bne.n	8000a70 <__cmpdf2+0x74>
 8000a60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a68:	d1d6      	bne.n	8000a18 <__cmpdf2+0x1c>
 8000a6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6e:	d0d3      	beq.n	8000a18 <__cmpdf2+0x1c>
 8000a70:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdrcmple>:
 8000a78:	4684      	mov	ip, r0
 8000a7a:	4610      	mov	r0, r2
 8000a7c:	4662      	mov	r2, ip
 8000a7e:	468c      	mov	ip, r1
 8000a80:	4619      	mov	r1, r3
 8000a82:	4663      	mov	r3, ip
 8000a84:	e000      	b.n	8000a88 <__aeabi_cdcmpeq>
 8000a86:	bf00      	nop

08000a88 <__aeabi_cdcmpeq>:
 8000a88:	b501      	push	{r0, lr}
 8000a8a:	f7ff ffb7 	bl	80009fc <__cmpdf2>
 8000a8e:	2800      	cmp	r0, #0
 8000a90:	bf48      	it	mi
 8000a92:	f110 0f00 	cmnmi.w	r0, #0
 8000a96:	bd01      	pop	{r0, pc}

08000a98 <__aeabi_dcmpeq>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff fff4 	bl	8000a88 <__aeabi_cdcmpeq>
 8000aa0:	bf0c      	ite	eq
 8000aa2:	2001      	moveq	r0, #1
 8000aa4:	2000      	movne	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmplt>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffea 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ab4:	bf34      	ite	cc
 8000ab6:	2001      	movcc	r0, #1
 8000ab8:	2000      	movcs	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmple>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffe0 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ac8:	bf94      	ite	ls
 8000aca:	2001      	movls	r0, #1
 8000acc:	2000      	movhi	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpge>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffce 	bl	8000a78 <__aeabi_cdrcmple>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmpgt>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffc4 	bl	8000a78 <__aeabi_cdrcmple>
 8000af0:	bf34      	ite	cc
 8000af2:	2001      	movcc	r0, #1
 8000af4:	2000      	movcs	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpun>:
 8000afc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x10>
 8000b06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b0a:	d10a      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b14:	d102      	bne.n	8000b1c <__aeabi_dcmpun+0x20>
 8000b16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b1a:	d102      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	f04f 0001 	mov.w	r0, #1
 8000b26:	4770      	bx	lr

08000b28 <__aeabi_d2iz>:
 8000b28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b30:	d215      	bcs.n	8000b5e <__aeabi_d2iz+0x36>
 8000b32:	d511      	bpl.n	8000b58 <__aeabi_d2iz+0x30>
 8000b34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b3c:	d912      	bls.n	8000b64 <__aeabi_d2iz+0x3c>
 8000b3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	bf18      	it	ne
 8000b54:	4240      	negne	r0, r0
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b62:	d105      	bne.n	8000b70 <__aeabi_d2iz+0x48>
 8000b64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b68:	bf08      	it	eq
 8000b6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <__aeabi_frsub>:
 8000b78:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b7c:	e002      	b.n	8000b84 <__addsf3>
 8000b7e:	bf00      	nop

08000b80 <__aeabi_fsub>:
 8000b80:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b84 <__addsf3>:
 8000b84:	0042      	lsls	r2, r0, #1
 8000b86:	bf1f      	itttt	ne
 8000b88:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b8c:	ea92 0f03 	teqne	r2, r3
 8000b90:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b94:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b98:	d06a      	beq.n	8000c70 <__addsf3+0xec>
 8000b9a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b9e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ba2:	bfc1      	itttt	gt
 8000ba4:	18d2      	addgt	r2, r2, r3
 8000ba6:	4041      	eorgt	r1, r0
 8000ba8:	4048      	eorgt	r0, r1
 8000baa:	4041      	eorgt	r1, r0
 8000bac:	bfb8      	it	lt
 8000bae:	425b      	neglt	r3, r3
 8000bb0:	2b19      	cmp	r3, #25
 8000bb2:	bf88      	it	hi
 8000bb4:	4770      	bxhi	lr
 8000bb6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bbe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bca:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bce:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bd2:	bf18      	it	ne
 8000bd4:	4249      	negne	r1, r1
 8000bd6:	ea92 0f03 	teq	r2, r3
 8000bda:	d03f      	beq.n	8000c5c <__addsf3+0xd8>
 8000bdc:	f1a2 0201 	sub.w	r2, r2, #1
 8000be0:	fa41 fc03 	asr.w	ip, r1, r3
 8000be4:	eb10 000c 	adds.w	r0, r0, ip
 8000be8:	f1c3 0320 	rsb	r3, r3, #32
 8000bec:	fa01 f103 	lsl.w	r1, r1, r3
 8000bf0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bf4:	d502      	bpl.n	8000bfc <__addsf3+0x78>
 8000bf6:	4249      	negs	r1, r1
 8000bf8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bfc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c00:	d313      	bcc.n	8000c2a <__addsf3+0xa6>
 8000c02:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c06:	d306      	bcc.n	8000c16 <__addsf3+0x92>
 8000c08:	0840      	lsrs	r0, r0, #1
 8000c0a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c0e:	f102 0201 	add.w	r2, r2, #1
 8000c12:	2afe      	cmp	r2, #254	; 0xfe
 8000c14:	d251      	bcs.n	8000cba <__addsf3+0x136>
 8000c16:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c1a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c1e:	bf08      	it	eq
 8000c20:	f020 0001 	biceq.w	r0, r0, #1
 8000c24:	ea40 0003 	orr.w	r0, r0, r3
 8000c28:	4770      	bx	lr
 8000c2a:	0049      	lsls	r1, r1, #1
 8000c2c:	eb40 0000 	adc.w	r0, r0, r0
 8000c30:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c34:	f1a2 0201 	sub.w	r2, r2, #1
 8000c38:	d1ed      	bne.n	8000c16 <__addsf3+0x92>
 8000c3a:	fab0 fc80 	clz	ip, r0
 8000c3e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c42:	ebb2 020c 	subs.w	r2, r2, ip
 8000c46:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c4a:	bfaa      	itet	ge
 8000c4c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c50:	4252      	neglt	r2, r2
 8000c52:	4318      	orrge	r0, r3
 8000c54:	bfbc      	itt	lt
 8000c56:	40d0      	lsrlt	r0, r2
 8000c58:	4318      	orrlt	r0, r3
 8000c5a:	4770      	bx	lr
 8000c5c:	f092 0f00 	teq	r2, #0
 8000c60:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c64:	bf06      	itte	eq
 8000c66:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c6a:	3201      	addeq	r2, #1
 8000c6c:	3b01      	subne	r3, #1
 8000c6e:	e7b5      	b.n	8000bdc <__addsf3+0x58>
 8000c70:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c74:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c78:	bf18      	it	ne
 8000c7a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c7e:	d021      	beq.n	8000cc4 <__addsf3+0x140>
 8000c80:	ea92 0f03 	teq	r2, r3
 8000c84:	d004      	beq.n	8000c90 <__addsf3+0x10c>
 8000c86:	f092 0f00 	teq	r2, #0
 8000c8a:	bf08      	it	eq
 8000c8c:	4608      	moveq	r0, r1
 8000c8e:	4770      	bx	lr
 8000c90:	ea90 0f01 	teq	r0, r1
 8000c94:	bf1c      	itt	ne
 8000c96:	2000      	movne	r0, #0
 8000c98:	4770      	bxne	lr
 8000c9a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c9e:	d104      	bne.n	8000caa <__addsf3+0x126>
 8000ca0:	0040      	lsls	r0, r0, #1
 8000ca2:	bf28      	it	cs
 8000ca4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ca8:	4770      	bx	lr
 8000caa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cae:	bf3c      	itt	cc
 8000cb0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bxcc	lr
 8000cb6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cba:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc2:	4770      	bx	lr
 8000cc4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cc8:	bf16      	itet	ne
 8000cca:	4608      	movne	r0, r1
 8000ccc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cd0:	4601      	movne	r1, r0
 8000cd2:	0242      	lsls	r2, r0, #9
 8000cd4:	bf06      	itte	eq
 8000cd6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cda:	ea90 0f01 	teqeq	r0, r1
 8000cde:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_ui2f>:
 8000ce4:	f04f 0300 	mov.w	r3, #0
 8000ce8:	e004      	b.n	8000cf4 <__aeabi_i2f+0x8>
 8000cea:	bf00      	nop

08000cec <__aeabi_i2f>:
 8000cec:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cf0:	bf48      	it	mi
 8000cf2:	4240      	negmi	r0, r0
 8000cf4:	ea5f 0c00 	movs.w	ip, r0
 8000cf8:	bf08      	it	eq
 8000cfa:	4770      	bxeq	lr
 8000cfc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d00:	4601      	mov	r1, r0
 8000d02:	f04f 0000 	mov.w	r0, #0
 8000d06:	e01c      	b.n	8000d42 <__aeabi_l2f+0x2a>

08000d08 <__aeabi_ul2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f04f 0300 	mov.w	r3, #0
 8000d14:	e00a      	b.n	8000d2c <__aeabi_l2f+0x14>
 8000d16:	bf00      	nop

08000d18 <__aeabi_l2f>:
 8000d18:	ea50 0201 	orrs.w	r2, r0, r1
 8000d1c:	bf08      	it	eq
 8000d1e:	4770      	bxeq	lr
 8000d20:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d24:	d502      	bpl.n	8000d2c <__aeabi_l2f+0x14>
 8000d26:	4240      	negs	r0, r0
 8000d28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d2c:	ea5f 0c01 	movs.w	ip, r1
 8000d30:	bf02      	ittt	eq
 8000d32:	4684      	moveq	ip, r0
 8000d34:	4601      	moveq	r1, r0
 8000d36:	2000      	moveq	r0, #0
 8000d38:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d3c:	bf08      	it	eq
 8000d3e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d42:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d46:	fabc f28c 	clz	r2, ip
 8000d4a:	3a08      	subs	r2, #8
 8000d4c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d50:	db10      	blt.n	8000d74 <__aeabi_l2f+0x5c>
 8000d52:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d56:	4463      	add	r3, ip
 8000d58:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d5c:	f1c2 0220 	rsb	r2, r2, #32
 8000d60:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d64:	fa20 f202 	lsr.w	r2, r0, r2
 8000d68:	eb43 0002 	adc.w	r0, r3, r2
 8000d6c:	bf08      	it	eq
 8000d6e:	f020 0001 	biceq.w	r0, r0, #1
 8000d72:	4770      	bx	lr
 8000d74:	f102 0220 	add.w	r2, r2, #32
 8000d78:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d7c:	f1c2 0220 	rsb	r2, r2, #32
 8000d80:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d84:	fa21 f202 	lsr.w	r2, r1, r2
 8000d88:	eb43 0002 	adc.w	r0, r3, r2
 8000d8c:	bf08      	it	eq
 8000d8e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d92:	4770      	bx	lr

08000d94 <__aeabi_fmul>:
 8000d94:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d98:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d9c:	bf1e      	ittt	ne
 8000d9e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000da2:	ea92 0f0c 	teqne	r2, ip
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d06f      	beq.n	8000e8c <__aeabi_fmul+0xf8>
 8000dac:	441a      	add	r2, r3
 8000dae:	ea80 0c01 	eor.w	ip, r0, r1
 8000db2:	0240      	lsls	r0, r0, #9
 8000db4:	bf18      	it	ne
 8000db6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dba:	d01e      	beq.n	8000dfa <__aeabi_fmul+0x66>
 8000dbc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000dc0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dc4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dc8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dcc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dd0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dd4:	bf3e      	ittt	cc
 8000dd6:	0049      	lslcc	r1, r1, #1
 8000dd8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000ddc:	005b      	lslcc	r3, r3, #1
 8000dde:	ea40 0001 	orr.w	r0, r0, r1
 8000de2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000de6:	2afd      	cmp	r2, #253	; 0xfd
 8000de8:	d81d      	bhi.n	8000e26 <__aeabi_fmul+0x92>
 8000dea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000df2:	bf08      	it	eq
 8000df4:	f020 0001 	biceq.w	r0, r0, #1
 8000df8:	4770      	bx	lr
 8000dfa:	f090 0f00 	teq	r0, #0
 8000dfe:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e02:	bf08      	it	eq
 8000e04:	0249      	lsleq	r1, r1, #9
 8000e06:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e0a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e0e:	3a7f      	subs	r2, #127	; 0x7f
 8000e10:	bfc2      	ittt	gt
 8000e12:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e16:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e1a:	4770      	bxgt	lr
 8000e1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e20:	f04f 0300 	mov.w	r3, #0
 8000e24:	3a01      	subs	r2, #1
 8000e26:	dc5d      	bgt.n	8000ee4 <__aeabi_fmul+0x150>
 8000e28:	f112 0f19 	cmn.w	r2, #25
 8000e2c:	bfdc      	itt	le
 8000e2e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e32:	4770      	bxle	lr
 8000e34:	f1c2 0200 	rsb	r2, r2, #0
 8000e38:	0041      	lsls	r1, r0, #1
 8000e3a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e3e:	f1c2 0220 	rsb	r2, r2, #32
 8000e42:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e46:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e4a:	f140 0000 	adc.w	r0, r0, #0
 8000e4e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e52:	bf08      	it	eq
 8000e54:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e58:	4770      	bx	lr
 8000e5a:	f092 0f00 	teq	r2, #0
 8000e5e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e62:	bf02      	ittt	eq
 8000e64:	0040      	lsleq	r0, r0, #1
 8000e66:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e6a:	3a01      	subeq	r2, #1
 8000e6c:	d0f9      	beq.n	8000e62 <__aeabi_fmul+0xce>
 8000e6e:	ea40 000c 	orr.w	r0, r0, ip
 8000e72:	f093 0f00 	teq	r3, #0
 8000e76:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e7a:	bf02      	ittt	eq
 8000e7c:	0049      	lsleq	r1, r1, #1
 8000e7e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e82:	3b01      	subeq	r3, #1
 8000e84:	d0f9      	beq.n	8000e7a <__aeabi_fmul+0xe6>
 8000e86:	ea41 010c 	orr.w	r1, r1, ip
 8000e8a:	e78f      	b.n	8000dac <__aeabi_fmul+0x18>
 8000e8c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e90:	ea92 0f0c 	teq	r2, ip
 8000e94:	bf18      	it	ne
 8000e96:	ea93 0f0c 	teqne	r3, ip
 8000e9a:	d00a      	beq.n	8000eb2 <__aeabi_fmul+0x11e>
 8000e9c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ea0:	bf18      	it	ne
 8000ea2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ea6:	d1d8      	bne.n	8000e5a <__aeabi_fmul+0xc6>
 8000ea8:	ea80 0001 	eor.w	r0, r0, r1
 8000eac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eb0:	4770      	bx	lr
 8000eb2:	f090 0f00 	teq	r0, #0
 8000eb6:	bf17      	itett	ne
 8000eb8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ebc:	4608      	moveq	r0, r1
 8000ebe:	f091 0f00 	teqne	r1, #0
 8000ec2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ec6:	d014      	beq.n	8000ef2 <__aeabi_fmul+0x15e>
 8000ec8:	ea92 0f0c 	teq	r2, ip
 8000ecc:	d101      	bne.n	8000ed2 <__aeabi_fmul+0x13e>
 8000ece:	0242      	lsls	r2, r0, #9
 8000ed0:	d10f      	bne.n	8000ef2 <__aeabi_fmul+0x15e>
 8000ed2:	ea93 0f0c 	teq	r3, ip
 8000ed6:	d103      	bne.n	8000ee0 <__aeabi_fmul+0x14c>
 8000ed8:	024b      	lsls	r3, r1, #9
 8000eda:	bf18      	it	ne
 8000edc:	4608      	movne	r0, r1
 8000ede:	d108      	bne.n	8000ef2 <__aeabi_fmul+0x15e>
 8000ee0:	ea80 0001 	eor.w	r0, r0, r1
 8000ee4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ee8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000eec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ef0:	4770      	bx	lr
 8000ef2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ef6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000efa:	4770      	bx	lr

08000efc <__aeabi_fdiv>:
 8000efc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f00:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f04:	bf1e      	ittt	ne
 8000f06:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f0a:	ea92 0f0c 	teqne	r2, ip
 8000f0e:	ea93 0f0c 	teqne	r3, ip
 8000f12:	d069      	beq.n	8000fe8 <__aeabi_fdiv+0xec>
 8000f14:	eba2 0203 	sub.w	r2, r2, r3
 8000f18:	ea80 0c01 	eor.w	ip, r0, r1
 8000f1c:	0249      	lsls	r1, r1, #9
 8000f1e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f22:	d037      	beq.n	8000f94 <__aeabi_fdiv+0x98>
 8000f24:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f28:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f2c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f30:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f34:	428b      	cmp	r3, r1
 8000f36:	bf38      	it	cc
 8000f38:	005b      	lslcc	r3, r3, #1
 8000f3a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f3e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f42:	428b      	cmp	r3, r1
 8000f44:	bf24      	itt	cs
 8000f46:	1a5b      	subcs	r3, r3, r1
 8000f48:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f4c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f50:	bf24      	itt	cs
 8000f52:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f56:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f5a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f5e:	bf24      	itt	cs
 8000f60:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f64:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f68:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f6c:	bf24      	itt	cs
 8000f6e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f72:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f76:	011b      	lsls	r3, r3, #4
 8000f78:	bf18      	it	ne
 8000f7a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f7e:	d1e0      	bne.n	8000f42 <__aeabi_fdiv+0x46>
 8000f80:	2afd      	cmp	r2, #253	; 0xfd
 8000f82:	f63f af50 	bhi.w	8000e26 <__aeabi_fmul+0x92>
 8000f86:	428b      	cmp	r3, r1
 8000f88:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f8c:	bf08      	it	eq
 8000f8e:	f020 0001 	biceq.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f98:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f9c:	327f      	adds	r2, #127	; 0x7f
 8000f9e:	bfc2      	ittt	gt
 8000fa0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fa4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fa8:	4770      	bxgt	lr
 8000faa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fae:	f04f 0300 	mov.w	r3, #0
 8000fb2:	3a01      	subs	r2, #1
 8000fb4:	e737      	b.n	8000e26 <__aeabi_fmul+0x92>
 8000fb6:	f092 0f00 	teq	r2, #0
 8000fba:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fbe:	bf02      	ittt	eq
 8000fc0:	0040      	lsleq	r0, r0, #1
 8000fc2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fc6:	3a01      	subeq	r2, #1
 8000fc8:	d0f9      	beq.n	8000fbe <__aeabi_fdiv+0xc2>
 8000fca:	ea40 000c 	orr.w	r0, r0, ip
 8000fce:	f093 0f00 	teq	r3, #0
 8000fd2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fd6:	bf02      	ittt	eq
 8000fd8:	0049      	lsleq	r1, r1, #1
 8000fda:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fde:	3b01      	subeq	r3, #1
 8000fe0:	d0f9      	beq.n	8000fd6 <__aeabi_fdiv+0xda>
 8000fe2:	ea41 010c 	orr.w	r1, r1, ip
 8000fe6:	e795      	b.n	8000f14 <__aeabi_fdiv+0x18>
 8000fe8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fec:	ea92 0f0c 	teq	r2, ip
 8000ff0:	d108      	bne.n	8001004 <__aeabi_fdiv+0x108>
 8000ff2:	0242      	lsls	r2, r0, #9
 8000ff4:	f47f af7d 	bne.w	8000ef2 <__aeabi_fmul+0x15e>
 8000ff8:	ea93 0f0c 	teq	r3, ip
 8000ffc:	f47f af70 	bne.w	8000ee0 <__aeabi_fmul+0x14c>
 8001000:	4608      	mov	r0, r1
 8001002:	e776      	b.n	8000ef2 <__aeabi_fmul+0x15e>
 8001004:	ea93 0f0c 	teq	r3, ip
 8001008:	d104      	bne.n	8001014 <__aeabi_fdiv+0x118>
 800100a:	024b      	lsls	r3, r1, #9
 800100c:	f43f af4c 	beq.w	8000ea8 <__aeabi_fmul+0x114>
 8001010:	4608      	mov	r0, r1
 8001012:	e76e      	b.n	8000ef2 <__aeabi_fmul+0x15e>
 8001014:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001018:	bf18      	it	ne
 800101a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800101e:	d1ca      	bne.n	8000fb6 <__aeabi_fdiv+0xba>
 8001020:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001024:	f47f af5c 	bne.w	8000ee0 <__aeabi_fmul+0x14c>
 8001028:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800102c:	f47f af3c 	bne.w	8000ea8 <__aeabi_fmul+0x114>
 8001030:	e75f      	b.n	8000ef2 <__aeabi_fmul+0x15e>
 8001032:	bf00      	nop

08001034 <__gesf2>:
 8001034:	f04f 3cff 	mov.w	ip, #4294967295
 8001038:	e006      	b.n	8001048 <__cmpsf2+0x4>
 800103a:	bf00      	nop

0800103c <__lesf2>:
 800103c:	f04f 0c01 	mov.w	ip, #1
 8001040:	e002      	b.n	8001048 <__cmpsf2+0x4>
 8001042:	bf00      	nop

08001044 <__cmpsf2>:
 8001044:	f04f 0c01 	mov.w	ip, #1
 8001048:	f84d cd04 	str.w	ip, [sp, #-4]!
 800104c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001050:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001054:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001058:	bf18      	it	ne
 800105a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800105e:	d011      	beq.n	8001084 <__cmpsf2+0x40>
 8001060:	b001      	add	sp, #4
 8001062:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001066:	bf18      	it	ne
 8001068:	ea90 0f01 	teqne	r0, r1
 800106c:	bf58      	it	pl
 800106e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001072:	bf88      	it	hi
 8001074:	17c8      	asrhi	r0, r1, #31
 8001076:	bf38      	it	cc
 8001078:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800107c:	bf18      	it	ne
 800107e:	f040 0001 	orrne.w	r0, r0, #1
 8001082:	4770      	bx	lr
 8001084:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001088:	d102      	bne.n	8001090 <__cmpsf2+0x4c>
 800108a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800108e:	d105      	bne.n	800109c <__cmpsf2+0x58>
 8001090:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001094:	d1e4      	bne.n	8001060 <__cmpsf2+0x1c>
 8001096:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800109a:	d0e1      	beq.n	8001060 <__cmpsf2+0x1c>
 800109c:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop

080010a4 <__aeabi_cfrcmple>:
 80010a4:	4684      	mov	ip, r0
 80010a6:	4608      	mov	r0, r1
 80010a8:	4661      	mov	r1, ip
 80010aa:	e7ff      	b.n	80010ac <__aeabi_cfcmpeq>

080010ac <__aeabi_cfcmpeq>:
 80010ac:	b50f      	push	{r0, r1, r2, r3, lr}
 80010ae:	f7ff ffc9 	bl	8001044 <__cmpsf2>
 80010b2:	2800      	cmp	r0, #0
 80010b4:	bf48      	it	mi
 80010b6:	f110 0f00 	cmnmi.w	r0, #0
 80010ba:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010bc <__aeabi_fcmpeq>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff fff4 	bl	80010ac <__aeabi_cfcmpeq>
 80010c4:	bf0c      	ite	eq
 80010c6:	2001      	moveq	r0, #1
 80010c8:	2000      	movne	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_fcmplt>:
 80010d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d4:	f7ff ffea 	bl	80010ac <__aeabi_cfcmpeq>
 80010d8:	bf34      	ite	cc
 80010da:	2001      	movcc	r0, #1
 80010dc:	2000      	movcs	r0, #0
 80010de:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e2:	bf00      	nop

080010e4 <__aeabi_fcmple>:
 80010e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e8:	f7ff ffe0 	bl	80010ac <__aeabi_cfcmpeq>
 80010ec:	bf94      	ite	ls
 80010ee:	2001      	movls	r0, #1
 80010f0:	2000      	movhi	r0, #0
 80010f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010f6:	bf00      	nop

080010f8 <__aeabi_fcmpge>:
 80010f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010fc:	f7ff ffd2 	bl	80010a4 <__aeabi_cfrcmple>
 8001100:	bf94      	ite	ls
 8001102:	2001      	movls	r0, #1
 8001104:	2000      	movhi	r0, #0
 8001106:	f85d fb08 	ldr.w	pc, [sp], #8
 800110a:	bf00      	nop

0800110c <__aeabi_fcmpgt>:
 800110c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001110:	f7ff ffc8 	bl	80010a4 <__aeabi_cfrcmple>
 8001114:	bf34      	ite	cc
 8001116:	2001      	movcc	r0, #1
 8001118:	2000      	movcs	r0, #0
 800111a:	f85d fb08 	ldr.w	pc, [sp], #8
 800111e:	bf00      	nop

08001120 <__aeabi_f2iz>:
 8001120:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001124:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001128:	d30f      	bcc.n	800114a <__aeabi_f2iz+0x2a>
 800112a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800112e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001132:	d90d      	bls.n	8001150 <__aeabi_f2iz+0x30>
 8001134:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001138:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800113c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001140:	fa23 f002 	lsr.w	r0, r3, r2
 8001144:	bf18      	it	ne
 8001146:	4240      	negne	r0, r0
 8001148:	4770      	bx	lr
 800114a:	f04f 0000 	mov.w	r0, #0
 800114e:	4770      	bx	lr
 8001150:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001154:	d101      	bne.n	800115a <__aeabi_f2iz+0x3a>
 8001156:	0242      	lsls	r2, r0, #9
 8001158:	d105      	bne.n	8001166 <__aeabi_f2iz+0x46>
 800115a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800115e:	bf08      	it	eq
 8001160:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001164:	4770      	bx	lr
 8001166:	f04f 0000 	mov.w	r0, #0
 800116a:	4770      	bx	lr

0800116c <__aeabi_uldivmod>:
 800116c:	b953      	cbnz	r3, 8001184 <__aeabi_uldivmod+0x18>
 800116e:	b94a      	cbnz	r2, 8001184 <__aeabi_uldivmod+0x18>
 8001170:	2900      	cmp	r1, #0
 8001172:	bf08      	it	eq
 8001174:	2800      	cmpeq	r0, #0
 8001176:	bf1c      	itt	ne
 8001178:	f04f 31ff 	movne.w	r1, #4294967295
 800117c:	f04f 30ff 	movne.w	r0, #4294967295
 8001180:	f000 b97a 	b.w	8001478 <__aeabi_idiv0>
 8001184:	f1ad 0c08 	sub.w	ip, sp, #8
 8001188:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800118c:	f000 f806 	bl	800119c <__udivmoddi4>
 8001190:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001194:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001198:	b004      	add	sp, #16
 800119a:	4770      	bx	lr

0800119c <__udivmoddi4>:
 800119c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011a0:	468c      	mov	ip, r1
 80011a2:	460e      	mov	r6, r1
 80011a4:	4604      	mov	r4, r0
 80011a6:	9d08      	ldr	r5, [sp, #32]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d150      	bne.n	800124e <__udivmoddi4+0xb2>
 80011ac:	428a      	cmp	r2, r1
 80011ae:	4617      	mov	r7, r2
 80011b0:	d96c      	bls.n	800128c <__udivmoddi4+0xf0>
 80011b2:	fab2 fe82 	clz	lr, r2
 80011b6:	f1be 0f00 	cmp.w	lr, #0
 80011ba:	d00b      	beq.n	80011d4 <__udivmoddi4+0x38>
 80011bc:	f1ce 0c20 	rsb	ip, lr, #32
 80011c0:	fa01 f60e 	lsl.w	r6, r1, lr
 80011c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80011c8:	fa02 f70e 	lsl.w	r7, r2, lr
 80011cc:	ea4c 0c06 	orr.w	ip, ip, r6
 80011d0:	fa00 f40e 	lsl.w	r4, r0, lr
 80011d4:	0c3a      	lsrs	r2, r7, #16
 80011d6:	fbbc f9f2 	udiv	r9, ip, r2
 80011da:	b2bb      	uxth	r3, r7
 80011dc:	fb02 cc19 	mls	ip, r2, r9, ip
 80011e0:	fb09 fa03 	mul.w	sl, r9, r3
 80011e4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80011e8:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
 80011ec:	45b2      	cmp	sl, r6
 80011ee:	d90a      	bls.n	8001206 <__udivmoddi4+0x6a>
 80011f0:	19f6      	adds	r6, r6, r7
 80011f2:	f109 31ff 	add.w	r1, r9, #4294967295
 80011f6:	f080 8125 	bcs.w	8001444 <__udivmoddi4+0x2a8>
 80011fa:	45b2      	cmp	sl, r6
 80011fc:	f240 8122 	bls.w	8001444 <__udivmoddi4+0x2a8>
 8001200:	f1a9 0902 	sub.w	r9, r9, #2
 8001204:	443e      	add	r6, r7
 8001206:	eba6 060a 	sub.w	r6, r6, sl
 800120a:	fbb6 f0f2 	udiv	r0, r6, r2
 800120e:	fb02 6610 	mls	r6, r2, r0, r6
 8001212:	fb00 f303 	mul.w	r3, r0, r3
 8001216:	b2a4      	uxth	r4, r4
 8001218:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 800121c:	42a3      	cmp	r3, r4
 800121e:	d909      	bls.n	8001234 <__udivmoddi4+0x98>
 8001220:	19e4      	adds	r4, r4, r7
 8001222:	f100 32ff 	add.w	r2, r0, #4294967295
 8001226:	f080 810b 	bcs.w	8001440 <__udivmoddi4+0x2a4>
 800122a:	42a3      	cmp	r3, r4
 800122c:	f240 8108 	bls.w	8001440 <__udivmoddi4+0x2a4>
 8001230:	3802      	subs	r0, #2
 8001232:	443c      	add	r4, r7
 8001234:	2100      	movs	r1, #0
 8001236:	1ae4      	subs	r4, r4, r3
 8001238:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800123c:	2d00      	cmp	r5, #0
 800123e:	d062      	beq.n	8001306 <__udivmoddi4+0x16a>
 8001240:	2300      	movs	r3, #0
 8001242:	fa24 f40e 	lsr.w	r4, r4, lr
 8001246:	602c      	str	r4, [r5, #0]
 8001248:	606b      	str	r3, [r5, #4]
 800124a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800124e:	428b      	cmp	r3, r1
 8001250:	d907      	bls.n	8001262 <__udivmoddi4+0xc6>
 8001252:	2d00      	cmp	r5, #0
 8001254:	d055      	beq.n	8001302 <__udivmoddi4+0x166>
 8001256:	2100      	movs	r1, #0
 8001258:	e885 0041 	stmia.w	r5, {r0, r6}
 800125c:	4608      	mov	r0, r1
 800125e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001262:	fab3 f183 	clz	r1, r3
 8001266:	2900      	cmp	r1, #0
 8001268:	f040 808f 	bne.w	800138a <__udivmoddi4+0x1ee>
 800126c:	42b3      	cmp	r3, r6
 800126e:	d302      	bcc.n	8001276 <__udivmoddi4+0xda>
 8001270:	4282      	cmp	r2, r0
 8001272:	f200 80fc 	bhi.w	800146e <__udivmoddi4+0x2d2>
 8001276:	1a84      	subs	r4, r0, r2
 8001278:	eb66 0603 	sbc.w	r6, r6, r3
 800127c:	2001      	movs	r0, #1
 800127e:	46b4      	mov	ip, r6
 8001280:	2d00      	cmp	r5, #0
 8001282:	d040      	beq.n	8001306 <__udivmoddi4+0x16a>
 8001284:	e885 1010 	stmia.w	r5, {r4, ip}
 8001288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800128c:	b912      	cbnz	r2, 8001294 <__udivmoddi4+0xf8>
 800128e:	2701      	movs	r7, #1
 8001290:	fbb7 f7f2 	udiv	r7, r7, r2
 8001294:	fab7 fe87 	clz	lr, r7
 8001298:	f1be 0f00 	cmp.w	lr, #0
 800129c:	d135      	bne.n	800130a <__udivmoddi4+0x16e>
 800129e:	2101      	movs	r1, #1
 80012a0:	1bf6      	subs	r6, r6, r7
 80012a2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80012a6:	fa1f f887 	uxth.w	r8, r7
 80012aa:	fbb6 f2fc 	udiv	r2, r6, ip
 80012ae:	fb0c 6612 	mls	r6, ip, r2, r6
 80012b2:	fb08 f002 	mul.w	r0, r8, r2
 80012b6:	0c23      	lsrs	r3, r4, #16
 80012b8:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
 80012bc:	42b0      	cmp	r0, r6
 80012be:	d907      	bls.n	80012d0 <__udivmoddi4+0x134>
 80012c0:	19f6      	adds	r6, r6, r7
 80012c2:	f102 33ff 	add.w	r3, r2, #4294967295
 80012c6:	d202      	bcs.n	80012ce <__udivmoddi4+0x132>
 80012c8:	42b0      	cmp	r0, r6
 80012ca:	f200 80d2 	bhi.w	8001472 <__udivmoddi4+0x2d6>
 80012ce:	461a      	mov	r2, r3
 80012d0:	1a36      	subs	r6, r6, r0
 80012d2:	fbb6 f0fc 	udiv	r0, r6, ip
 80012d6:	fb0c 6610 	mls	r6, ip, r0, r6
 80012da:	fb08 f800 	mul.w	r8, r8, r0
 80012de:	b2a3      	uxth	r3, r4
 80012e0:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
 80012e4:	45a0      	cmp	r8, r4
 80012e6:	d907      	bls.n	80012f8 <__udivmoddi4+0x15c>
 80012e8:	19e4      	adds	r4, r4, r7
 80012ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80012ee:	d202      	bcs.n	80012f6 <__udivmoddi4+0x15a>
 80012f0:	45a0      	cmp	r8, r4
 80012f2:	f200 80b9 	bhi.w	8001468 <__udivmoddi4+0x2cc>
 80012f6:	4618      	mov	r0, r3
 80012f8:	eba4 0408 	sub.w	r4, r4, r8
 80012fc:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8001300:	e79c      	b.n	800123c <__udivmoddi4+0xa0>
 8001302:	4629      	mov	r1, r5
 8001304:	4628      	mov	r0, r5
 8001306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800130a:	fa07 f70e 	lsl.w	r7, r7, lr
 800130e:	f1ce 0320 	rsb	r3, lr, #32
 8001312:	fa26 f203 	lsr.w	r2, r6, r3
 8001316:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800131a:	fbb2 f1fc 	udiv	r1, r2, ip
 800131e:	fa1f f887 	uxth.w	r8, r7
 8001322:	fb0c 2211 	mls	r2, ip, r1, r2
 8001326:	fa06 f60e 	lsl.w	r6, r6, lr
 800132a:	fa20 f303 	lsr.w	r3, r0, r3
 800132e:	fb01 f908 	mul.w	r9, r1, r8
 8001332:	4333      	orrs	r3, r6
 8001334:	0c1e      	lsrs	r6, r3, #16
 8001336:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 800133a:	45b1      	cmp	r9, r6
 800133c:	fa00 f40e 	lsl.w	r4, r0, lr
 8001340:	d909      	bls.n	8001356 <__udivmoddi4+0x1ba>
 8001342:	19f6      	adds	r6, r6, r7
 8001344:	f101 32ff 	add.w	r2, r1, #4294967295
 8001348:	f080 808c 	bcs.w	8001464 <__udivmoddi4+0x2c8>
 800134c:	45b1      	cmp	r9, r6
 800134e:	f240 8089 	bls.w	8001464 <__udivmoddi4+0x2c8>
 8001352:	3902      	subs	r1, #2
 8001354:	443e      	add	r6, r7
 8001356:	eba6 0609 	sub.w	r6, r6, r9
 800135a:	fbb6 f0fc 	udiv	r0, r6, ip
 800135e:	fb0c 6210 	mls	r2, ip, r0, r6
 8001362:	fb00 f908 	mul.w	r9, r0, r8
 8001366:	b29e      	uxth	r6, r3
 8001368:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 800136c:	45b1      	cmp	r9, r6
 800136e:	d907      	bls.n	8001380 <__udivmoddi4+0x1e4>
 8001370:	19f6      	adds	r6, r6, r7
 8001372:	f100 33ff 	add.w	r3, r0, #4294967295
 8001376:	d271      	bcs.n	800145c <__udivmoddi4+0x2c0>
 8001378:	45b1      	cmp	r9, r6
 800137a:	d96f      	bls.n	800145c <__udivmoddi4+0x2c0>
 800137c:	3802      	subs	r0, #2
 800137e:	443e      	add	r6, r7
 8001380:	eba6 0609 	sub.w	r6, r6, r9
 8001384:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001388:	e78f      	b.n	80012aa <__udivmoddi4+0x10e>
 800138a:	f1c1 0720 	rsb	r7, r1, #32
 800138e:	fa22 f807 	lsr.w	r8, r2, r7
 8001392:	408b      	lsls	r3, r1
 8001394:	ea48 0303 	orr.w	r3, r8, r3
 8001398:	fa26 f407 	lsr.w	r4, r6, r7
 800139c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80013a0:	fbb4 f9fe 	udiv	r9, r4, lr
 80013a4:	fa1f fc83 	uxth.w	ip, r3
 80013a8:	fb0e 4419 	mls	r4, lr, r9, r4
 80013ac:	408e      	lsls	r6, r1
 80013ae:	fa20 f807 	lsr.w	r8, r0, r7
 80013b2:	fb09 fa0c 	mul.w	sl, r9, ip
 80013b6:	ea48 0806 	orr.w	r8, r8, r6
 80013ba:	ea4f 4618 	mov.w	r6, r8, lsr #16
 80013be:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
 80013c2:	45a2      	cmp	sl, r4
 80013c4:	fa02 f201 	lsl.w	r2, r2, r1
 80013c8:	fa00 f601 	lsl.w	r6, r0, r1
 80013cc:	d908      	bls.n	80013e0 <__udivmoddi4+0x244>
 80013ce:	18e4      	adds	r4, r4, r3
 80013d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80013d4:	d244      	bcs.n	8001460 <__udivmoddi4+0x2c4>
 80013d6:	45a2      	cmp	sl, r4
 80013d8:	d942      	bls.n	8001460 <__udivmoddi4+0x2c4>
 80013da:	f1a9 0902 	sub.w	r9, r9, #2
 80013de:	441c      	add	r4, r3
 80013e0:	eba4 040a 	sub.w	r4, r4, sl
 80013e4:	fbb4 f0fe 	udiv	r0, r4, lr
 80013e8:	fb0e 4410 	mls	r4, lr, r0, r4
 80013ec:	fb00 fc0c 	mul.w	ip, r0, ip
 80013f0:	fa1f f888 	uxth.w	r8, r8
 80013f4:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 80013f8:	45a4      	cmp	ip, r4
 80013fa:	d907      	bls.n	800140c <__udivmoddi4+0x270>
 80013fc:	18e4      	adds	r4, r4, r3
 80013fe:	f100 3eff 	add.w	lr, r0, #4294967295
 8001402:	d229      	bcs.n	8001458 <__udivmoddi4+0x2bc>
 8001404:	45a4      	cmp	ip, r4
 8001406:	d927      	bls.n	8001458 <__udivmoddi4+0x2bc>
 8001408:	3802      	subs	r0, #2
 800140a:	441c      	add	r4, r3
 800140c:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001410:	fba0 8902 	umull	r8, r9, r0, r2
 8001414:	eba4 0c0c 	sub.w	ip, r4, ip
 8001418:	45cc      	cmp	ip, r9
 800141a:	46c2      	mov	sl, r8
 800141c:	46ce      	mov	lr, r9
 800141e:	d315      	bcc.n	800144c <__udivmoddi4+0x2b0>
 8001420:	d012      	beq.n	8001448 <__udivmoddi4+0x2ac>
 8001422:	b155      	cbz	r5, 800143a <__udivmoddi4+0x29e>
 8001424:	ebb6 030a 	subs.w	r3, r6, sl
 8001428:	eb6c 060e 	sbc.w	r6, ip, lr
 800142c:	fa06 f707 	lsl.w	r7, r6, r7
 8001430:	40cb      	lsrs	r3, r1
 8001432:	431f      	orrs	r7, r3
 8001434:	40ce      	lsrs	r6, r1
 8001436:	602f      	str	r7, [r5, #0]
 8001438:	606e      	str	r6, [r5, #4]
 800143a:	2100      	movs	r1, #0
 800143c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001440:	4610      	mov	r0, r2
 8001442:	e6f7      	b.n	8001234 <__udivmoddi4+0x98>
 8001444:	4689      	mov	r9, r1
 8001446:	e6de      	b.n	8001206 <__udivmoddi4+0x6a>
 8001448:	4546      	cmp	r6, r8
 800144a:	d2ea      	bcs.n	8001422 <__udivmoddi4+0x286>
 800144c:	ebb8 0a02 	subs.w	sl, r8, r2
 8001450:	eb69 0e03 	sbc.w	lr, r9, r3
 8001454:	3801      	subs	r0, #1
 8001456:	e7e4      	b.n	8001422 <__udivmoddi4+0x286>
 8001458:	4670      	mov	r0, lr
 800145a:	e7d7      	b.n	800140c <__udivmoddi4+0x270>
 800145c:	4618      	mov	r0, r3
 800145e:	e78f      	b.n	8001380 <__udivmoddi4+0x1e4>
 8001460:	4681      	mov	r9, r0
 8001462:	e7bd      	b.n	80013e0 <__udivmoddi4+0x244>
 8001464:	4611      	mov	r1, r2
 8001466:	e776      	b.n	8001356 <__udivmoddi4+0x1ba>
 8001468:	3802      	subs	r0, #2
 800146a:	443c      	add	r4, r7
 800146c:	e744      	b.n	80012f8 <__udivmoddi4+0x15c>
 800146e:	4608      	mov	r0, r1
 8001470:	e706      	b.n	8001280 <__udivmoddi4+0xe4>
 8001472:	3a02      	subs	r2, #2
 8001474:	443e      	add	r6, r7
 8001476:	e72b      	b.n	80012d0 <__udivmoddi4+0x134>

08001478 <__aeabi_idiv0>:
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop

0800147c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800147c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800147e:	4b0e      	ldr	r3, [pc, #56]	; (80014b8 <HAL_InitTick+0x3c>)
{
 8001480:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001482:	7818      	ldrb	r0, [r3, #0]
 8001484:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001488:	fbb3 f3f0 	udiv	r3, r3, r0
 800148c:	4a0b      	ldr	r2, [pc, #44]	; (80014bc <HAL_InitTick+0x40>)
 800148e:	6810      	ldr	r0, [r2, #0]
 8001490:	fbb0 f0f3 	udiv	r0, r0, r3
 8001494:	f000 fbda 	bl	8001c4c <HAL_SYSTICK_Config>
 8001498:	4604      	mov	r4, r0
 800149a:	b958      	cbnz	r0, 80014b4 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800149c:	2d0f      	cmp	r5, #15
 800149e:	d809      	bhi.n	80014b4 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014a0:	4602      	mov	r2, r0
 80014a2:	4629      	mov	r1, r5
 80014a4:	f04f 30ff 	mov.w	r0, #4294967295
 80014a8:	f000 fb90 	bl	8001bcc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014ac:	4b04      	ldr	r3, [pc, #16]	; (80014c0 <HAL_InitTick+0x44>)
 80014ae:	4620      	mov	r0, r4
 80014b0:	601d      	str	r5, [r3, #0]
 80014b2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80014b4:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80014b6:	bd38      	pop	{r3, r4, r5, pc}
 80014b8:	20000000 	.word	0x20000000
 80014bc:	20000050 	.word	0x20000050
 80014c0:	20000004 	.word	0x20000004

080014c4 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014c4:	4a07      	ldr	r2, [pc, #28]	; (80014e4 <HAL_Init+0x20>)
{
 80014c6:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014c8:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014ca:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014cc:	f043 0310 	orr.w	r3, r3, #16
 80014d0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014d2:	f000 fb69 	bl	8001ba8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80014d6:	200f      	movs	r0, #15
 80014d8:	f7ff ffd0 	bl	800147c <HAL_InitTick>
  HAL_MspInit();
 80014dc:	f004 fb9a 	bl	8005c14 <HAL_MspInit>
}
 80014e0:	2000      	movs	r0, #0
 80014e2:	bd08      	pop	{r3, pc}
 80014e4:	40022000 	.word	0x40022000

080014e8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80014e8:	4a03      	ldr	r2, [pc, #12]	; (80014f8 <HAL_IncTick+0x10>)
 80014ea:	4b04      	ldr	r3, [pc, #16]	; (80014fc <HAL_IncTick+0x14>)
 80014ec:	6811      	ldr	r1, [r2, #0]
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	440b      	add	r3, r1
 80014f2:	6013      	str	r3, [r2, #0]
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	200052d8 	.word	0x200052d8
 80014fc:	20000000 	.word	0x20000000

08001500 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001500:	4b01      	ldr	r3, [pc, #4]	; (8001508 <HAL_GetTick+0x8>)
 8001502:	6818      	ldr	r0, [r3, #0]
}
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	200052d8 	.word	0x200052d8

0800150c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800150c:	b538      	push	{r3, r4, r5, lr}
 800150e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001510:	f7ff fff6 	bl	8001500 <HAL_GetTick>
 8001514:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001516:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001518:	bf1e      	ittt	ne
 800151a:	4b04      	ldrne	r3, [pc, #16]	; (800152c <HAL_Delay+0x20>)
 800151c:	781b      	ldrbne	r3, [r3, #0]
 800151e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001520:	f7ff ffee 	bl	8001500 <HAL_GetTick>
 8001524:	1b40      	subs	r0, r0, r5
 8001526:	4284      	cmp	r4, r0
 8001528:	d8fa      	bhi.n	8001520 <HAL_Delay+0x14>
  {
  }
}
 800152a:	bd38      	pop	{r3, r4, r5, pc}
 800152c:	20000000 	.word	0x20000000

08001530 <HAL_GetUID>:
  * @param UID pointer to 3 words array.
  * @retval Device identifier
  */
void HAL_GetUID(uint32_t *UID)
{
  UID[0] = (uint32_t)(READ_REG(*((uint32_t *)UID_BASE)));
 8001530:	4b04      	ldr	r3, [pc, #16]	; (8001544 <HAL_GetUID+0x14>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	6003      	str	r3, [r0, #0]
  UID[1] = (uint32_t)(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8001536:	4b04      	ldr	r3, [pc, #16]	; (8001548 <HAL_GetUID+0x18>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	6043      	str	r3, [r0, #4]
  UID[2] = (uint32_t)(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 800153c:	4b03      	ldr	r3, [pc, #12]	; (800154c <HAL_GetUID+0x1c>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	6083      	str	r3, [r0, #8]
 8001542:	4770      	bx	lr
 8001544:	1ffff7e8 	.word	0x1ffff7e8
 8001548:	1ffff7ec 	.word	0x1ffff7ec
 800154c:	1ffff7f0 	.word	0x1ffff7f0

08001550 <HAL_ADC_ConvCpltCallback>:
 8001550:	4770      	bx	lr

08001552 <HAL_ADC_LevelOutOfWindowCallback>:
 8001552:	4770      	bx	lr

08001554 <HAL_ADC_IRQHandler>:
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8001554:	6803      	ldr	r3, [r0, #0]
{
 8001556:	b510      	push	{r4, lr}
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8001558:	685a      	ldr	r2, [r3, #4]
{
 800155a:	4604      	mov	r4, r0
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 800155c:	0690      	lsls	r0, r2, #26
 800155e:	d527      	bpl.n	80015b0 <HAL_ADC_IRQHandler+0x5c>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	0791      	lsls	r1, r2, #30
 8001564:	d524      	bpl.n	80015b0 <HAL_ADC_IRQHandler+0x5c>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001566:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001568:	06d2      	lsls	r2, r2, #27
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800156a:	bf5e      	ittt	pl
 800156c:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 800156e:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 8001572:	62a2      	strpl	r2, [r4, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001574:	689a      	ldr	r2, [r3, #8]
 8001576:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 800157a:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 800157e:	d110      	bne.n	80015a2 <HAL_ADC_IRQHandler+0x4e>
 8001580:	68e2      	ldr	r2, [r4, #12]
 8001582:	b972      	cbnz	r2, 80015a2 <HAL_ADC_IRQHandler+0x4e>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001584:	685a      	ldr	r2, [r3, #4]
 8001586:	f022 0220 	bic.w	r2, r2, #32
 800158a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800158c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800158e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001592:	62a3      	str	r3, [r4, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001594:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001596:	04db      	lsls	r3, r3, #19
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001598:	bf5e      	ittt	pl
 800159a:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 800159c:	f043 0301 	orrpl.w	r3, r3, #1
 80015a0:	62a3      	strpl	r3, [r4, #40]	; 0x28
        }
      }

      /* Conversion complete callback */
      HAL_ADC_ConvCpltCallback(hadc);
 80015a2:	4620      	mov	r0, r4
 80015a4:	f7ff ffd4 	bl	8001550 <HAL_ADC_ConvCpltCallback>
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80015a8:	f06f 0212 	mvn.w	r2, #18
 80015ac:	6823      	ldr	r3, [r4, #0]
 80015ae:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 80015b0:	6823      	ldr	r3, [r4, #0]
 80015b2:	685a      	ldr	r2, [r3, #4]
 80015b4:	0610      	lsls	r0, r2, #24
 80015b6:	d530      	bpl.n	800161a <HAL_ADC_IRQHandler+0xc6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	0751      	lsls	r1, r2, #29
 80015bc:	d52d      	bpl.n	800161a <HAL_ADC_IRQHandler+0xc6>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80015be:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80015c0:	06d2      	lsls	r2, r2, #27
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80015c2:	bf5e      	ittt	pl
 80015c4:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 80015c6:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 80015ca:	62a2      	strpl	r2, [r4, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80015cc:	689a      	ldr	r2, [r3, #8]
 80015ce:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
 80015d2:	f5b2 4fe0 	cmp.w	r2, #28672	; 0x7000
 80015d6:	d00a      	beq.n	80015ee <HAL_ADC_IRQHandler+0x9a>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80015d8:	685a      	ldr	r2, [r3, #4]
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80015da:	0550      	lsls	r0, r2, #21
 80015dc:	d416      	bmi.n	800160c <HAL_ADC_IRQHandler+0xb8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80015de:	689a      	ldr	r2, [r3, #8]
 80015e0:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80015e4:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 80015e8:	d110      	bne.n	800160c <HAL_ADC_IRQHandler+0xb8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80015ea:	68e2      	ldr	r2, [r4, #12]
 80015ec:	b972      	cbnz	r2, 800160c <HAL_ADC_IRQHandler+0xb8>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80015ee:	685a      	ldr	r2, [r3, #4]
 80015f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015f4:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80015f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80015f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80015fc:	62a3      	str	r3, [r4, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80015fe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001600:	05d9      	lsls	r1, r3, #23
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001602:	bf5e      	ittt	pl
 8001604:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 8001606:	f043 0301 	orrpl.w	r3, r3, #1
 800160a:	62a3      	strpl	r3, [r4, #40]	; 0x28
        }
      }

      /* Conversion complete callback */ 
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800160c:	4620      	mov	r0, r4
 800160e:	f004 f8e9 	bl	80057e4 <HAL_ADCEx_InjectedConvCpltCallback>
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001612:	f06f 020c 	mvn.w	r2, #12
 8001616:	6823      	ldr	r3, [r4, #0]
 8001618:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800161a:	6823      	ldr	r3, [r4, #0]
 800161c:	685a      	ldr	r2, [r3, #4]
 800161e:	0652      	lsls	r2, r2, #25
 8001620:	d50d      	bpl.n	800163e <HAL_ADC_IRQHandler+0xea>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	07db      	lsls	r3, r3, #31
 8001626:	d50a      	bpl.n	800163e <HAL_ADC_IRQHandler+0xea>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001628:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      
      /* Level out of window callback */ 
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800162a:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800162c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001630:	62a3      	str	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001632:	f7ff ff8e 	bl	8001552 <HAL_ADC_LevelOutOfWindowCallback>
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001636:	f06f 0201 	mvn.w	r2, #1
 800163a:	6823      	ldr	r3, [r4, #0]
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	bd10      	pop	{r4, pc}

08001640 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8001640:	2300      	movs	r3, #0
{ 
 8001642:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8001644:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001646:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800164a:	2b01      	cmp	r3, #1
 800164c:	d074      	beq.n	8001738 <HAL_ADC_ConfigChannel+0xf8>
 800164e:	2301      	movs	r3, #1
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001650:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 8001652:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8001656:	2d06      	cmp	r5, #6
 8001658:	6802      	ldr	r2, [r0, #0]
 800165a:	ea4f 0385 	mov.w	r3, r5, lsl #2
 800165e:	680c      	ldr	r4, [r1, #0]
 8001660:	d825      	bhi.n	80016ae <HAL_ADC_ConfigChannel+0x6e>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001662:	442b      	add	r3, r5
 8001664:	251f      	movs	r5, #31
 8001666:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8001668:	3b05      	subs	r3, #5
 800166a:	409d      	lsls	r5, r3
 800166c:	ea26 0505 	bic.w	r5, r6, r5
 8001670:	fa04 f303 	lsl.w	r3, r4, r3
 8001674:	432b      	orrs	r3, r5
 8001676:	6353      	str	r3, [r2, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001678:	2c09      	cmp	r4, #9
 800167a:	ea4f 0344 	mov.w	r3, r4, lsl #1
 800167e:	688d      	ldr	r5, [r1, #8]
 8001680:	d92f      	bls.n	80016e2 <HAL_ADC_ConfigChannel+0xa2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001682:	2607      	movs	r6, #7
 8001684:	4423      	add	r3, r4
 8001686:	68d1      	ldr	r1, [r2, #12]
 8001688:	3b1e      	subs	r3, #30
 800168a:	409e      	lsls	r6, r3
 800168c:	ea21 0106 	bic.w	r1, r1, r6
 8001690:	fa05 f303 	lsl.w	r3, r5, r3
 8001694:	430b      	orrs	r3, r1
 8001696:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001698:	f1a4 0310 	sub.w	r3, r4, #16
 800169c:	2b01      	cmp	r3, #1
 800169e:	d92b      	bls.n	80016f8 <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016a0:	2300      	movs	r3, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016a2:	2200      	movs	r2, #0
 80016a4:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	b002      	add	sp, #8
 80016ac:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 80016ae:	2d0c      	cmp	r5, #12
 80016b0:	d80b      	bhi.n	80016ca <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80016b2:	442b      	add	r3, r5
 80016b4:	251f      	movs	r5, #31
 80016b6:	6b16      	ldr	r6, [r2, #48]	; 0x30
 80016b8:	3b23      	subs	r3, #35	; 0x23
 80016ba:	409d      	lsls	r5, r3
 80016bc:	ea26 0505 	bic.w	r5, r6, r5
 80016c0:	fa04 f303 	lsl.w	r3, r4, r3
 80016c4:	432b      	orrs	r3, r5
 80016c6:	6313      	str	r3, [r2, #48]	; 0x30
 80016c8:	e7d6      	b.n	8001678 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80016ca:	442b      	add	r3, r5
 80016cc:	251f      	movs	r5, #31
 80016ce:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 80016d0:	3b41      	subs	r3, #65	; 0x41
 80016d2:	409d      	lsls	r5, r3
 80016d4:	ea26 0505 	bic.w	r5, r6, r5
 80016d8:	fa04 f303 	lsl.w	r3, r4, r3
 80016dc:	432b      	orrs	r3, r5
 80016de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80016e0:	e7ca      	b.n	8001678 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80016e2:	2607      	movs	r6, #7
 80016e4:	6911      	ldr	r1, [r2, #16]
 80016e6:	4423      	add	r3, r4
 80016e8:	409e      	lsls	r6, r3
 80016ea:	ea21 0106 	bic.w	r1, r1, r6
 80016ee:	fa05 f303 	lsl.w	r3, r5, r3
 80016f2:	430b      	orrs	r3, r1
 80016f4:	6113      	str	r3, [r2, #16]
 80016f6:	e7cf      	b.n	8001698 <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 80016f8:	4b10      	ldr	r3, [pc, #64]	; (800173c <HAL_ADC_ConfigChannel+0xfc>)
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d116      	bne.n	800172c <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80016fe:	6893      	ldr	r3, [r2, #8]
 8001700:	021b      	lsls	r3, r3, #8
 8001702:	d4cd      	bmi.n	80016a0 <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001704:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001706:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001708:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800170c:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800170e:	d1c7      	bne.n	80016a0 <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001710:	4b0b      	ldr	r3, [pc, #44]	; (8001740 <HAL_ADC_ConfigChannel+0x100>)
 8001712:	4a0c      	ldr	r2, [pc, #48]	; (8001744 <HAL_ADC_ConfigChannel+0x104>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	fbb3 f2f2 	udiv	r2, r3, r2
 800171a:	230a      	movs	r3, #10
 800171c:	4353      	muls	r3, r2
            wait_loop_index--;
 800171e:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8001720:	9b01      	ldr	r3, [sp, #4]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d0bc      	beq.n	80016a0 <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 8001726:	9b01      	ldr	r3, [sp, #4]
 8001728:	3b01      	subs	r3, #1
 800172a:	e7f8      	b.n	800171e <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800172c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800172e:	f043 0320 	orr.w	r3, r3, #32
 8001732:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e7b4      	b.n	80016a2 <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 8001738:	2302      	movs	r3, #2
 800173a:	e7b5      	b.n	80016a8 <HAL_ADC_ConfigChannel+0x68>
 800173c:	40012400 	.word	0x40012400
 8001740:	20000050 	.word	0x20000050
 8001744:	000f4240 	.word	0x000f4240

08001748 <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8001748:	2300      	movs	r3, #0
{
 800174a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 800174c:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800174e:	6803      	ldr	r3, [r0, #0]
{
 8001750:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001752:	689a      	ldr	r2, [r3, #8]
 8001754:	07d2      	lsls	r2, r2, #31
 8001756:	d502      	bpl.n	800175e <ADC_Enable+0x16>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001758:	2000      	movs	r0, #0
}
 800175a:	b002      	add	sp, #8
 800175c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 800175e:	689a      	ldr	r2, [r3, #8]
 8001760:	f042 0201 	orr.w	r2, r2, #1
 8001764:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001766:	4b12      	ldr	r3, [pc, #72]	; (80017b0 <ADC_Enable+0x68>)
 8001768:	4a12      	ldr	r2, [pc, #72]	; (80017b4 <ADC_Enable+0x6c>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8001770:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8001772:	9b01      	ldr	r3, [sp, #4]
 8001774:	b9c3      	cbnz	r3, 80017a8 <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 8001776:	f7ff fec3 	bl	8001500 <HAL_GetTick>
 800177a:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 800177c:	6823      	ldr	r3, [r4, #0]
 800177e:	689d      	ldr	r5, [r3, #8]
 8001780:	f015 0501 	ands.w	r5, r5, #1
 8001784:	d1e8      	bne.n	8001758 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001786:	f7ff febb 	bl	8001500 <HAL_GetTick>
 800178a:	1b80      	subs	r0, r0, r6
 800178c:	2802      	cmp	r0, #2
 800178e:	d9f5      	bls.n	800177c <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001790:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 8001792:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001796:	f043 0310 	orr.w	r3, r3, #16
 800179a:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800179c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 800179e:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017a0:	f043 0301 	orr.w	r3, r3, #1
 80017a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80017a6:	e7d8      	b.n	800175a <ADC_Enable+0x12>
      wait_loop_index--;
 80017a8:	9b01      	ldr	r3, [sp, #4]
 80017aa:	3b01      	subs	r3, #1
 80017ac:	e7e0      	b.n	8001770 <ADC_Enable+0x28>
 80017ae:	bf00      	nop
 80017b0:	20000050 	.word	0x20000050
 80017b4:	000f4240 	.word	0x000f4240

080017b8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80017b8:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80017ba:	6803      	ldr	r3, [r0, #0]
{
 80017bc:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 80017be:	689a      	ldr	r2, [r3, #8]
 80017c0:	07d2      	lsls	r2, r2, #31
 80017c2:	d401      	bmi.n	80017c8 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80017c4:	2000      	movs	r0, #0
 80017c6:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 80017c8:	689a      	ldr	r2, [r3, #8]
 80017ca:	f022 0201 	bic.w	r2, r2, #1
 80017ce:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80017d0:	f7ff fe96 	bl	8001500 <HAL_GetTick>
 80017d4:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 80017d6:	6823      	ldr	r3, [r4, #0]
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	07db      	lsls	r3, r3, #31
 80017dc:	d5f2      	bpl.n	80017c4 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80017de:	f7ff fe8f 	bl	8001500 <HAL_GetTick>
 80017e2:	1b40      	subs	r0, r0, r5
 80017e4:	2802      	cmp	r0, #2
 80017e6:	d9f6      	bls.n	80017d6 <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017e8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017ea:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017ec:	f043 0310 	orr.w	r3, r3, #16
 80017f0:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017f2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80017f4:	f043 0301 	orr.w	r3, r3, #1
 80017f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80017fa:	bd38      	pop	{r3, r4, r5, pc}

080017fc <HAL_ADC_Init>:
{
 80017fc:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 80017fe:	4604      	mov	r4, r0
 8001800:	2800      	cmp	r0, #0
 8001802:	d071      	beq.n	80018e8 <HAL_ADC_Init+0xec>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001804:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001806:	b923      	cbnz	r3, 8001812 <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8001808:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 800180a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 800180e:	f004 fa29 	bl	8005c64 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001812:	4620      	mov	r0, r4
 8001814:	f7ff ffd0 	bl	80017b8 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001818:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800181a:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 800181e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001820:	d164      	bne.n	80018ec <HAL_ADC_Init+0xf0>
 8001822:	2800      	cmp	r0, #0
 8001824:	d162      	bne.n	80018ec <HAL_ADC_Init+0xf0>
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8001826:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 8001828:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 800182c:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 800182e:	f023 0302 	bic.w	r3, r3, #2
 8001832:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 8001836:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001838:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 800183a:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 800183c:	68e3      	ldr	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800183e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 8001842:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001846:	d038      	beq.n	80018ba <HAL_ADC_Init+0xbe>
 8001848:	2901      	cmp	r1, #1
 800184a:	bf14      	ite	ne
 800184c:	4606      	movne	r6, r0
 800184e:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001852:	6965      	ldr	r5, [r4, #20]
 8001854:	2d01      	cmp	r5, #1
 8001856:	d107      	bne.n	8001868 <HAL_ADC_Init+0x6c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001858:	2b00      	cmp	r3, #0
 800185a:	d130      	bne.n	80018be <HAL_ADC_Init+0xc2>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800185c:	69a3      	ldr	r3, [r4, #24]
 800185e:	3b01      	subs	r3, #1
 8001860:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 8001864:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8001868:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800186a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 800186e:	685d      	ldr	r5, [r3, #4]
 8001870:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 8001874:	ea45 0506 	orr.w	r5, r5, r6
 8001878:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 800187a:	689e      	ldr	r6, [r3, #8]
 800187c:	4d1d      	ldr	r5, [pc, #116]	; (80018f4 <HAL_ADC_Init+0xf8>)
 800187e:	ea05 0506 	and.w	r5, r5, r6
 8001882:	ea45 0502 	orr.w	r5, r5, r2
 8001886:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001888:	d001      	beq.n	800188e <HAL_ADC_Init+0x92>
 800188a:	2901      	cmp	r1, #1
 800188c:	d120      	bne.n	80018d0 <HAL_ADC_Init+0xd4>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800188e:	6921      	ldr	r1, [r4, #16]
 8001890:	3901      	subs	r1, #1
 8001892:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8001894:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8001896:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 800189a:	4329      	orrs	r1, r5
 800189c:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800189e:	6899      	ldr	r1, [r3, #8]
 80018a0:	4b15      	ldr	r3, [pc, #84]	; (80018f8 <HAL_ADC_Init+0xfc>)
 80018a2:	400b      	ands	r3, r1
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d115      	bne.n	80018d4 <HAL_ADC_Init+0xd8>
      ADC_CLEAR_ERRORCODE(hadc);
 80018a8:	2300      	movs	r3, #0
 80018aa:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 80018ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80018ae:	f023 0303 	bic.w	r3, r3, #3
 80018b2:	f043 0301 	orr.w	r3, r3, #1
 80018b6:	62a3      	str	r3, [r4, #40]	; 0x28
 80018b8:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80018ba:	460e      	mov	r6, r1
 80018bc:	e7c9      	b.n	8001852 <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018be:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80018c0:	f043 0320 	orr.w	r3, r3, #32
 80018c4:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018c6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80018c8:	f043 0301 	orr.w	r3, r3, #1
 80018cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80018ce:	e7cb      	b.n	8001868 <HAL_ADC_Init+0x6c>
  uint32_t tmp_sqr1 = 0U;
 80018d0:	2100      	movs	r1, #0
 80018d2:	e7df      	b.n	8001894 <HAL_ADC_Init+0x98>
      ADC_STATE_CLR_SET(hadc->State,
 80018d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80018d6:	f023 0312 	bic.w	r3, r3, #18
 80018da:	f043 0310 	orr.w	r3, r3, #16
 80018de:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018e0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80018e2:	f043 0301 	orr.w	r3, r3, #1
 80018e6:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 80018e8:	2001      	movs	r0, #1
}
 80018ea:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018ec:	f043 0310 	orr.w	r3, r3, #16
 80018f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80018f2:	e7f9      	b.n	80018e8 <HAL_ADC_Init+0xec>
 80018f4:	ffe1f7fd 	.word	0xffe1f7fd
 80018f8:	ff1f0efe 	.word	0xff1f0efe

080018fc <HAL_ADCEx_InjectedStart_IT>:
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018fc:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8001900:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8001902:	2b01      	cmp	r3, #1
{
 8001904:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8001906:	d04e      	beq.n	80019a6 <HAL_ADCEx_InjectedStart_IT+0xaa>
 8001908:	2301      	movs	r3, #1
 800190a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800190e:	f7ff ff1b 	bl	8001748 <ADC_Enable>
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001912:	2800      	cmp	r0, #0
 8001914:	d143      	bne.n	800199e <HAL_ADCEx_InjectedStart_IT+0xa2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 8001916:	6aa3      	ldr	r3, [r4, #40]	; 0x28
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_INJ_EOC,
                      HAL_ADC_STATE_INJ_BUSY);
    
    /* Case of independent mode or multimode (for devices with several ADCs): */
    /* Set multimode state.                                                   */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001918:	4a24      	ldr	r2, [pc, #144]	; (80019ac <HAL_ADCEx_InjectedStart_IT+0xb0>)
    ADC_STATE_CLR_SET(hadc->State,
 800191a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800191e:	f023 0301 	bic.w	r3, r3, #1
 8001922:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001926:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001928:	6823      	ldr	r3, [r4, #0]
 800192a:	4293      	cmp	r3, r2
 800192c:	d105      	bne.n	800193a <HAL_ADCEx_InjectedStart_IT+0x3e>
 800192e:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8001932:	6852      	ldr	r2, [r2, #4]
 8001934:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 8001938:	d129      	bne.n	800198e <HAL_ADCEx_InjectedStart_IT+0x92>
    {
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800193a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800193c:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
    }
    else
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001940:	62a2      	str	r2, [r4, #40]	; 0x28
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001942:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001944:	f412 7280 	ands.w	r2, r2, #256	; 0x100
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001948:	bf08      	it	eq
 800194a:	62e2      	streq	r2, [r4, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800194c:	2200      	movs	r2, #0
 800194e:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8001952:	f06f 0204 	mvn.w	r2, #4
 8001956:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for injected channels */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001958:	685a      	ldr	r2, [r3, #4]
 800195a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800195e:	605a      	str	r2, [r3, #4]
    /* and if automatic injected conversion is disabled.                      */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* If automatic injected conversion is enabled, conversion will start     */
    /* after next regular group conversion.                                   */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO))
 8001960:	685a      	ldr	r2, [r3, #4]
 8001962:	0552      	lsls	r2, r2, #21
 8001964:	d420      	bmi.n	80019a8 <HAL_ADCEx_InjectedStart_IT+0xac>
    {
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 8001966:	689a      	ldr	r2, [r3, #8]
 8001968:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
 800196c:	f5b2 4fe0 	cmp.w	r2, #28672	; 0x7000
 8001970:	d111      	bne.n	8001996 <HAL_ADCEx_InjectedStart_IT+0x9a>
 8001972:	4a0e      	ldr	r2, [pc, #56]	; (80019ac <HAL_ADCEx_InjectedStart_IT+0xb0>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d105      	bne.n	8001984 <HAL_ADCEx_InjectedStart_IT+0x88>
          ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001978:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 800197c:	6852      	ldr	r2, [r2, #4]
      if (ADC_IS_SOFTWARE_START_INJECTED(hadc)     &&
 800197e:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 8001982:	d108      	bne.n	8001996 <HAL_ADCEx_InjectedStart_IT+0x9a>
      {
        /* Start ADC conversion on injected group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_JSWSTART | ADC_CR2_JEXTTRIG));
 8001984:	689a      	ldr	r2, [r3, #8]
 8001986:	f442 1202 	orr.w	r2, r2, #2129920	; 0x208000
      }
      else
      {
        /* Start ADC conversion on injected group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_JEXTTRIG);
 800198a:	609a      	str	r2, [r3, #8]
 800198c:	bd10      	pop	{r4, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800198e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001990:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001994:	e7d4      	b.n	8001940 <HAL_ADCEx_InjectedStart_IT+0x44>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_JEXTTRIG);
 8001996:	689a      	ldr	r2, [r3, #8]
 8001998:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800199c:	e7f5      	b.n	800198a <HAL_ADCEx_InjectedStart_IT+0x8e>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800199e:	2300      	movs	r3, #0
 80019a0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80019a4:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 80019a6:	2002      	movs	r0, #2
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 80019a8:	bd10      	pop	{r4, pc}
 80019aa:	bf00      	nop
 80019ac:	40012800 	.word	0x40012800

080019b0 <HAL_ADCEx_InjectedGetValue>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Get ADC converted value */ 
  switch(InjectedRank)
 80019b0:	2903      	cmp	r1, #3
 80019b2:	6803      	ldr	r3, [r0, #0]
 80019b4:	d007      	beq.n	80019c6 <HAL_ADCEx_InjectedGetValue+0x16>
 80019b6:	2904      	cmp	r1, #4
 80019b8:	d003      	beq.n	80019c2 <HAL_ADCEx_InjectedGetValue+0x12>
 80019ba:	2902      	cmp	r1, #2
 80019bc:	d105      	bne.n	80019ca <HAL_ADCEx_InjectedGetValue+0x1a>
      break;
    case ADC_INJECTED_RANK_3: 
      tmp_jdr = hadc->Instance->JDR3;
      break;
    case ADC_INJECTED_RANK_2: 
      tmp_jdr = hadc->Instance->JDR2;
 80019be:	6c18      	ldr	r0, [r3, #64]	; 0x40
      break;
 80019c0:	4770      	bx	lr
      tmp_jdr = hadc->Instance->JDR4;
 80019c2:	6c98      	ldr	r0, [r3, #72]	; 0x48
      break;
 80019c4:	4770      	bx	lr
      tmp_jdr = hadc->Instance->JDR3;
 80019c6:	6c58      	ldr	r0, [r3, #68]	; 0x44
      break;
 80019c8:	4770      	bx	lr
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 80019ca:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
      break;
  }
  
  /* Return ADC converted value */ 
  return tmp_jdr;
}
 80019cc:	4770      	bx	lr
	...

080019d0 <HAL_ADCEx_InjectedConfigChannel>:
  * @param  sConfigInjected: Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 80019d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80019d2:	4602      	mov	r2, r0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 80019d4:	2000      	movs	r0, #0
    assert_param(IS_ADC_INJECTED_NB_CONV(sConfigInjected->InjectedNbrOfConversion));
    assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->InjectedDiscontinuousConvMode));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019d6:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
  __IO uint32_t wait_loop_index = 0U;
 80019da:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 80019dc:	2b01      	cmp	r3, #1
 80019de:	f000 80d8 	beq.w	8001b92 <HAL_ADCEx_InjectedConfigChannel+0x1c2>
 80019e2:	2701      	movs	r7, #1
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80019e4:	f8d2 e008 	ldr.w	lr, [r2, #8]
  __HAL_LOCK(hadc);
 80019e8:	f882 7024 	strb.w	r7, [r2, #36]	; 0x24
 80019ec:	684e      	ldr	r6, [r1, #4]
 80019ee:	6813      	ldr	r3, [r2, #0]
 80019f0:	680d      	ldr	r5, [r1, #0]
  /*   Note: Scan mode is present by hardware on this device and, if          */
  /*   disabled, discards automatically nb of conversions. Anyway, nb of      */
  /*   conversions is forced to 0x00 for alignment over all STM32 devices.    */
  /* - if scan mode is enabled, injected channels sequence length is set to   */
  /*   parameter "InjectedNbrOfConversion".                                   */
  if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80019f2:	f1be 0f00 	cmp.w	lr, #0
 80019f6:	d17b      	bne.n	8001af0 <HAL_ADCEx_InjectedConfigChannel+0x120>
  {
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80019f8:	42be      	cmp	r6, r7
 80019fa:	d173      	bne.n	8001ae4 <HAL_ADCEx_InjectedConfigChannel+0x114>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019fc:	4670      	mov	r0, lr
    {
      /* Clear the old SQx bits for all injected ranks */
      MODIFY_REG(hadc->Instance->JSQR                             ,
 80019fe:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8001a00:	0da4      	lsrs	r4, r4, #22
 8001a02:	05a4      	lsls	r4, r4, #22
 8001a04:	ea44 34c5 	orr.w	r4, r4, r5, lsl #15
 8001a08:	639c      	str	r4, [r3, #56]	; 0x38
  /* Parameters update not conditioned to ADC state:                          */
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  /* Note: In case of ADC already enabled, caution to not launch an unwanted  */
  /*       conversion while modifying register CR2 by writing 1 to bit ADON.  */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a0a:	689c      	ldr	r4, [r3, #8]
 8001a0c:	07e4      	lsls	r4, r4, #31
 8001a0e:	d407      	bmi.n	8001a20 <HAL_ADCEx_InjectedConfigChannel+0x50>
  {    
    MODIFY_REG(hadc->Instance->CR2                                           ,
 8001a10:	689c      	ldr	r4, [r3, #8]
 8001a12:	69cf      	ldr	r7, [r1, #28]
 8001a14:	f424 44e0 	bic.w	r4, r4, #28672	; 0x7000
 8001a18:	f024 0401 	bic.w	r4, r4, #1
 8001a1c:	433c      	orrs	r4, r7
 8001a1e:	609c      	str	r4, [r3, #8]
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  
    /* Automatic injected conversion can be enabled if injected group         */
    /* external triggers are disabled.                                        */
    if (sConfigInjected->AutoInjectedConv == ENABLE)
 8001a20:	698c      	ldr	r4, [r1, #24]
 8001a22:	2c01      	cmp	r4, #1
 8001a24:	d10d      	bne.n	8001a42 <HAL_ADCEx_InjectedConfigChannel+0x72>
    {
      if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8001a26:	69cf      	ldr	r7, [r1, #28]
 8001a28:	f5b7 4fe0 	cmp.w	r7, #28672	; 0x7000
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO);
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a2c:	bf17      	itett	ne
 8001a2e:	6a90      	ldrne	r0, [r2, #40]	; 0x28
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8001a30:	685f      	ldreq	r7, [r3, #4]
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a32:	f040 0020 	orrne.w	r0, r0, #32
 8001a36:	6290      	strne	r0, [r2, #40]	; 0x28
        
        tmp_hal_status = HAL_ERROR;
 8001a38:	bf12      	itee	ne
 8001a3a:	4620      	movne	r0, r4
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8001a3c:	f447 6780 	orreq.w	r7, r7, #1024	; 0x400
 8001a40:	605f      	streq	r7, [r3, #4]
      }
    }
    
    /* Injected discontinuous can be enabled only if auto-injected mode is    */
    /* disabled.                                                              */  
    if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 8001a42:	694f      	ldr	r7, [r1, #20]
 8001a44:	2f01      	cmp	r7, #1
 8001a46:	d105      	bne.n	8001a54 <HAL_ADCEx_InjectedConfigChannel+0x84>
    {
      if (sConfigInjected->AutoInjectedConv == DISABLE)
 8001a48:	2c00      	cmp	r4, #0
 8001a4a:	d174      	bne.n	8001b36 <HAL_ADCEx_InjectedConfigChannel+0x166>
      {
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JDISCEN);
 8001a4c:	685c      	ldr	r4, [r3, #4]
 8001a4e:	f444 5480 	orr.w	r4, r4, #4096	; 0x1000
 8001a52:	605c      	str	r4, [r3, #4]
    }


  /* InjectedChannel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8001a54:	2d09      	cmp	r5, #9
 8001a56:	ea4f 0445 	mov.w	r4, r5, lsl #1
 8001a5a:	f8d1 e008 	ldr.w	lr, [r1, #8]
 8001a5e:	d970      	bls.n	8001b42 <HAL_ADCEx_InjectedConfigChannel+0x172>
  {
    MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 8001a60:	f04f 0c07 	mov.w	ip, #7
 8001a64:	442c      	add	r4, r5
 8001a66:	68df      	ldr	r7, [r3, #12]
 8001a68:	3c1e      	subs	r4, #30
 8001a6a:	fa0c fc04 	lsl.w	ip, ip, r4
 8001a6e:	ea27 070c 	bic.w	r7, r7, ip
 8001a72:	fa0e f404 	lsl.w	r4, lr, r4
 8001a76:	433c      	orrs	r4, r7
 8001a78:	60dc      	str	r4, [r3, #12]
               ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  
  /* If ADC1 InjectedChannel_16 or InjectedChannel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8001a7a:	f1a5 0410 	sub.w	r4, r5, #16
 8001a7e:	2c01      	cmp	r4, #1
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
  {
    SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001a80:	bf98      	it	ls
 8001a82:	689f      	ldrls	r7, [r3, #8]
 8001a84:	f8df e11c 	ldr.w	lr, [pc, #284]	; 8001ba4 <HAL_ADCEx_InjectedConfigChannel+0x1d4>
 8001a88:	bf9c      	itt	ls
 8001a8a:	f447 0700 	orrls.w	r7, r7, #8388608	; 0x800000
 8001a8e:	609f      	strls	r7, [r3, #8]
  }
  
  
  /* Configure the offset: offset enable/disable, InjectedChannel, offset value */
  switch(sConfigInjected->InjectedRank)
 8001a90:	2e02      	cmp	r6, #2
 8001a92:	68cf      	ldr	r7, [r1, #12]
 8001a94:	d062      	beq.n	8001b5c <HAL_ADCEx_InjectedConfigChannel+0x18c>
 8001a96:	2e03      	cmp	r6, #3
 8001a98:	d066      	beq.n	8001b68 <HAL_ADCEx_InjectedConfigChannel+0x198>
 8001a9a:	2e01      	cmp	r6, #1
 8001a9c:	d16a      	bne.n	8001b74 <HAL_ADCEx_InjectedConfigChannel+0x1a4>
  {
    case 1:
      /* Set injected channel 1 offset */
      MODIFY_REG(hadc->Instance->JOFR1,
 8001a9e:	6959      	ldr	r1, [r3, #20]
 8001aa0:	ea01 010e 	and.w	r1, r1, lr
 8001aa4:	4339      	orrs	r1, r7
 8001aa6:	6159      	str	r1, [r3, #20]
      break;
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8001aa8:	2c01      	cmp	r4, #1
 8001aaa:	d816      	bhi.n	8001ada <HAL_ADCEx_InjectedConfigChannel+0x10a>
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001aac:	493a      	ldr	r1, [pc, #232]	; (8001b98 <HAL_ADCEx_InjectedConfigChannel+0x1c8>)
 8001aae:	428b      	cmp	r3, r1
 8001ab0:	d169      	bne.n	8001b86 <HAL_ADCEx_InjectedConfigChannel+0x1b6>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001ab2:	6899      	ldr	r1, [r3, #8]
 8001ab4:	0209      	lsls	r1, r1, #8
 8001ab6:	d410      	bmi.n	8001ada <HAL_ADCEx_InjectedConfigChannel+0x10a>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001ab8:	6899      	ldr	r1, [r3, #8]
        
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR))
 8001aba:	2d10      	cmp	r5, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001abc:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8001ac0:	6099      	str	r1, [r3, #8]
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR))
 8001ac2:	d10a      	bne.n	8001ada <HAL_ADCEx_InjectedConfigChannel+0x10a>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ac4:	4b35      	ldr	r3, [pc, #212]	; (8001b9c <HAL_ADCEx_InjectedConfigChannel+0x1cc>)
 8001ac6:	4936      	ldr	r1, [pc, #216]	; (8001ba0 <HAL_ADCEx_InjectedConfigChannel+0x1d0>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	fbb3 f1f1 	udiv	r1, r3, r1
 8001ace:	230a      	movs	r3, #10
 8001ad0:	434b      	muls	r3, r1
          while(wait_loop_index != 0U)
          {
            wait_loop_index--;
 8001ad2:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8001ad4:	9b01      	ldr	r3, [sp, #4]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d152      	bne.n	8001b80 <HAL_ADCEx_InjectedConfigChannel+0x1b0>
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ada:	2300      	movs	r3, #0
 8001adc:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8001ae0:	b003      	add	sp, #12
 8001ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ae4:	6a94      	ldr	r4, [r2, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8001ae6:	4638      	mov	r0, r7
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ae8:	f044 0420 	orr.w	r4, r4, #32
 8001aec:	6294      	str	r4, [r2, #40]	; 0x28
 8001aee:	e78c      	b.n	8001a0a <HAL_ADCEx_InjectedConfigChannel+0x3a>
    if (sConfigInjected->InjectedRank <= sConfigInjected->InjectedNbrOfConversion)
 8001af0:	690f      	ldr	r7, [r1, #16]
      MODIFY_REG(hadc->Instance->JSQR                                         ,
 8001af2:	f8d3 e038 	ldr.w	lr, [r3, #56]	; 0x38
 8001af6:	1bf4      	subs	r4, r6, r7
 8001af8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    if (sConfigInjected->InjectedRank <= sConfigInjected->InjectedNbrOfConversion)
 8001afc:	42be      	cmp	r6, r7
      MODIFY_REG(hadc->Instance->JSQR                                         ,
 8001afe:	f104 040f 	add.w	r4, r4, #15
    if (sConfigInjected->InjectedRank <= sConfigInjected->InjectedNbrOfConversion)
 8001b02:	d810      	bhi.n	8001b26 <HAL_ADCEx_InjectedConfigChannel+0x156>
      MODIFY_REG(hadc->Instance->JSQR                                         ,
 8001b04:	f107 3cff 	add.w	ip, r7, #4294967295
 8001b08:	fa05 f704 	lsl.w	r7, r5, r4
 8001b0c:	ea47 570c 	orr.w	r7, r7, ip, lsl #20
 8001b10:	f04f 0c1f 	mov.w	ip, #31
 8001b14:	fa0c f404 	lsl.w	r4, ip, r4
 8001b18:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8001b1c:	ea2e 0404 	bic.w	r4, lr, r4
 8001b20:	433c      	orrs	r4, r7
      MODIFY_REG(hadc->Instance->JSQR                                       ,
 8001b22:	639c      	str	r4, [r3, #56]	; 0x38
 8001b24:	e771      	b.n	8001a0a <HAL_ADCEx_InjectedConfigChannel+0x3a>
 8001b26:	271f      	movs	r7, #31
 8001b28:	fa07 f404 	lsl.w	r4, r7, r4
 8001b2c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8001b30:	ea2e 0404 	bic.w	r4, lr, r4
 8001b34:	e7f5      	b.n	8001b22 <HAL_ADCEx_InjectedConfigChannel+0x152>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b36:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8001b38:	f040 0020 	orr.w	r0, r0, #32
 8001b3c:	6290      	str	r0, [r2, #40]	; 0x28
        tmp_hal_status = HAL_ERROR;
 8001b3e:	4638      	mov	r0, r7
 8001b40:	e788      	b.n	8001a54 <HAL_ADCEx_InjectedConfigChannel+0x84>
    MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 8001b42:	f04f 0c07 	mov.w	ip, #7
 8001b46:	691f      	ldr	r7, [r3, #16]
 8001b48:	442c      	add	r4, r5
 8001b4a:	fa0c fc04 	lsl.w	ip, ip, r4
 8001b4e:	ea27 070c 	bic.w	r7, r7, ip
 8001b52:	fa0e f404 	lsl.w	r4, lr, r4
 8001b56:	433c      	orrs	r4, r7
 8001b58:	611c      	str	r4, [r3, #16]
 8001b5a:	e78e      	b.n	8001a7a <HAL_ADCEx_InjectedConfigChannel+0xaa>
      MODIFY_REG(hadc->Instance->JOFR2,
 8001b5c:	6999      	ldr	r1, [r3, #24]
 8001b5e:	ea01 010e 	and.w	r1, r1, lr
 8001b62:	4339      	orrs	r1, r7
 8001b64:	6199      	str	r1, [r3, #24]
      break;
 8001b66:	e79f      	b.n	8001aa8 <HAL_ADCEx_InjectedConfigChannel+0xd8>
      MODIFY_REG(hadc->Instance->JOFR3,
 8001b68:	69d9      	ldr	r1, [r3, #28]
 8001b6a:	ea01 010e 	and.w	r1, r1, lr
 8001b6e:	4339      	orrs	r1, r7
 8001b70:	61d9      	str	r1, [r3, #28]
      break;
 8001b72:	e799      	b.n	8001aa8 <HAL_ADCEx_InjectedConfigChannel+0xd8>
      MODIFY_REG(hadc->Instance->JOFR4,
 8001b74:	6a19      	ldr	r1, [r3, #32]
 8001b76:	ea01 010e 	and.w	r1, r1, lr
 8001b7a:	4339      	orrs	r1, r7
 8001b7c:	6219      	str	r1, [r3, #32]
      break;
 8001b7e:	e793      	b.n	8001aa8 <HAL_ADCEx_InjectedConfigChannel+0xd8>
            wait_loop_index--;
 8001b80:	9b01      	ldr	r3, [sp, #4]
 8001b82:	3b01      	subs	r3, #1
 8001b84:	e7a5      	b.n	8001ad2 <HAL_ADCEx_InjectedConfigChannel+0x102>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b86:	6a93      	ldr	r3, [r2, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8001b88:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b8a:	f043 0320 	orr.w	r3, r3, #32
 8001b8e:	6293      	str	r3, [r2, #40]	; 0x28
 8001b90:	e7a3      	b.n	8001ada <HAL_ADCEx_InjectedConfigChannel+0x10a>
  __HAL_LOCK(hadc);
 8001b92:	2002      	movs	r0, #2
 8001b94:	e7a4      	b.n	8001ae0 <HAL_ADCEx_InjectedConfigChannel+0x110>
 8001b96:	bf00      	nop
 8001b98:	40012400 	.word	0x40012400
 8001b9c:	20000050 	.word	0x20000050
 8001ba0:	000f4240 	.word	0x000f4240
 8001ba4:	fffff000 	.word	0xfffff000

08001ba8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ba8:	4a07      	ldr	r2, [pc, #28]	; (8001bc8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001baa:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bac:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001bae:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bb2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001bb6:	041b      	lsls	r3, r3, #16
 8001bb8:	0c1b      	lsrs	r3, r3, #16
 8001bba:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8001bc2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001bc4:	60d3      	str	r3, [r2, #12]
 8001bc6:	4770      	bx	lr
 8001bc8:	e000ed00 	.word	0xe000ed00

08001bcc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bcc:	4b17      	ldr	r3, [pc, #92]	; (8001c2c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bce:	b530      	push	{r4, r5, lr}
 8001bd0:	68dc      	ldr	r4, [r3, #12]
 8001bd2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bd6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bda:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bdc:	2b04      	cmp	r3, #4
 8001bde:	bf28      	it	cs
 8001be0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001be2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be4:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001be8:	bf98      	it	ls
 8001bea:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bec:	fa05 f303 	lsl.w	r3, r5, r3
 8001bf0:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bf4:	bf88      	it	hi
 8001bf6:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf8:	4019      	ands	r1, r3
 8001bfa:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bfc:	fa05 f404 	lsl.w	r4, r5, r4
 8001c00:	3c01      	subs	r4, #1
 8001c02:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8001c04:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c06:	ea42 0201 	orr.w	r2, r2, r1
 8001c0a:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c0e:	bfaf      	iteee	ge
 8001c10:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c14:	4b06      	ldrlt	r3, [pc, #24]	; (8001c30 <HAL_NVIC_SetPriority+0x64>)
 8001c16:	f000 000f 	andlt.w	r0, r0, #15
 8001c1a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c1c:	bfa5      	ittet	ge
 8001c1e:	b2d2      	uxtbge	r2, r2
 8001c20:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c24:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c26:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001c2a:	bd30      	pop	{r4, r5, pc}
 8001c2c:	e000ed00 	.word	0xe000ed00
 8001c30:	e000ed14 	.word	0xe000ed14

08001c34 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001c34:	2301      	movs	r3, #1
 8001c36:	0942      	lsrs	r2, r0, #5
 8001c38:	f000 001f 	and.w	r0, r0, #31
 8001c3c:	fa03 f000 	lsl.w	r0, r3, r0
 8001c40:	4b01      	ldr	r3, [pc, #4]	; (8001c48 <HAL_NVIC_EnableIRQ+0x14>)
 8001c42:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001c46:	4770      	bx	lr
 8001c48:	e000e100 	.word	0xe000e100

08001c4c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c4c:	3801      	subs	r0, #1
 8001c4e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001c52:	d20a      	bcs.n	8001c6a <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c54:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c56:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c58:	4a06      	ldr	r2, [pc, #24]	; (8001c74 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c5a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c5c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c60:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c62:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c64:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001c6a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	e000e010 	.word	0xe000e010
 8001c74:	e000ed00 	.word	0xe000ed00

08001c78 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c78:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001c7a:	2800      	cmp	r0, #0
 8001c7c:	d032      	beq.n	8001ce4 <HAL_DMA_Init+0x6c>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (STM32F101xE) || defined (STM32F101xG) || defined (STM32F103xE) || defined (STM32F103xG) || defined (STM32F100xE) || defined (STM32F105xC) || defined (STM32F107xC)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001c7e:	6801      	ldr	r1, [r0, #0]
 8001c80:	4b19      	ldr	r3, [pc, #100]	; (8001ce8 <HAL_DMA_Init+0x70>)
 8001c82:	2414      	movs	r4, #20
 8001c84:	4299      	cmp	r1, r3
 8001c86:	d825      	bhi.n	8001cd4 <HAL_DMA_Init+0x5c>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001c88:	4a18      	ldr	r2, [pc, #96]	; (8001cec <HAL_DMA_Init+0x74>)
    hdma->DmaBaseAddress = DMA1;
 8001c8a:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001c8e:	440a      	add	r2, r1
 8001c90:	fbb2 f2f4 	udiv	r2, r2, r4
 8001c94:	0092      	lsls	r2, r2, #2
 8001c96:	6402      	str	r2, [r0, #64]	; 0x40
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001c98:	6884      	ldr	r4, [r0, #8]
    hdma->DmaBaseAddress = DMA2;
 8001c9a:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp |=  hdma->Init.Direction        |
 8001c9c:	6843      	ldr	r3, [r0, #4]
  tmp = hdma->Instance->CCR;
 8001c9e:	680a      	ldr	r2, [r1, #0]
  tmp |=  hdma->Init.Direction        |
 8001ca0:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ca2:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001ca4:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ca8:	4323      	orrs	r3, r4
 8001caa:	6904      	ldr	r4, [r0, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001cac:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cb0:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cb2:	6944      	ldr	r4, [r0, #20]
 8001cb4:	4323      	orrs	r3, r4
 8001cb6:	6984      	ldr	r4, [r0, #24]
 8001cb8:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cba:	69c4      	ldr	r4, [r0, #28]
 8001cbc:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8001cbe:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001cc0:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001cc2:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cc4:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001cc6:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cca:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001ccc:	f880 3020 	strb.w	r3, [r0, #32]

  return HAL_OK;
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001cd4:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <HAL_DMA_Init+0x78>)
 8001cd6:	440b      	add	r3, r1
 8001cd8:	fbb3 f3f4 	udiv	r3, r3, r4
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	6403      	str	r3, [r0, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8001ce0:	4b04      	ldr	r3, [pc, #16]	; (8001cf4 <HAL_DMA_Init+0x7c>)
 8001ce2:	e7d9      	b.n	8001c98 <HAL_DMA_Init+0x20>
    return HAL_ERROR;
 8001ce4:	2001      	movs	r0, #1
}
 8001ce6:	bd10      	pop	{r4, pc}
 8001ce8:	40020407 	.word	0x40020407
 8001cec:	bffdfff8 	.word	0xbffdfff8
 8001cf0:	bffdfbf8 	.word	0xbffdfbf8
 8001cf4:	40020400 	.word	0x40020400

08001cf8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cf8:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001cfa:	f890 4020 	ldrb.w	r4, [r0, #32]
 8001cfe:	2c01      	cmp	r4, #1
 8001d00:	d035      	beq.n	8001d6e <HAL_DMA_Start_IT+0x76>
 8001d02:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d04:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 8001d08:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d0c:	42a5      	cmp	r5, r4
 8001d0e:	f04f 0600 	mov.w	r6, #0
 8001d12:	f04f 0402 	mov.w	r4, #2
 8001d16:	d128      	bne.n	8001d6a <HAL_DMA_Start_IT+0x72>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d18:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001d1c:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d1e:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8001d20:	6826      	ldr	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001d22:	6c07      	ldr	r7, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 8001d24:	f026 0601 	bic.w	r6, r6, #1
 8001d28:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001d2a:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 8001d2c:	40bd      	lsls	r5, r7
 8001d2e:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001d30:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d32:	6843      	ldr	r3, [r0, #4]
 8001d34:	6805      	ldr	r5, [r0, #0]
 8001d36:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 8001d38:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001d3a:	bf0b      	itete	eq
 8001d3c:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001d3e:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001d40:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001d42:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8001d44:	b14b      	cbz	r3, 8001d5a <HAL_DMA_Start_IT+0x62>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d46:	6823      	ldr	r3, [r4, #0]
 8001d48:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001d4c:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8001d4e:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d50:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8001d52:	f043 0301 	orr.w	r3, r3, #1
 8001d56:	602b      	str	r3, [r5, #0]
 8001d58:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d5a:	6823      	ldr	r3, [r4, #0]
 8001d5c:	f023 0304 	bic.w	r3, r3, #4
 8001d60:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001d62:	6823      	ldr	r3, [r4, #0]
 8001d64:	f043 030a 	orr.w	r3, r3, #10
 8001d68:	e7f0      	b.n	8001d4c <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 8001d6a:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 8001d6e:	2002      	movs	r0, #2
}
 8001d70:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001d74 <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001d74:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 8001d78:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d003      	beq.n	8001d86 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d7e:	2304      	movs	r3, #4
 8001d80:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8001d82:	2001      	movs	r0, #1
 8001d84:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d86:	6803      	ldr	r3, [r0, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	f022 020e 	bic.w	r2, r2, #14
 8001d8e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	f022 0201 	bic.w	r2, r2, #1
 8001d96:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001d98:	4a29      	ldr	r2, [pc, #164]	; (8001e40 <HAL_DMA_Abort_IT+0xcc>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d924      	bls.n	8001de8 <HAL_DMA_Abort_IT+0x74>
 8001d9e:	f502 7262 	add.w	r2, r2, #904	; 0x388
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d019      	beq.n	8001dda <HAL_DMA_Abort_IT+0x66>
 8001da6:	3214      	adds	r2, #20
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d018      	beq.n	8001dde <HAL_DMA_Abort_IT+0x6a>
 8001dac:	3214      	adds	r2, #20
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d017      	beq.n	8001de2 <HAL_DMA_Abort_IT+0x6e>
 8001db2:	3214      	adds	r2, #20
 8001db4:	4293      	cmp	r3, r2
 8001db6:	bf0c      	ite	eq
 8001db8:	f44f 5380 	moveq.w	r3, #4096	; 0x1000
 8001dbc:	f44f 3380 	movne.w	r3, #65536	; 0x10000
 8001dc0:	4a20      	ldr	r2, [pc, #128]	; (8001e44 <HAL_DMA_Abort_IT+0xd0>)
 8001dc2:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001dc4:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 8001dc6:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 8001dc8:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    if(hdma->XferAbortCallback != NULL)
 8001dcc:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 8001dce:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8001dd2:	b39b      	cbz	r3, 8001e3c <HAL_DMA_Abort_IT+0xc8>
      hdma->XferAbortCallback(hdma);
 8001dd4:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001dd6:	4620      	mov	r0, r4
 8001dd8:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e7f0      	b.n	8001dc0 <HAL_DMA_Abort_IT+0x4c>
 8001dde:	2310      	movs	r3, #16
 8001de0:	e7ee      	b.n	8001dc0 <HAL_DMA_Abort_IT+0x4c>
 8001de2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001de6:	e7eb      	b.n	8001dc0 <HAL_DMA_Abort_IT+0x4c>
 8001de8:	4917      	ldr	r1, [pc, #92]	; (8001e48 <HAL_DMA_Abort_IT+0xd4>)
 8001dea:	428b      	cmp	r3, r1
 8001dec:	d016      	beq.n	8001e1c <HAL_DMA_Abort_IT+0xa8>
 8001dee:	3114      	adds	r1, #20
 8001df0:	428b      	cmp	r3, r1
 8001df2:	d015      	beq.n	8001e20 <HAL_DMA_Abort_IT+0xac>
 8001df4:	3114      	adds	r1, #20
 8001df6:	428b      	cmp	r3, r1
 8001df8:	d014      	beq.n	8001e24 <HAL_DMA_Abort_IT+0xb0>
 8001dfa:	3114      	adds	r1, #20
 8001dfc:	428b      	cmp	r3, r1
 8001dfe:	d014      	beq.n	8001e2a <HAL_DMA_Abort_IT+0xb6>
 8001e00:	3114      	adds	r1, #20
 8001e02:	428b      	cmp	r3, r1
 8001e04:	d014      	beq.n	8001e30 <HAL_DMA_Abort_IT+0xbc>
 8001e06:	3114      	adds	r1, #20
 8001e08:	428b      	cmp	r3, r1
 8001e0a:	d014      	beq.n	8001e36 <HAL_DMA_Abort_IT+0xc2>
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	bf14      	ite	ne
 8001e10:	f44f 3380 	movne.w	r3, #65536	; 0x10000
 8001e14:	f04f 7380 	moveq.w	r3, #16777216	; 0x1000000
 8001e18:	4a0c      	ldr	r2, [pc, #48]	; (8001e4c <HAL_DMA_Abort_IT+0xd8>)
 8001e1a:	e7d2      	b.n	8001dc2 <HAL_DMA_Abort_IT+0x4e>
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e7fb      	b.n	8001e18 <HAL_DMA_Abort_IT+0xa4>
 8001e20:	2310      	movs	r3, #16
 8001e22:	e7f9      	b.n	8001e18 <HAL_DMA_Abort_IT+0xa4>
 8001e24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e28:	e7f6      	b.n	8001e18 <HAL_DMA_Abort_IT+0xa4>
 8001e2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e2e:	e7f3      	b.n	8001e18 <HAL_DMA_Abort_IT+0xa4>
 8001e30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e34:	e7f0      	b.n	8001e18 <HAL_DMA_Abort_IT+0xa4>
 8001e36:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001e3a:	e7ed      	b.n	8001e18 <HAL_DMA_Abort_IT+0xa4>
  HAL_StatusTypeDef status = HAL_OK;
 8001e3c:	4618      	mov	r0, r3
}
 8001e3e:	bd10      	pop	{r4, pc}
 8001e40:	40020080 	.word	0x40020080
 8001e44:	40020400 	.word	0x40020400
 8001e48:	40020008 	.word	0x40020008
 8001e4c:	40020000 	.word	0x40020000

08001e50 <HAL_DMA_IRQHandler>:
{
 8001e50:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001e52:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001e54:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001e56:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001e58:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001e5a:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001e5c:	4095      	lsls	r5, r2
 8001e5e:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8001e60:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001e62:	d055      	beq.n	8001f10 <HAL_DMA_IRQHandler+0xc0>
 8001e64:	074d      	lsls	r5, r1, #29
 8001e66:	d553      	bpl.n	8001f10 <HAL_DMA_IRQHandler+0xc0>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e6c:	bf5e      	ittt	pl
 8001e6e:	681a      	ldrpl	r2, [r3, #0]
 8001e70:	f022 0204 	bicpl.w	r2, r2, #4
 8001e74:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001e76:	4a60      	ldr	r2, [pc, #384]	; (8001ff8 <HAL_DMA_IRQHandler+0x1a8>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d91f      	bls.n	8001ebc <HAL_DMA_IRQHandler+0x6c>
 8001e7c:	f502 7262 	add.w	r2, r2, #904	; 0x388
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d014      	beq.n	8001eae <HAL_DMA_IRQHandler+0x5e>
 8001e84:	3214      	adds	r2, #20
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d013      	beq.n	8001eb2 <HAL_DMA_IRQHandler+0x62>
 8001e8a:	3214      	adds	r2, #20
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d012      	beq.n	8001eb6 <HAL_DMA_IRQHandler+0x66>
 8001e90:	3214      	adds	r2, #20
 8001e92:	4293      	cmp	r3, r2
 8001e94:	bf0c      	ite	eq
 8001e96:	f44f 4380 	moveq.w	r3, #16384	; 0x4000
 8001e9a:	f44f 2380 	movne.w	r3, #262144	; 0x40000
 8001e9e:	4a57      	ldr	r2, [pc, #348]	; (8001ffc <HAL_DMA_IRQHandler+0x1ac>)
 8001ea0:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8001ea2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	f000 80a5 	beq.w	8001ff4 <HAL_DMA_IRQHandler+0x1a4>
}
 8001eaa:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8001eac:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001eae:	2304      	movs	r3, #4
 8001eb0:	e7f5      	b.n	8001e9e <HAL_DMA_IRQHandler+0x4e>
 8001eb2:	2340      	movs	r3, #64	; 0x40
 8001eb4:	e7f3      	b.n	8001e9e <HAL_DMA_IRQHandler+0x4e>
 8001eb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001eba:	e7f0      	b.n	8001e9e <HAL_DMA_IRQHandler+0x4e>
 8001ebc:	4950      	ldr	r1, [pc, #320]	; (8002000 <HAL_DMA_IRQHandler+0x1b0>)
 8001ebe:	428b      	cmp	r3, r1
 8001ec0:	d016      	beq.n	8001ef0 <HAL_DMA_IRQHandler+0xa0>
 8001ec2:	3114      	adds	r1, #20
 8001ec4:	428b      	cmp	r3, r1
 8001ec6:	d015      	beq.n	8001ef4 <HAL_DMA_IRQHandler+0xa4>
 8001ec8:	3114      	adds	r1, #20
 8001eca:	428b      	cmp	r3, r1
 8001ecc:	d014      	beq.n	8001ef8 <HAL_DMA_IRQHandler+0xa8>
 8001ece:	3114      	adds	r1, #20
 8001ed0:	428b      	cmp	r3, r1
 8001ed2:	d014      	beq.n	8001efe <HAL_DMA_IRQHandler+0xae>
 8001ed4:	3114      	adds	r1, #20
 8001ed6:	428b      	cmp	r3, r1
 8001ed8:	d014      	beq.n	8001f04 <HAL_DMA_IRQHandler+0xb4>
 8001eda:	3114      	adds	r1, #20
 8001edc:	428b      	cmp	r3, r1
 8001ede:	d014      	beq.n	8001f0a <HAL_DMA_IRQHandler+0xba>
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	bf14      	ite	ne
 8001ee4:	f44f 2380 	movne.w	r3, #262144	; 0x40000
 8001ee8:	f04f 6380 	moveq.w	r3, #67108864	; 0x4000000
 8001eec:	4a45      	ldr	r2, [pc, #276]	; (8002004 <HAL_DMA_IRQHandler+0x1b4>)
 8001eee:	e7d7      	b.n	8001ea0 <HAL_DMA_IRQHandler+0x50>
 8001ef0:	2304      	movs	r3, #4
 8001ef2:	e7fb      	b.n	8001eec <HAL_DMA_IRQHandler+0x9c>
 8001ef4:	2340      	movs	r3, #64	; 0x40
 8001ef6:	e7f9      	b.n	8001eec <HAL_DMA_IRQHandler+0x9c>
 8001ef8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001efc:	e7f6      	b.n	8001eec <HAL_DMA_IRQHandler+0x9c>
 8001efe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f02:	e7f3      	b.n	8001eec <HAL_DMA_IRQHandler+0x9c>
 8001f04:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001f08:	e7f0      	b.n	8001eec <HAL_DMA_IRQHandler+0x9c>
 8001f0a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f0e:	e7ed      	b.n	8001eec <HAL_DMA_IRQHandler+0x9c>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001f10:	2502      	movs	r5, #2
 8001f12:	4095      	lsls	r5, r2
 8001f14:	4225      	tst	r5, r4
 8001f16:	d057      	beq.n	8001fc8 <HAL_DMA_IRQHandler+0x178>
 8001f18:	078d      	lsls	r5, r1, #30
 8001f1a:	d555      	bpl.n	8001fc8 <HAL_DMA_IRQHandler+0x178>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	0694      	lsls	r4, r2, #26
 8001f20:	d406      	bmi.n	8001f30 <HAL_DMA_IRQHandler+0xe0>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	f022 020a 	bic.w	r2, r2, #10
 8001f28:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001f30:	4a31      	ldr	r2, [pc, #196]	; (8001ff8 <HAL_DMA_IRQHandler+0x1a8>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d91e      	bls.n	8001f74 <HAL_DMA_IRQHandler+0x124>
 8001f36:	f502 7262 	add.w	r2, r2, #904	; 0x388
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d013      	beq.n	8001f66 <HAL_DMA_IRQHandler+0x116>
 8001f3e:	3214      	adds	r2, #20
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d012      	beq.n	8001f6a <HAL_DMA_IRQHandler+0x11a>
 8001f44:	3214      	adds	r2, #20
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d011      	beq.n	8001f6e <HAL_DMA_IRQHandler+0x11e>
 8001f4a:	3214      	adds	r2, #20
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	bf0c      	ite	eq
 8001f50:	f44f 5300 	moveq.w	r3, #8192	; 0x2000
 8001f54:	f44f 3300 	movne.w	r3, #131072	; 0x20000
 8001f58:	4a28      	ldr	r2, [pc, #160]	; (8001ffc <HAL_DMA_IRQHandler+0x1ac>)
 8001f5a:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8001f62:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001f64:	e79e      	b.n	8001ea4 <HAL_DMA_IRQHandler+0x54>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001f66:	2302      	movs	r3, #2
 8001f68:	e7f6      	b.n	8001f58 <HAL_DMA_IRQHandler+0x108>
 8001f6a:	2320      	movs	r3, #32
 8001f6c:	e7f4      	b.n	8001f58 <HAL_DMA_IRQHandler+0x108>
 8001f6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f72:	e7f1      	b.n	8001f58 <HAL_DMA_IRQHandler+0x108>
 8001f74:	4922      	ldr	r1, [pc, #136]	; (8002000 <HAL_DMA_IRQHandler+0x1b0>)
 8001f76:	428b      	cmp	r3, r1
 8001f78:	d016      	beq.n	8001fa8 <HAL_DMA_IRQHandler+0x158>
 8001f7a:	3114      	adds	r1, #20
 8001f7c:	428b      	cmp	r3, r1
 8001f7e:	d015      	beq.n	8001fac <HAL_DMA_IRQHandler+0x15c>
 8001f80:	3114      	adds	r1, #20
 8001f82:	428b      	cmp	r3, r1
 8001f84:	d014      	beq.n	8001fb0 <HAL_DMA_IRQHandler+0x160>
 8001f86:	3114      	adds	r1, #20
 8001f88:	428b      	cmp	r3, r1
 8001f8a:	d014      	beq.n	8001fb6 <HAL_DMA_IRQHandler+0x166>
 8001f8c:	3114      	adds	r1, #20
 8001f8e:	428b      	cmp	r3, r1
 8001f90:	d014      	beq.n	8001fbc <HAL_DMA_IRQHandler+0x16c>
 8001f92:	3114      	adds	r1, #20
 8001f94:	428b      	cmp	r3, r1
 8001f96:	d014      	beq.n	8001fc2 <HAL_DMA_IRQHandler+0x172>
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	bf14      	ite	ne
 8001f9c:	f44f 3300 	movne.w	r3, #131072	; 0x20000
 8001fa0:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8001fa4:	4a17      	ldr	r2, [pc, #92]	; (8002004 <HAL_DMA_IRQHandler+0x1b4>)
 8001fa6:	e7d8      	b.n	8001f5a <HAL_DMA_IRQHandler+0x10a>
 8001fa8:	2302      	movs	r3, #2
 8001faa:	e7fb      	b.n	8001fa4 <HAL_DMA_IRQHandler+0x154>
 8001fac:	2320      	movs	r3, #32
 8001fae:	e7f9      	b.n	8001fa4 <HAL_DMA_IRQHandler+0x154>
 8001fb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fb4:	e7f6      	b.n	8001fa4 <HAL_DMA_IRQHandler+0x154>
 8001fb6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fba:	e7f3      	b.n	8001fa4 <HAL_DMA_IRQHandler+0x154>
 8001fbc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fc0:	e7f0      	b.n	8001fa4 <HAL_DMA_IRQHandler+0x154>
 8001fc2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001fc6:	e7ed      	b.n	8001fa4 <HAL_DMA_IRQHandler+0x154>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001fc8:	2508      	movs	r5, #8
 8001fca:	4095      	lsls	r5, r2
 8001fcc:	4225      	tst	r5, r4
 8001fce:	d011      	beq.n	8001ff4 <HAL_DMA_IRQHandler+0x1a4>
 8001fd0:	0709      	lsls	r1, r1, #28
 8001fd2:	d50f      	bpl.n	8001ff4 <HAL_DMA_IRQHandler+0x1a4>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fd4:	6819      	ldr	r1, [r3, #0]
 8001fd6:	f021 010e 	bic.w	r1, r1, #14
 8001fda:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001fdc:	2301      	movs	r3, #1
 8001fde:	fa03 f202 	lsl.w	r2, r3, r2
 8001fe2:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001fe4:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8001fe6:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8001fea:	2300      	movs	r3, #0
 8001fec:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8001ff0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001ff2:	e757      	b.n	8001ea4 <HAL_DMA_IRQHandler+0x54>
}
 8001ff4:	bc70      	pop	{r4, r5, r6}
 8001ff6:	4770      	bx	lr
 8001ff8:	40020080 	.word	0x40020080
 8001ffc:	40020400 	.word	0x40020400
 8002000:	40020008 	.word	0x40020008
 8002004:	40020000 	.word	0x40020000

08002008 <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002008:	4a11      	ldr	r2, [pc, #68]	; (8002050 <FLASH_SetErrorCode+0x48>)
 800200a:	68d3      	ldr	r3, [r2, #12]
 800200c:	f013 0310 	ands.w	r3, r3, #16
 8002010:	d005      	beq.n	800201e <FLASH_SetErrorCode+0x16>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002012:	4910      	ldr	r1, [pc, #64]	; (8002054 <FLASH_SetErrorCode+0x4c>)
 8002014:	69cb      	ldr	r3, [r1, #28]
 8002016:	f043 0302 	orr.w	r3, r3, #2
 800201a:	61cb      	str	r3, [r1, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800201c:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800201e:	68d2      	ldr	r2, [r2, #12]
 8002020:	0750      	lsls	r0, r2, #29
 8002022:	d506      	bpl.n	8002032 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002024:	490b      	ldr	r1, [pc, #44]	; (8002054 <FLASH_SetErrorCode+0x4c>)
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8002026:	f043 0304 	orr.w	r3, r3, #4
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800202a:	69ca      	ldr	r2, [r1, #28]
 800202c:	f042 0201 	orr.w	r2, r2, #1
 8002030:	61ca      	str	r2, [r1, #28]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8002032:	4a07      	ldr	r2, [pc, #28]	; (8002050 <FLASH_SetErrorCode+0x48>)
 8002034:	69d1      	ldr	r1, [r2, #28]
 8002036:	07c9      	lsls	r1, r1, #31
 8002038:	d508      	bpl.n	800204c <FLASH_SetErrorCode+0x44>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800203a:	4806      	ldr	r0, [pc, #24]	; (8002054 <FLASH_SetErrorCode+0x4c>)
 800203c:	69c1      	ldr	r1, [r0, #28]
 800203e:	f041 0104 	orr.w	r1, r1, #4
 8002042:	61c1      	str	r1, [r0, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002044:	69d1      	ldr	r1, [r2, #28]
 8002046:	f021 0101 	bic.w	r1, r1, #1
 800204a:	61d1      	str	r1, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800204c:	60d3      	str	r3, [r2, #12]
 800204e:	4770      	bx	lr
 8002050:	40022000 	.word	0x40022000
 8002054:	200052e0 	.word	0x200052e0

08002058 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002058:	4b06      	ldr	r3, [pc, #24]	; (8002074 <HAL_FLASH_Unlock+0x1c>)
 800205a:	6918      	ldr	r0, [r3, #16]
 800205c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002060:	d007      	beq.n	8002072 <HAL_FLASH_Unlock+0x1a>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002062:	4a05      	ldr	r2, [pc, #20]	; (8002078 <HAL_FLASH_Unlock+0x20>)
 8002064:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002066:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 800206a:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800206c:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 800206e:	f3c0 10c0 	ubfx	r0, r0, #7, #1
}
 8002072:	4770      	bx	lr
 8002074:	40022000 	.word	0x40022000
 8002078:	45670123 	.word	0x45670123

0800207c <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800207c:	4a03      	ldr	r2, [pc, #12]	; (800208c <HAL_FLASH_Lock+0x10>)
}
 800207e:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002080:	6913      	ldr	r3, [r2, #16]
 8002082:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002086:	6113      	str	r3, [r2, #16]
}
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	40022000 	.word	0x40022000

08002090 <FLASH_WaitForLastOperation>:
{
 8002090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002092:	4606      	mov	r6, r0
  uint32_t tickstart = HAL_GetTick();
 8002094:	f7ff fa34 	bl	8001500 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002098:	4c11      	ldr	r4, [pc, #68]	; (80020e0 <FLASH_WaitForLastOperation+0x50>)
  uint32_t tickstart = HAL_GetTick();
 800209a:	4607      	mov	r7, r0
 800209c:	4625      	mov	r5, r4
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800209e:	68e3      	ldr	r3, [r4, #12]
 80020a0:	07d8      	lsls	r0, r3, #31
 80020a2:	d412      	bmi.n	80020ca <FLASH_WaitForLastOperation+0x3a>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80020a4:	68e3      	ldr	r3, [r4, #12]
 80020a6:	0699      	lsls	r1, r3, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80020a8:	bf44      	itt	mi
 80020aa:	2320      	movmi	r3, #32
 80020ac:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80020ae:	68eb      	ldr	r3, [r5, #12]
 80020b0:	06da      	lsls	r2, r3, #27
 80020b2:	d406      	bmi.n	80020c2 <FLASH_WaitForLastOperation+0x32>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80020b4:	69eb      	ldr	r3, [r5, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80020b6:	07db      	lsls	r3, r3, #31
 80020b8:	d403      	bmi.n	80020c2 <FLASH_WaitForLastOperation+0x32>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80020ba:	68e8      	ldr	r0, [r5, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80020bc:	f010 0004 	ands.w	r0, r0, #4
 80020c0:	d002      	beq.n	80020c8 <FLASH_WaitForLastOperation+0x38>
    FLASH_SetErrorCode();
 80020c2:	f7ff ffa1 	bl	8002008 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80020c6:	2001      	movs	r0, #1
}
 80020c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 80020ca:	1c73      	adds	r3, r6, #1
 80020cc:	d0e7      	beq.n	800209e <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80020ce:	b90e      	cbnz	r6, 80020d4 <FLASH_WaitForLastOperation+0x44>
        return HAL_TIMEOUT;
 80020d0:	2003      	movs	r0, #3
 80020d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80020d4:	f7ff fa14 	bl	8001500 <HAL_GetTick>
 80020d8:	1bc0      	subs	r0, r0, r7
 80020da:	4286      	cmp	r6, r0
 80020dc:	d2df      	bcs.n	800209e <FLASH_WaitForLastOperation+0xe>
 80020de:	e7f7      	b.n	80020d0 <FLASH_WaitForLastOperation+0x40>
 80020e0:	40022000 	.word	0x40022000

080020e4 <HAL_FLASH_Program>:
{
 80020e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_LOCK(&pFlash);
 80020e8:	4c1f      	ldr	r4, [pc, #124]	; (8002168 <HAL_FLASH_Program+0x84>)
{
 80020ea:	4699      	mov	r9, r3
  __HAL_LOCK(&pFlash);
 80020ec:	7e23      	ldrb	r3, [r4, #24]
{
 80020ee:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 80020f0:	2b01      	cmp	r3, #1
{
 80020f2:	460f      	mov	r7, r1
 80020f4:	4690      	mov	r8, r2
  __HAL_LOCK(&pFlash);
 80020f6:	d033      	beq.n	8002160 <HAL_FLASH_Program+0x7c>
 80020f8:	2301      	movs	r3, #1
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80020fa:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 80020fe:	7623      	strb	r3, [r4, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002100:	f7ff ffc6 	bl	8002090 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8002104:	bb40      	cbnz	r0, 8002158 <HAL_FLASH_Program+0x74>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002106:	2d01      	cmp	r5, #1
 8002108:	d003      	beq.n	8002112 <HAL_FLASH_Program+0x2e>
      nbiterations = 4U;
 800210a:	2d02      	cmp	r5, #2
 800210c:	bf0c      	ite	eq
 800210e:	2502      	moveq	r5, #2
 8002110:	2504      	movne	r5, #4
 8002112:	2600      	movs	r6, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002114:	46b2      	mov	sl, r6
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002116:	f8df b054 	ldr.w	fp, [pc, #84]	; 800216c <HAL_FLASH_Program+0x88>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800211a:	0132      	lsls	r2, r6, #4
 800211c:	4640      	mov	r0, r8
 800211e:	4649      	mov	r1, r9
 8002120:	f7fe f88e 	bl	8000240 <__aeabi_llsr>
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002124:	f8c4 a01c 	str.w	sl, [r4, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002128:	f8db 3010 	ldr.w	r3, [fp, #16]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800212c:	b280      	uxth	r0, r0
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800212e:	f043 0301 	orr.w	r3, r3, #1
 8002132:	f8cb 3010 	str.w	r3, [fp, #16]
  *(__IO uint16_t*)Address = Data;
 8002136:	f827 0016 	strh.w	r0, [r7, r6, lsl #1]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800213a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800213e:	f7ff ffa7 	bl	8002090 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002142:	f8db 3010 	ldr.w	r3, [fp, #16]
 8002146:	f023 0301 	bic.w	r3, r3, #1
 800214a:	f8cb 3010 	str.w	r3, [fp, #16]
      if (status != HAL_OK)
 800214e:	b918      	cbnz	r0, 8002158 <HAL_FLASH_Program+0x74>
 8002150:	3601      	adds	r6, #1
    for (index = 0U; index < nbiterations; index++)
 8002152:	b2f3      	uxtb	r3, r6
 8002154:	429d      	cmp	r5, r3
 8002156:	d8e0      	bhi.n	800211a <HAL_FLASH_Program+0x36>
  __HAL_UNLOCK(&pFlash);
 8002158:	2300      	movs	r3, #0
 800215a:	7623      	strb	r3, [r4, #24]
  return status;
 800215c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(&pFlash);
 8002160:	2002      	movs	r0, #2
}
 8002162:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002166:	bf00      	nop
 8002168:	200052e0 	.word	0x200052e0
 800216c:	40022000 	.word	0x40022000

08002170 <FLASH_MassErase.isra.0>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002170:	2200      	movs	r2, #0
 8002172:	4b06      	ldr	r3, [pc, #24]	; (800218c <FLASH_MassErase.isra.0+0x1c>)
 8002174:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8002176:	4b06      	ldr	r3, [pc, #24]	; (8002190 <FLASH_MassErase.isra.0+0x20>)
 8002178:	691a      	ldr	r2, [r3, #16]
 800217a:	f042 0204 	orr.w	r2, r2, #4
 800217e:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002180:	691a      	ldr	r2, [r3, #16]
 8002182:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002186:	611a      	str	r2, [r3, #16]
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	200052e0 	.word	0x200052e0
 8002190:	40022000 	.word	0x40022000

08002194 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002194:	2200      	movs	r2, #0
 8002196:	4b06      	ldr	r3, [pc, #24]	; (80021b0 <FLASH_PageErase+0x1c>)
 8002198:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800219a:	4b06      	ldr	r3, [pc, #24]	; (80021b4 <FLASH_PageErase+0x20>)
 800219c:	691a      	ldr	r2, [r3, #16]
 800219e:	f042 0202 	orr.w	r2, r2, #2
 80021a2:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80021a4:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80021a6:	691a      	ldr	r2, [r3, #16]
 80021a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021ac:	611a      	str	r2, [r3, #16]
 80021ae:	4770      	bx	lr
 80021b0:	200052e0 	.word	0x200052e0
 80021b4:	40022000 	.word	0x40022000

080021b8 <HAL_FLASHEx_Erase>:
{
 80021b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 80021bc:	4d23      	ldr	r5, [pc, #140]	; (800224c <HAL_FLASHEx_Erase+0x94>)
{
 80021be:	4607      	mov	r7, r0
  __HAL_LOCK(&pFlash);
 80021c0:	7e2b      	ldrb	r3, [r5, #24]
{
 80021c2:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d03d      	beq.n	8002244 <HAL_FLASHEx_Erase+0x8c>
 80021c8:	2401      	movs	r4, #1
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80021ca:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(&pFlash);
 80021cc:	762c      	strb	r4, [r5, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80021ce:	2b02      	cmp	r3, #2
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80021d0:	f24c 3050 	movw	r0, #50000	; 0xc350
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80021d4:	d113      	bne.n	80021fe <HAL_FLASHEx_Erase+0x46>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80021d6:	f7ff ff5b 	bl	8002090 <FLASH_WaitForLastOperation>
 80021da:	b120      	cbz	r0, 80021e6 <HAL_FLASHEx_Erase+0x2e>
  HAL_StatusTypeDef status = HAL_ERROR;
 80021dc:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 80021de:	2300      	movs	r3, #0
 80021e0:	762b      	strb	r3, [r5, #24]
  return status;
 80021e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        FLASH_MassErase(FLASH_BANK_1);
 80021e6:	f7ff ffc3 	bl	8002170 <FLASH_MassErase.isra.0>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80021ea:	f24c 3050 	movw	r0, #50000	; 0xc350
 80021ee:	f7ff ff4f 	bl	8002090 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80021f2:	4a17      	ldr	r2, [pc, #92]	; (8002250 <HAL_FLASHEx_Erase+0x98>)
 80021f4:	6913      	ldr	r3, [r2, #16]
 80021f6:	f023 0304 	bic.w	r3, r3, #4
 80021fa:	6113      	str	r3, [r2, #16]
 80021fc:	e7ef      	b.n	80021de <HAL_FLASHEx_Erase+0x26>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80021fe:	f7ff ff47 	bl	8002090 <FLASH_WaitForLastOperation>
 8002202:	2800      	cmp	r0, #0
 8002204:	d1ea      	bne.n	80021dc <HAL_FLASHEx_Erase+0x24>
        *PageError = 0xFFFFFFFFU;
 8002206:	f04f 33ff 	mov.w	r3, #4294967295
 800220a:	f8c8 3000 	str.w	r3, [r8]
  HAL_StatusTypeDef status = HAL_ERROR;
 800220e:	4620      	mov	r0, r4
        for(address = pEraseInit->PageAddress;
 8002210:	68be      	ldr	r6, [r7, #8]
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002212:	4c0f      	ldr	r4, [pc, #60]	; (8002250 <HAL_FLASHEx_Erase+0x98>)
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	eb03 23c2 	add.w	r3, r3, r2, lsl #11
        for(address = pEraseInit->PageAddress;
 800221c:	429e      	cmp	r6, r3
 800221e:	d2de      	bcs.n	80021de <HAL_FLASHEx_Erase+0x26>
          FLASH_PageErase(address);
 8002220:	4630      	mov	r0, r6
 8002222:	f7ff ffb7 	bl	8002194 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002226:	f24c 3050 	movw	r0, #50000	; 0xc350
 800222a:	f7ff ff31 	bl	8002090 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800222e:	6923      	ldr	r3, [r4, #16]
 8002230:	f023 0302 	bic.w	r3, r3, #2
 8002234:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 8002236:	b110      	cbz	r0, 800223e <HAL_FLASHEx_Erase+0x86>
            *PageError = address;
 8002238:	f8c8 6000 	str.w	r6, [r8]
            break;
 800223c:	e7cf      	b.n	80021de <HAL_FLASHEx_Erase+0x26>
            address += FLASH_PAGE_SIZE)
 800223e:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8002242:	e7e7      	b.n	8002214 <HAL_FLASHEx_Erase+0x5c>
  __HAL_LOCK(&pFlash);
 8002244:	2002      	movs	r0, #2
}
 8002246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800224a:	bf00      	nop
 800224c:	200052e0 	.word	0x200052e0
 8002250:	40022000 	.word	0x40022000

08002254 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002254:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 8002258:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 800225a:	4616      	mov	r6, r2
 800225c:	4b65      	ldr	r3, [pc, #404]	; (80023f4 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800225e:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8002404 <HAL_GPIO_Init+0x1b0>
 8002262:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8002408 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 8002266:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800226a:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 800226c:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002270:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8002274:	45a0      	cmp	r8, r4
 8002276:	d17f      	bne.n	8002378 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8002278:	684d      	ldr	r5, [r1, #4]
 800227a:	2d12      	cmp	r5, #18
 800227c:	f000 80af 	beq.w	80023de <HAL_GPIO_Init+0x18a>
 8002280:	f200 8088 	bhi.w	8002394 <HAL_GPIO_Init+0x140>
 8002284:	2d02      	cmp	r5, #2
 8002286:	f000 80a7 	beq.w	80023d8 <HAL_GPIO_Init+0x184>
 800228a:	d87c      	bhi.n	8002386 <HAL_GPIO_Init+0x132>
 800228c:	2d00      	cmp	r5, #0
 800228e:	f000 808e 	beq.w	80023ae <HAL_GPIO_Init+0x15a>
 8002292:	2d01      	cmp	r5, #1
 8002294:	f000 809e 	beq.w	80023d4 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002298:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800229c:	2cff      	cmp	r4, #255	; 0xff
 800229e:	bf93      	iteet	ls
 80022a0:	4682      	movls	sl, r0
 80022a2:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 80022a6:	3d08      	subhi	r5, #8
 80022a8:	f8d0 b000 	ldrls.w	fp, [r0]
 80022ac:	bf92      	itee	ls
 80022ae:	00b5      	lslls	r5, r6, #2
 80022b0:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 80022b4:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80022b6:	fa09 f805 	lsl.w	r8, r9, r5
 80022ba:	ea2b 0808 	bic.w	r8, fp, r8
 80022be:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80022c2:	bf88      	it	hi
 80022c4:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80022c8:	ea48 0505 	orr.w	r5, r8, r5
 80022cc:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022d0:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80022d4:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80022d8:	d04e      	beq.n	8002378 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80022da:	4d47      	ldr	r5, [pc, #284]	; (80023f8 <HAL_GPIO_Init+0x1a4>)
 80022dc:	4f46      	ldr	r7, [pc, #280]	; (80023f8 <HAL_GPIO_Init+0x1a4>)
 80022de:	69ad      	ldr	r5, [r5, #24]
 80022e0:	f026 0803 	bic.w	r8, r6, #3
 80022e4:	f045 0501 	orr.w	r5, r5, #1
 80022e8:	61bd      	str	r5, [r7, #24]
 80022ea:	69bd      	ldr	r5, [r7, #24]
 80022ec:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80022f0:	f005 0501 	and.w	r5, r5, #1
 80022f4:	9501      	str	r5, [sp, #4]
 80022f6:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80022fa:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80022fe:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8002300:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8002304:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8002308:	fa09 f90b 	lsl.w	r9, r9, fp
 800230c:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002310:	4d3a      	ldr	r5, [pc, #232]	; (80023fc <HAL_GPIO_Init+0x1a8>)
 8002312:	42a8      	cmp	r0, r5
 8002314:	d068      	beq.n	80023e8 <HAL_GPIO_Init+0x194>
 8002316:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800231a:	42a8      	cmp	r0, r5
 800231c:	d066      	beq.n	80023ec <HAL_GPIO_Init+0x198>
 800231e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002322:	42a8      	cmp	r0, r5
 8002324:	d064      	beq.n	80023f0 <HAL_GPIO_Init+0x19c>
 8002326:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800232a:	42a8      	cmp	r0, r5
 800232c:	bf0c      	ite	eq
 800232e:	2503      	moveq	r5, #3
 8002330:	2504      	movne	r5, #4
 8002332:	fa05 f50b 	lsl.w	r5, r5, fp
 8002336:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 800233a:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800233e:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002340:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8002344:	bf14      	ite	ne
 8002346:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002348:	43a5      	biceq	r5, r4
 800234a:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800234c:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800234e:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8002352:	bf14      	ite	ne
 8002354:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002356:	43a5      	biceq	r5, r4
 8002358:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800235a:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800235c:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8002360:	bf14      	ite	ne
 8002362:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002364:	43a5      	biceq	r5, r4
 8002366:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002368:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800236a:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800236e:	bf14      	ite	ne
 8002370:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002372:	ea25 0404 	biceq.w	r4, r5, r4
 8002376:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 8002378:	3601      	adds	r6, #1
 800237a:	2e10      	cmp	r6, #16
 800237c:	f47f af73 	bne.w	8002266 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8002380:	b003      	add	sp, #12
 8002382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8002386:	2d03      	cmp	r5, #3
 8002388:	d022      	beq.n	80023d0 <HAL_GPIO_Init+0x17c>
 800238a:	2d11      	cmp	r5, #17
 800238c:	d184      	bne.n	8002298 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800238e:	68ca      	ldr	r2, [r1, #12]
 8002390:	3204      	adds	r2, #4
          break;
 8002392:	e781      	b.n	8002298 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8002394:	4f1a      	ldr	r7, [pc, #104]	; (8002400 <HAL_GPIO_Init+0x1ac>)
 8002396:	42bd      	cmp	r5, r7
 8002398:	d009      	beq.n	80023ae <HAL_GPIO_Init+0x15a>
 800239a:	d812      	bhi.n	80023c2 <HAL_GPIO_Init+0x16e>
 800239c:	f8df 906c 	ldr.w	r9, [pc, #108]	; 800240c <HAL_GPIO_Init+0x1b8>
 80023a0:	454d      	cmp	r5, r9
 80023a2:	d004      	beq.n	80023ae <HAL_GPIO_Init+0x15a>
 80023a4:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80023a8:	454d      	cmp	r5, r9
 80023aa:	f47f af75 	bne.w	8002298 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80023ae:	688a      	ldr	r2, [r1, #8]
 80023b0:	b1c2      	cbz	r2, 80023e4 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80023b2:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 80023b4:	bf0c      	ite	eq
 80023b6:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 80023ba:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023be:	2208      	movs	r2, #8
 80023c0:	e76a      	b.n	8002298 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80023c2:	4575      	cmp	r5, lr
 80023c4:	d0f3      	beq.n	80023ae <HAL_GPIO_Init+0x15a>
 80023c6:	4565      	cmp	r5, ip
 80023c8:	d0f1      	beq.n	80023ae <HAL_GPIO_Init+0x15a>
 80023ca:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8002410 <HAL_GPIO_Init+0x1bc>
 80023ce:	e7eb      	b.n	80023a8 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80023d0:	2200      	movs	r2, #0
 80023d2:	e761      	b.n	8002298 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80023d4:	68ca      	ldr	r2, [r1, #12]
          break;
 80023d6:	e75f      	b.n	8002298 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80023d8:	68ca      	ldr	r2, [r1, #12]
 80023da:	3208      	adds	r2, #8
          break;
 80023dc:	e75c      	b.n	8002298 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80023de:	68ca      	ldr	r2, [r1, #12]
 80023e0:	320c      	adds	r2, #12
          break;
 80023e2:	e759      	b.n	8002298 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80023e4:	2204      	movs	r2, #4
 80023e6:	e757      	b.n	8002298 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023e8:	2500      	movs	r5, #0
 80023ea:	e7a2      	b.n	8002332 <HAL_GPIO_Init+0xde>
 80023ec:	2501      	movs	r5, #1
 80023ee:	e7a0      	b.n	8002332 <HAL_GPIO_Init+0xde>
 80023f0:	2502      	movs	r5, #2
 80023f2:	e79e      	b.n	8002332 <HAL_GPIO_Init+0xde>
 80023f4:	40010400 	.word	0x40010400
 80023f8:	40021000 	.word	0x40021000
 80023fc:	40010800 	.word	0x40010800
 8002400:	10210000 	.word	0x10210000
 8002404:	10310000 	.word	0x10310000
 8002408:	10320000 	.word	0x10320000
 800240c:	10110000 	.word	0x10110000
 8002410:	10220000 	.word	0x10220000

08002414 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002414:	6883      	ldr	r3, [r0, #8]
 8002416:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8002418:	bf14      	ite	ne
 800241a:	2001      	movne	r0, #1
 800241c:	2000      	moveq	r0, #0
 800241e:	4770      	bx	lr

08002420 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002420:	b10a      	cbz	r2, 8002426 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002422:	6101      	str	r1, [r0, #16]
 8002424:	4770      	bx	lr
 8002426:	0409      	lsls	r1, r1, #16
 8002428:	e7fb      	b.n	8002422 <HAL_GPIO_WritePin+0x2>
	...

0800242c <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800242c:	6803      	ldr	r3, [r0, #0]
{
 800242e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002432:	07db      	lsls	r3, r3, #31
{
 8002434:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002436:	d414      	bmi.n	8002462 <HAL_RCC_OscConfig+0x36>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002438:	682b      	ldr	r3, [r5, #0]
 800243a:	079f      	lsls	r7, r3, #30
 800243c:	d462      	bmi.n	8002504 <HAL_RCC_OscConfig+0xd8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800243e:	682b      	ldr	r3, [r5, #0]
 8002440:	0719      	lsls	r1, r3, #28
 8002442:	f100 8099 	bmi.w	8002578 <HAL_RCC_OscConfig+0x14c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002446:	682b      	ldr	r3, [r5, #0]
 8002448:	075a      	lsls	r2, r3, #29
 800244a:	f100 80c3 	bmi.w	80025d4 <HAL_RCC_OscConfig+0x1a8>

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 800244e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8002450:	2a00      	cmp	r2, #0
 8002452:	f040 8131 	bne.w	80026b8 <HAL_RCC_OscConfig+0x28c>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002456:	6a2a      	ldr	r2, [r5, #32]
 8002458:	2a00      	cmp	r2, #0
 800245a:	f040 8184 	bne.w	8002766 <HAL_RCC_OscConfig+0x33a>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 800245e:	2000      	movs	r0, #0
 8002460:	e014      	b.n	800248c <HAL_RCC_OscConfig+0x60>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002462:	4c90      	ldr	r4, [pc, #576]	; (80026a4 <HAL_RCC_OscConfig+0x278>)
 8002464:	6863      	ldr	r3, [r4, #4]
 8002466:	f003 030c 	and.w	r3, r3, #12
 800246a:	2b04      	cmp	r3, #4
 800246c:	d007      	beq.n	800247e <HAL_RCC_OscConfig+0x52>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800246e:	6863      	ldr	r3, [r4, #4]
 8002470:	f003 030c 	and.w	r3, r3, #12
 8002474:	2b08      	cmp	r3, #8
 8002476:	d10c      	bne.n	8002492 <HAL_RCC_OscConfig+0x66>
 8002478:	6863      	ldr	r3, [r4, #4]
 800247a:	03de      	lsls	r6, r3, #15
 800247c:	d509      	bpl.n	8002492 <HAL_RCC_OscConfig+0x66>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800247e:	6823      	ldr	r3, [r4, #0]
 8002480:	039c      	lsls	r4, r3, #14
 8002482:	d5d9      	bpl.n	8002438 <HAL_RCC_OscConfig+0xc>
 8002484:	68ab      	ldr	r3, [r5, #8]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1d6      	bne.n	8002438 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800248a:	2001      	movs	r0, #1
}
 800248c:	b002      	add	sp, #8
 800248e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002492:	68ab      	ldr	r3, [r5, #8]
 8002494:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002498:	d110      	bne.n	80024bc <HAL_RCC_OscConfig+0x90>
 800249a:	6823      	ldr	r3, [r4, #0]
 800249c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024a0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80024a2:	f7ff f82d 	bl	8001500 <HAL_GetTick>
 80024a6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024a8:	6823      	ldr	r3, [r4, #0]
 80024aa:	0398      	lsls	r0, r3, #14
 80024ac:	d4c4      	bmi.n	8002438 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024ae:	f7ff f827 	bl	8001500 <HAL_GetTick>
 80024b2:	1b80      	subs	r0, r0, r6
 80024b4:	2864      	cmp	r0, #100	; 0x64
 80024b6:	d9f7      	bls.n	80024a8 <HAL_RCC_OscConfig+0x7c>
            return HAL_TIMEOUT;
 80024b8:	2003      	movs	r0, #3
 80024ba:	e7e7      	b.n	800248c <HAL_RCC_OscConfig+0x60>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024bc:	b99b      	cbnz	r3, 80024e6 <HAL_RCC_OscConfig+0xba>
 80024be:	6823      	ldr	r3, [r4, #0]
 80024c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024c4:	6023      	str	r3, [r4, #0]
 80024c6:	6823      	ldr	r3, [r4, #0]
 80024c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024cc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80024ce:	f7ff f817 	bl	8001500 <HAL_GetTick>
 80024d2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024d4:	6823      	ldr	r3, [r4, #0]
 80024d6:	0399      	lsls	r1, r3, #14
 80024d8:	d5ae      	bpl.n	8002438 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024da:	f7ff f811 	bl	8001500 <HAL_GetTick>
 80024de:	1b80      	subs	r0, r0, r6
 80024e0:	2864      	cmp	r0, #100	; 0x64
 80024e2:	d9f7      	bls.n	80024d4 <HAL_RCC_OscConfig+0xa8>
 80024e4:	e7e8      	b.n	80024b8 <HAL_RCC_OscConfig+0x8c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024ea:	6823      	ldr	r3, [r4, #0]
 80024ec:	d103      	bne.n	80024f6 <HAL_RCC_OscConfig+0xca>
 80024ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024f2:	6023      	str	r3, [r4, #0]
 80024f4:	e7d1      	b.n	800249a <HAL_RCC_OscConfig+0x6e>
 80024f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024fa:	6023      	str	r3, [r4, #0]
 80024fc:	6823      	ldr	r3, [r4, #0]
 80024fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002502:	e7cd      	b.n	80024a0 <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002504:	4c67      	ldr	r4, [pc, #412]	; (80026a4 <HAL_RCC_OscConfig+0x278>)
 8002506:	6863      	ldr	r3, [r4, #4]
 8002508:	f013 0f0c 	tst.w	r3, #12
 800250c:	d007      	beq.n	800251e <HAL_RCC_OscConfig+0xf2>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800250e:	6863      	ldr	r3, [r4, #4]
 8002510:	f003 030c 	and.w	r3, r3, #12
 8002514:	2b08      	cmp	r3, #8
 8002516:	d110      	bne.n	800253a <HAL_RCC_OscConfig+0x10e>
 8002518:	6863      	ldr	r3, [r4, #4]
 800251a:	03da      	lsls	r2, r3, #15
 800251c:	d40d      	bmi.n	800253a <HAL_RCC_OscConfig+0x10e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800251e:	6823      	ldr	r3, [r4, #0]
 8002520:	079b      	lsls	r3, r3, #30
 8002522:	d502      	bpl.n	800252a <HAL_RCC_OscConfig+0xfe>
 8002524:	696b      	ldr	r3, [r5, #20]
 8002526:	2b01      	cmp	r3, #1
 8002528:	d1af      	bne.n	800248a <HAL_RCC_OscConfig+0x5e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800252a:	6823      	ldr	r3, [r4, #0]
 800252c:	69aa      	ldr	r2, [r5, #24]
 800252e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002532:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002536:	6023      	str	r3, [r4, #0]
 8002538:	e781      	b.n	800243e <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800253a:	696a      	ldr	r2, [r5, #20]
 800253c:	4b5a      	ldr	r3, [pc, #360]	; (80026a8 <HAL_RCC_OscConfig+0x27c>)
 800253e:	b16a      	cbz	r2, 800255c <HAL_RCC_OscConfig+0x130>
        __HAL_RCC_HSI_ENABLE();
 8002540:	2201      	movs	r2, #1
 8002542:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002544:	f7fe ffdc 	bl	8001500 <HAL_GetTick>
 8002548:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800254a:	6823      	ldr	r3, [r4, #0]
 800254c:	079f      	lsls	r7, r3, #30
 800254e:	d4ec      	bmi.n	800252a <HAL_RCC_OscConfig+0xfe>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002550:	f7fe ffd6 	bl	8001500 <HAL_GetTick>
 8002554:	1b80      	subs	r0, r0, r6
 8002556:	2802      	cmp	r0, #2
 8002558:	d9f7      	bls.n	800254a <HAL_RCC_OscConfig+0x11e>
 800255a:	e7ad      	b.n	80024b8 <HAL_RCC_OscConfig+0x8c>
        __HAL_RCC_HSI_DISABLE();
 800255c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800255e:	f7fe ffcf 	bl	8001500 <HAL_GetTick>
 8002562:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002564:	6823      	ldr	r3, [r4, #0]
 8002566:	0798      	lsls	r0, r3, #30
 8002568:	f57f af69 	bpl.w	800243e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800256c:	f7fe ffc8 	bl	8001500 <HAL_GetTick>
 8002570:	1b80      	subs	r0, r0, r6
 8002572:	2802      	cmp	r0, #2
 8002574:	d9f6      	bls.n	8002564 <HAL_RCC_OscConfig+0x138>
 8002576:	e79f      	b.n	80024b8 <HAL_RCC_OscConfig+0x8c>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002578:	69ea      	ldr	r2, [r5, #28]
 800257a:	4c4a      	ldr	r4, [pc, #296]	; (80026a4 <HAL_RCC_OscConfig+0x278>)
 800257c:	4b4b      	ldr	r3, [pc, #300]	; (80026ac <HAL_RCC_OscConfig+0x280>)
 800257e:	b1da      	cbz	r2, 80025b8 <HAL_RCC_OscConfig+0x18c>
      __HAL_RCC_LSI_ENABLE();
 8002580:	2201      	movs	r2, #1
 8002582:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002584:	f7fe ffbc 	bl	8001500 <HAL_GetTick>
 8002588:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800258a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800258c:	079b      	lsls	r3, r3, #30
 800258e:	d50d      	bpl.n	80025ac <HAL_RCC_OscConfig+0x180>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002590:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002594:	4b46      	ldr	r3, [pc, #280]	; (80026b0 <HAL_RCC_OscConfig+0x284>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	fbb3 f3f2 	udiv	r3, r3, r2
 800259c:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 800259e:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 80025a0:	9b01      	ldr	r3, [sp, #4]
 80025a2:	1e5a      	subs	r2, r3, #1
 80025a4:	9201      	str	r2, [sp, #4]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d1f9      	bne.n	800259e <HAL_RCC_OscConfig+0x172>
 80025aa:	e74c      	b.n	8002446 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025ac:	f7fe ffa8 	bl	8001500 <HAL_GetTick>
 80025b0:	1b80      	subs	r0, r0, r6
 80025b2:	2802      	cmp	r0, #2
 80025b4:	d9e9      	bls.n	800258a <HAL_RCC_OscConfig+0x15e>
 80025b6:	e77f      	b.n	80024b8 <HAL_RCC_OscConfig+0x8c>
      __HAL_RCC_LSI_DISABLE();
 80025b8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80025ba:	f7fe ffa1 	bl	8001500 <HAL_GetTick>
 80025be:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80025c2:	079f      	lsls	r7, r3, #30
 80025c4:	f57f af3f 	bpl.w	8002446 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025c8:	f7fe ff9a 	bl	8001500 <HAL_GetTick>
 80025cc:	1b80      	subs	r0, r0, r6
 80025ce:	2802      	cmp	r0, #2
 80025d0:	d9f6      	bls.n	80025c0 <HAL_RCC_OscConfig+0x194>
 80025d2:	e771      	b.n	80024b8 <HAL_RCC_OscConfig+0x8c>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025d4:	4c33      	ldr	r4, [pc, #204]	; (80026a4 <HAL_RCC_OscConfig+0x278>)
 80025d6:	69e3      	ldr	r3, [r4, #28]
 80025d8:	00de      	lsls	r6, r3, #3
 80025da:	d424      	bmi.n	8002626 <HAL_RCC_OscConfig+0x1fa>
      pwrclkchanged = SET;
 80025dc:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80025de:	69e3      	ldr	r3, [r4, #28]
 80025e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025e4:	61e3      	str	r3, [r4, #28]
 80025e6:	69e3      	ldr	r3, [r4, #28]
 80025e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ec:	9300      	str	r3, [sp, #0]
 80025ee:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025f0:	4e30      	ldr	r6, [pc, #192]	; (80026b4 <HAL_RCC_OscConfig+0x288>)
 80025f2:	6833      	ldr	r3, [r6, #0]
 80025f4:	05d8      	lsls	r0, r3, #23
 80025f6:	d518      	bpl.n	800262a <HAL_RCC_OscConfig+0x1fe>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025f8:	692b      	ldr	r3, [r5, #16]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d126      	bne.n	800264c <HAL_RCC_OscConfig+0x220>
 80025fe:	6a23      	ldr	r3, [r4, #32]
 8002600:	f043 0301 	orr.w	r3, r3, #1
 8002604:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8002606:	f7fe ff7b 	bl	8001500 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800260a:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800260e:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002610:	6a23      	ldr	r3, [r4, #32]
 8002612:	079a      	lsls	r2, r3, #30
 8002614:	d53f      	bpl.n	8002696 <HAL_RCC_OscConfig+0x26a>
    if(pwrclkchanged == SET)
 8002616:	2f00      	cmp	r7, #0
 8002618:	f43f af19 	beq.w	800244e <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 800261c:	69e3      	ldr	r3, [r4, #28]
 800261e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002622:	61e3      	str	r3, [r4, #28]
 8002624:	e713      	b.n	800244e <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8002626:	2700      	movs	r7, #0
 8002628:	e7e2      	b.n	80025f0 <HAL_RCC_OscConfig+0x1c4>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800262a:	6833      	ldr	r3, [r6, #0]
 800262c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002630:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002632:	f7fe ff65 	bl	8001500 <HAL_GetTick>
 8002636:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002638:	6833      	ldr	r3, [r6, #0]
 800263a:	05d9      	lsls	r1, r3, #23
 800263c:	d4dc      	bmi.n	80025f8 <HAL_RCC_OscConfig+0x1cc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800263e:	f7fe ff5f 	bl	8001500 <HAL_GetTick>
 8002642:	eba0 0008 	sub.w	r0, r0, r8
 8002646:	2864      	cmp	r0, #100	; 0x64
 8002648:	d9f6      	bls.n	8002638 <HAL_RCC_OscConfig+0x20c>
 800264a:	e735      	b.n	80024b8 <HAL_RCC_OscConfig+0x8c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800264c:	b9ab      	cbnz	r3, 800267a <HAL_RCC_OscConfig+0x24e>
 800264e:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002650:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002654:	f023 0301 	bic.w	r3, r3, #1
 8002658:	6223      	str	r3, [r4, #32]
 800265a:	6a23      	ldr	r3, [r4, #32]
 800265c:	f023 0304 	bic.w	r3, r3, #4
 8002660:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8002662:	f7fe ff4d 	bl	8001500 <HAL_GetTick>
 8002666:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002668:	6a23      	ldr	r3, [r4, #32]
 800266a:	079b      	lsls	r3, r3, #30
 800266c:	d5d3      	bpl.n	8002616 <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800266e:	f7fe ff47 	bl	8001500 <HAL_GetTick>
 8002672:	1b80      	subs	r0, r0, r6
 8002674:	4540      	cmp	r0, r8
 8002676:	d9f7      	bls.n	8002668 <HAL_RCC_OscConfig+0x23c>
 8002678:	e71e      	b.n	80024b8 <HAL_RCC_OscConfig+0x8c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800267a:	2b05      	cmp	r3, #5
 800267c:	6a23      	ldr	r3, [r4, #32]
 800267e:	d103      	bne.n	8002688 <HAL_RCC_OscConfig+0x25c>
 8002680:	f043 0304 	orr.w	r3, r3, #4
 8002684:	6223      	str	r3, [r4, #32]
 8002686:	e7ba      	b.n	80025fe <HAL_RCC_OscConfig+0x1d2>
 8002688:	f023 0301 	bic.w	r3, r3, #1
 800268c:	6223      	str	r3, [r4, #32]
 800268e:	6a23      	ldr	r3, [r4, #32]
 8002690:	f023 0304 	bic.w	r3, r3, #4
 8002694:	e7b6      	b.n	8002604 <HAL_RCC_OscConfig+0x1d8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002696:	f7fe ff33 	bl	8001500 <HAL_GetTick>
 800269a:	eba0 0008 	sub.w	r0, r0, r8
 800269e:	42b0      	cmp	r0, r6
 80026a0:	d9b6      	bls.n	8002610 <HAL_RCC_OscConfig+0x1e4>
 80026a2:	e709      	b.n	80024b8 <HAL_RCC_OscConfig+0x8c>
 80026a4:	40021000 	.word	0x40021000
 80026a8:	42420000 	.word	0x42420000
 80026ac:	42420480 	.word	0x42420480
 80026b0:	20000050 	.word	0x20000050
 80026b4:	40007000 	.word	0x40007000
    if((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80026b8:	4c4f      	ldr	r4, [pc, #316]	; (80027f8 <HAL_RCC_OscConfig+0x3cc>)
 80026ba:	6863      	ldr	r3, [r4, #4]
 80026bc:	03d8      	lsls	r0, r3, #15
 80026be:	d508      	bpl.n	80026d2 <HAL_RCC_OscConfig+0x2a6>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80026c0:	6863      	ldr	r3, [r4, #4]
 80026c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 80026c6:	2b08      	cmp	r3, #8
 80026c8:	d103      	bne.n	80026d2 <HAL_RCC_OscConfig+0x2a6>
        ((READ_BIT(RCC->CFGR2,RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 80026ca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 80026cc:	03d9      	lsls	r1, r3, #15
 80026ce:	f53f aedc 	bmi.w	800248a <HAL_RCC_OscConfig+0x5e>
      if((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 80026d2:	2a02      	cmp	r2, #2
 80026d4:	d133      	bne.n	800273e <HAL_RCC_OscConfig+0x312>
        if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLL3ON) && \
 80026d6:	6823      	ldr	r3, [r4, #0]
 80026d8:	00da      	lsls	r2, r3, #3
 80026da:	d506      	bpl.n	80026ea <HAL_RCC_OscConfig+0x2be>
          (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 80026dc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLL3ON) && \
 80026de:	6b6a      	ldr	r2, [r5, #52]	; 0x34
          (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 80026e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
        if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLL3ON) && \
 80026e4:	4293      	cmp	r3, r2
 80026e6:	f47f aed0 	bne.w	800248a <HAL_RCC_OscConfig+0x5e>
        __HAL_RCC_PLL2_DISABLE();
 80026ea:	2300      	movs	r3, #0
 80026ec:	4e43      	ldr	r6, [pc, #268]	; (80027fc <HAL_RCC_OscConfig+0x3d0>)
 80026ee:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80026f0:	f7fe ff06 	bl	8001500 <HAL_GetTick>
 80026f4:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80026f6:	6823      	ldr	r3, [r4, #0]
 80026f8:	011b      	lsls	r3, r3, #4
 80026fa:	d41a      	bmi.n	8002732 <HAL_RCC_OscConfig+0x306>
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 80026fc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80026fe:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8002700:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002704:	4313      	orrs	r3, r2
 8002706:	62e3      	str	r3, [r4, #44]	; 0x2c
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8002708:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800270a:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800270c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002710:	4313      	orrs	r3, r2
 8002712:	62e3      	str	r3, [r4, #44]	; 0x2c
        __HAL_RCC_PLL2_ENABLE();
 8002714:	2301      	movs	r3, #1
 8002716:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002718:	f7fe fef2 	bl	8001500 <HAL_GetTick>
 800271c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 800271e:	6823      	ldr	r3, [r4, #0]
 8002720:	011f      	lsls	r7, r3, #4
 8002722:	f53f ae98 	bmi.w	8002456 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8002726:	f7fe feeb 	bl	8001500 <HAL_GetTick>
 800272a:	1b80      	subs	r0, r0, r6
 800272c:	2864      	cmp	r0, #100	; 0x64
 800272e:	d9f6      	bls.n	800271e <HAL_RCC_OscConfig+0x2f2>
 8002730:	e6c2      	b.n	80024b8 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8002732:	f7fe fee5 	bl	8001500 <HAL_GetTick>
 8002736:	1bc0      	subs	r0, r0, r7
 8002738:	2864      	cmp	r0, #100	; 0x64
 800273a:	d9dc      	bls.n	80026f6 <HAL_RCC_OscConfig+0x2ca>
 800273c:	e6bc      	b.n	80024b8 <HAL_RCC_OscConfig+0x8c>
        __HAL_RCC_PLL2_DISABLE();
 800273e:	2200      	movs	r2, #0
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8002740:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002742:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002746:	62e3      	str	r3, [r4, #44]	; 0x2c
        __HAL_RCC_PLL2_DISABLE();
 8002748:	4b2c      	ldr	r3, [pc, #176]	; (80027fc <HAL_RCC_OscConfig+0x3d0>)
 800274a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800274c:	f7fe fed8 	bl	8001500 <HAL_GetTick>
 8002750:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8002752:	6823      	ldr	r3, [r4, #0]
 8002754:	0118      	lsls	r0, r3, #4
 8002756:	f57f ae7e 	bpl.w	8002456 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800275a:	f7fe fed1 	bl	8001500 <HAL_GetTick>
 800275e:	1b80      	subs	r0, r0, r6
 8002760:	2864      	cmp	r0, #100	; 0x64
 8002762:	d9f6      	bls.n	8002752 <HAL_RCC_OscConfig+0x326>
 8002764:	e6a8      	b.n	80024b8 <HAL_RCC_OscConfig+0x8c>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002766:	4c24      	ldr	r4, [pc, #144]	; (80027f8 <HAL_RCC_OscConfig+0x3cc>)
 8002768:	6863      	ldr	r3, [r4, #4]
 800276a:	f003 030c 	and.w	r3, r3, #12
 800276e:	2b08      	cmp	r3, #8
 8002770:	f43f ae8b 	beq.w	800248a <HAL_RCC_OscConfig+0x5e>
 8002774:	2300      	movs	r3, #0
 8002776:	4e22      	ldr	r6, [pc, #136]	; (8002800 <HAL_RCC_OscConfig+0x3d4>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002778:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800277a:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800277c:	d12f      	bne.n	80027de <HAL_RCC_OscConfig+0x3b2>
        tickstart = HAL_GetTick();
 800277e:	f7fe febf 	bl	8001500 <HAL_GetTick>
 8002782:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002784:	6823      	ldr	r3, [r4, #0]
 8002786:	0199      	lsls	r1, r3, #6
 8002788:	d423      	bmi.n	80027d2 <HAL_RCC_OscConfig+0x3a6>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800278a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800278c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002790:	d109      	bne.n	80027a6 <HAL_RCC_OscConfig+0x37a>
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8002792:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002794:	6869      	ldr	r1, [r5, #4]
 8002796:	430a      	orrs	r2, r1
 8002798:	62e2      	str	r2, [r4, #44]	; 0x2c
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800279a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800279c:	68e9      	ldr	r1, [r5, #12]
 800279e:	f022 020f 	bic.w	r2, r2, #15
 80027a2:	430a      	orrs	r2, r1
 80027a4:	62e2      	str	r2, [r4, #44]	; 0x2c
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027a6:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 80027a8:	6862      	ldr	r2, [r4, #4]
 80027aa:	430b      	orrs	r3, r1
 80027ac:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80027b0:	4313      	orrs	r3, r2
 80027b2:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80027b4:	2301      	movs	r3, #1
 80027b6:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80027b8:	f7fe fea2 	bl	8001500 <HAL_GetTick>
 80027bc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027be:	6823      	ldr	r3, [r4, #0]
 80027c0:	019a      	lsls	r2, r3, #6
 80027c2:	f53f ae4c 	bmi.w	800245e <HAL_RCC_OscConfig+0x32>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027c6:	f7fe fe9b 	bl	8001500 <HAL_GetTick>
 80027ca:	1b40      	subs	r0, r0, r5
 80027cc:	2802      	cmp	r0, #2
 80027ce:	d9f6      	bls.n	80027be <HAL_RCC_OscConfig+0x392>
 80027d0:	e672      	b.n	80024b8 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027d2:	f7fe fe95 	bl	8001500 <HAL_GetTick>
 80027d6:	1bc0      	subs	r0, r0, r7
 80027d8:	2802      	cmp	r0, #2
 80027da:	d9d3      	bls.n	8002784 <HAL_RCC_OscConfig+0x358>
 80027dc:	e66c      	b.n	80024b8 <HAL_RCC_OscConfig+0x8c>
        tickstart = HAL_GetTick();
 80027de:	f7fe fe8f 	bl	8001500 <HAL_GetTick>
 80027e2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027e4:	6823      	ldr	r3, [r4, #0]
 80027e6:	019b      	lsls	r3, r3, #6
 80027e8:	f57f ae39 	bpl.w	800245e <HAL_RCC_OscConfig+0x32>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027ec:	f7fe fe88 	bl	8001500 <HAL_GetTick>
 80027f0:	1b40      	subs	r0, r0, r5
 80027f2:	2802      	cmp	r0, #2
 80027f4:	d9f6      	bls.n	80027e4 <HAL_RCC_OscConfig+0x3b8>
 80027f6:	e65f      	b.n	80024b8 <HAL_RCC_OscConfig+0x8c>
 80027f8:	40021000 	.word	0x40021000
 80027fc:	42420068 	.word	0x42420068
 8002800:	42420060 	.word	0x42420060

08002804 <HAL_RCC_GetSysClockFreq>:
{
 8002804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002806:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8002808:	466a      	mov	r2, sp
 800280a:	4b2a      	ldr	r3, [pc, #168]	; (80028b4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800280c:	f103 0508 	add.w	r5, r3, #8
 8002810:	4614      	mov	r4, r2
 8002812:	6818      	ldr	r0, [r3, #0]
 8002814:	6859      	ldr	r1, [r3, #4]
 8002816:	3308      	adds	r3, #8
 8002818:	c403      	stmia	r4!, {r0, r1}
 800281a:	42ab      	cmp	r3, r5
 800281c:	4622      	mov	r2, r4
 800281e:	d1f7      	bne.n	8002810 <HAL_RCC_GetSysClockFreq+0xc>
 8002820:	6818      	ldr	r0, [r3, #0]
 8002822:	889b      	ldrh	r3, [r3, #4]
 8002824:	6020      	str	r0, [r4, #0]
 8002826:	80a3      	strh	r3, [r4, #4]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8002828:	4b23      	ldr	r3, [pc, #140]	; (80028b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800282a:	ac04      	add	r4, sp, #16
 800282c:	f103 0510 	add.w	r5, r3, #16
 8002830:	4622      	mov	r2, r4
 8002832:	6818      	ldr	r0, [r3, #0]
 8002834:	6859      	ldr	r1, [r3, #4]
 8002836:	3308      	adds	r3, #8
 8002838:	c203      	stmia	r2!, {r0, r1}
 800283a:	42ab      	cmp	r3, r5
 800283c:	4614      	mov	r4, r2
 800283e:	d1f7      	bne.n	8002830 <HAL_RCC_GetSysClockFreq+0x2c>
  tmpreg = RCC->CFGR;
 8002840:	491e      	ldr	r1, [pc, #120]	; (80028bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002842:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002844:	f003 020c 	and.w	r2, r3, #12
 8002848:	2a08      	cmp	r2, #8
 800284a:	d131      	bne.n	80028b0 <HAL_RCC_GetSysClockFreq+0xac>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800284c:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8002850:	a808      	add	r0, sp, #32
 8002852:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002854:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002856:	f812 6c20 	ldrb.w	r6, [r2, #-32]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800285a:	d526      	bpl.n	80028aa <HAL_RCC_GetSysClockFreq+0xa6>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 800285c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800285e:	f003 030f 	and.w	r3, r3, #15
 8002862:	4403      	add	r3, r0
 8002864:	f813 2c10 	ldrb.w	r2, [r3, #-16]
        if(HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8002868:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800286a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800286e:	4b14      	ldr	r3, [pc, #80]	; (80028c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002870:	d016      	beq.n	80028a0 <HAL_RCC_GetSysClockFreq+0x9c>
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8002872:	6acf      	ldr	r7, [r1, #44]	; 0x2c
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8002874:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8002876:	f3c4 2403 	ubfx	r4, r4, #8, #4
 800287a:	3402      	adds	r4, #2
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 800287c:	fba4 4506 	umull	r4, r5, r4, r6
 8002880:	fba4 0103 	umull	r0, r1, r4, r3
 8002884:	fb03 1105 	mla	r1, r3, r5, r1
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8002888:	f3c7 1303 	ubfx	r3, r7, #4, #4
 800288c:	3301      	adds	r3, #1
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 800288e:	fba3 2302 	umull	r2, r3, r3, r2
 8002892:	f7fe fc6b 	bl	800116c <__aeabi_uldivmod>
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8002896:	2e0d      	cmp	r6, #13
 8002898:	d100      	bne.n	800289c <HAL_RCC_GetSysClockFreq+0x98>
            pllclk = pllclk / 2;
 800289a:	0840      	lsrs	r0, r0, #1
}
 800289c:	b009      	add	sp, #36	; 0x24
 800289e:	bdf0      	pop	{r4, r5, r6, r7, pc}
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 80028a0:	fb03 f006 	mul.w	r0, r3, r6
 80028a4:	fbb0 f0f2 	udiv	r0, r0, r2
 80028a8:	e7f5      	b.n	8002896 <HAL_RCC_GetSysClockFreq+0x92>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80028aa:	4806      	ldr	r0, [pc, #24]	; (80028c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 80028ac:	4370      	muls	r0, r6
 80028ae:	e7f5      	b.n	800289c <HAL_RCC_GetSysClockFreq+0x98>
      sysclockfreq = HSE_VALUE;
 80028b0:	4803      	ldr	r0, [pc, #12]	; (80028c0 <HAL_RCC_GetSysClockFreq+0xbc>)
  return sysclockfreq;
 80028b2:	e7f3      	b.n	800289c <HAL_RCC_GetSysClockFreq+0x98>
 80028b4:	08008a00 	.word	0x08008a00
 80028b8:	08008a0e 	.word	0x08008a0e
 80028bc:	40021000 	.word	0x40021000
 80028c0:	007a1200 	.word	0x007a1200
 80028c4:	003d0900 	.word	0x003d0900

080028c8 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80028c8:	4a54      	ldr	r2, [pc, #336]	; (8002a1c <HAL_RCC_ClockConfig+0x154>)
{
 80028ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80028ce:	6813      	ldr	r3, [r2, #0]
{
 80028d0:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80028d2:	f003 0307 	and.w	r3, r3, #7
 80028d6:	428b      	cmp	r3, r1
{
 80028d8:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80028da:	d32a      	bcc.n	8002932 <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028dc:	6829      	ldr	r1, [r5, #0]
 80028de:	078c      	lsls	r4, r1, #30
 80028e0:	d434      	bmi.n	800294c <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028e2:	07ca      	lsls	r2, r1, #31
 80028e4:	d447      	bmi.n	8002976 <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80028e6:	4a4d      	ldr	r2, [pc, #308]	; (8002a1c <HAL_RCC_ClockConfig+0x154>)
 80028e8:	6813      	ldr	r3, [r2, #0]
 80028ea:	f003 0307 	and.w	r3, r3, #7
 80028ee:	429e      	cmp	r6, r3
 80028f0:	f0c0 8082 	bcc.w	80029f8 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028f4:	682a      	ldr	r2, [r5, #0]
 80028f6:	4c4a      	ldr	r4, [pc, #296]	; (8002a20 <HAL_RCC_ClockConfig+0x158>)
 80028f8:	f012 0f04 	tst.w	r2, #4
 80028fc:	f040 8087 	bne.w	8002a0e <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002900:	0713      	lsls	r3, r2, #28
 8002902:	d506      	bpl.n	8002912 <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002904:	6863      	ldr	r3, [r4, #4]
 8002906:	692a      	ldr	r2, [r5, #16]
 8002908:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800290c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002910:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002912:	f7ff ff77 	bl	8002804 <HAL_RCC_GetSysClockFreq>
 8002916:	6863      	ldr	r3, [r4, #4]
 8002918:	4a42      	ldr	r2, [pc, #264]	; (8002a24 <HAL_RCC_ClockConfig+0x15c>)
 800291a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800291e:	5cd3      	ldrb	r3, [r2, r3]
 8002920:	40d8      	lsrs	r0, r3
 8002922:	4b41      	ldr	r3, [pc, #260]	; (8002a28 <HAL_RCC_ClockConfig+0x160>)
 8002924:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002926:	200f      	movs	r0, #15
 8002928:	f7fe fda8 	bl	800147c <HAL_InitTick>
  return HAL_OK;
 800292c:	2000      	movs	r0, #0
}
 800292e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002932:	6813      	ldr	r3, [r2, #0]
 8002934:	f023 0307 	bic.w	r3, r3, #7
 8002938:	430b      	orrs	r3, r1
 800293a:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800293c:	6813      	ldr	r3, [r2, #0]
 800293e:	f003 0307 	and.w	r3, r3, #7
 8002942:	4299      	cmp	r1, r3
 8002944:	d0ca      	beq.n	80028dc <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8002946:	2001      	movs	r0, #1
 8002948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800294c:	4b34      	ldr	r3, [pc, #208]	; (8002a20 <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800294e:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002952:	bf1e      	ittt	ne
 8002954:	685a      	ldrne	r2, [r3, #4]
 8002956:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 800295a:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800295c:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800295e:	bf42      	ittt	mi
 8002960:	685a      	ldrmi	r2, [r3, #4]
 8002962:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8002966:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002968:	685a      	ldr	r2, [r3, #4]
 800296a:	68a8      	ldr	r0, [r5, #8]
 800296c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002970:	4302      	orrs	r2, r0
 8002972:	605a      	str	r2, [r3, #4]
 8002974:	e7b5      	b.n	80028e2 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002976:	686a      	ldr	r2, [r5, #4]
 8002978:	4c29      	ldr	r4, [pc, #164]	; (8002a20 <HAL_RCC_ClockConfig+0x158>)
 800297a:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800297c:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800297e:	d11c      	bne.n	80029ba <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002980:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002984:	d0df      	beq.n	8002946 <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002986:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002988:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800298c:	f023 0303 	bic.w	r3, r3, #3
 8002990:	4313      	orrs	r3, r2
 8002992:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8002994:	f7fe fdb4 	bl	8001500 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002998:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 800299a:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800299c:	2b01      	cmp	r3, #1
 800299e:	d114      	bne.n	80029ca <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80029a0:	6863      	ldr	r3, [r4, #4]
 80029a2:	f003 030c 	and.w	r3, r3, #12
 80029a6:	2b04      	cmp	r3, #4
 80029a8:	d09d      	beq.n	80028e6 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029aa:	f7fe fda9 	bl	8001500 <HAL_GetTick>
 80029ae:	1bc0      	subs	r0, r0, r7
 80029b0:	4540      	cmp	r0, r8
 80029b2:	d9f5      	bls.n	80029a0 <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 80029b4:	2003      	movs	r0, #3
 80029b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029ba:	2a02      	cmp	r2, #2
 80029bc:	d102      	bne.n	80029c4 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029be:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80029c2:	e7df      	b.n	8002984 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029c4:	f013 0f02 	tst.w	r3, #2
 80029c8:	e7dc      	b.n	8002984 <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d10f      	bne.n	80029ee <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029ce:	6863      	ldr	r3, [r4, #4]
 80029d0:	f003 030c 	and.w	r3, r3, #12
 80029d4:	2b08      	cmp	r3, #8
 80029d6:	d086      	beq.n	80028e6 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029d8:	f7fe fd92 	bl	8001500 <HAL_GetTick>
 80029dc:	1bc0      	subs	r0, r0, r7
 80029de:	4540      	cmp	r0, r8
 80029e0:	d9f5      	bls.n	80029ce <HAL_RCC_ClockConfig+0x106>
 80029e2:	e7e7      	b.n	80029b4 <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029e4:	f7fe fd8c 	bl	8001500 <HAL_GetTick>
 80029e8:	1bc0      	subs	r0, r0, r7
 80029ea:	4540      	cmp	r0, r8
 80029ec:	d8e2      	bhi.n	80029b4 <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80029ee:	6863      	ldr	r3, [r4, #4]
 80029f0:	f013 0f0c 	tst.w	r3, #12
 80029f4:	d1f6      	bne.n	80029e4 <HAL_RCC_ClockConfig+0x11c>
 80029f6:	e776      	b.n	80028e6 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029f8:	6813      	ldr	r3, [r2, #0]
 80029fa:	f023 0307 	bic.w	r3, r3, #7
 80029fe:	4333      	orrs	r3, r6
 8002a00:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002a02:	6813      	ldr	r3, [r2, #0]
 8002a04:	f003 0307 	and.w	r3, r3, #7
 8002a08:	429e      	cmp	r6, r3
 8002a0a:	d19c      	bne.n	8002946 <HAL_RCC_ClockConfig+0x7e>
 8002a0c:	e772      	b.n	80028f4 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a0e:	6863      	ldr	r3, [r4, #4]
 8002a10:	68e9      	ldr	r1, [r5, #12]
 8002a12:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002a16:	430b      	orrs	r3, r1
 8002a18:	6063      	str	r3, [r4, #4]
 8002a1a:	e771      	b.n	8002900 <HAL_RCC_ClockConfig+0x38>
 8002a1c:	40022000 	.word	0x40022000
 8002a20:	40021000 	.word	0x40021000
 8002a24:	08008b8c 	.word	0x08008b8c
 8002a28:	20000050 	.word	0x20000050

08002a2c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a2c:	4b04      	ldr	r3, [pc, #16]	; (8002a40 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002a2e:	4a05      	ldr	r2, [pc, #20]	; (8002a44 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002a36:	5cd3      	ldrb	r3, [r2, r3]
 8002a38:	4a03      	ldr	r2, [pc, #12]	; (8002a48 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002a3a:	6810      	ldr	r0, [r2, #0]
}    
 8002a3c:	40d8      	lsrs	r0, r3
 8002a3e:	4770      	bx	lr
 8002a40:	40021000 	.word	0x40021000
 8002a44:	08008b9c 	.word	0x08008b9c
 8002a48:	20000050 	.word	0x20000050

08002a4c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a4c:	4b04      	ldr	r3, [pc, #16]	; (8002a60 <HAL_RCC_GetPCLK2Freq+0x14>)
 8002a4e:	4a05      	ldr	r2, [pc, #20]	; (8002a64 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002a56:	5cd3      	ldrb	r3, [r2, r3]
 8002a58:	4a03      	ldr	r2, [pc, #12]	; (8002a68 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002a5a:	6810      	ldr	r0, [r2, #0]
} 
 8002a5c:	40d8      	lsrs	r0, r3
 8002a5e:	4770      	bx	lr
 8002a60:	40021000 	.word	0x40021000
 8002a64:	08008b9c 	.word	0x08008b9c
 8002a68:	20000050 	.word	0x20000050

08002a6c <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002a6c:	6803      	ldr	r3, [r0, #0]
{
 8002a6e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002a72:	f013 0f01 	tst.w	r3, #1
{
 8002a76:	4605      	mov	r5, r0
 8002a78:	4c57      	ldr	r4, [pc, #348]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002a7a:	d01f      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x50>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a7c:	69e3      	ldr	r3, [r4, #28]
 8002a7e:	00da      	lsls	r2, r3, #3
 8002a80:	d447      	bmi.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8002a82:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a84:	69e3      	ldr	r3, [r4, #28]
 8002a86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a8a:	61e3      	str	r3, [r4, #28]
 8002a8c:	69e3      	ldr	r3, [r4, #28]
 8002a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a92:	9301      	str	r3, [sp, #4]
 8002a94:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a96:	4e51      	ldr	r6, [pc, #324]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x170>)
 8002a98:	6833      	ldr	r3, [r6, #0]
 8002a9a:	05db      	lsls	r3, r3, #23
 8002a9c:	d53b      	bpl.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0xaa>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a9e:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002aa0:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002aa4:	d14b      	bne.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0xd2>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002aa6:	6a23      	ldr	r3, [r4, #32]
 8002aa8:	686a      	ldr	r2, [r5, #4]
 8002aaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ab2:	b11f      	cbz	r7, 8002abc <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ab4:	69e3      	ldr	r3, [r4, #28]
 8002ab6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002aba:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002abc:	682a      	ldr	r2, [r5, #0]
 8002abe:	0793      	lsls	r3, r2, #30
 8002ac0:	d505      	bpl.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ac2:	6863      	ldr	r3, [r4, #4]
 8002ac4:	68a9      	ldr	r1, [r5, #8]
 8002ac6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002aca:	430b      	orrs	r3, r1
 8002acc:	6063      	str	r3, [r4, #4]
  }

#if defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ I2S2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8002ace:	0757      	lsls	r7, r2, #29
 8002ad0:	d505      	bpl.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002ad2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002ad4:	68e9      	ldr	r1, [r5, #12]
 8002ad6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002ada:	430b      	orrs	r3, r1
 8002adc:	62e3      	str	r3, [r4, #44]	; 0x2c
  }

  /*------------------------------ I2S3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S3) == RCC_PERIPHCLK_I2S3)
 8002ade:	0716      	lsls	r6, r2, #28
 8002ae0:	d505      	bpl.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S3CLKSOURCE(PeriphClkInit->I2s3ClockSelection));
    
    /* Configure the I2S3 clock source */
    __HAL_RCC_I2S3_CONFIG(PeriphClkInit->I2s3ClockSelection);
 8002ae2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002ae4:	692a      	ldr	r2, [r5, #16]
 8002ae6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aea:	4313      	orrs	r3, r2
 8002aec:	62e3      	str	r3, [r4, #44]	; 0x2c
  }

  /*------------------------------ PLL I2S Configuration ----------------------*/ 
  /* Check that PLLI2S need to be enabled */
  if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S2SRC) || HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_I2S3SRC))
 8002aee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002af0:	0398      	lsls	r0, r3, #14
 8002af2:	d466      	bmi.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x156>
 8002af4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002af6:	0359      	lsls	r1, r3, #13
 8002af8:	d463      	bmi.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x156>

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002afa:	6828      	ldr	r0, [r5, #0]
 8002afc:	f010 0010 	ands.w	r0, r0, #16
 8002b00:	d01a      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b02:	6863      	ldr	r3, [r4, #4]
 8002b04:	69ea      	ldr	r2, [r5, #28]
 8002b06:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	6063      	str	r3, [r4, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002b0e:	2000      	movs	r0, #0
 8002b10:	e012      	b.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    FlagStatus       pwrclkchanged = RESET;
 8002b12:	2700      	movs	r7, #0
 8002b14:	e7bf      	b.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b16:	6833      	ldr	r3, [r6, #0]
 8002b18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b1c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002b1e:	f7fe fcef 	bl	8001500 <HAL_GetTick>
 8002b22:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b24:	6833      	ldr	r3, [r6, #0]
 8002b26:	05d8      	lsls	r0, r3, #23
 8002b28:	d4b9      	bmi.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x32>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b2a:	f7fe fce9 	bl	8001500 <HAL_GetTick>
 8002b2e:	eba0 0008 	sub.w	r0, r0, r8
 8002b32:	2864      	cmp	r0, #100	; 0x64
 8002b34:	d9f6      	bls.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0xb8>
          return HAL_TIMEOUT;
 8002b36:	2003      	movs	r0, #3
}
 8002b38:	b002      	add	sp, #8
 8002b3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b3e:	686a      	ldr	r2, [r5, #4]
 8002b40:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d0ae      	beq.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b48:	2001      	movs	r0, #1
 8002b4a:	4a25      	ldr	r2, [pc, #148]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x174>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b4c:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b4e:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b50:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b52:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b56:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8002b58:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002b5a:	07d9      	lsls	r1, r3, #31
 8002b5c:	d5a3      	bpl.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        tickstart = HAL_GetTick();
 8002b5e:	f7fe fccf 	bl	8001500 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b62:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002b66:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b68:	6a23      	ldr	r3, [r4, #32]
 8002b6a:	079a      	lsls	r2, r3, #30
 8002b6c:	d49b      	bmi.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b6e:	f7fe fcc7 	bl	8001500 <HAL_GetTick>
 8002b72:	1b80      	subs	r0, r0, r6
 8002b74:	4540      	cmp	r0, r8
 8002b76:	d9f7      	bls.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8002b78:	e7dd      	b.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0xca>
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLL2ON) && \
 8002b7a:	6823      	ldr	r3, [r4, #0]
 8002b7c:	69a9      	ldr	r1, [r5, #24]
 8002b7e:	f013 6f80 	tst.w	r3, #67108864	; 0x4000000
 8002b82:	d004      	beq.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x122>
        (__HAL_RCC_HSE_GET_PREDIV2() != PeriphClkInit->PLLI2S.HSEPrediv2Value))
 8002b84:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002b86:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLL2ON) && \
 8002b8a:	428a      	cmp	r2, r1
 8002b8c:	d122      	bne.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x168>
      __HAL_RCC_HSE_PREDIV2_CONFIG(PeriphClkInit->PLLI2S.HSEPrediv2Value);
 8002b8e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002b90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b94:	430b      	orrs	r3, r1
 8002b96:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 8002b98:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002b9a:	696a      	ldr	r2, [r5, #20]
 8002b9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ba0:	4313      	orrs	r3, r2
      __HAL_RCC_PLLI2S_ENABLE();
 8002ba2:	2201      	movs	r2, #1
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SMUL);
 8002ba4:	62e3      	str	r3, [r4, #44]	; 0x2c
      __HAL_RCC_PLLI2S_ENABLE();
 8002ba6:	4b0f      	ldr	r3, [pc, #60]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8002ba8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8002baa:	f7fe fca9 	bl	8001500 <HAL_GetTick>
 8002bae:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002bb0:	6823      	ldr	r3, [r4, #0]
 8002bb2:	009a      	lsls	r2, r3, #2
 8002bb4:	d4a1      	bmi.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002bb6:	f7fe fca3 	bl	8001500 <HAL_GetTick>
 8002bba:	1b80      	subs	r0, r0, r6
 8002bbc:	2864      	cmp	r0, #100	; 0x64
 8002bbe:	d9f7      	bls.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x144>
 8002bc0:	e7b9      	b.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0xca>
    if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_PLL3ON))
 8002bc2:	6823      	ldr	r3, [r4, #0]
 8002bc4:	00db      	lsls	r3, r3, #3
 8002bc6:	d5d8      	bpl.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      if (READ_BIT(RCC->CFGR2, RCC_CFGR2_PLL3MUL) != PeriphClkInit->PLLI2S.PLLI2SMUL)
 8002bc8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002bca:	696a      	ldr	r2, [r5, #20]
 8002bcc:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d092      	beq.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x8e>
        return HAL_ERROR;
 8002bd4:	2001      	movs	r0, #1
 8002bd6:	e7af      	b.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002bd8:	40021000 	.word	0x40021000
 8002bdc:	40007000 	.word	0x40007000
 8002be0:	42420440 	.word	0x42420440
 8002be4:	42420070 	.word	0x42420070

08002be8 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002be8:	6a03      	ldr	r3, [r0, #32]
{
 8002bea:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bec:	f023 0301 	bic.w	r3, r3, #1
 8002bf0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bf2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bf4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002bf6:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002bf8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002bfa:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002bfe:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002c00:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8002c02:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8002c06:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002c08:	4d0a      	ldr	r5, [pc, #40]	; (8002c34 <TIM_OC1_SetConfig+0x4c>)
 8002c0a:	42a8      	cmp	r0, r5
 8002c0c:	d10b      	bne.n	8002c26 <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002c0e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8002c10:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8002c14:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002c16:	698e      	ldr	r6, [r1, #24]
 8002c18:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002c1a:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8002c1e:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8002c20:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8002c24:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c26:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c28:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002c2a:	684a      	ldr	r2, [r1, #4]
 8002c2c:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c2e:	6203      	str	r3, [r0, #32]
 8002c30:	bd70      	pop	{r4, r5, r6, pc}
 8002c32:	bf00      	nop
 8002c34:	40012c00 	.word	0x40012c00

08002c38 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c38:	6a03      	ldr	r3, [r0, #32]
{
 8002c3a:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c40:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c42:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c44:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c46:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c48:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002c4a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002c4e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002c50:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8002c52:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002c56:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002c5a:	4d0b      	ldr	r5, [pc, #44]	; (8002c88 <TIM_OC3_SetConfig+0x50>)
 8002c5c:	42a8      	cmp	r0, r5
 8002c5e:	d10d      	bne.n	8002c7c <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002c60:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8002c62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002c66:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c6a:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002c6c:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002c6e:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c72:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8002c74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c78:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c7c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c7e:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c80:	684a      	ldr	r2, [r1, #4]
 8002c82:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c84:	6203      	str	r3, [r0, #32]
 8002c86:	bd70      	pop	{r4, r5, r6, pc}
 8002c88:	40012c00 	.word	0x40012c00

08002c8c <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c8c:	6a03      	ldr	r3, [r0, #32]
{
 8002c8e:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c94:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c96:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c98:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c9a:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c9c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c9e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ca2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002ca6:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8002ca8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002cac:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002cb0:	4d06      	ldr	r5, [pc, #24]	; (8002ccc <TIM_OC4_SetConfig+0x40>)
 8002cb2:	42a8      	cmp	r0, r5
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8002cb4:	bf02      	ittt	eq
 8002cb6:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002cb8:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8002cbc:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cc0:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002cc2:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002cc4:	684a      	ldr	r2, [r1, #4]
 8002cc6:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cc8:	6203      	str	r3, [r0, #32]
 8002cca:	bd30      	pop	{r4, r5, pc}
 8002ccc:	40012c00 	.word	0x40012c00

08002cd0 <HAL_TIM_PWM_MspInit>:
 8002cd0:	4770      	bx	lr

08002cd2 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002cd2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002cd6:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	f04f 0302 	mov.w	r3, #2
 8002cde:	d01c      	beq.n	8002d1a <HAL_TIM_ConfigClockSource+0x48>
 8002ce0:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8002ce2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8002ce6:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8002ce8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8002cec:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cee:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002cf2:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002cf6:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8002cf8:	680a      	ldr	r2, [r1, #0]
 8002cfa:	2a40      	cmp	r2, #64	; 0x40
 8002cfc:	d079      	beq.n	8002df2 <HAL_TIM_ConfigClockSource+0x120>
 8002cfe:	d819      	bhi.n	8002d34 <HAL_TIM_ConfigClockSource+0x62>
 8002d00:	2a10      	cmp	r2, #16
 8002d02:	f000 8093 	beq.w	8002e2c <HAL_TIM_ConfigClockSource+0x15a>
 8002d06:	d80a      	bhi.n	8002d1e <HAL_TIM_ConfigClockSource+0x4c>
 8002d08:	2a00      	cmp	r2, #0
 8002d0a:	f000 8089 	beq.w	8002e20 <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002d14:	2300      	movs	r3, #0
 8002d16:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8002d1a:	4618      	mov	r0, r3
}
 8002d1c:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8002d1e:	2a20      	cmp	r2, #32
 8002d20:	f000 808a 	beq.w	8002e38 <HAL_TIM_ConfigClockSource+0x166>
 8002d24:	2a30      	cmp	r2, #48	; 0x30
 8002d26:	d1f2      	bne.n	8002d0e <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8002d28:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8002d2a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002d2e:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8002d32:	e036      	b.n	8002da2 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8002d34:	2a70      	cmp	r2, #112	; 0x70
 8002d36:	d036      	beq.n	8002da6 <HAL_TIM_ConfigClockSource+0xd4>
 8002d38:	d81b      	bhi.n	8002d72 <HAL_TIM_ConfigClockSource+0xa0>
 8002d3a:	2a50      	cmp	r2, #80	; 0x50
 8002d3c:	d042      	beq.n	8002dc4 <HAL_TIM_ConfigClockSource+0xf2>
 8002d3e:	2a60      	cmp	r2, #96	; 0x60
 8002d40:	d1e5      	bne.n	8002d0e <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d42:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d44:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d46:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d4a:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d4c:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d4e:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8002d50:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d52:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d56:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d5a:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d5e:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8002d62:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d64:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8002d66:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002d68:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002d6c:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8002d70:	e017      	b.n	8002da2 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8002d72:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002d76:	d011      	beq.n	8002d9c <HAL_TIM_ConfigClockSource+0xca>
 8002d78:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002d7c:	d1c7      	bne.n	8002d0e <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d7e:	688a      	ldr	r2, [r1, #8]
 8002d80:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8002d82:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d84:	68c9      	ldr	r1, [r1, #12]
 8002d86:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d88:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d8c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002d90:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d92:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d94:	689a      	ldr	r2, [r3, #8]
 8002d96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d9a:	e002      	b.n	8002da2 <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002d9c:	689a      	ldr	r2, [r3, #8]
 8002d9e:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8002da2:	609a      	str	r2, [r3, #8]
 8002da4:	e7b3      	b.n	8002d0e <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002da6:	688a      	ldr	r2, [r1, #8]
 8002da8:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8002daa:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002dac:	68c9      	ldr	r1, [r1, #12]
 8002dae:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002db0:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002db4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002db8:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8002dba:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8002dbc:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002dbe:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8002dc2:	e7ee      	b.n	8002da2 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dc4:	684c      	ldr	r4, [r1, #4]
 8002dc6:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002dc8:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002dca:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002dcc:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002dd0:	f025 0501 	bic.w	r5, r5, #1
 8002dd4:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dd6:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8002dd8:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002dda:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002dde:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002de2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002de4:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8002de6:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002de8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002dec:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8002df0:	e7d7      	b.n	8002da2 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002df2:	684c      	ldr	r4, [r1, #4]
 8002df4:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002df6:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002df8:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002dfa:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002dfe:	f025 0501 	bic.w	r5, r5, #1
 8002e02:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e04:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8002e06:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e08:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e0c:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002e10:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e12:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8002e14:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002e16:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002e1a:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8002e1e:	e7c0      	b.n	8002da2 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8002e20:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002e22:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002e26:	f042 0207 	orr.w	r2, r2, #7
 8002e2a:	e7ba      	b.n	8002da2 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8002e2c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002e2e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002e32:	f042 0217 	orr.w	r2, r2, #23
 8002e36:	e7b4      	b.n	8002da2 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8002e38:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002e3a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002e3e:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8002e42:	e7ae      	b.n	8002da2 <HAL_TIM_ConfigClockSource+0xd0>

08002e44 <HAL_TIM_PeriodElapsedCallback>:
 8002e44:	4770      	bx	lr

08002e46 <HAL_TIM_OC_DelayElapsedCallback>:
 8002e46:	4770      	bx	lr

08002e48 <HAL_TIM_IC_CaptureCallback>:
 8002e48:	4770      	bx	lr

08002e4a <HAL_TIM_PWM_PulseFinishedCallback>:
 8002e4a:	4770      	bx	lr

08002e4c <HAL_TIM_TriggerCallback>:
 8002e4c:	4770      	bx	lr

08002e4e <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e4e:	6803      	ldr	r3, [r0, #0]
{
 8002e50:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e52:	691a      	ldr	r2, [r3, #16]
{
 8002e54:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e56:	0791      	lsls	r1, r2, #30
 8002e58:	d50e      	bpl.n	8002e78 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002e5a:	68da      	ldr	r2, [r3, #12]
 8002e5c:	0792      	lsls	r2, r2, #30
 8002e5e:	d50b      	bpl.n	8002e78 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e60:	f06f 0202 	mvn.w	r2, #2
 8002e64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e66:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e68:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e6a:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e6c:	079b      	lsls	r3, r3, #30
 8002e6e:	d077      	beq.n	8002f60 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8002e70:	f7ff ffea 	bl	8002e48 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e74:	2300      	movs	r3, #0
 8002e76:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e78:	6823      	ldr	r3, [r4, #0]
 8002e7a:	691a      	ldr	r2, [r3, #16]
 8002e7c:	0750      	lsls	r0, r2, #29
 8002e7e:	d510      	bpl.n	8002ea2 <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002e80:	68da      	ldr	r2, [r3, #12]
 8002e82:	0751      	lsls	r1, r2, #29
 8002e84:	d50d      	bpl.n	8002ea2 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e86:	f06f 0204 	mvn.w	r2, #4
 8002e8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e8c:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e8e:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e90:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e92:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8002e96:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e98:	d068      	beq.n	8002f6c <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8002e9a:	f7ff ffd5 	bl	8002e48 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ea2:	6823      	ldr	r3, [r4, #0]
 8002ea4:	691a      	ldr	r2, [r3, #16]
 8002ea6:	0712      	lsls	r2, r2, #28
 8002ea8:	d50f      	bpl.n	8002eca <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002eaa:	68da      	ldr	r2, [r3, #12]
 8002eac:	0710      	lsls	r0, r2, #28
 8002eae:	d50c      	bpl.n	8002eca <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002eb0:	f06f 0208 	mvn.w	r2, #8
 8002eb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002eb6:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002eb8:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002eba:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ebc:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8002ebe:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ec0:	d05a      	beq.n	8002f78 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002ec2:	f7ff ffc1 	bl	8002e48 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002eca:	6823      	ldr	r3, [r4, #0]
 8002ecc:	691a      	ldr	r2, [r3, #16]
 8002ece:	06d2      	lsls	r2, r2, #27
 8002ed0:	d510      	bpl.n	8002ef4 <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002ed2:	68da      	ldr	r2, [r3, #12]
 8002ed4:	06d0      	lsls	r0, r2, #27
 8002ed6:	d50d      	bpl.n	8002ef4 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ed8:	f06f 0210 	mvn.w	r2, #16
 8002edc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ede:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ee0:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ee2:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ee4:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8002ee8:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002eea:	d04b      	beq.n	8002f84 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8002eec:	f7ff ffac 	bl	8002e48 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ef4:	6823      	ldr	r3, [r4, #0]
 8002ef6:	691a      	ldr	r2, [r3, #16]
 8002ef8:	07d1      	lsls	r1, r2, #31
 8002efa:	d508      	bpl.n	8002f0e <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002efc:	68da      	ldr	r2, [r3, #12]
 8002efe:	07d2      	lsls	r2, r2, #31
 8002f00:	d505      	bpl.n	8002f0e <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f02:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f06:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f08:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f0a:	f7ff ff9b 	bl	8002e44 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f0e:	6823      	ldr	r3, [r4, #0]
 8002f10:	691a      	ldr	r2, [r3, #16]
 8002f12:	0610      	lsls	r0, r2, #24
 8002f14:	d508      	bpl.n	8002f28 <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002f16:	68da      	ldr	r2, [r3, #12]
 8002f18:	0611      	lsls	r1, r2, #24
 8002f1a:	d505      	bpl.n	8002f28 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f1c:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 8002f20:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f22:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002f24:	f000 f97d 	bl	8003222 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f28:	6823      	ldr	r3, [r4, #0]
 8002f2a:	691a      	ldr	r2, [r3, #16]
 8002f2c:	0652      	lsls	r2, r2, #25
 8002f2e:	d508      	bpl.n	8002f42 <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002f30:	68da      	ldr	r2, [r3, #12]
 8002f32:	0650      	lsls	r0, r2, #25
 8002f34:	d505      	bpl.n	8002f42 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f36:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8002f3a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f3c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002f3e:	f7ff ff85 	bl	8002e4c <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f42:	6823      	ldr	r3, [r4, #0]
 8002f44:	691a      	ldr	r2, [r3, #16]
 8002f46:	0691      	lsls	r1, r2, #26
 8002f48:	d522      	bpl.n	8002f90 <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002f4a:	68da      	ldr	r2, [r3, #12]
 8002f4c:	0692      	lsls	r2, r2, #26
 8002f4e:	d51f      	bpl.n	8002f90 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f50:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8002f54:	4620      	mov	r0, r4
}
 8002f56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f5a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8002f5c:	f000 b960 	b.w	8003220 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f60:	f7ff ff71 	bl	8002e46 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f64:	4620      	mov	r0, r4
 8002f66:	f7ff ff70 	bl	8002e4a <HAL_TIM_PWM_PulseFinishedCallback>
 8002f6a:	e783      	b.n	8002e74 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f6c:	f7ff ff6b 	bl	8002e46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f70:	4620      	mov	r0, r4
 8002f72:	f7ff ff6a 	bl	8002e4a <HAL_TIM_PWM_PulseFinishedCallback>
 8002f76:	e792      	b.n	8002e9e <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f78:	f7ff ff65 	bl	8002e46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f7c:	4620      	mov	r0, r4
 8002f7e:	f7ff ff64 	bl	8002e4a <HAL_TIM_PWM_PulseFinishedCallback>
 8002f82:	e7a0      	b.n	8002ec6 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f84:	f7ff ff5f 	bl	8002e46 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f88:	4620      	mov	r0, r4
 8002f8a:	f7ff ff5e 	bl	8002e4a <HAL_TIM_PWM_PulseFinishedCallback>
 8002f8e:	e7af      	b.n	8002ef0 <HAL_TIM_IRQHandler+0xa2>
 8002f90:	bd10      	pop	{r4, pc}
	...

08002f94 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f94:	4a1e      	ldr	r2, [pc, #120]	; (8003010 <TIM_Base_SetConfig+0x7c>)
  tmpcr1 = TIMx->CR1;
 8002f96:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f98:	4290      	cmp	r0, r2
 8002f9a:	d00e      	beq.n	8002fba <TIM_Base_SetConfig+0x26>
 8002f9c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002fa0:	d00b      	beq.n	8002fba <TIM_Base_SetConfig+0x26>
 8002fa2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002fa6:	4290      	cmp	r0, r2
 8002fa8:	d007      	beq.n	8002fba <TIM_Base_SetConfig+0x26>
 8002faa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002fae:	4290      	cmp	r0, r2
 8002fb0:	d003      	beq.n	8002fba <TIM_Base_SetConfig+0x26>
 8002fb2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002fb6:	4290      	cmp	r0, r2
 8002fb8:	d119      	bne.n	8002fee <TIM_Base_SetConfig+0x5a>
    tmpcr1 |= Structure->CounterMode;
 8002fba:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002fc0:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fc2:	4a13      	ldr	r2, [pc, #76]	; (8003010 <TIM_Base_SetConfig+0x7c>)
 8002fc4:	4290      	cmp	r0, r2
 8002fc6:	d00e      	beq.n	8002fe6 <TIM_Base_SetConfig+0x52>
 8002fc8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002fcc:	d00b      	beq.n	8002fe6 <TIM_Base_SetConfig+0x52>
 8002fce:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002fd2:	4290      	cmp	r0, r2
 8002fd4:	d007      	beq.n	8002fe6 <TIM_Base_SetConfig+0x52>
 8002fd6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002fda:	4290      	cmp	r0, r2
 8002fdc:	d003      	beq.n	8002fe6 <TIM_Base_SetConfig+0x52>
 8002fde:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002fe2:	4290      	cmp	r0, r2
 8002fe4:	d103      	bne.n	8002fee <TIM_Base_SetConfig+0x5a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fe6:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fe8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fec:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8002fee:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8002ff0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8002ff4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002ff6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ff8:	688b      	ldr	r3, [r1, #8]
 8002ffa:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002ffc:	680b      	ldr	r3, [r1, #0]
 8002ffe:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003000:	4b03      	ldr	r3, [pc, #12]	; (8003010 <TIM_Base_SetConfig+0x7c>)
 8003002:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8003004:	bf04      	itt	eq
 8003006:	690b      	ldreq	r3, [r1, #16]
 8003008:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800300a:	2301      	movs	r3, #1
 800300c:	6143      	str	r3, [r0, #20]
 800300e:	4770      	bx	lr
 8003010:	40012c00 	.word	0x40012c00

08003014 <HAL_TIM_Base_Init>:
{
 8003014:	b510      	push	{r4, lr}
  if(htim == NULL)
 8003016:	4604      	mov	r4, r0
 8003018:	b1a0      	cbz	r0, 8003044 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800301a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800301e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003022:	b91b      	cbnz	r3, 800302c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003024:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003028:	f002 fe52 	bl	8005cd0 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 800302c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800302e:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8003030:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003034:	1d21      	adds	r1, r4, #4
 8003036:	f7ff ffad 	bl	8002f94 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800303a:	2301      	movs	r3, #1
  return HAL_OK;
 800303c:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 800303e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003042:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003044:	2001      	movs	r0, #1
}
 8003046:	bd10      	pop	{r4, pc}

08003048 <HAL_TIM_PWM_Init>:
{
 8003048:	b510      	push	{r4, lr}
  if(htim == NULL)
 800304a:	4604      	mov	r4, r0
 800304c:	b1a0      	cbz	r0, 8003078 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800304e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003052:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003056:	b91b      	cbnz	r3, 8003060 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003058:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800305c:	f7ff fe38 	bl	8002cd0 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8003060:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003062:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8003064:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003068:	1d21      	adds	r1, r4, #4
 800306a:	f7ff ff93 	bl	8002f94 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800306e:	2301      	movs	r3, #1
  return HAL_OK;
 8003070:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8003072:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003076:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003078:	2001      	movs	r0, #1
}
 800307a:	bd10      	pop	{r4, pc}

0800307c <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800307c:	6a03      	ldr	r3, [r0, #32]
{
 800307e:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003080:	f023 0310 	bic.w	r3, r3, #16
 8003084:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8003086:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8003088:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800308a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800308c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800308e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003092:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003096:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8003098:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800309c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80030a0:	4d0b      	ldr	r5, [pc, #44]	; (80030d0 <TIM_OC2_SetConfig+0x54>)
 80030a2:	42a8      	cmp	r0, r5
 80030a4:	d10d      	bne.n	80030c2 <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80030a6:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80030a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80030ac:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80030b0:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 80030b2:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80030b4:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80030b8:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 80030ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 80030be:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 80030c2:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80030c4:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80030c6:	684a      	ldr	r2, [r1, #4]
 80030c8:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80030ca:	6203      	str	r3, [r0, #32]
 80030cc:	bd70      	pop	{r4, r5, r6, pc}
 80030ce:	bf00      	nop
 80030d0:	40012c00 	.word	0x40012c00

080030d4 <HAL_TIM_PWM_ConfigChannel>:
{
 80030d4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80030d6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80030da:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80030dc:	2b01      	cmp	r3, #1
 80030de:	f04f 0002 	mov.w	r0, #2
 80030e2:	d025      	beq.n	8003130 <HAL_TIM_PWM_ConfigChannel+0x5c>
 80030e4:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80030e6:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 80030ea:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 80030ee:	2a0c      	cmp	r2, #12
 80030f0:	d818      	bhi.n	8003124 <HAL_TIM_PWM_ConfigChannel+0x50>
 80030f2:	e8df f002 	tbb	[pc, r2]
 80030f6:	1707      	.short	0x1707
 80030f8:	171e1717 	.word	0x171e1717
 80030fc:	172f1717 	.word	0x172f1717
 8003100:	1717      	.short	0x1717
 8003102:	40          	.byte	0x40
 8003103:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003104:	6820      	ldr	r0, [r4, #0]
 8003106:	f7ff fd6f 	bl	8002be8 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800310a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800310c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800310e:	699a      	ldr	r2, [r3, #24]
 8003110:	f042 0208 	orr.w	r2, r2, #8
 8003114:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003116:	699a      	ldr	r2, [r3, #24]
 8003118:	f022 0204 	bic.w	r2, r2, #4
 800311c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800311e:	699a      	ldr	r2, [r3, #24]
 8003120:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 8003122:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8003124:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8003126:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003128:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800312c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8003130:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003132:	6820      	ldr	r0, [r4, #0]
 8003134:	f7ff ffa2 	bl	800307c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003138:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 800313a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800313c:	699a      	ldr	r2, [r3, #24]
 800313e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003142:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003144:	699a      	ldr	r2, [r3, #24]
 8003146:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800314a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 800314c:	699a      	ldr	r2, [r3, #24]
 800314e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003152:	e7e6      	b.n	8003122 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003154:	6820      	ldr	r0, [r4, #0]
 8003156:	f7ff fd6f 	bl	8002c38 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800315a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800315c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800315e:	69da      	ldr	r2, [r3, #28]
 8003160:	f042 0208 	orr.w	r2, r2, #8
 8003164:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003166:	69da      	ldr	r2, [r3, #28]
 8003168:	f022 0204 	bic.w	r2, r2, #4
 800316c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800316e:	69da      	ldr	r2, [r3, #28]
 8003170:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8003172:	61da      	str	r2, [r3, #28]
    break;
 8003174:	e7d6      	b.n	8003124 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003176:	6820      	ldr	r0, [r4, #0]
 8003178:	f7ff fd88 	bl	8002c8c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800317c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 800317e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003180:	69da      	ldr	r2, [r3, #28]
 8003182:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003186:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003188:	69da      	ldr	r2, [r3, #28]
 800318a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800318e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8003190:	69da      	ldr	r2, [r3, #28]
 8003192:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003196:	e7ec      	b.n	8003172 <HAL_TIM_PWM_ConfigChannel+0x9e>

08003198 <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003198:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 800319a:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800319c:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << Channel;
 800319e:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 80031a0:	ea23 0304 	bic.w	r3, r3, r4
 80031a4:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 80031a6:	6a03      	ldr	r3, [r0, #32]
 80031a8:	408a      	lsls	r2, r1
 80031aa:	431a      	orrs	r2, r3
 80031ac:	6202      	str	r2, [r0, #32]
 80031ae:	bd10      	pop	{r4, pc}

080031b0 <HAL_TIM_PWM_Start>:
{
 80031b0:	b510      	push	{r4, lr}
 80031b2:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80031b4:	2201      	movs	r2, #1
 80031b6:	6800      	ldr	r0, [r0, #0]
 80031b8:	f7ff ffee 	bl	8003198 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80031bc:	6823      	ldr	r3, [r4, #0]
 80031be:	4a06      	ldr	r2, [pc, #24]	; (80031d8 <HAL_TIM_PWM_Start+0x28>)
}
 80031c0:	2000      	movs	r0, #0
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80031c2:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 80031c4:	bf02      	ittt	eq
 80031c6:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 80031c8:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 80031cc:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	f042 0201 	orr.w	r2, r2, #1
 80031d4:	601a      	str	r2, [r3, #0]
}
 80031d6:	bd10      	pop	{r4, pc}
 80031d8:	40012c00 	.word	0x40012c00

080031dc <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 80031dc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80031e0:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	f04f 0302 	mov.w	r3, #2
 80031e8:	d018      	beq.n	800321c <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 80031ea:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80031ee:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80031f0:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80031f2:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80031f4:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80031f6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80031fa:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80031fc:	685a      	ldr	r2, [r3, #4]
 80031fe:	4322      	orrs	r2, r4
 8003200:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8003202:	689a      	ldr	r2, [r3, #8]
 8003204:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003208:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800320a:	689a      	ldr	r2, [r3, #8]
 800320c:	430a      	orrs	r2, r1
 800320e:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8003210:	2301      	movs	r3, #1
 8003212:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003216:	2300      	movs	r3, #0
 8003218:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 800321c:	4618      	mov	r0, r3

  return HAL_OK;
}
 800321e:	bd10      	pop	{r4, pc}

08003220 <HAL_TIMEx_CommutationCallback>:
 8003220:	4770      	bx	lr

08003222 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003222:	4770      	bx	lr

08003224 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003224:	6803      	ldr	r3, [r0, #0]
 8003226:	68da      	ldr	r2, [r3, #12]
 8003228:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800322c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800322e:	695a      	ldr	r2, [r3, #20]
 8003230:	f022 0201 	bic.w	r2, r2, #1
 8003234:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003236:	2320      	movs	r3, #32
 8003238:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 800323c:	4770      	bx	lr
	...

08003240 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003244:	6805      	ldr	r5, [r0, #0]
 8003246:	68c2      	ldr	r2, [r0, #12]
 8003248:	692b      	ldr	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1, 
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
#else
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800324a:	6901      	ldr	r1, [r0, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800324c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003250:	4313      	orrs	r3, r2
 8003252:	612b      	str	r3, [r5, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003254:	6883      	ldr	r3, [r0, #8]
  MODIFY_REG(huart->Instance->CR1, 
 8003256:	68ea      	ldr	r2, [r5, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003258:	430b      	orrs	r3, r1
 800325a:	6941      	ldr	r1, [r0, #20]
  MODIFY_REG(huart->Instance->CR1, 
 800325c:	f422 52b0 	bic.w	r2, r2, #5632	; 0x1600
 8003260:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003264:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 8003266:	4313      	orrs	r3, r2
 8003268:	60eb      	str	r3, [r5, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800326a:	696b      	ldr	r3, [r5, #20]
 800326c:	6982      	ldr	r2, [r0, #24]
 800326e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003272:	4313      	orrs	r3, r2
 8003274:	616b      	str	r3, [r5, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8003276:	4b40      	ldr	r3, [pc, #256]	; (8003378 <UART_SetConfig+0x138>)
{
 8003278:	4681      	mov	r9, r0
  if(huart->Instance == USART1)
 800327a:	429d      	cmp	r5, r3
 800327c:	f04f 0419 	mov.w	r4, #25
 8003280:	d146      	bne.n	8003310 <UART_SetConfig+0xd0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003282:	f7ff fbe3 	bl	8002a4c <HAL_RCC_GetPCLK2Freq>
 8003286:	fb04 f300 	mul.w	r3, r4, r0
 800328a:	f8d9 6004 	ldr.w	r6, [r9, #4]
 800328e:	f04f 0864 	mov.w	r8, #100	; 0x64
 8003292:	00b6      	lsls	r6, r6, #2
 8003294:	fbb3 f3f6 	udiv	r3, r3, r6
 8003298:	fbb3 f3f8 	udiv	r3, r3, r8
 800329c:	011e      	lsls	r6, r3, #4
 800329e:	f7ff fbd5 	bl	8002a4c <HAL_RCC_GetPCLK2Freq>
 80032a2:	4360      	muls	r0, r4
 80032a4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	fbb0 f7f3 	udiv	r7, r0, r3
 80032ae:	f7ff fbcd 	bl	8002a4c <HAL_RCC_GetPCLK2Freq>
 80032b2:	4360      	muls	r0, r4
 80032b4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80032be:	fbb3 f3f8 	udiv	r3, r3, r8
 80032c2:	fb08 7313 	mls	r3, r8, r3, r7
 80032c6:	011b      	lsls	r3, r3, #4
 80032c8:	3332      	adds	r3, #50	; 0x32
 80032ca:	fbb3 f3f8 	udiv	r3, r3, r8
 80032ce:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 80032d2:	f7ff fbbb 	bl	8002a4c <HAL_RCC_GetPCLK2Freq>
 80032d6:	4360      	muls	r0, r4
 80032d8:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80032dc:	0092      	lsls	r2, r2, #2
 80032de:	fbb0 faf2 	udiv	sl, r0, r2
 80032e2:	f7ff fbb3 	bl	8002a4c <HAL_RCC_GetPCLK2Freq>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80032e6:	4360      	muls	r0, r4
 80032e8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80032f2:	fbb3 f3f8 	udiv	r3, r3, r8
 80032f6:	fb08 a313 	mls	r3, r8, r3, sl
 80032fa:	011b      	lsls	r3, r3, #4
 80032fc:	3332      	adds	r3, #50	; 0x32
 80032fe:	fbb3 f3f8 	udiv	r3, r3, r8
 8003302:	f003 030f 	and.w	r3, r3, #15
 8003306:	433b      	orrs	r3, r7
 8003308:	4433      	add	r3, r6
 800330a:	60ab      	str	r3, [r5, #8]
 800330c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003310:	f7ff fb8c 	bl	8002a2c <HAL_RCC_GetPCLK1Freq>
 8003314:	fb04 f300 	mul.w	r3, r4, r0
 8003318:	f8d9 6004 	ldr.w	r6, [r9, #4]
 800331c:	f04f 0864 	mov.w	r8, #100	; 0x64
 8003320:	00b6      	lsls	r6, r6, #2
 8003322:	fbb3 f3f6 	udiv	r3, r3, r6
 8003326:	fbb3 f3f8 	udiv	r3, r3, r8
 800332a:	011e      	lsls	r6, r3, #4
 800332c:	f7ff fb7e 	bl	8002a2c <HAL_RCC_GetPCLK1Freq>
 8003330:	4360      	muls	r0, r4
 8003332:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	fbb0 f7f3 	udiv	r7, r0, r3
 800333c:	f7ff fb76 	bl	8002a2c <HAL_RCC_GetPCLK1Freq>
 8003340:	4360      	muls	r0, r4
 8003342:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	fbb0 f3f3 	udiv	r3, r0, r3
 800334c:	fbb3 f3f8 	udiv	r3, r3, r8
 8003350:	fb08 7313 	mls	r3, r8, r3, r7
 8003354:	011b      	lsls	r3, r3, #4
 8003356:	3332      	adds	r3, #50	; 0x32
 8003358:	fbb3 f3f8 	udiv	r3, r3, r8
 800335c:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8003360:	f7ff fb64 	bl	8002a2c <HAL_RCC_GetPCLK1Freq>
 8003364:	4360      	muls	r0, r4
 8003366:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800336a:	0092      	lsls	r2, r2, #2
 800336c:	fbb0 faf2 	udiv	sl, r0, r2
 8003370:	f7ff fb5c 	bl	8002a2c <HAL_RCC_GetPCLK1Freq>
 8003374:	e7b7      	b.n	80032e6 <UART_SetConfig+0xa6>
 8003376:	bf00      	nop
 8003378:	40013800 	.word	0x40013800

0800337c <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 800337c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800337e:	4604      	mov	r4, r0
 8003380:	460e      	mov	r6, r1
 8003382:	4617      	mov	r7, r2
 8003384:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8003386:	6821      	ldr	r1, [r4, #0]
 8003388:	680b      	ldr	r3, [r1, #0]
 800338a:	ea36 0303 	bics.w	r3, r6, r3
 800338e:	d101      	bne.n	8003394 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8003390:	2000      	movs	r0, #0
}
 8003392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8003394:	1c6b      	adds	r3, r5, #1
 8003396:	d0f7      	beq.n	8003388 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8003398:	b995      	cbnz	r5, 80033c0 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800339a:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 800339c:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800339e:	68da      	ldr	r2, [r3, #12]
 80033a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80033a4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033a6:	695a      	ldr	r2, [r3, #20]
 80033a8:	f022 0201 	bic.w	r2, r2, #1
 80033ac:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80033ae:	2320      	movs	r3, #32
 80033b0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80033b4:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 80033b8:	2300      	movs	r3, #0
 80033ba:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 80033be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80033c0:	f7fe f89e 	bl	8001500 <HAL_GetTick>
 80033c4:	1bc0      	subs	r0, r0, r7
 80033c6:	4285      	cmp	r5, r0
 80033c8:	d2dd      	bcs.n	8003386 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 80033ca:	e7e6      	b.n	800339a <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

080033cc <HAL_UART_Init>:
{
 80033cc:	b510      	push	{r4, lr}
  if(huart == NULL)
 80033ce:	4604      	mov	r4, r0
 80033d0:	b340      	cbz	r0, 8003424 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 80033d2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80033d6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80033da:	b91b      	cbnz	r3, 80033e4 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80033dc:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80033e0:	f002 fcce 	bl	8005d80 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80033e4:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80033e6:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80033e8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80033ec:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 80033ee:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80033f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80033f4:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80033f6:	f7ff ff23 	bl	8003240 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033fa:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033fc:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033fe:	691a      	ldr	r2, [r3, #16]
 8003400:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003404:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003406:	695a      	ldr	r2, [r3, #20]
 8003408:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800340c:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800340e:	68da      	ldr	r2, [r3, #12]
 8003410:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003414:	60da      	str	r2, [r3, #12]
  huart->gState= HAL_UART_STATE_READY;
 8003416:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003418:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800341a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800341e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8003422:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003424:	2001      	movs	r0, #1
}
 8003426:	bd10      	pop	{r4, pc}

08003428 <HAL_UART_Transmit>:
{
 8003428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800342c:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 800342e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 8003432:	4604      	mov	r4, r0
  if(huart->gState == HAL_UART_STATE_READY)
 8003434:	2b20      	cmp	r3, #32
{
 8003436:	460d      	mov	r5, r1
 8003438:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 800343a:	d14e      	bne.n	80034da <HAL_UART_Transmit+0xb2>
    if((pData == NULL) || (Size == 0U))
 800343c:	2900      	cmp	r1, #0
 800343e:	d049      	beq.n	80034d4 <HAL_UART_Transmit+0xac>
 8003440:	2a00      	cmp	r2, #0
 8003442:	d047      	beq.n	80034d4 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 8003444:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8003448:	2b01      	cmp	r3, #1
 800344a:	d046      	beq.n	80034da <HAL_UART_Transmit+0xb2>
 800344c:	2301      	movs	r3, #1
 800344e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003452:	2300      	movs	r3, #0
 8003454:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003456:	2321      	movs	r3, #33	; 0x21
 8003458:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 800345c:	f7fe f850 	bl	8001500 <HAL_GetTick>
 8003460:	4606      	mov	r6, r0
    huart->TxXferSize = Size;
 8003462:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8003466:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 800346a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800346c:	b29b      	uxth	r3, r3
 800346e:	b96b      	cbnz	r3, 800348c <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003470:	463b      	mov	r3, r7
 8003472:	4632      	mov	r2, r6
 8003474:	2140      	movs	r1, #64	; 0x40
 8003476:	4620      	mov	r0, r4
 8003478:	f7ff ff80 	bl	800337c <UART_WaitOnFlagUntilTimeout.constprop.3>
 800347c:	b9a8      	cbnz	r0, 80034aa <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 800347e:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8003480:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_READY;
 8003484:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8003488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 800348c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800348e:	4632      	mov	r2, r6
      huart->TxXferCount--;
 8003490:	3b01      	subs	r3, #1
 8003492:	b29b      	uxth	r3, r3
 8003494:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003496:	68a3      	ldr	r3, [r4, #8]
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003498:	2180      	movs	r1, #128	; 0x80
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800349a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800349e:	4620      	mov	r0, r4
 80034a0:	463b      	mov	r3, r7
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80034a2:	d10e      	bne.n	80034c2 <HAL_UART_Transmit+0x9a>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034a4:	f7ff ff6a 	bl	800337c <UART_WaitOnFlagUntilTimeout.constprop.3>
 80034a8:	b110      	cbz	r0, 80034b0 <HAL_UART_Transmit+0x88>
          return HAL_TIMEOUT;
 80034aa:	2003      	movs	r0, #3
 80034ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80034b0:	882b      	ldrh	r3, [r5, #0]
 80034b2:	6822      	ldr	r2, [r4, #0]
 80034b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034b8:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80034ba:	6923      	ldr	r3, [r4, #16]
 80034bc:	b943      	cbnz	r3, 80034d0 <HAL_UART_Transmit+0xa8>
          pData +=2U;
 80034be:	3502      	adds	r5, #2
 80034c0:	e7d3      	b.n	800346a <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034c2:	f7ff ff5b 	bl	800337c <UART_WaitOnFlagUntilTimeout.constprop.3>
 80034c6:	2800      	cmp	r0, #0
 80034c8:	d1ef      	bne.n	80034aa <HAL_UART_Transmit+0x82>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80034ca:	6823      	ldr	r3, [r4, #0]
 80034cc:	782a      	ldrb	r2, [r5, #0]
 80034ce:	605a      	str	r2, [r3, #4]
 80034d0:	3501      	adds	r5, #1
 80034d2:	e7ca      	b.n	800346a <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 80034d4:	2001      	movs	r0, #1
 80034d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80034da:	2002      	movs	r0, #2
}
 80034dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080034e0 <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 80034e0:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80034e4:	2b20      	cmp	r3, #32
 80034e6:	d120      	bne.n	800352a <HAL_UART_Receive_IT+0x4a>
    if((pData == NULL) || (Size == 0U))
 80034e8:	b1e9      	cbz	r1, 8003526 <HAL_UART_Receive_IT+0x46>
 80034ea:	b1e2      	cbz	r2, 8003526 <HAL_UART_Receive_IT+0x46>
    __HAL_LOCK(huart);
 80034ec:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d01a      	beq.n	800352a <HAL_UART_Receive_IT+0x4a>
    huart->RxXferCount = Size;
 80034f4:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->RxXferSize = Size;
 80034f6:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034f8:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80034fa:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034fc:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80034fe:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003502:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 8003504:	6281      	str	r1, [r0, #40]	; 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003506:	68d1      	ldr	r1, [r2, #12]
    __HAL_UNLOCK(huart);
 8003508:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800350c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8003510:	60d1      	str	r1, [r2, #12]
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003512:	6951      	ldr	r1, [r2, #20]
    return HAL_OK;
 8003514:	4618      	mov	r0, r3
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003516:	f041 0101 	orr.w	r1, r1, #1
 800351a:	6151      	str	r1, [r2, #20]
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800351c:	68d1      	ldr	r1, [r2, #12]
 800351e:	f041 0120 	orr.w	r1, r1, #32
 8003522:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 8003524:	4770      	bx	lr
      return HAL_ERROR;
 8003526:	2001      	movs	r0, #1
 8003528:	4770      	bx	lr
    return HAL_BUSY;
 800352a:	2002      	movs	r0, #2
}
 800352c:	4770      	bx	lr
	...

08003530 <HAL_UART_Transmit_DMA>:
{
 8003530:	b538      	push	{r3, r4, r5, lr}
 8003532:	4604      	mov	r4, r0
 8003534:	4613      	mov	r3, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8003536:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 800353a:	2a20      	cmp	r2, #32
 800353c:	d12a      	bne.n	8003594 <HAL_UART_Transmit_DMA+0x64>
    if((pData == NULL) || (Size == 0U))
 800353e:	b339      	cbz	r1, 8003590 <HAL_UART_Transmit_DMA+0x60>
 8003540:	b333      	cbz	r3, 8003590 <HAL_UART_Transmit_DMA+0x60>
    __HAL_LOCK(huart);
 8003542:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8003546:	2a01      	cmp	r2, #1
 8003548:	d024      	beq.n	8003594 <HAL_UART_Transmit_DMA+0x64>
 800354a:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800354c:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 800354e:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003552:	2221      	movs	r2, #33	; 0x21
    huart->TxXferCount = Size;
 8003554:	84e3      	strh	r3, [r4, #38]	; 0x26
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003556:	6b20      	ldr	r0, [r4, #48]	; 0x30
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003558:	63e5      	str	r5, [r4, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800355a:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800355e:	4a0e      	ldr	r2, [pc, #56]	; (8003598 <HAL_UART_Transmit_DMA+0x68>)
    huart->TxXferSize = Size;
 8003560:	84a3      	strh	r3, [r4, #36]	; 0x24
    huart->pTxBuffPtr = pData;
 8003562:	6221      	str	r1, [r4, #32]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003564:	6282      	str	r2, [r0, #40]	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003566:	4a0d      	ldr	r2, [pc, #52]	; (800359c <HAL_UART_Transmit_DMA+0x6c>)
    huart->hdmatx->XferAbortCallback = NULL;
 8003568:	6345      	str	r5, [r0, #52]	; 0x34
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800356a:	62c2      	str	r2, [r0, #44]	; 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800356c:	4a0c      	ldr	r2, [pc, #48]	; (80035a0 <HAL_UART_Transmit_DMA+0x70>)
 800356e:	6302      	str	r2, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t*)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003570:	6822      	ldr	r2, [r4, #0]
 8003572:	3204      	adds	r2, #4
 8003574:	f7fe fbc0 	bl	8001cf8 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003578:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800357c:	6823      	ldr	r3, [r4, #0]
    return HAL_OK;
 800357e:	4628      	mov	r0, r5
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003580:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003582:	695a      	ldr	r2, [r3, #20]
    __HAL_UNLOCK(huart);
 8003584:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003588:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800358c:	615a      	str	r2, [r3, #20]
    return HAL_OK;
 800358e:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8003590:	2001      	movs	r0, #1
 8003592:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 8003594:	2002      	movs	r0, #2
}
 8003596:	bd38      	pop	{r3, r4, r5, pc}
 8003598:	080035a7 	.word	0x080035a7
 800359c:	080035d5 	.word	0x080035d5
 80035a0:	0800365d 	.word	0x0800365d

080035a4 <HAL_UART_TxCpltCallback>:
 80035a4:	4770      	bx	lr

080035a6 <UART_DMATransmitCplt>:
{
 80035a6:	b508      	push	{r3, lr}
  if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80035a8:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80035aa:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f013 0320 	ands.w	r3, r3, #32
 80035b2:	d10a      	bne.n	80035ca <UART_DMATransmitCplt+0x24>
    huart->TxXferCount = 0U;
 80035b4:	84d3      	strh	r3, [r2, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80035b6:	6813      	ldr	r3, [r2, #0]
 80035b8:	695a      	ldr	r2, [r3, #20]
 80035ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035be:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80035c0:	68da      	ldr	r2, [r3, #12]
 80035c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035c6:	60da      	str	r2, [r3, #12]
 80035c8:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 80035ca:	4610      	mov	r0, r2
 80035cc:	f7ff ffea 	bl	80035a4 <HAL_UART_TxCpltCallback>
 80035d0:	bd08      	pop	{r3, pc}

080035d2 <HAL_UART_TxHalfCpltCallback>:
 80035d2:	4770      	bx	lr

080035d4 <UART_DMATxHalfCplt>:
{
 80035d4:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 80035d6:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80035d8:	f7ff fffb 	bl	80035d2 <HAL_UART_TxHalfCpltCallback>
 80035dc:	bd08      	pop	{r3, pc}

080035de <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 80035de:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 80035e2:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 80035e4:	2b22      	cmp	r3, #34	; 0x22
 80035e6:	d136      	bne.n	8003656 <UART_Receive_IT+0x78>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80035e8:	6883      	ldr	r3, [r0, #8]
 80035ea:	6901      	ldr	r1, [r0, #16]
 80035ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035f0:	6802      	ldr	r2, [r0, #0]
 80035f2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80035f4:	d123      	bne.n	800363e <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80035f6:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80035f8:	b9e9      	cbnz	r1, 8003636 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80035fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035fe:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8003602:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 8003604:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8003606:	3c01      	subs	r4, #1
 8003608:	b2a4      	uxth	r4, r4
 800360a:	85c4      	strh	r4, [r0, #46]	; 0x2e
 800360c:	b98c      	cbnz	r4, 8003632 <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800360e:	6803      	ldr	r3, [r0, #0]
 8003610:	68da      	ldr	r2, [r3, #12]
 8003612:	f022 0220 	bic.w	r2, r2, #32
 8003616:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003618:	68da      	ldr	r2, [r3, #12]
 800361a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800361e:	60da      	str	r2, [r3, #12]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003620:	695a      	ldr	r2, [r3, #20]
 8003622:	f022 0201 	bic.w	r2, r2, #1
 8003626:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8003628:	2320      	movs	r3, #32
 800362a:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 800362e:	f002 f8a1 	bl	8005774 <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 8003632:	2000      	movs	r0, #0
}
 8003634:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003636:	b2d2      	uxtb	r2, r2
 8003638:	f823 2b01 	strh.w	r2, [r3], #1
 800363c:	e7e1      	b.n	8003602 <UART_Receive_IT+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 800363e:	b921      	cbnz	r1, 800364a <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003640:	1c59      	adds	r1, r3, #1
 8003642:	6852      	ldr	r2, [r2, #4]
 8003644:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003646:	701a      	strb	r2, [r3, #0]
 8003648:	e7dc      	b.n	8003604 <UART_Receive_IT+0x26>
 800364a:	6852      	ldr	r2, [r2, #4]
 800364c:	1c59      	adds	r1, r3, #1
 800364e:	6281      	str	r1, [r0, #40]	; 0x28
 8003650:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003654:	e7f7      	b.n	8003646 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8003656:	2002      	movs	r0, #2
 8003658:	bd10      	pop	{r4, pc}

0800365a <HAL_UART_ErrorCallback>:
 800365a:	4770      	bx	lr

0800365c <UART_DMAError>:
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800365c:	6a41      	ldr	r1, [r0, #36]	; 0x24
{
 800365e:	b508      	push	{r3, lr}
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003660:	680b      	ldr	r3, [r1, #0]
 8003662:	695a      	ldr	r2, [r3, #20]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003664:	f891 0039 	ldrb.w	r0, [r1, #57]	; 0x39
 8003668:	2821      	cmp	r0, #33	; 0x21
 800366a:	d10a      	bne.n	8003682 <UART_DMAError+0x26>
 800366c:	0612      	lsls	r2, r2, #24
 800366e:	d508      	bpl.n	8003682 <UART_DMAError+0x26>
    huart->TxXferCount = 0U;
 8003670:	2200      	movs	r2, #0
 8003672:	84ca      	strh	r2, [r1, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003674:	68da      	ldr	r2, [r3, #12]
 8003676:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800367a:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800367c:	2220      	movs	r2, #32
 800367e:	f881 2039 	strb.w	r2, [r1, #57]	; 0x39
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 8003682:	695b      	ldr	r3, [r3, #20]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003684:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
 8003688:	2a22      	cmp	r2, #34	; 0x22
 800368a:	d106      	bne.n	800369a <UART_DMAError+0x3e>
 800368c:	065b      	lsls	r3, r3, #25
 800368e:	d504      	bpl.n	800369a <UART_DMAError+0x3e>
    huart->RxXferCount = 0U;
 8003690:	2300      	movs	r3, #0
    UART_EndRxTransfer(huart);
 8003692:	4608      	mov	r0, r1
    huart->RxXferCount = 0U;
 8003694:	85cb      	strh	r3, [r1, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003696:	f7ff fdc5 	bl	8003224 <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800369a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 800369c:	4608      	mov	r0, r1
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800369e:	f043 0310 	orr.w	r3, r3, #16
 80036a2:	63cb      	str	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 80036a4:	f7ff ffd9 	bl	800365a <HAL_UART_ErrorCallback>
 80036a8:	bd08      	pop	{r3, pc}
	...

080036ac <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80036ac:	6803      	ldr	r3, [r0, #0]
{
 80036ae:	b570      	push	{r4, r5, r6, lr}
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80036b0:	681a      	ldr	r2, [r3, #0]
{
 80036b2:	4604      	mov	r4, r0
  if(errorflags == RESET)
 80036b4:	0716      	lsls	r6, r2, #28
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80036b6:	68d9      	ldr	r1, [r3, #12]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80036b8:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 80036ba:	d107      	bne.n	80036cc <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036bc:	0696      	lsls	r6, r2, #26
 80036be:	d55a      	bpl.n	8003776 <HAL_UART_IRQHandler+0xca>
 80036c0:	068d      	lsls	r5, r1, #26
 80036c2:	d558      	bpl.n	8003776 <HAL_UART_IRQHandler+0xca>
}
 80036c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 80036c8:	f7ff bf89 	b.w	80035de <UART_Receive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80036cc:	f015 0501 	ands.w	r5, r5, #1
 80036d0:	d102      	bne.n	80036d8 <HAL_UART_IRQHandler+0x2c>
 80036d2:	f411 7f90 	tst.w	r1, #288	; 0x120
 80036d6:	d04e      	beq.n	8003776 <HAL_UART_IRQHandler+0xca>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80036d8:	07d3      	lsls	r3, r2, #31
 80036da:	d505      	bpl.n	80036e8 <HAL_UART_IRQHandler+0x3c>
 80036dc:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80036de:	bf42      	ittt	mi
 80036e0:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 80036e2:	f043 0301 	orrmi.w	r3, r3, #1
 80036e6:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036e8:	0750      	lsls	r0, r2, #29
 80036ea:	d504      	bpl.n	80036f6 <HAL_UART_IRQHandler+0x4a>
 80036ec:	b11d      	cbz	r5, 80036f6 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80036ee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80036f0:	f043 0302 	orr.w	r3, r3, #2
 80036f4:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036f6:	0793      	lsls	r3, r2, #30
 80036f8:	d504      	bpl.n	8003704 <HAL_UART_IRQHandler+0x58>
 80036fa:	b11d      	cbz	r5, 8003704 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80036fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80036fe:	f043 0304 	orr.w	r3, r3, #4
 8003702:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003704:	0716      	lsls	r6, r2, #28
 8003706:	d504      	bpl.n	8003712 <HAL_UART_IRQHandler+0x66>
 8003708:	b11d      	cbz	r5, 8003712 <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800370a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800370c:	f043 0308 	orr.w	r3, r3, #8
 8003710:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003712:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003714:	2b00      	cmp	r3, #0
 8003716:	d066      	beq.n	80037e6 <HAL_UART_IRQHandler+0x13a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003718:	0695      	lsls	r5, r2, #26
 800371a:	d504      	bpl.n	8003726 <HAL_UART_IRQHandler+0x7a>
 800371c:	0688      	lsls	r0, r1, #26
 800371e:	d502      	bpl.n	8003726 <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8003720:	4620      	mov	r0, r4
 8003722:	f7ff ff5c 	bl	80035de <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003726:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 8003728:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800372a:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800372c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800372e:	0711      	lsls	r1, r2, #28
 8003730:	d402      	bmi.n	8003738 <HAL_UART_IRQHandler+0x8c>
 8003732:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8003736:	d01a      	beq.n	800376e <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8003738:	f7ff fd74 	bl	8003224 <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800373c:	6823      	ldr	r3, [r4, #0]
 800373e:	695a      	ldr	r2, [r3, #20]
 8003740:	0652      	lsls	r2, r2, #25
 8003742:	d510      	bpl.n	8003766 <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003744:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8003746:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003748:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800374c:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 800374e:	b150      	cbz	r0, 8003766 <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003750:	4b25      	ldr	r3, [pc, #148]	; (80037e8 <HAL_UART_IRQHandler+0x13c>)
 8003752:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003754:	f7fe fb0e 	bl	8001d74 <HAL_DMA_Abort_IT>
 8003758:	2800      	cmp	r0, #0
 800375a:	d044      	beq.n	80037e6 <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800375c:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 800375e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003762:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003764:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8003766:	4620      	mov	r0, r4
 8003768:	f7ff ff77 	bl	800365a <HAL_UART_ErrorCallback>
 800376c:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 800376e:	f7ff ff74 	bl	800365a <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003772:	63e5      	str	r5, [r4, #60]	; 0x3c
 8003774:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003776:	0616      	lsls	r6, r2, #24
 8003778:	d527      	bpl.n	80037ca <HAL_UART_IRQHandler+0x11e>
 800377a:	060d      	lsls	r5, r1, #24
 800377c:	d525      	bpl.n	80037ca <HAL_UART_IRQHandler+0x11e>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 800377e:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8003782:	2a21      	cmp	r2, #33	; 0x21
 8003784:	d12f      	bne.n	80037e6 <HAL_UART_IRQHandler+0x13a>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003786:	68a2      	ldr	r2, [r4, #8]
 8003788:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800378c:	6a22      	ldr	r2, [r4, #32]
 800378e:	d117      	bne.n	80037c0 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003790:	8811      	ldrh	r1, [r2, #0]
 8003792:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8003796:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8003798:	6921      	ldr	r1, [r4, #16]
 800379a:	b979      	cbnz	r1, 80037bc <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 800379c:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 800379e:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 80037a0:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80037a2:	3a01      	subs	r2, #1
 80037a4:	b292      	uxth	r2, r2
 80037a6:	84e2      	strh	r2, [r4, #38]	; 0x26
 80037a8:	b9ea      	cbnz	r2, 80037e6 <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80037aa:	68da      	ldr	r2, [r3, #12]
 80037ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037b0:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80037b2:	68da      	ldr	r2, [r3, #12]
 80037b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037b8:	60da      	str	r2, [r3, #12]
 80037ba:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 80037bc:	3201      	adds	r2, #1
 80037be:	e7ee      	b.n	800379e <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80037c0:	1c51      	adds	r1, r2, #1
 80037c2:	6221      	str	r1, [r4, #32]
 80037c4:	7812      	ldrb	r2, [r2, #0]
 80037c6:	605a      	str	r2, [r3, #4]
 80037c8:	e7ea      	b.n	80037a0 <HAL_UART_IRQHandler+0xf4>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80037ca:	0650      	lsls	r0, r2, #25
 80037cc:	d50b      	bpl.n	80037e6 <HAL_UART_IRQHandler+0x13a>
 80037ce:	064a      	lsls	r2, r1, #25
 80037d0:	d509      	bpl.n	80037e6 <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80037d2:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 80037d4:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80037d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037da:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80037dc:	2320      	movs	r3, #32
 80037de:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80037e2:	f7ff fedf 	bl	80035a4 <HAL_UART_TxCpltCallback>
 80037e6:	bd70      	pop	{r4, r5, r6, pc}
 80037e8:	080037ed 	.word	0x080037ed

080037ec <UART_DMAAbortOnError>:
{
 80037ec:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 80037ee:	2300      	movs	r3, #0
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80037f0:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 80037f2:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80037f4:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80037f6:	f7ff ff30 	bl	800365a <HAL_UART_ErrorCallback>
 80037fa:	bd08      	pop	{r3, pc}

080037fc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80037fc:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80037fe:	f000 fe6d 	bl	80044dc <vTaskStartScheduler>
  
  return osOK;
}
 8003802:	2000      	movs	r0, #0
 8003804:	bd08      	pop	{r3, pc}

08003806 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8003806:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8003808:	f001 f900 	bl	8004a0c <xTaskGetSchedulerState>
 800380c:	2801      	cmp	r0, #1
 800380e:	d003      	beq.n	8003818 <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8003810:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8003814:	f000 b8e6 	b.w	80039e4 <xPortSysTickHandler>
 8003818:	bd08      	pop	{r3, pc}

0800381a <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800381a:	f100 0308 	add.w	r3, r0, #8
 800381e:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003820:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003824:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003826:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003828:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800382a:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800382c:	6003      	str	r3, [r0, #0]
 800382e:	4770      	bx	lr

08003830 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003830:	2300      	movs	r3, #0
 8003832:	6103      	str	r3, [r0, #16]
 8003834:	4770      	bx	lr

08003836 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8003836:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003838:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800383a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800383c:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800383e:	689a      	ldr	r2, [r3, #8]
 8003840:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003842:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8003844:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003846:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8003848:	3301      	adds	r3, #1
 800384a:	6003      	str	r3, [r0, #0]
 800384c:	4770      	bx	lr

0800384e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800384e:	680a      	ldr	r2, [r1, #0]
{
 8003850:	b530      	push	{r4, r5, lr}
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003852:	1c53      	adds	r3, r2, #1
 8003854:	d10a      	bne.n	800386c <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003856:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003858:	685a      	ldr	r2, [r3, #4]
 800385a:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800385c:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800385e:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8003860:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8003862:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003864:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8003866:	3301      	adds	r3, #1
 8003868:	6003      	str	r3, [r0, #0]
 800386a:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800386c:	f100 0308 	add.w	r3, r0, #8
 8003870:	685c      	ldr	r4, [r3, #4]
 8003872:	6825      	ldr	r5, [r4, #0]
 8003874:	42aa      	cmp	r2, r5
 8003876:	d3ef      	bcc.n	8003858 <vListInsert+0xa>
 8003878:	4623      	mov	r3, r4
 800387a:	e7f9      	b.n	8003870 <vListInsert+0x22>

0800387c <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800387c:	6841      	ldr	r1, [r0, #4]
 800387e:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003880:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003882:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003884:	6882      	ldr	r2, [r0, #8]
 8003886:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003888:	6859      	ldr	r1, [r3, #4]
 800388a:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800388c:	bf08      	it	eq
 800388e:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003890:	2200      	movs	r2, #0
 8003892:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8003894:	6818      	ldr	r0, [r3, #0]
 8003896:	3801      	subs	r0, #1
 8003898:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 800389a:	4770      	bx	lr

0800389c <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800389c:	4b0a      	ldr	r3, [pc, #40]	; (80038c8 <prvTaskExitError+0x2c>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	3301      	adds	r3, #1
 80038a2:	d008      	beq.n	80038b6 <prvTaskExitError+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80038a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038a8:	f383 8811 	msr	BASEPRI, r3
 80038ac:	f3bf 8f6f 	isb	sy
 80038b0:	f3bf 8f4f 	dsb	sy
 80038b4:	e7fe      	b.n	80038b4 <prvTaskExitError+0x18>
 80038b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ba:	f383 8811 	msr	BASEPRI, r3
 80038be:	f3bf 8f6f 	isb	sy
 80038c2:	f3bf 8f4f 	dsb	sy
 80038c6:	e7fe      	b.n	80038c6 <prvTaskExitError+0x2a>
 80038c8:	20000008 	.word	0x20000008

080038cc <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80038cc:	4806      	ldr	r0, [pc, #24]	; (80038e8 <prvPortStartFirstTask+0x1c>)
 80038ce:	6800      	ldr	r0, [r0, #0]
 80038d0:	6800      	ldr	r0, [r0, #0]
 80038d2:	f380 8808 	msr	MSP, r0
 80038d6:	b662      	cpsie	i
 80038d8:	b661      	cpsie	f
 80038da:	f3bf 8f4f 	dsb	sy
 80038de:	f3bf 8f6f 	isb	sy
 80038e2:	df00      	svc	0
 80038e4:	bf00      	nop
 80038e6:	0000      	.short	0x0000
 80038e8:	e000ed08 	.word	0xe000ed08

080038ec <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80038ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80038f0:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80038f4:	4b05      	ldr	r3, [pc, #20]	; (800390c <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80038f6:	f021 0101 	bic.w	r1, r1, #1
 80038fa:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80038fe:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003902:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8003906:	3840      	subs	r0, #64	; 0x40
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	0800389d 	.word	0x0800389d

08003910 <SVC_Handler>:
	__asm volatile (
 8003910:	4b07      	ldr	r3, [pc, #28]	; (8003930 <pxCurrentTCBConst2>)
 8003912:	6819      	ldr	r1, [r3, #0]
 8003914:	6808      	ldr	r0, [r1, #0]
 8003916:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800391a:	f380 8809 	msr	PSP, r0
 800391e:	f3bf 8f6f 	isb	sy
 8003922:	f04f 0000 	mov.w	r0, #0
 8003926:	f380 8811 	msr	BASEPRI, r0
 800392a:	f04e 0e0d 	orr.w	lr, lr, #13
 800392e:	4770      	bx	lr

08003930 <pxCurrentTCBConst2>:
 8003930:	20005084 	.word	0x20005084

08003934 <vPortEnterCritical>:
 8003934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003938:	f383 8811 	msr	BASEPRI, r3
 800393c:	f3bf 8f6f 	isb	sy
 8003940:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003944:	4a0a      	ldr	r2, [pc, #40]	; (8003970 <vPortEnterCritical+0x3c>)
 8003946:	6813      	ldr	r3, [r2, #0]
 8003948:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800394a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800394c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800394e:	d10d      	bne.n	800396c <vPortEnterCritical+0x38>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003950:	4b08      	ldr	r3, [pc, #32]	; (8003974 <vPortEnterCritical+0x40>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003958:	d008      	beq.n	800396c <vPortEnterCritical+0x38>
 800395a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800395e:	f383 8811 	msr	BASEPRI, r3
 8003962:	f3bf 8f6f 	isb	sy
 8003966:	f3bf 8f4f 	dsb	sy
 800396a:	e7fe      	b.n	800396a <vPortEnterCritical+0x36>
 800396c:	4770      	bx	lr
 800396e:	bf00      	nop
 8003970:	20000008 	.word	0x20000008
 8003974:	e000ed04 	.word	0xe000ed04

08003978 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8003978:	4a08      	ldr	r2, [pc, #32]	; (800399c <vPortExitCritical+0x24>)
 800397a:	6813      	ldr	r3, [r2, #0]
 800397c:	b943      	cbnz	r3, 8003990 <vPortExitCritical+0x18>
 800397e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003982:	f383 8811 	msr	BASEPRI, r3
 8003986:	f3bf 8f6f 	isb	sy
 800398a:	f3bf 8f4f 	dsb	sy
 800398e:	e7fe      	b.n	800398e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8003990:	3b01      	subs	r3, #1
 8003992:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003994:	b90b      	cbnz	r3, 800399a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003996:	f383 8811 	msr	BASEPRI, r3
 800399a:	4770      	bx	lr
 800399c:	20000008 	.word	0x20000008

080039a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80039a0:	f3ef 8009 	mrs	r0, PSP
 80039a4:	f3bf 8f6f 	isb	sy
 80039a8:	4b0d      	ldr	r3, [pc, #52]	; (80039e0 <pxCurrentTCBConst>)
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80039b0:	6010      	str	r0, [r2, #0]
 80039b2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80039b6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80039ba:	f380 8811 	msr	BASEPRI, r0
 80039be:	f000 ff3f 	bl	8004840 <vTaskSwitchContext>
 80039c2:	f04f 0000 	mov.w	r0, #0
 80039c6:	f380 8811 	msr	BASEPRI, r0
 80039ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80039ce:	6819      	ldr	r1, [r3, #0]
 80039d0:	6808      	ldr	r0, [r1, #0]
 80039d2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80039d6:	f380 8809 	msr	PSP, r0
 80039da:	f3bf 8f6f 	isb	sy
 80039de:	4770      	bx	lr

080039e0 <pxCurrentTCBConst>:
 80039e0:	20005084 	.word	0x20005084

080039e4 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80039e4:	b508      	push	{r3, lr}
	__asm volatile
 80039e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ea:	f383 8811 	msr	BASEPRI, r3
 80039ee:	f3bf 8f6f 	isb	sy
 80039f2:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80039f6:	f000 fdbb 	bl	8004570 <xTaskIncrementTick>
 80039fa:	b118      	cbz	r0, 8003a04 <xPortSysTickHandler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80039fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a00:	4b02      	ldr	r3, [pc, #8]	; (8003a0c <xPortSysTickHandler+0x28>)
 8003a02:	601a      	str	r2, [r3, #0]
	__asm volatile
 8003a04:	2300      	movs	r3, #0
 8003a06:	f383 8811 	msr	BASEPRI, r3
 8003a0a:	bd08      	pop	{r3, pc}
 8003a0c:	e000ed04 	.word	0xe000ed04

08003a10 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003a10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a14:	4b05      	ldr	r3, [pc, #20]	; (8003a2c <vPortSetupTimerInterrupt+0x1c>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a1c:	4a04      	ldr	r2, [pc, #16]	; (8003a30 <vPortSetupTimerInterrupt+0x20>)
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003a22:	2207      	movs	r2, #7
 8003a24:	4b03      	ldr	r3, [pc, #12]	; (8003a34 <vPortSetupTimerInterrupt+0x24>)
 8003a26:	601a      	str	r2, [r3, #0]
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	20000050 	.word	0x20000050
 8003a30:	e000e014 	.word	0xe000e014
 8003a34:	e000e010 	.word	0xe000e010

08003a38 <xPortStartScheduler>:
{
 8003a38:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003a3a:	4b1f      	ldr	r3, [pc, #124]	; (8003ab8 <xPortStartScheduler+0x80>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003a3c:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003a3e:	781a      	ldrb	r2, [r3, #0]
 8003a40:	b2d2      	uxtb	r2, r2
 8003a42:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003a44:	22ff      	movs	r2, #255	; 0xff
 8003a46:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003a48:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003a4a:	4a1c      	ldr	r2, [pc, #112]	; (8003abc <xPortStartScheduler+0x84>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003a52:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8003a56:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003a5a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003a5c:	2207      	movs	r2, #7
 8003a5e:	4b18      	ldr	r3, [pc, #96]	; (8003ac0 <xPortStartScheduler+0x88>)
 8003a60:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003a62:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8003a66:	1e54      	subs	r4, r2, #1
 8003a68:	0600      	lsls	r0, r0, #24
 8003a6a:	d41c      	bmi.n	8003aa6 <xPortStartScheduler+0x6e>
 8003a6c:	b101      	cbz	r1, 8003a70 <xPortStartScheduler+0x38>
 8003a6e:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003a74:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8003a78:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003a7a:	9b01      	ldr	r3, [sp, #4]
 8003a7c:	4a0e      	ldr	r2, [pc, #56]	; (8003ab8 <xPortStartScheduler+0x80>)
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003a82:	4b10      	ldr	r3, [pc, #64]	; (8003ac4 <xPortStartScheduler+0x8c>)
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8003a8a:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8003a92:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8003a94:	f7ff ffbc 	bl	8003a10 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8003a98:	2200      	movs	r2, #0
 8003a9a:	4b0b      	ldr	r3, [pc, #44]	; (8003ac8 <xPortStartScheduler+0x90>)
 8003a9c:	601a      	str	r2, [r3, #0]
	prvPortStartFirstTask();
 8003a9e:	f7ff ff15 	bl	80038cc <prvPortStartFirstTask>
	prvTaskExitError();
 8003aa2:	f7ff fefb 	bl	800389c <prvTaskExitError>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003aa6:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8003aaa:	2101      	movs	r1, #1
 8003aac:	0052      	lsls	r2, r2, #1
 8003aae:	b2d2      	uxtb	r2, r2
 8003ab0:	f88d 2003 	strb.w	r2, [sp, #3]
 8003ab4:	4622      	mov	r2, r4
 8003ab6:	e7d4      	b.n	8003a62 <xPortStartScheduler+0x2a>
 8003ab8:	e000e400 	.word	0xe000e400
 8003abc:	20000244 	.word	0x20000244
 8003ac0:	20000248 	.word	0x20000248
 8003ac4:	e000ed20 	.word	0xe000ed20
 8003ac8:	20000008 	.word	0x20000008

08003acc <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8003acc:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003ad0:	2b0f      	cmp	r3, #15
 8003ad2:	d90e      	bls.n	8003af2 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003ad4:	4a10      	ldr	r2, [pc, #64]	; (8003b18 <vPortValidateInterruptPriority+0x4c>)
 8003ad6:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003ad8:	4a10      	ldr	r2, [pc, #64]	; (8003b1c <vPortValidateInterruptPriority+0x50>)
 8003ada:	7812      	ldrb	r2, [r2, #0]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d908      	bls.n	8003af2 <vPortValidateInterruptPriority+0x26>
	__asm volatile
 8003ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae4:	f383 8811 	msr	BASEPRI, r3
 8003ae8:	f3bf 8f6f 	isb	sy
 8003aec:	f3bf 8f4f 	dsb	sy
 8003af0:	e7fe      	b.n	8003af0 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003af2:	4b0b      	ldr	r3, [pc, #44]	; (8003b20 <vPortValidateInterruptPriority+0x54>)
 8003af4:	4a0b      	ldr	r2, [pc, #44]	; (8003b24 <vPortValidateInterruptPriority+0x58>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	6812      	ldr	r2, [r2, #0]
 8003afa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d908      	bls.n	8003b14 <vPortValidateInterruptPriority+0x48>
 8003b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b06:	f383 8811 	msr	BASEPRI, r3
 8003b0a:	f3bf 8f6f 	isb	sy
 8003b0e:	f3bf 8f4f 	dsb	sy
 8003b12:	e7fe      	b.n	8003b12 <vPortValidateInterruptPriority+0x46>
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop
 8003b18:	e000e3f0 	.word	0xe000e3f0
 8003b1c:	20000244 	.word	0x20000244
 8003b20:	e000ed0c 	.word	0xe000ed0c
 8003b24:	20000248 	.word	0x20000248

08003b28 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003b28:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003b2a:	4b0f      	ldr	r3, [pc, #60]	; (8003b68 <prvInsertBlockIntoFreeList+0x40>)
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	4282      	cmp	r2, r0
 8003b30:	d318      	bcc.n	8003b64 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003b32:	685c      	ldr	r4, [r3, #4]
 8003b34:	1919      	adds	r1, r3, r4
 8003b36:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003b38:	bf01      	itttt	eq
 8003b3a:	6841      	ldreq	r1, [r0, #4]
 8003b3c:	4618      	moveq	r0, r3
 8003b3e:	1909      	addeq	r1, r1, r4
 8003b40:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003b42:	6844      	ldr	r4, [r0, #4]
 8003b44:	1901      	adds	r1, r0, r4
 8003b46:	428a      	cmp	r2, r1
 8003b48:	d107      	bne.n	8003b5a <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003b4a:	4908      	ldr	r1, [pc, #32]	; (8003b6c <prvInsertBlockIntoFreeList+0x44>)
 8003b4c:	6809      	ldr	r1, [r1, #0]
 8003b4e:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003b50:	bf1f      	itttt	ne
 8003b52:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003b54:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003b56:	1909      	addne	r1, r1, r4
 8003b58:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003b5a:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003b5c:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003b5e:	bf18      	it	ne
 8003b60:	6018      	strne	r0, [r3, #0]
 8003b62:	bd10      	pop	{r4, pc}
 8003b64:	4613      	mov	r3, r2
 8003b66:	e7e1      	b.n	8003b2c <prvInsertBlockIntoFreeList+0x4>
 8003b68:	2000507c 	.word	0x2000507c
 8003b6c:	2000024c 	.word	0x2000024c

08003b70 <pvPortMalloc>:
{
 8003b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b74:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8003b76:	f000 fced 	bl	8004554 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8003b7a:	493d      	ldr	r1, [pc, #244]	; (8003c70 <pvPortMalloc+0x100>)
 8003b7c:	4d3d      	ldr	r5, [pc, #244]	; (8003c74 <pvPortMalloc+0x104>)
 8003b7e:	680b      	ldr	r3, [r1, #0]
 8003b80:	b9fb      	cbnz	r3, 8003bc2 <pvPortMalloc+0x52>
	uxAddress = ( size_t ) ucHeap;
 8003b82:	4a3d      	ldr	r2, [pc, #244]	; (8003c78 <pvPortMalloc+0x108>)
	xStart.xBlockSize = ( size_t ) 0;
 8003b84:	2000      	movs	r0, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003b86:	0756      	lsls	r6, r2, #29
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003b88:	bf0f      	iteee	eq
 8003b8a:	f644 6320 	movweq	r3, #20000	; 0x4e20
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003b8e:	3207      	addne	r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003b90:	4b3a      	ldrne	r3, [pc, #232]	; (8003c7c <pvPortMalloc+0x10c>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003b92:	f022 0207 	bicne.w	r2, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003b96:	bf18      	it	ne
 8003b98:	1a9b      	subne	r3, r3, r2
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003b9a:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003b9c:	4e38      	ldr	r6, [pc, #224]	; (8003c80 <pvPortMalloc+0x110>)
	uxAddress -= xHeapStructSize;
 8003b9e:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003ba0:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 8003ba4:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003ba6:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 8003ba8:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003baa:	6018      	str	r0, [r3, #0]
	pxEnd = ( void * ) uxAddress;
 8003bac:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003bae:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003bb0:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003bb2:	4b34      	ldr	r3, [pc, #208]	; (8003c84 <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003bb4:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003bb6:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003bb8:	4b33      	ldr	r3, [pc, #204]	; (8003c88 <pvPortMalloc+0x118>)
 8003bba:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003bbc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003bc0:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003bc2:	682f      	ldr	r7, [r5, #0]
 8003bc4:	4227      	tst	r7, r4
 8003bc6:	d116      	bne.n	8003bf6 <pvPortMalloc+0x86>
			if( xWantedSize > 0 )
 8003bc8:	2c00      	cmp	r4, #0
 8003bca:	d040      	beq.n	8003c4e <pvPortMalloc+0xde>
				xWantedSize += xHeapStructSize;
 8003bcc:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003bd0:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003bd2:	bf1c      	itt	ne
 8003bd4:	f023 0307 	bicne.w	r3, r3, #7
 8003bd8:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003bda:	b163      	cbz	r3, 8003bf6 <pvPortMalloc+0x86>
 8003bdc:	4a2a      	ldr	r2, [pc, #168]	; (8003c88 <pvPortMalloc+0x118>)
 8003bde:	6816      	ldr	r6, [r2, #0]
 8003be0:	4690      	mov	r8, r2
 8003be2:	42b3      	cmp	r3, r6
 8003be4:	d807      	bhi.n	8003bf6 <pvPortMalloc+0x86>
				pxBlock = xStart.pxNextFreeBlock;
 8003be6:	4a26      	ldr	r2, [pc, #152]	; (8003c80 <pvPortMalloc+0x110>)
 8003be8:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003bea:	6868      	ldr	r0, [r5, #4]
 8003bec:	4283      	cmp	r3, r0
 8003bee:	d804      	bhi.n	8003bfa <pvPortMalloc+0x8a>
				if( pxBlock != pxEnd )
 8003bf0:	6809      	ldr	r1, [r1, #0]
 8003bf2:	428d      	cmp	r5, r1
 8003bf4:	d107      	bne.n	8003c06 <pvPortMalloc+0x96>
void *pvReturn = NULL;
 8003bf6:	2400      	movs	r4, #0
 8003bf8:	e029      	b.n	8003c4e <pvPortMalloc+0xde>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003bfa:	682c      	ldr	r4, [r5, #0]
 8003bfc:	2c00      	cmp	r4, #0
 8003bfe:	d0f7      	beq.n	8003bf0 <pvPortMalloc+0x80>
 8003c00:	462a      	mov	r2, r5
 8003c02:	4625      	mov	r5, r4
 8003c04:	e7f1      	b.n	8003bea <pvPortMalloc+0x7a>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003c06:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003c08:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003c0a:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003c0c:	1ac2      	subs	r2, r0, r3
 8003c0e:	2a10      	cmp	r2, #16
 8003c10:	d90f      	bls.n	8003c32 <pvPortMalloc+0xc2>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003c12:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003c14:	0741      	lsls	r1, r0, #29
 8003c16:	d008      	beq.n	8003c2a <pvPortMalloc+0xba>
 8003c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c1c:	f383 8811 	msr	BASEPRI, r3
 8003c20:	f3bf 8f6f 	isb	sy
 8003c24:	f3bf 8f4f 	dsb	sy
 8003c28:	e7fe      	b.n	8003c28 <pvPortMalloc+0xb8>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003c2a:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003c2c:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003c2e:	f7ff ff7b 	bl	8003b28 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003c32:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003c34:	4913      	ldr	r1, [pc, #76]	; (8003c84 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003c36:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003c38:	431f      	orrs	r7, r3
					pxBlock->pxNextFreeBlock = NULL;
 8003c3a:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003c3c:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003c3e:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003c42:	4286      	cmp	r6, r0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003c44:	bf38      	it	cc
 8003c46:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003c48:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003c4a:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003c4c:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8003c4e:	f000 fd21 	bl	8004694 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003c52:	0763      	lsls	r3, r4, #29
 8003c54:	d008      	beq.n	8003c68 <pvPortMalloc+0xf8>
 8003c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c5a:	f383 8811 	msr	BASEPRI, r3
 8003c5e:	f3bf 8f6f 	isb	sy
 8003c62:	f3bf 8f4f 	dsb	sy
 8003c66:	e7fe      	b.n	8003c66 <pvPortMalloc+0xf6>
}
 8003c68:	4620      	mov	r0, r4
 8003c6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c6e:	bf00      	nop
 8003c70:	2000024c 	.word	0x2000024c
 8003c74:	20005070 	.word	0x20005070
 8003c78:	20000250 	.word	0x20000250
 8003c7c:	20005070 	.word	0x20005070
 8003c80:	2000507c 	.word	0x2000507c
 8003c84:	20005078 	.word	0x20005078
 8003c88:	20005074 	.word	0x20005074

08003c8c <vPortFree>:
{
 8003c8c:	b510      	push	{r4, lr}
	if( pv != NULL )
 8003c8e:	4604      	mov	r4, r0
 8003c90:	b370      	cbz	r0, 8003cf0 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003c92:	4a18      	ldr	r2, [pc, #96]	; (8003cf4 <vPortFree+0x68>)
 8003c94:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8003c98:	6812      	ldr	r2, [r2, #0]
 8003c9a:	4213      	tst	r3, r2
 8003c9c:	d108      	bne.n	8003cb0 <vPortFree+0x24>
 8003c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca2:	f383 8811 	msr	BASEPRI, r3
 8003ca6:	f3bf 8f6f 	isb	sy
 8003caa:	f3bf 8f4f 	dsb	sy
 8003cae:	e7fe      	b.n	8003cae <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003cb0:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8003cb4:	b141      	cbz	r1, 8003cc8 <vPortFree+0x3c>
 8003cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cba:	f383 8811 	msr	BASEPRI, r3
 8003cbe:	f3bf 8f6f 	isb	sy
 8003cc2:	f3bf 8f4f 	dsb	sy
 8003cc6:	e7fe      	b.n	8003cc6 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003cc8:	ea23 0302 	bic.w	r3, r3, r2
 8003ccc:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8003cd0:	f000 fc40 	bl	8004554 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003cd4:	4a08      	ldr	r2, [pc, #32]	; (8003cf8 <vPortFree+0x6c>)
 8003cd6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8003cda:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003cdc:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003ce0:	440b      	add	r3, r1
 8003ce2:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003ce4:	f7ff ff20 	bl	8003b28 <prvInsertBlockIntoFreeList>
}
 8003ce8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8003cec:	f000 bcd2 	b.w	8004694 <xTaskResumeAll>
 8003cf0:	bd10      	pop	{r4, pc}
 8003cf2:	bf00      	nop
 8003cf4:	20005070 	.word	0x20005070
 8003cf8:	20005074 	.word	0x20005074

08003cfc <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003cfc:	b570      	push	{r4, r5, r6, lr}
 8003cfe:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003d00:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8003d02:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d04:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003d06:	b942      	cbnz	r2, 8003d1a <prvCopyDataToQueue+0x1e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003d08:	6805      	ldr	r5, [r0, #0]
 8003d0a:	b99d      	cbnz	r5, 8003d34 <prvCopyDataToQueue+0x38>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003d0c:	6840      	ldr	r0, [r0, #4]
 8003d0e:	f000 fed5 	bl	8004abc <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8003d12:	6065      	str	r5, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8003d14:	3601      	adds	r6, #1
 8003d16:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 8003d18:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8003d1a:	b96d      	cbnz	r5, 8003d38 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003d1c:	6880      	ldr	r0, [r0, #8]
 8003d1e:	f002 f921 	bl	8005f64 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003d22:	68a3      	ldr	r3, [r4, #8]
 8003d24:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003d26:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003d28:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003d2a:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d301      	bcc.n	8003d34 <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003d30:	6823      	ldr	r3, [r4, #0]
 8003d32:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8003d34:	2000      	movs	r0, #0
 8003d36:	e7ed      	b.n	8003d14 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d38:	68c0      	ldr	r0, [r0, #12]
 8003d3a:	f002 f913 	bl	8005f64 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003d3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003d40:	68e2      	ldr	r2, [r4, #12]
 8003d42:	425b      	negs	r3, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003d44:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003d46:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003d48:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003d4a:	60e2      	str	r2, [r4, #12]
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003d4c:	bf3e      	ittt	cc
 8003d4e:	6862      	ldrcc	r2, [r4, #4]
 8003d50:	189b      	addcc	r3, r3, r2
 8003d52:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8003d54:	2d02      	cmp	r5, #2
 8003d56:	d1ed      	bne.n	8003d34 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003d58:	b10e      	cbz	r6, 8003d5e <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8003d5a:	3e01      	subs	r6, #1
 8003d5c:	e7ea      	b.n	8003d34 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 8003d5e:	4630      	mov	r0, r6
 8003d60:	e7d8      	b.n	8003d14 <prvCopyDataToQueue+0x18>

08003d62 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003d62:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003d64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8003d66:	b410      	push	{r4}
 8003d68:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003d6a:	b162      	cbz	r2, 8003d86 <prvCopyDataFromQueue+0x24>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003d6c:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003d6e:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003d70:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003d72:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003d74:	60d9      	str	r1, [r3, #12]
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003d76:	bf28      	it	cs
 8003d78:	6819      	ldrcs	r1, [r3, #0]
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
	}
}
 8003d7a:	bc10      	pop	{r4}
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003d7c:	bf28      	it	cs
 8003d7e:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003d80:	68d9      	ldr	r1, [r3, #12]
 8003d82:	f002 b8ef 	b.w	8005f64 <memcpy>
}
 8003d86:	bc10      	pop	{r4}
 8003d88:	4770      	bx	lr

08003d8a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003d8a:	b570      	push	{r4, r5, r6, lr}
 8003d8c:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003d8e:	f7ff fdd1 	bl	8003934 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003d92:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d96:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8003d9a:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003d9c:	2d00      	cmp	r5, #0
 8003d9e:	dc14      	bgt.n	8003dca <prvUnlockQueue+0x40>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003da0:	23ff      	movs	r3, #255	; 0xff
 8003da2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003da6:	f7ff fde7 	bl	8003978 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003daa:	f7ff fdc3 	bl	8003934 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003dae:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44

		while( cRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003db2:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8003db6:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003db8:	2d00      	cmp	r5, #0
 8003dba:	dc12      	bgt.n	8003de2 <prvUnlockQueue+0x58>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003dbc:	23ff      	movs	r3, #255	; 0xff
 8003dbe:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 8003dc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8003dc6:	f7ff bdd7 	b.w	8003978 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003dca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d0e7      	beq.n	8003da0 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003dd0:	4630      	mov	r0, r6
 8003dd2:	f000 fd89 	bl	80048e8 <xTaskRemoveFromEventList>
 8003dd6:	b108      	cbz	r0, 8003ddc <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8003dd8:	f000 fe12 	bl	8004a00 <vTaskMissedYield>
 8003ddc:	3d01      	subs	r5, #1
 8003dde:	b26d      	sxtb	r5, r5
 8003de0:	e7dc      	b.n	8003d9c <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003de2:	6923      	ldr	r3, [r4, #16]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d0e9      	beq.n	8003dbc <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003de8:	4630      	mov	r0, r6
 8003dea:	f000 fd7d 	bl	80048e8 <xTaskRemoveFromEventList>
 8003dee:	b108      	cbz	r0, 8003df4 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8003df0:	f000 fe06 	bl	8004a00 <vTaskMissedYield>
 8003df4:	3d01      	subs	r5, #1
 8003df6:	b26d      	sxtb	r5, r5
 8003df8:	e7de      	b.n	8003db8 <prvUnlockQueue+0x2e>
	...

08003dfc <xQueueGenericReset>:
{
 8003dfc:	b538      	push	{r3, r4, r5, lr}
 8003dfe:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8003e00:	4604      	mov	r4, r0
 8003e02:	b940      	cbnz	r0, 8003e16 <xQueueGenericReset+0x1a>
 8003e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e08:	f383 8811 	msr	BASEPRI, r3
 8003e0c:	f3bf 8f6f 	isb	sy
 8003e10:	f3bf 8f4f 	dsb	sy
 8003e14:	e7fe      	b.n	8003e14 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8003e16:	f7ff fd8d 	bl	8003934 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003e1a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003e1c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003e1e:	6822      	ldr	r2, [r4, #0]
 8003e20:	4343      	muls	r3, r0
 8003e22:	18d1      	adds	r1, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003e24:	1a1b      	subs	r3, r3, r0
 8003e26:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003e28:	6061      	str	r1, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003e2a:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003e2c:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 8003e2e:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003e30:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003e32:	60a2      	str	r2, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
 8003e34:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003e38:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8003e3c:	b995      	cbnz	r5, 8003e64 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e3e:	6923      	ldr	r3, [r4, #16]
 8003e40:	b163      	cbz	r3, 8003e5c <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e42:	f104 0010 	add.w	r0, r4, #16
 8003e46:	f000 fd4f 	bl	80048e8 <xTaskRemoveFromEventList>
 8003e4a:	b138      	cbz	r0, 8003e5c <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 8003e4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e50:	4b09      	ldr	r3, [pc, #36]	; (8003e78 <xQueueGenericReset+0x7c>)
 8003e52:	601a      	str	r2, [r3, #0]
 8003e54:	f3bf 8f4f 	dsb	sy
 8003e58:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8003e5c:	f7ff fd8c 	bl	8003978 <vPortExitCritical>
}
 8003e60:	2001      	movs	r0, #1
 8003e62:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003e64:	f104 0010 	add.w	r0, r4, #16
 8003e68:	f7ff fcd7 	bl	800381a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003e6c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003e70:	f7ff fcd3 	bl	800381a <vListInitialise>
 8003e74:	e7f2      	b.n	8003e5c <xQueueGenericReset+0x60>
 8003e76:	bf00      	nop
 8003e78:	e000ed04 	.word	0xe000ed04

08003e7c <xQueueGenericCreate>:
	{
 8003e7c:	b570      	push	{r4, r5, r6, lr}
 8003e7e:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003e80:	4606      	mov	r6, r0
 8003e82:	b940      	cbnz	r0, 8003e96 <xQueueGenericCreate+0x1a>
 8003e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e88:	f383 8811 	msr	BASEPRI, r3
 8003e8c:	f3bf 8f6f 	isb	sy
 8003e90:	f3bf 8f4f 	dsb	sy
 8003e94:	e7fe      	b.n	8003e94 <xQueueGenericCreate+0x18>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e96:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003e98:	3048      	adds	r0, #72	; 0x48
 8003e9a:	f7ff fe69 	bl	8003b70 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8003e9e:	4604      	mov	r4, r0
 8003ea0:	b138      	cbz	r0, 8003eb2 <xQueueGenericCreate+0x36>
	if( uxItemSize == ( UBaseType_t ) 0 )
 8003ea2:	b945      	cbnz	r5, 8003eb6 <xQueueGenericCreate+0x3a>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003ea4:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8003ea6:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003ea8:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003eaa:	2101      	movs	r1, #1
 8003eac:	4620      	mov	r0, r4
 8003eae:	f7ff ffa5 	bl	8003dfc <xQueueGenericReset>
	}
 8003eb2:	4620      	mov	r0, r4
 8003eb4:	bd70      	pop	{r4, r5, r6, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003eb6:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003eba:	6003      	str	r3, [r0, #0]
 8003ebc:	e7f3      	b.n	8003ea6 <xQueueGenericCreate+0x2a>
	...

08003ec0 <xQueueGenericSend>:
{
 8003ec0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ec4:	4689      	mov	r9, r1
 8003ec6:	9201      	str	r2, [sp, #4]
 8003ec8:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8003eca:	4604      	mov	r4, r0
 8003ecc:	b940      	cbnz	r0, 8003ee0 <xQueueGenericSend+0x20>
 8003ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed2:	f383 8811 	msr	BASEPRI, r3
 8003ed6:	f3bf 8f6f 	isb	sy
 8003eda:	f3bf 8f4f 	dsb	sy
 8003ede:	e7fe      	b.n	8003ede <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ee0:	2900      	cmp	r1, #0
 8003ee2:	f040 8088 	bne.w	8003ff6 <xQueueGenericSend+0x136>
 8003ee6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	f000 8084 	beq.w	8003ff6 <xQueueGenericSend+0x136>
 8003eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef2:	f383 8811 	msr	BASEPRI, r3
 8003ef6:	f3bf 8f6f 	isb	sy
 8003efa:	f3bf 8f4f 	dsb	sy
 8003efe:	e7fe      	b.n	8003efe <xQueueGenericSend+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003f00:	9e01      	ldr	r6, [sp, #4]
 8003f02:	2e00      	cmp	r6, #0
 8003f04:	f000 8082 	beq.w	800400c <xQueueGenericSend+0x14c>
 8003f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f0c:	f383 8811 	msr	BASEPRI, r3
 8003f10:	f3bf 8f6f 	isb	sy
 8003f14:	f3bf 8f4f 	dsb	sy
 8003f18:	e7fe      	b.n	8003f18 <xQueueGenericSend+0x58>
				if( xTicksToWait == ( TickType_t ) 0 )
 8003f1a:	9d01      	ldr	r5, [sp, #4]
 8003f1c:	b91d      	cbnz	r5, 8003f26 <xQueueGenericSend+0x66>
					taskEXIT_CRITICAL();
 8003f1e:	f7ff fd2b 	bl	8003978 <vPortExitCritical>
			return errQUEUE_FULL;
 8003f22:	2000      	movs	r0, #0
 8003f24:	e058      	b.n	8003fd8 <xQueueGenericSend+0x118>
				else if( xEntryTimeSet == pdFALSE )
 8003f26:	b916      	cbnz	r6, 8003f2e <xQueueGenericSend+0x6e>
					vTaskSetTimeOutState( &xTimeOut );
 8003f28:	a802      	add	r0, sp, #8
 8003f2a:	f000 fd1f 	bl	800496c <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 8003f2e:	f7ff fd23 	bl	8003978 <vPortExitCritical>
		vTaskSuspendAll();
 8003f32:	f000 fb0f 	bl	8004554 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003f36:	f7ff fcfd 	bl	8003934 <vPortEnterCritical>
 8003f3a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8003f3e:	2bff      	cmp	r3, #255	; 0xff
 8003f40:	bf08      	it	eq
 8003f42:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 8003f46:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8003f4a:	2bff      	cmp	r3, #255	; 0xff
 8003f4c:	bf08      	it	eq
 8003f4e:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 8003f52:	f7ff fd11 	bl	8003978 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003f56:	a901      	add	r1, sp, #4
 8003f58:	a802      	add	r0, sp, #8
 8003f5a:	f000 fd17 	bl	800498c <xTaskCheckForTimeOut>
 8003f5e:	2800      	cmp	r0, #0
 8003f60:	d143      	bne.n	8003fea <xQueueGenericSend+0x12a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003f62:	f7ff fce7 	bl	8003934 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003f66:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8003f68:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8003f6a:	f7ff fd05 	bl	8003978 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003f6e:	42ae      	cmp	r6, r5
 8003f70:	d135      	bne.n	8003fde <xQueueGenericSend+0x11e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003f72:	9901      	ldr	r1, [sp, #4]
 8003f74:	f104 0010 	add.w	r0, r4, #16
 8003f78:	f000 fc9c 	bl	80048b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003f7c:	4620      	mov	r0, r4
 8003f7e:	f7ff ff04 	bl	8003d8a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003f82:	f000 fb87 	bl	8004694 <xTaskResumeAll>
 8003f86:	b938      	cbnz	r0, 8003f98 <xQueueGenericSend+0xd8>
					portYIELD_WITHIN_API();
 8003f88:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003f8c:	f8ca 3000 	str.w	r3, [sl]
 8003f90:	f3bf 8f4f 	dsb	sy
 8003f94:	f3bf 8f6f 	isb	sy
 8003f98:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8003f9a:	f7ff fccb 	bl	8003934 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003f9e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003fa0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d301      	bcc.n	8003faa <xQueueGenericSend+0xea>
 8003fa6:	2f02      	cmp	r7, #2
 8003fa8:	d1b7      	bne.n	8003f1a <xQueueGenericSend+0x5a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003faa:	463a      	mov	r2, r7
 8003fac:	4649      	mov	r1, r9
 8003fae:	4620      	mov	r0, r4
 8003fb0:	f7ff fea4 	bl	8003cfc <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003fb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003fb6:	b11b      	cbz	r3, 8003fc0 <xQueueGenericSend+0x100>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003fb8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003fbc:	f000 fc94 	bl	80048e8 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8003fc0:	b138      	cbz	r0, 8003fd2 <xQueueGenericSend+0x112>
						queueYIELD_IF_USING_PREEMPTION();
 8003fc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fc6:	4b18      	ldr	r3, [pc, #96]	; (8004028 <xQueueGenericSend+0x168>)
 8003fc8:	601a      	str	r2, [r3, #0]
 8003fca:	f3bf 8f4f 	dsb	sy
 8003fce:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8003fd2:	f7ff fcd1 	bl	8003978 <vPortExitCritical>
				return pdPASS;
 8003fd6:	2001      	movs	r0, #1
}
 8003fd8:	b004      	add	sp, #16
 8003fda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 8003fde:	4620      	mov	r0, r4
 8003fe0:	f7ff fed3 	bl	8003d8a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003fe4:	f000 fb56 	bl	8004694 <xTaskResumeAll>
 8003fe8:	e7d6      	b.n	8003f98 <xQueueGenericSend+0xd8>
			prvUnlockQueue( pxQueue );
 8003fea:	4620      	mov	r0, r4
 8003fec:	f7ff fecd 	bl	8003d8a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003ff0:	f000 fb50 	bl	8004694 <xTaskResumeAll>
 8003ff4:	e795      	b.n	8003f22 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003ff6:	2f02      	cmp	r7, #2
 8003ff8:	d102      	bne.n	8004000 <xQueueGenericSend+0x140>
 8003ffa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d10a      	bne.n	8004016 <xQueueGenericSend+0x156>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004000:	f000 fd04 	bl	8004a0c <xTaskGetSchedulerState>
 8004004:	2800      	cmp	r0, #0
 8004006:	f43f af7b 	beq.w	8003f00 <xQueueGenericSend+0x40>
 800400a:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800400c:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 8004010:	f8df a014 	ldr.w	sl, [pc, #20]	; 8004028 <xQueueGenericSend+0x168>
 8004014:	e7c1      	b.n	8003f9a <xQueueGenericSend+0xda>
 8004016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800401a:	f383 8811 	msr	BASEPRI, r3
 800401e:	f3bf 8f6f 	isb	sy
 8004022:	f3bf 8f4f 	dsb	sy
 8004026:	e7fe      	b.n	8004026 <xQueueGenericSend+0x166>
 8004028:	e000ed04 	.word	0xe000ed04

0800402c <xQueueGenericSendFromISR>:
{
 800402c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004030:	4688      	mov	r8, r1
 8004032:	4691      	mov	r9, r2
 8004034:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8004036:	4604      	mov	r4, r0
 8004038:	b940      	cbnz	r0, 800404c <xQueueGenericSendFromISR+0x20>
 800403a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800403e:	f383 8811 	msr	BASEPRI, r3
 8004042:	f3bf 8f6f 	isb	sy
 8004046:	f3bf 8f4f 	dsb	sy
 800404a:	e7fe      	b.n	800404a <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800404c:	bb09      	cbnz	r1, 8004092 <xQueueGenericSendFromISR+0x66>
 800404e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004050:	b1fb      	cbz	r3, 8004092 <xQueueGenericSendFromISR+0x66>
 8004052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004056:	f383 8811 	msr	BASEPRI, r3
 800405a:	f3bf 8f6f 	isb	sy
 800405e:	f3bf 8f4f 	dsb	sy
 8004062:	e7fe      	b.n	8004062 <xQueueGenericSendFromISR+0x36>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004064:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004068:	f000 fc3e 	bl	80048e8 <xTaskRemoveFromEventList>
 800406c:	2800      	cmp	r0, #0
 800406e:	d034      	beq.n	80040da <xQueueGenericSendFromISR+0xae>
							if( pxHigherPriorityTaskWoken != NULL )
 8004070:	f1b9 0f00 	cmp.w	r9, #0
 8004074:	d031      	beq.n	80040da <xQueueGenericSendFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004076:	2001      	movs	r0, #1
 8004078:	f8c9 0000 	str.w	r0, [r9]
	__asm volatile
 800407c:	f386 8811 	msr	BASEPRI, r6
}
 8004080:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004084:	3501      	adds	r5, #1
 8004086:	b26d      	sxtb	r5, r5
 8004088:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 800408c:	e025      	b.n	80040da <xQueueGenericSendFromISR+0xae>
			xReturn = errQUEUE_FULL;
 800408e:	2000      	movs	r0, #0
 8004090:	e7f4      	b.n	800407c <xQueueGenericSendFromISR+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004092:	2f02      	cmp	r7, #2
 8004094:	d102      	bne.n	800409c <xQueueGenericSendFromISR+0x70>
 8004096:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004098:	2b01      	cmp	r3, #1
 800409a:	d120      	bne.n	80040de <xQueueGenericSendFromISR+0xb2>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800409c:	f7ff fd16 	bl	8003acc <vPortValidateInterruptPriority>
	__asm volatile
 80040a0:	f3ef 8611 	mrs	r6, BASEPRI
 80040a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a8:	f383 8811 	msr	BASEPRI, r3
 80040ac:	f3bf 8f6f 	isb	sy
 80040b0:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80040b4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80040b6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d301      	bcc.n	80040c0 <xQueueGenericSendFromISR+0x94>
 80040bc:	2f02      	cmp	r7, #2
 80040be:	d1e6      	bne.n	800408e <xQueueGenericSendFromISR+0x62>
			const int8_t cTxLock = pxQueue->cTxLock;
 80040c0:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80040c4:	463a      	mov	r2, r7
			const int8_t cTxLock = pxQueue->cTxLock;
 80040c6:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80040c8:	4641      	mov	r1, r8
 80040ca:	4620      	mov	r0, r4
 80040cc:	f7ff fe16 	bl	8003cfc <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80040d0:	1c6b      	adds	r3, r5, #1
 80040d2:	d1d7      	bne.n	8004084 <xQueueGenericSendFromISR+0x58>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80040d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d1c4      	bne.n	8004064 <xQueueGenericSendFromISR+0x38>
			xReturn = pdPASS;
 80040da:	2001      	movs	r0, #1
 80040dc:	e7ce      	b.n	800407c <xQueueGenericSendFromISR+0x50>
	__asm volatile
 80040de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e2:	f383 8811 	msr	BASEPRI, r3
 80040e6:	f3bf 8f6f 	isb	sy
 80040ea:	f3bf 8f4f 	dsb	sy
 80040ee:	e7fe      	b.n	80040ee <xQueueGenericSendFromISR+0xc2>

080040f0 <xQueueGenericReceive>:
{
 80040f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80040f4:	4688      	mov	r8, r1
 80040f6:	9201      	str	r2, [sp, #4]
 80040f8:	4699      	mov	r9, r3
	configASSERT( pxQueue );
 80040fa:	4604      	mov	r4, r0
 80040fc:	b940      	cbnz	r0, 8004110 <xQueueGenericReceive+0x20>
 80040fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004102:	f383 8811 	msr	BASEPRI, r3
 8004106:	f3bf 8f6f 	isb	sy
 800410a:	f3bf 8f4f 	dsb	sy
 800410e:	e7fe      	b.n	800410e <xQueueGenericReceive+0x1e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004110:	2900      	cmp	r1, #0
 8004112:	f040 80a5 	bne.w	8004260 <xQueueGenericReceive+0x170>
 8004116:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004118:	2b00      	cmp	r3, #0
 800411a:	f000 80a1 	beq.w	8004260 <xQueueGenericReceive+0x170>
 800411e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004122:	f383 8811 	msr	BASEPRI, r3
 8004126:	f3bf 8f6f 	isb	sy
 800412a:	f3bf 8f4f 	dsb	sy
 800412e:	e7fe      	b.n	800412e <xQueueGenericReceive+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004130:	9e01      	ldr	r6, [sp, #4]
 8004132:	2e00      	cmp	r6, #0
 8004134:	f000 809a 	beq.w	800426c <xQueueGenericReceive+0x17c>
 8004138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800413c:	f383 8811 	msr	BASEPRI, r3
 8004140:	f3bf 8f6f 	isb	sy
 8004144:	f3bf 8f4f 	dsb	sy
 8004148:	e7fe      	b.n	8004148 <xQueueGenericReceive+0x58>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800414a:	6a63      	ldr	r3, [r4, #36]	; 0x24
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 800414c:	60e6      	str	r6, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800414e:	2b00      	cmp	r3, #0
 8004150:	d06d      	beq.n	800422e <xQueueGenericReceive+0x13e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004152:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004156:	e05f      	b.n	8004218 <xQueueGenericReceive+0x128>
				if( xTicksToWait == ( TickType_t ) 0 )
 8004158:	9d01      	ldr	r5, [sp, #4]
 800415a:	b91d      	cbnz	r5, 8004164 <xQueueGenericReceive+0x74>
					taskEXIT_CRITICAL();
 800415c:	f7ff fc0c 	bl	8003978 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8004160:	4628      	mov	r0, r5
 8004162:	e067      	b.n	8004234 <xQueueGenericReceive+0x144>
				else if( xEntryTimeSet == pdFALSE )
 8004164:	b916      	cbnz	r6, 800416c <xQueueGenericReceive+0x7c>
					vTaskSetTimeOutState( &xTimeOut );
 8004166:	a802      	add	r0, sp, #8
 8004168:	f000 fc00 	bl	800496c <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 800416c:	f7ff fc04 	bl	8003978 <vPortExitCritical>
		vTaskSuspendAll();
 8004170:	f000 f9f0 	bl	8004554 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004174:	f7ff fbde 	bl	8003934 <vPortEnterCritical>
 8004178:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800417c:	2bff      	cmp	r3, #255	; 0xff
 800417e:	bf08      	it	eq
 8004180:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 8004184:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004188:	2bff      	cmp	r3, #255	; 0xff
 800418a:	bf08      	it	eq
 800418c:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 8004190:	f7ff fbf2 	bl	8003978 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004194:	a901      	add	r1, sp, #4
 8004196:	a802      	add	r0, sp, #8
 8004198:	f000 fbf8 	bl	800498c <xTaskCheckForTimeOut>
 800419c:	2800      	cmp	r0, #0
 800419e:	d152      	bne.n	8004246 <xQueueGenericReceive+0x156>
	taskENTER_CRITICAL();
 80041a0:	f7ff fbc8 	bl	8003934 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80041a4:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 80041a6:	f7ff fbe7 	bl	8003978 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80041aa:	2d00      	cmp	r5, #0
 80041ac:	d145      	bne.n	800423a <xQueueGenericReceive+0x14a>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80041ae:	6823      	ldr	r3, [r4, #0]
 80041b0:	b933      	cbnz	r3, 80041c0 <xQueueGenericReceive+0xd0>
						taskENTER_CRITICAL();
 80041b2:	f7ff fbbf 	bl	8003934 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80041b6:	6860      	ldr	r0, [r4, #4]
 80041b8:	f000 fc38 	bl	8004a2c <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 80041bc:	f7ff fbdc 	bl	8003978 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80041c0:	9901      	ldr	r1, [sp, #4]
 80041c2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80041c6:	f000 fb75 	bl	80048b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80041ca:	4620      	mov	r0, r4
 80041cc:	f7ff fddd 	bl	8003d8a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80041d0:	f000 fa60 	bl	8004694 <xTaskResumeAll>
 80041d4:	b938      	cbnz	r0, 80041e6 <xQueueGenericReceive+0xf6>
					portYIELD_WITHIN_API();
 80041d6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80041da:	f8ca 3000 	str.w	r3, [sl]
 80041de:	f3bf 8f4f 	dsb	sy
 80041e2:	f3bf 8f6f 	isb	sy
 80041e6:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 80041e8:	f7ff fba4 	bl	8003934 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80041ec:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80041ee:	2d00      	cmp	r5, #0
 80041f0:	d0b2      	beq.n	8004158 <xQueueGenericReceive+0x68>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80041f2:	4641      	mov	r1, r8
 80041f4:	4620      	mov	r0, r4
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 80041f6:	68e6      	ldr	r6, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80041f8:	f7ff fdb3 	bl	8003d62 <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 80041fc:	f1b9 0f00 	cmp.w	r9, #0
 8004200:	d1a3      	bne.n	800414a <xQueueGenericReceive+0x5a>
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004202:	6823      	ldr	r3, [r4, #0]
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8004204:	3d01      	subs	r5, #1
 8004206:	63a5      	str	r5, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004208:	b913      	cbnz	r3, 8004210 <xQueueGenericReceive+0x120>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800420a:	f000 fca7 	bl	8004b5c <pvTaskIncrementMutexHeldCount>
 800420e:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004210:	6923      	ldr	r3, [r4, #16]
 8004212:	b163      	cbz	r3, 800422e <xQueueGenericReceive+0x13e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004214:	f104 0010 	add.w	r0, r4, #16
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004218:	f000 fb66 	bl	80048e8 <xTaskRemoveFromEventList>
 800421c:	b138      	cbz	r0, 800422e <xQueueGenericReceive+0x13e>
							queueYIELD_IF_USING_PREEMPTION();
 800421e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004222:	4b14      	ldr	r3, [pc, #80]	; (8004274 <xQueueGenericReceive+0x184>)
 8004224:	601a      	str	r2, [r3, #0]
 8004226:	f3bf 8f4f 	dsb	sy
 800422a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800422e:	f7ff fba3 	bl	8003978 <vPortExitCritical>
				return pdPASS;
 8004232:	2001      	movs	r0, #1
}
 8004234:	b004      	add	sp, #16
 8004236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 800423a:	4620      	mov	r0, r4
 800423c:	f7ff fda5 	bl	8003d8a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004240:	f000 fa28 	bl	8004694 <xTaskResumeAll>
 8004244:	e7cf      	b.n	80041e6 <xQueueGenericReceive+0xf6>
			prvUnlockQueue( pxQueue );
 8004246:	4620      	mov	r0, r4
 8004248:	f7ff fd9f 	bl	8003d8a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800424c:	f000 fa22 	bl	8004694 <xTaskResumeAll>
	taskENTER_CRITICAL();
 8004250:	f7ff fb70 	bl	8003934 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004254:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 8004256:	f7ff fb8f 	bl	8003978 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800425a:	2d00      	cmp	r5, #0
 800425c:	d1c3      	bne.n	80041e6 <xQueueGenericReceive+0xf6>
 800425e:	e77f      	b.n	8004160 <xQueueGenericReceive+0x70>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004260:	f000 fbd4 	bl	8004a0c <xTaskGetSchedulerState>
 8004264:	2800      	cmp	r0, #0
 8004266:	f43f af63 	beq.w	8004130 <xQueueGenericReceive+0x40>
 800426a:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800426c:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 800426e:	f8df a004 	ldr.w	sl, [pc, #4]	; 8004274 <xQueueGenericReceive+0x184>
 8004272:	e7b9      	b.n	80041e8 <xQueueGenericReceive+0xf8>
 8004274:	e000ed04 	.word	0xe000ed04

08004278 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004278:	4a06      	ldr	r2, [pc, #24]	; (8004294 <prvResetNextTaskUnblockTime+0x1c>)
 800427a:	6813      	ldr	r3, [r2, #0]
 800427c:	6819      	ldr	r1, [r3, #0]
 800427e:	4b06      	ldr	r3, [pc, #24]	; (8004298 <prvResetNextTaskUnblockTime+0x20>)
 8004280:	b919      	cbnz	r1, 800428a <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004282:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004286:	601a      	str	r2, [r3, #0]
 8004288:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800428a:	6812      	ldr	r2, [r2, #0]
 800428c:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800428e:	68d2      	ldr	r2, [r2, #12]
 8004290:	6852      	ldr	r2, [r2, #4]
 8004292:	e7f8      	b.n	8004286 <prvResetNextTaskUnblockTime+0xe>
 8004294:	20005088 	.word	0x20005088
 8004298:	20005160 	.word	0x20005160

0800429c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800429c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800429e:	4b1b      	ldr	r3, [pc, #108]	; (800430c <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80042a0:	4e1b      	ldr	r6, [pc, #108]	; (8004310 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 80042a2:	681d      	ldr	r5, [r3, #0]
{
 80042a4:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80042a6:	6830      	ldr	r0, [r6, #0]
{
 80042a8:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80042aa:	3004      	adds	r0, #4
 80042ac:	f7ff fae6 	bl	800387c <uxListRemove>
 80042b0:	4633      	mov	r3, r6
 80042b2:	b940      	cbnz	r0, 80042c6 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80042b4:	2001      	movs	r0, #1
 80042b6:	6831      	ldr	r1, [r6, #0]
 80042b8:	4e16      	ldr	r6, [pc, #88]	; (8004314 <prvAddCurrentTaskToDelayedList+0x78>)
 80042ba:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80042bc:	6832      	ldr	r2, [r6, #0]
 80042be:	4088      	lsls	r0, r1
 80042c0:	ea22 0200 	bic.w	r2, r2, r0
 80042c4:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80042c6:	1c62      	adds	r2, r4, #1
 80042c8:	d107      	bne.n	80042da <prvAddCurrentTaskToDelayedList+0x3e>
 80042ca:	b137      	cbz	r7, 80042da <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042cc:	6819      	ldr	r1, [r3, #0]
 80042ce:	4812      	ldr	r0, [pc, #72]	; (8004318 <prvAddCurrentTaskToDelayedList+0x7c>)
 80042d0:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80042d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042d6:	f7ff baae 	b.w	8003836 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80042da:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80042dc:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 80042de:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80042e0:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 80042e2:	d907      	bls.n	80042f4 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042e4:	4a0d      	ldr	r2, [pc, #52]	; (800431c <prvAddCurrentTaskToDelayedList+0x80>)
 80042e6:	6810      	ldr	r0, [r2, #0]
 80042e8:	6819      	ldr	r1, [r3, #0]
}
 80042ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042ee:	3104      	adds	r1, #4
 80042f0:	f7ff baad 	b.w	800384e <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042f4:	4a0a      	ldr	r2, [pc, #40]	; (8004320 <prvAddCurrentTaskToDelayedList+0x84>)
 80042f6:	6810      	ldr	r0, [r2, #0]
 80042f8:	6819      	ldr	r1, [r3, #0]
 80042fa:	3104      	adds	r1, #4
 80042fc:	f7ff faa7 	bl	800384e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004300:	4b08      	ldr	r3, [pc, #32]	; (8004324 <prvAddCurrentTaskToDelayedList+0x88>)
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8004306:	bf38      	it	cc
 8004308:	601c      	strcc	r4, [r3, #0]
 800430a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800430c:	200051a8 	.word	0x200051a8
 8004310:	20005084 	.word	0x20005084
 8004314:	20005130 	.word	0x20005130
 8004318:	20005180 	.word	0x20005180
 800431c:	2000508c 	.word	0x2000508c
 8004320:	20005088 	.word	0x20005088
 8004324:	20005160 	.word	0x20005160

08004328 <prvTaskIsTaskSuspended.part.0>:
 8004328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800432c:	f383 8811 	msr	BASEPRI, r3
 8004330:	f3bf 8f6f 	isb	sy
 8004334:	f3bf 8f4f 	dsb	sy
 8004338:	e7fe      	b.n	8004338 <prvTaskIsTaskSuspended.part.0+0x10>
	...

0800433c <xTaskCreate>:
	{
 800433c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004340:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 8004344:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004346:	4650      	mov	r0, sl
	{
 8004348:	460f      	mov	r7, r1
 800434a:	4699      	mov	r9, r3
 800434c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800434e:	f7ff fc0f 	bl	8003b70 <pvPortMalloc>
			if( pxStack != NULL )
 8004352:	4605      	mov	r5, r0
 8004354:	2800      	cmp	r0, #0
 8004356:	f000 8096 	beq.w	8004486 <xTaskCreate+0x14a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800435a:	2054      	movs	r0, #84	; 0x54
 800435c:	f7ff fc08 	bl	8003b70 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8004360:	4604      	mov	r4, r0
 8004362:	2800      	cmp	r0, #0
 8004364:	f000 808c 	beq.w	8004480 <xTaskCreate+0x144>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004368:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 800436c:	6305      	str	r5, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800436e:	4455      	add	r5, sl
 8004370:	1e7b      	subs	r3, r7, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004372:	f025 0a07 	bic.w	sl, r5, #7
 8004376:	f100 0234 	add.w	r2, r0, #52	; 0x34
 800437a:	370f      	adds	r7, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800437c:	7859      	ldrb	r1, [r3, #1]
 800437e:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 8004382:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8004386:	b109      	cbz	r1, 800438c <xTaskCreate+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004388:	42bb      	cmp	r3, r7
 800438a:	d1f7      	bne.n	800437c <xTaskCreate+0x40>
 800438c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800438e:	f04f 0b00 	mov.w	fp, #0
 8004392:	2d06      	cmp	r5, #6
 8004394:	bf28      	it	cs
 8004396:	2506      	movcs	r5, #6
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004398:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 800439a:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800439c:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800439e:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80043a0:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 80043a4:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80043a8:	f7ff fa42 	bl	8003830 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043ac:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80043b0:	f104 0018 	add.w	r0, r4, #24
 80043b4:	f7ff fa3c 	bl	8003830 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 80043b8:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80043bc:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043be:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80043c0:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80043c2:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80043c6:	464a      	mov	r2, r9
 80043c8:	4641      	mov	r1, r8
 80043ca:	4650      	mov	r0, sl
 80043cc:	f7ff fa8e 	bl	80038ec <pxPortInitialiseStack>
 80043d0:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 80043d2:	b106      	cbz	r6, 80043d6 <xTaskCreate+0x9a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80043d4:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 80043d6:	f7ff faad 	bl	8003934 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 80043da:	4b32      	ldr	r3, [pc, #200]	; (80044a4 <xTaskCreate+0x168>)
		if( pxCurrentTCB == NULL )
 80043dc:	4e32      	ldr	r6, [pc, #200]	; (80044a8 <xTaskCreate+0x16c>)
		uxCurrentNumberOfTasks++;
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 80044d4 <xTaskCreate+0x198>
 80043e4:	3201      	adds	r2, #1
 80043e6:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80043e8:	6835      	ldr	r5, [r6, #0]
 80043ea:	2d00      	cmp	r5, #0
 80043ec:	d14e      	bne.n	800448c <xTaskCreate+0x150>
			pxCurrentTCB = pxNewTCB;
 80043ee:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d11d      	bne.n	8004432 <xTaskCreate+0xf6>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80043f6:	eb08 0005 	add.w	r0, r8, r5
 80043fa:	3514      	adds	r5, #20
 80043fc:	f7ff fa0d 	bl	800381a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004400:	2d8c      	cmp	r5, #140	; 0x8c
 8004402:	d1f8      	bne.n	80043f6 <xTaskCreate+0xba>
	vListInitialise( &xDelayedTaskList1 );
 8004404:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 80044d8 <xTaskCreate+0x19c>
	vListInitialise( &xDelayedTaskList2 );
 8004408:	4d28      	ldr	r5, [pc, #160]	; (80044ac <xTaskCreate+0x170>)
	vListInitialise( &xDelayedTaskList1 );
 800440a:	4648      	mov	r0, r9
 800440c:	f7ff fa05 	bl	800381a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004410:	4628      	mov	r0, r5
 8004412:	f7ff fa02 	bl	800381a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004416:	4826      	ldr	r0, [pc, #152]	; (80044b0 <xTaskCreate+0x174>)
 8004418:	f7ff f9ff 	bl	800381a <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800441c:	4825      	ldr	r0, [pc, #148]	; (80044b4 <xTaskCreate+0x178>)
 800441e:	f7ff f9fc 	bl	800381a <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8004422:	4825      	ldr	r0, [pc, #148]	; (80044b8 <xTaskCreate+0x17c>)
 8004424:	f7ff f9f9 	bl	800381a <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8004428:	4b24      	ldr	r3, [pc, #144]	; (80044bc <xTaskCreate+0x180>)
 800442a:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800442e:	4b24      	ldr	r3, [pc, #144]	; (80044c0 <xTaskCreate+0x184>)
 8004430:	601d      	str	r5, [r3, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8004432:	2501      	movs	r5, #1
		uxTaskNumber++;
 8004434:	4a23      	ldr	r2, [pc, #140]	; (80044c4 <xTaskCreate+0x188>)
		prvAddTaskToReadyList( pxNewTCB );
 8004436:	4924      	ldr	r1, [pc, #144]	; (80044c8 <xTaskCreate+0x18c>)
		uxTaskNumber++;
 8004438:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800443a:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 800443c:	3301      	adds	r3, #1
 800443e:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8004440:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004442:	fa05 f302 	lsl.w	r3, r5, r2
 8004446:	4303      	orrs	r3, r0
 8004448:	2014      	movs	r0, #20
 800444a:	600b      	str	r3, [r1, #0]
 800444c:	fb00 8002 	mla	r0, r0, r2, r8
 8004450:	4639      	mov	r1, r7
 8004452:	f7ff f9f0 	bl	8003836 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8004456:	f7ff fa8f 	bl	8003978 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800445a:	4b1c      	ldr	r3, [pc, #112]	; (80044cc <xTaskCreate+0x190>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	b163      	cbz	r3, 800447a <xTaskCreate+0x13e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004460:	6833      	ldr	r3, [r6, #0]
 8004462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004464:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004466:	429a      	cmp	r2, r3
 8004468:	d207      	bcs.n	800447a <xTaskCreate+0x13e>
			taskYIELD_IF_USING_PREEMPTION();
 800446a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800446e:	4b18      	ldr	r3, [pc, #96]	; (80044d0 <xTaskCreate+0x194>)
 8004470:	601a      	str	r2, [r3, #0]
 8004472:	f3bf 8f4f 	dsb	sy
 8004476:	f3bf 8f6f 	isb	sy
	}
 800447a:	4628      	mov	r0, r5
 800447c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 8004480:	4628      	mov	r0, r5
 8004482:	f7ff fc03 	bl	8003c8c <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004486:	f04f 35ff 	mov.w	r5, #4294967295
 800448a:	e7f6      	b.n	800447a <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
 800448c:	4b0f      	ldr	r3, [pc, #60]	; (80044cc <xTaskCreate+0x190>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d1ce      	bne.n	8004432 <xTaskCreate+0xf6>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004494:	6833      	ldr	r3, [r6, #0]
 8004496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004498:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800449a:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 800449c:	bf98      	it	ls
 800449e:	6034      	strls	r4, [r6, #0]
 80044a0:	e7c7      	b.n	8004432 <xTaskCreate+0xf6>
 80044a2:	bf00      	nop
 80044a4:	2000511c 	.word	0x2000511c
 80044a8:	20005084 	.word	0x20005084
 80044ac:	20005148 	.word	0x20005148
 80044b0:	20005168 	.word	0x20005168
 80044b4:	20005194 	.word	0x20005194
 80044b8:	20005180 	.word	0x20005180
 80044bc:	20005088 	.word	0x20005088
 80044c0:	2000508c 	.word	0x2000508c
 80044c4:	2000512c 	.word	0x2000512c
 80044c8:	20005130 	.word	0x20005130
 80044cc:	2000517c 	.word	0x2000517c
 80044d0:	e000ed04 	.word	0xe000ed04
 80044d4:	20005090 	.word	0x20005090
 80044d8:	20005134 	.word	0x20005134

080044dc <vTaskStartScheduler>:
{
 80044dc:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 80044de:	2400      	movs	r4, #0
 80044e0:	4b16      	ldr	r3, [pc, #88]	; (800453c <vTaskStartScheduler+0x60>)
 80044e2:	9400      	str	r4, [sp, #0]
 80044e4:	9301      	str	r3, [sp, #4]
 80044e6:	2280      	movs	r2, #128	; 0x80
 80044e8:	4623      	mov	r3, r4
 80044ea:	4915      	ldr	r1, [pc, #84]	; (8004540 <vTaskStartScheduler+0x64>)
 80044ec:	4815      	ldr	r0, [pc, #84]	; (8004544 <vTaskStartScheduler+0x68>)
 80044ee:	f7ff ff25 	bl	800433c <xTaskCreate>
	if( xReturn == pdPASS )
 80044f2:	2801      	cmp	r0, #1
 80044f4:	d114      	bne.n	8004520 <vTaskStartScheduler+0x44>
 80044f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044fa:	f383 8811 	msr	BASEPRI, r3
 80044fe:	f3bf 8f6f 	isb	sy
 8004502:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8004506:	f04f 32ff 	mov.w	r2, #4294967295
 800450a:	4b0f      	ldr	r3, [pc, #60]	; (8004548 <vTaskStartScheduler+0x6c>)
 800450c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800450e:	4b0f      	ldr	r3, [pc, #60]	; (800454c <vTaskStartScheduler+0x70>)
 8004510:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004512:	4b0f      	ldr	r3, [pc, #60]	; (8004550 <vTaskStartScheduler+0x74>)
 8004514:	601c      	str	r4, [r3, #0]
}
 8004516:	b002      	add	sp, #8
 8004518:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 800451c:	f7ff ba8c 	b.w	8003a38 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004520:	3001      	adds	r0, #1
 8004522:	d108      	bne.n	8004536 <vTaskStartScheduler+0x5a>
 8004524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004528:	f383 8811 	msr	BASEPRI, r3
 800452c:	f3bf 8f6f 	isb	sy
 8004530:	f3bf 8f4f 	dsb	sy
 8004534:	e7fe      	b.n	8004534 <vTaskStartScheduler+0x58>
}
 8004536:	b002      	add	sp, #8
 8004538:	bd10      	pop	{r4, pc}
 800453a:	bf00      	nop
 800453c:	2000515c 	.word	0x2000515c
 8004540:	08008a64 	.word	0x08008a64
 8004544:	080047cd 	.word	0x080047cd
 8004548:	20005160 	.word	0x20005160
 800454c:	2000517c 	.word	0x2000517c
 8004550:	200051a8 	.word	0x200051a8

08004554 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8004554:	4a02      	ldr	r2, [pc, #8]	; (8004560 <vTaskSuspendAll+0xc>)
 8004556:	6813      	ldr	r3, [r2, #0]
 8004558:	3301      	adds	r3, #1
 800455a:	6013      	str	r3, [r2, #0]
 800455c:	4770      	bx	lr
 800455e:	bf00      	nop
 8004560:	20005128 	.word	0x20005128

08004564 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8004564:	4b01      	ldr	r3, [pc, #4]	; (800456c <xTaskGetTickCount+0x8>)
 8004566:	6818      	ldr	r0, [r3, #0]
}
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop
 800456c:	200051a8 	.word	0x200051a8

08004570 <xTaskIncrementTick>:
{
 8004570:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004574:	4b3c      	ldr	r3, [pc, #240]	; (8004668 <xTaskIncrementTick+0xf8>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d153      	bne.n	8004624 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + 1;
 800457c:	4b3b      	ldr	r3, [pc, #236]	; (800466c <xTaskIncrementTick+0xfc>)
 800457e:	681c      	ldr	r4, [r3, #0]
 8004580:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8004582:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 8004584:	b9bc      	cbnz	r4, 80045b6 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8004586:	4b3a      	ldr	r3, [pc, #232]	; (8004670 <xTaskIncrementTick+0x100>)
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	6812      	ldr	r2, [r2, #0]
 800458c:	b142      	cbz	r2, 80045a0 <xTaskIncrementTick+0x30>
 800458e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004592:	f383 8811 	msr	BASEPRI, r3
 8004596:	f3bf 8f6f 	isb	sy
 800459a:	f3bf 8f4f 	dsb	sy
 800459e:	e7fe      	b.n	800459e <xTaskIncrementTick+0x2e>
 80045a0:	4a34      	ldr	r2, [pc, #208]	; (8004674 <xTaskIncrementTick+0x104>)
 80045a2:	6819      	ldr	r1, [r3, #0]
 80045a4:	6810      	ldr	r0, [r2, #0]
 80045a6:	6018      	str	r0, [r3, #0]
 80045a8:	6011      	str	r1, [r2, #0]
 80045aa:	4a33      	ldr	r2, [pc, #204]	; (8004678 <xTaskIncrementTick+0x108>)
 80045ac:	6813      	ldr	r3, [r2, #0]
 80045ae:	3301      	adds	r3, #1
 80045b0:	6013      	str	r3, [r2, #0]
 80045b2:	f7ff fe61 	bl	8004278 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80045b6:	4d31      	ldr	r5, [pc, #196]	; (800467c <xTaskIncrementTick+0x10c>)
 80045b8:	f04f 0b00 	mov.w	fp, #0
 80045bc:	682b      	ldr	r3, [r5, #0]
 80045be:	4f30      	ldr	r7, [pc, #192]	; (8004680 <xTaskIncrementTick+0x110>)
 80045c0:	429c      	cmp	r4, r3
 80045c2:	d33e      	bcc.n	8004642 <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045c4:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8004670 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 80045c8:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8004690 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045cc:	f8d8 2000 	ldr.w	r2, [r8]
 80045d0:	6812      	ldr	r2, [r2, #0]
 80045d2:	bb72      	cbnz	r2, 8004632 <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045d4:	f04f 32ff 	mov.w	r2, #4294967295
 80045d8:	602a      	str	r2, [r5, #0]
					break;
 80045da:	e032      	b.n	8004642 <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045dc:	f106 0a04 	add.w	sl, r6, #4
 80045e0:	4650      	mov	r0, sl
 80045e2:	f7ff f94b 	bl	800387c <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80045e6:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 80045e8:	b119      	cbz	r1, 80045f2 <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80045ea:	f106 0018 	add.w	r0, r6, #24
 80045ee:	f7ff f945 	bl	800387c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80045f2:	2201      	movs	r2, #1
 80045f4:	f04f 0e14 	mov.w	lr, #20
 80045f8:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 80045fa:	f8d9 3000 	ldr.w	r3, [r9]
 80045fe:	fa02 f100 	lsl.w	r1, r2, r0
 8004602:	4319      	orrs	r1, r3
 8004604:	4b1f      	ldr	r3, [pc, #124]	; (8004684 <xTaskIncrementTick+0x114>)
 8004606:	f8c9 1000 	str.w	r1, [r9]
 800460a:	fb0e 3000 	mla	r0, lr, r0, r3
 800460e:	4651      	mov	r1, sl
 8004610:	f7ff f911 	bl	8003836 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004614:	6838      	ldr	r0, [r7, #0]
 8004616:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8004618:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800461a:	4291      	cmp	r1, r2
 800461c:	bf28      	it	cs
 800461e:	f04f 0b01 	movcs.w	fp, #1
 8004622:	e7d3      	b.n	80045cc <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 8004624:	4a18      	ldr	r2, [pc, #96]	; (8004688 <xTaskIncrementTick+0x118>)
BaseType_t xSwitchRequired = pdFALSE;
 8004626:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 800462a:	6813      	ldr	r3, [r2, #0]
 800462c:	3301      	adds	r3, #1
 800462e:	6013      	str	r3, [r2, #0]
 8004630:	e011      	b.n	8004656 <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004632:	f8d8 2000 	ldr.w	r2, [r8]
 8004636:	68d2      	ldr	r2, [r2, #12]
 8004638:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800463a:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 800463c:	428c      	cmp	r4, r1
 800463e:	d2cd      	bcs.n	80045dc <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 8004640:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004642:	683a      	ldr	r2, [r7, #0]
 8004644:	4b0f      	ldr	r3, [pc, #60]	; (8004684 <xTaskIncrementTick+0x114>)
 8004646:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004648:	2214      	movs	r2, #20
 800464a:	434a      	muls	r2, r1
 800464c:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 800464e:	2a02      	cmp	r2, #2
 8004650:	bf28      	it	cs
 8004652:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8004656:	4a0d      	ldr	r2, [pc, #52]	; (800468c <xTaskIncrementTick+0x11c>)
 8004658:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 800465a:	2a00      	cmp	r2, #0
 800465c:	bf18      	it	ne
 800465e:	f04f 0b01 	movne.w	fp, #1
}
 8004662:	4658      	mov	r0, fp
 8004664:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004668:	20005128 	.word	0x20005128
 800466c:	200051a8 	.word	0x200051a8
 8004670:	20005088 	.word	0x20005088
 8004674:	2000508c 	.word	0x2000508c
 8004678:	20005164 	.word	0x20005164
 800467c:	20005160 	.word	0x20005160
 8004680:	20005084 	.word	0x20005084
 8004684:	20005090 	.word	0x20005090
 8004688:	20005124 	.word	0x20005124
 800468c:	200051ac 	.word	0x200051ac
 8004690:	20005130 	.word	0x20005130

08004694 <xTaskResumeAll>:
{
 8004694:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8004698:	4c31      	ldr	r4, [pc, #196]	; (8004760 <xTaskResumeAll+0xcc>)
 800469a:	6823      	ldr	r3, [r4, #0]
 800469c:	b943      	cbnz	r3, 80046b0 <xTaskResumeAll+0x1c>
 800469e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a2:	f383 8811 	msr	BASEPRI, r3
 80046a6:	f3bf 8f6f 	isb	sy
 80046aa:	f3bf 8f4f 	dsb	sy
 80046ae:	e7fe      	b.n	80046ae <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 80046b0:	f7ff f940 	bl	8003934 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80046b4:	6823      	ldr	r3, [r4, #0]
 80046b6:	3b01      	subs	r3, #1
 80046b8:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046ba:	6824      	ldr	r4, [r4, #0]
 80046bc:	b12c      	cbz	r4, 80046ca <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 80046be:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80046c0:	f7ff f95a 	bl	8003978 <vPortExitCritical>
}
 80046c4:	4620      	mov	r0, r4
 80046c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80046ca:	4b26      	ldr	r3, [pc, #152]	; (8004764 <xTaskResumeAll+0xd0>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d0f5      	beq.n	80046be <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80046d2:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 800477c <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 80046d6:	4f24      	ldr	r7, [pc, #144]	; (8004768 <xTaskResumeAll+0xd4>)
 80046d8:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8004780 <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80046dc:	f8d9 3000 	ldr.w	r3, [r9]
 80046e0:	b9e3      	cbnz	r3, 800471c <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 80046e2:	b10c      	cbz	r4, 80046e8 <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 80046e4:	f7ff fdc8 	bl	8004278 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80046e8:	4d20      	ldr	r5, [pc, #128]	; (800476c <xTaskResumeAll+0xd8>)
 80046ea:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80046ec:	b144      	cbz	r4, 8004700 <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 80046ee:	2701      	movs	r7, #1
 80046f0:	4e1f      	ldr	r6, [pc, #124]	; (8004770 <xTaskResumeAll+0xdc>)
							if( xTaskIncrementTick() != pdFALSE )
 80046f2:	f7ff ff3d 	bl	8004570 <xTaskIncrementTick>
 80046f6:	b100      	cbz	r0, 80046fa <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 80046f8:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80046fa:	3c01      	subs	r4, #1
 80046fc:	d1f9      	bne.n	80046f2 <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 80046fe:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8004700:	4b1b      	ldr	r3, [pc, #108]	; (8004770 <xTaskResumeAll+0xdc>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d0da      	beq.n	80046be <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8004708:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800470c:	4b19      	ldr	r3, [pc, #100]	; (8004774 <xTaskResumeAll+0xe0>)
 800470e:	601a      	str	r2, [r3, #0]
 8004710:	f3bf 8f4f 	dsb	sy
 8004714:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8004718:	2401      	movs	r4, #1
 800471a:	e7d1      	b.n	80046c0 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800471c:	f8d9 300c 	ldr.w	r3, [r9, #12]
					prvAddTaskToReadyList( pxTCB );
 8004720:	2501      	movs	r5, #1
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004722:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004724:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004726:	f104 0018 	add.w	r0, r4, #24
 800472a:	f7ff f8a7 	bl	800387c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800472e:	4630      	mov	r0, r6
 8004730:	f7ff f8a4 	bl	800387c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004734:	2014      	movs	r0, #20
 8004736:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004738:	6839      	ldr	r1, [r7, #0]
 800473a:	fa05 f302 	lsl.w	r3, r5, r2
 800473e:	430b      	orrs	r3, r1
 8004740:	fb00 8002 	mla	r0, r0, r2, r8
 8004744:	4631      	mov	r1, r6
 8004746:	603b      	str	r3, [r7, #0]
 8004748:	f7ff f875 	bl	8003836 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800474c:	4b0a      	ldr	r3, [pc, #40]	; (8004778 <xTaskResumeAll+0xe4>)
 800474e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004754:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 8004756:	bf24      	itt	cs
 8004758:	4b05      	ldrcs	r3, [pc, #20]	; (8004770 <xTaskResumeAll+0xdc>)
 800475a:	601d      	strcs	r5, [r3, #0]
 800475c:	e7be      	b.n	80046dc <xTaskResumeAll+0x48>
 800475e:	bf00      	nop
 8004760:	20005128 	.word	0x20005128
 8004764:	2000511c 	.word	0x2000511c
 8004768:	20005130 	.word	0x20005130
 800476c:	20005124 	.word	0x20005124
 8004770:	200051ac 	.word	0x200051ac
 8004774:	e000ed04 	.word	0xe000ed04
 8004778:	20005084 	.word	0x20005084
 800477c:	20005168 	.word	0x20005168
 8004780:	20005090 	.word	0x20005090

08004784 <vTaskDelay>:
	{
 8004784:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004786:	b940      	cbnz	r0, 800479a <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8004788:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800478c:	4b0d      	ldr	r3, [pc, #52]	; (80047c4 <vTaskDelay+0x40>)
 800478e:	601a      	str	r2, [r3, #0]
 8004790:	f3bf 8f4f 	dsb	sy
 8004794:	f3bf 8f6f 	isb	sy
 8004798:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800479a:	4b0b      	ldr	r3, [pc, #44]	; (80047c8 <vTaskDelay+0x44>)
 800479c:	6819      	ldr	r1, [r3, #0]
 800479e:	b141      	cbz	r1, 80047b2 <vTaskDelay+0x2e>
 80047a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a4:	f383 8811 	msr	BASEPRI, r3
 80047a8:	f3bf 8f6f 	isb	sy
 80047ac:	f3bf 8f4f 	dsb	sy
 80047b0:	e7fe      	b.n	80047b0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80047b2:	f7ff fecf 	bl	8004554 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80047b6:	f7ff fd71 	bl	800429c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80047ba:	f7ff ff6b 	bl	8004694 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80047be:	2800      	cmp	r0, #0
 80047c0:	d0e2      	beq.n	8004788 <vTaskDelay+0x4>
 80047c2:	bd08      	pop	{r3, pc}
 80047c4:	e000ed04 	.word	0xe000ed04
 80047c8:	20005128 	.word	0x20005128

080047cc <prvIdleTask>:
{
 80047cc:	b508      	push	{r3, lr}
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 80047ce:	4e17      	ldr	r6, [pc, #92]	; (800482c <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80047d0:	4c17      	ldr	r4, [pc, #92]	; (8004830 <prvIdleTask+0x64>)
 80047d2:	6823      	ldr	r3, [r4, #0]
 80047d4:	b963      	cbnz	r3, 80047f0 <prvIdleTask+0x24>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80047d6:	4b17      	ldr	r3, [pc, #92]	; (8004834 <prvIdleTask+0x68>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d9f8      	bls.n	80047d0 <prvIdleTask+0x4>
				taskYIELD();
 80047de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047e2:	4b15      	ldr	r3, [pc, #84]	; (8004838 <prvIdleTask+0x6c>)
 80047e4:	601a      	str	r2, [r3, #0]
 80047e6:	f3bf 8f4f 	dsb	sy
 80047ea:	f3bf 8f6f 	isb	sy
 80047ee:	e7ef      	b.n	80047d0 <prvIdleTask+0x4>
			vTaskSuspendAll();
 80047f0:	f7ff feb0 	bl	8004554 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 80047f4:	6835      	ldr	r5, [r6, #0]
			( void ) xTaskResumeAll();
 80047f6:	f7ff ff4d 	bl	8004694 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 80047fa:	2d00      	cmp	r5, #0
 80047fc:	d0e9      	beq.n	80047d2 <prvIdleTask+0x6>
				taskENTER_CRITICAL();
 80047fe:	f7ff f899 	bl	8003934 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004802:	68f3      	ldr	r3, [r6, #12]
 8004804:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004806:	1d28      	adds	r0, r5, #4
 8004808:	f7ff f838 	bl	800387c <uxListRemove>
					--uxCurrentNumberOfTasks;
 800480c:	4a0b      	ldr	r2, [pc, #44]	; (800483c <prvIdleTask+0x70>)
 800480e:	6813      	ldr	r3, [r2, #0]
 8004810:	3b01      	subs	r3, #1
 8004812:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8004814:	6823      	ldr	r3, [r4, #0]
 8004816:	3b01      	subs	r3, #1
 8004818:	6023      	str	r3, [r4, #0]
				taskEXIT_CRITICAL();
 800481a:	f7ff f8ad 	bl	8003978 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 800481e:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8004820:	f7ff fa34 	bl	8003c8c <vPortFree>
			vPortFree( pxTCB );
 8004824:	4628      	mov	r0, r5
 8004826:	f7ff fa31 	bl	8003c8c <vPortFree>
 800482a:	e7d2      	b.n	80047d2 <prvIdleTask+0x6>
 800482c:	20005194 	.word	0x20005194
 8004830:	20005120 	.word	0x20005120
 8004834:	20005090 	.word	0x20005090
 8004838:	e000ed04 	.word	0xe000ed04
 800483c:	2000511c 	.word	0x2000511c

08004840 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004840:	4b17      	ldr	r3, [pc, #92]	; (80048a0 <vTaskSwitchContext+0x60>)
{
 8004842:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	4b17      	ldr	r3, [pc, #92]	; (80048a4 <vTaskSwitchContext+0x64>)
 8004848:	b112      	cbz	r2, 8004850 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800484a:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800484c:	601a      	str	r2, [r3, #0]
 800484e:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8004850:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004852:	4b15      	ldr	r3, [pc, #84]	; (80048a8 <vTaskSwitchContext+0x68>)
 8004854:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8004856:	fab3 f383 	clz	r3, r3
 800485a:	2214      	movs	r2, #20
 800485c:	b2db      	uxtb	r3, r3
 800485e:	f1c3 031f 	rsb	r3, r3, #31
 8004862:	435a      	muls	r2, r3
 8004864:	4911      	ldr	r1, [pc, #68]	; (80048ac <vTaskSwitchContext+0x6c>)
 8004866:	588c      	ldr	r4, [r1, r2]
 8004868:	1888      	adds	r0, r1, r2
 800486a:	b944      	cbnz	r4, 800487e <vTaskSwitchContext+0x3e>
	__asm volatile
 800486c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004870:	f383 8811 	msr	BASEPRI, r3
 8004874:	f3bf 8f6f 	isb	sy
 8004878:	f3bf 8f4f 	dsb	sy
 800487c:	e7fe      	b.n	800487c <vTaskSwitchContext+0x3c>
 800487e:	6844      	ldr	r4, [r0, #4]
 8004880:	3208      	adds	r2, #8
 8004882:	6864      	ldr	r4, [r4, #4]
 8004884:	440a      	add	r2, r1
 8004886:	4294      	cmp	r4, r2
 8004888:	bf08      	it	eq
 800488a:	6862      	ldreq	r2, [r4, #4]
 800488c:	6044      	str	r4, [r0, #4]
 800488e:	bf08      	it	eq
 8004890:	6042      	streq	r2, [r0, #4]
 8004892:	2214      	movs	r2, #20
 8004894:	fb02 1303 	mla	r3, r2, r3, r1
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	68da      	ldr	r2, [r3, #12]
 800489c:	4b04      	ldr	r3, [pc, #16]	; (80048b0 <vTaskSwitchContext+0x70>)
 800489e:	e7d5      	b.n	800484c <vTaskSwitchContext+0xc>
 80048a0:	20005128 	.word	0x20005128
 80048a4:	200051ac 	.word	0x200051ac
 80048a8:	20005130 	.word	0x20005130
 80048ac:	20005090 	.word	0x20005090
 80048b0:	20005084 	.word	0x20005084

080048b4 <vTaskPlaceOnEventList>:
{
 80048b4:	b510      	push	{r4, lr}
 80048b6:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 80048b8:	b940      	cbnz	r0, 80048cc <vTaskPlaceOnEventList+0x18>
 80048ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048be:	f383 8811 	msr	BASEPRI, r3
 80048c2:	f3bf 8f6f 	isb	sy
 80048c6:	f3bf 8f4f 	dsb	sy
 80048ca:	e7fe      	b.n	80048ca <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80048cc:	4b05      	ldr	r3, [pc, #20]	; (80048e4 <vTaskPlaceOnEventList+0x30>)
 80048ce:	6819      	ldr	r1, [r3, #0]
 80048d0:	3118      	adds	r1, #24
 80048d2:	f7fe ffbc 	bl	800384e <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80048d6:	4620      	mov	r0, r4
}
 80048d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80048dc:	2101      	movs	r1, #1
 80048de:	f7ff bcdd 	b.w	800429c <prvAddCurrentTaskToDelayedList>
 80048e2:	bf00      	nop
 80048e4:	20005084 	.word	0x20005084

080048e8 <xTaskRemoveFromEventList>:
{
 80048e8:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80048ea:	68c3      	ldr	r3, [r0, #12]
 80048ec:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80048ee:	b944      	cbnz	r4, 8004902 <xTaskRemoveFromEventList+0x1a>
 80048f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f4:	f383 8811 	msr	BASEPRI, r3
 80048f8:	f3bf 8f6f 	isb	sy
 80048fc:	f3bf 8f4f 	dsb	sy
 8004900:	e7fe      	b.n	8004900 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004902:	f104 0518 	add.w	r5, r4, #24
 8004906:	4628      	mov	r0, r5
 8004908:	f7fe ffb8 	bl	800387c <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800490c:	4b11      	ldr	r3, [pc, #68]	; (8004954 <xTaskRemoveFromEventList+0x6c>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	b9e3      	cbnz	r3, 800494c <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004912:	1d25      	adds	r5, r4, #4
 8004914:	4628      	mov	r0, r5
 8004916:	f7fe ffb1 	bl	800387c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800491a:	2301      	movs	r3, #1
 800491c:	490e      	ldr	r1, [pc, #56]	; (8004958 <xTaskRemoveFromEventList+0x70>)
 800491e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004920:	6808      	ldr	r0, [r1, #0]
 8004922:	4093      	lsls	r3, r2
 8004924:	4303      	orrs	r3, r0
 8004926:	2014      	movs	r0, #20
 8004928:	600b      	str	r3, [r1, #0]
 800492a:	4629      	mov	r1, r5
 800492c:	4b0b      	ldr	r3, [pc, #44]	; (800495c <xTaskRemoveFromEventList+0x74>)
 800492e:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004932:	f7fe ff80 	bl	8003836 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004936:	4b0a      	ldr	r3, [pc, #40]	; (8004960 <xTaskRemoveFromEventList+0x78>)
 8004938:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800493e:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8004940:	bf85      	ittet	hi
 8004942:	2001      	movhi	r0, #1
 8004944:	4b07      	ldrhi	r3, [pc, #28]	; (8004964 <xTaskRemoveFromEventList+0x7c>)
		xReturn = pdFALSE;
 8004946:	2000      	movls	r0, #0
		xYieldPending = pdTRUE;
 8004948:	6018      	strhi	r0, [r3, #0]
}
 800494a:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800494c:	4629      	mov	r1, r5
 800494e:	4806      	ldr	r0, [pc, #24]	; (8004968 <xTaskRemoveFromEventList+0x80>)
 8004950:	e7ef      	b.n	8004932 <xTaskRemoveFromEventList+0x4a>
 8004952:	bf00      	nop
 8004954:	20005128 	.word	0x20005128
 8004958:	20005130 	.word	0x20005130
 800495c:	20005090 	.word	0x20005090
 8004960:	20005084 	.word	0x20005084
 8004964:	200051ac 	.word	0x200051ac
 8004968:	20005168 	.word	0x20005168

0800496c <vTaskSetTimeOutState>:
{
 800496c:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
 800496e:	b908      	cbnz	r0, 8004974 <vTaskSetTimeOutState+0x8>
 8004970:	f7ff fcda 	bl	8004328 <prvTaskIsTaskSuspended.part.0>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004974:	4b03      	ldr	r3, [pc, #12]	; (8004984 <vTaskSetTimeOutState+0x18>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800497a:	4b03      	ldr	r3, [pc, #12]	; (8004988 <vTaskSetTimeOutState+0x1c>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	6043      	str	r3, [r0, #4]
 8004980:	bd08      	pop	{r3, pc}
 8004982:	bf00      	nop
 8004984:	20005164 	.word	0x20005164
 8004988:	200051a8 	.word	0x200051a8

0800498c <xTaskCheckForTimeOut>:
{
 800498c:	b538      	push	{r3, r4, r5, lr}
 800498e:	460d      	mov	r5, r1
	configASSERT( pxTimeOut );
 8004990:	4604      	mov	r4, r0
 8004992:	b940      	cbnz	r0, 80049a6 <xTaskCheckForTimeOut+0x1a>
 8004994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004998:	f383 8811 	msr	BASEPRI, r3
 800499c:	f3bf 8f6f 	isb	sy
 80049a0:	f3bf 8f4f 	dsb	sy
 80049a4:	e7fe      	b.n	80049a4 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 80049a6:	b941      	cbnz	r1, 80049ba <xTaskCheckForTimeOut+0x2e>
 80049a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ac:	f383 8811 	msr	BASEPRI, r3
 80049b0:	f3bf 8f6f 	isb	sy
 80049b4:	f3bf 8f4f 	dsb	sy
 80049b8:	e7fe      	b.n	80049b8 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 80049ba:	f7fe ffbb 	bl	8003934 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80049be:	4b0e      	ldr	r3, [pc, #56]	; (80049f8 <xTaskCheckForTimeOut+0x6c>)
 80049c0:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 80049c2:	682b      	ldr	r3, [r5, #0]
 80049c4:	1c5a      	adds	r2, r3, #1
 80049c6:	d010      	beq.n	80049ea <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80049c8:	4a0c      	ldr	r2, [pc, #48]	; (80049fc <xTaskCheckForTimeOut+0x70>)
 80049ca:	6820      	ldr	r0, [r4, #0]
 80049cc:	6812      	ldr	r2, [r2, #0]
 80049ce:	4290      	cmp	r0, r2
 80049d0:	6862      	ldr	r2, [r4, #4]
 80049d2:	d001      	beq.n	80049d8 <xTaskCheckForTimeOut+0x4c>
 80049d4:	4291      	cmp	r1, r2
 80049d6:	d20d      	bcs.n	80049f4 <xTaskCheckForTimeOut+0x68>
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80049d8:	1a88      	subs	r0, r1, r2
 80049da:	4283      	cmp	r3, r0
 80049dc:	d90a      	bls.n	80049f4 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 80049de:	1a5b      	subs	r3, r3, r1
 80049e0:	4413      	add	r3, r2
 80049e2:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 80049e4:	4620      	mov	r0, r4
 80049e6:	f7ff ffc1 	bl	800496c <vTaskSetTimeOutState>
				xReturn = pdFALSE;
 80049ea:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80049ec:	f7fe ffc4 	bl	8003978 <vPortExitCritical>
}
 80049f0:	4620      	mov	r0, r4
 80049f2:	bd38      	pop	{r3, r4, r5, pc}
			xReturn = pdTRUE;
 80049f4:	2401      	movs	r4, #1
 80049f6:	e7f9      	b.n	80049ec <xTaskCheckForTimeOut+0x60>
 80049f8:	200051a8 	.word	0x200051a8
 80049fc:	20005164 	.word	0x20005164

08004a00 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8004a00:	2201      	movs	r2, #1
 8004a02:	4b01      	ldr	r3, [pc, #4]	; (8004a08 <vTaskMissedYield+0x8>)
 8004a04:	601a      	str	r2, [r3, #0]
 8004a06:	4770      	bx	lr
 8004a08:	200051ac 	.word	0x200051ac

08004a0c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8004a0c:	4b05      	ldr	r3, [pc, #20]	; (8004a24 <xTaskGetSchedulerState+0x18>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	b133      	cbz	r3, 8004a20 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a12:	4b05      	ldr	r3, [pc, #20]	; (8004a28 <xTaskGetSchedulerState+0x1c>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8004a18:	bf0c      	ite	eq
 8004a1a:	2002      	moveq	r0, #2
 8004a1c:	2000      	movne	r0, #0
 8004a1e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004a20:	2001      	movs	r0, #1
	}
 8004a22:	4770      	bx	lr
 8004a24:	2000517c 	.word	0x2000517c
 8004a28:	20005128 	.word	0x20005128

08004a2c <vTaskPriorityInherit>:
	{
 8004a2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 8004a30:	4604      	mov	r4, r0
 8004a32:	2800      	cmp	r0, #0
 8004a34:	d039      	beq.n	8004aaa <vTaskPriorityInherit+0x7e>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004a36:	4d1e      	ldr	r5, [pc, #120]	; (8004ab0 <vTaskPriorityInherit+0x84>)
 8004a38:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004a3a:	682a      	ldr	r2, [r5, #0]
 8004a3c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d233      	bcs.n	8004aaa <vTaskPriorityInherit+0x7e>
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004a42:	2714      	movs	r7, #20
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004a44:	6982      	ldr	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004a46:	4e1b      	ldr	r6, [pc, #108]	; (8004ab4 <vTaskPriorityInherit+0x88>)
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004a48:	2a00      	cmp	r2, #0
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a4a:	bfa8      	it	ge
 8004a4c:	682a      	ldrge	r2, [r5, #0]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004a4e:	fb07 6303 	mla	r3, r7, r3, r6
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a52:	bfa2      	ittt	ge
 8004a54:	6ad2      	ldrge	r2, [r2, #44]	; 0x2c
 8004a56:	f1c2 0207 	rsbge	r2, r2, #7
 8004a5a:	6182      	strge	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004a5c:	6942      	ldr	r2, [r0, #20]
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d120      	bne.n	8004aa4 <vTaskPriorityInherit+0x78>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a62:	f100 0804 	add.w	r8, r0, #4
 8004a66:	4640      	mov	r0, r8
 8004a68:	f7fe ff08 	bl	800387c <uxListRemove>
 8004a6c:	4a12      	ldr	r2, [pc, #72]	; (8004ab8 <vTaskPriorityInherit+0x8c>)
 8004a6e:	b948      	cbnz	r0, 8004a84 <vTaskPriorityInherit+0x58>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004a70:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004a72:	4347      	muls	r7, r0
 8004a74:	59f3      	ldr	r3, [r6, r7]
 8004a76:	b92b      	cbnz	r3, 8004a84 <vTaskPriorityInherit+0x58>
 8004a78:	2101      	movs	r1, #1
 8004a7a:	6813      	ldr	r3, [r2, #0]
 8004a7c:	4081      	lsls	r1, r0
 8004a7e:	ea23 0301 	bic.w	r3, r3, r1
 8004a82:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004a84:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxTCB );
 8004a86:	6811      	ldr	r1, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004a88:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	4083      	lsls	r3, r0
 8004a8e:	430b      	orrs	r3, r1
 8004a90:	6013      	str	r3, [r2, #0]
 8004a92:	2314      	movs	r3, #20
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004a94:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8004a96:	4641      	mov	r1, r8
 8004a98:	fb03 6000 	mla	r0, r3, r0, r6
	}
 8004a9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					prvAddTaskToReadyList( pxTCB );
 8004aa0:	f7fe bec9 	b.w	8003836 <vListInsertEnd>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004aa4:	682b      	ldr	r3, [r5, #0]
 8004aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa8:	62c3      	str	r3, [r0, #44]	; 0x2c
 8004aaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004aae:	bf00      	nop
 8004ab0:	20005084 	.word	0x20005084
 8004ab4:	20005090 	.word	0x20005090
 8004ab8:	20005130 	.word	0x20005130

08004abc <xTaskPriorityDisinherit>:
	{
 8004abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8004abe:	4604      	mov	r4, r0
 8004ac0:	b908      	cbnz	r0, 8004ac6 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 8004ac2:	2000      	movs	r0, #0
 8004ac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8004ac6:	4b22      	ldr	r3, [pc, #136]	; (8004b50 <xTaskPriorityDisinherit+0x94>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4298      	cmp	r0, r3
 8004acc:	d008      	beq.n	8004ae0 <xTaskPriorityDisinherit+0x24>
 8004ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad2:	f383 8811 	msr	BASEPRI, r3
 8004ad6:	f3bf 8f6f 	isb	sy
 8004ada:	f3bf 8f4f 	dsb	sy
 8004ade:	e7fe      	b.n	8004ade <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8004ae0:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8004ae2:	b943      	cbnz	r3, 8004af6 <xTaskPriorityDisinherit+0x3a>
 8004ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae8:	f383 8811 	msr	BASEPRI, r3
 8004aec:	f3bf 8f6f 	isb	sy
 8004af0:	f3bf 8f4f 	dsb	sy
 8004af4:	e7fe      	b.n	8004af4 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004af6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8004af8:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 8004afa:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004afc:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8004afe:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004b00:	d0df      	beq.n	8004ac2 <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d1dd      	bne.n	8004ac2 <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b06:	1d05      	adds	r5, r0, #4
 8004b08:	4628      	mov	r0, r5
 8004b0a:	f7fe feb7 	bl	800387c <uxListRemove>
 8004b0e:	4e11      	ldr	r6, [pc, #68]	; (8004b54 <xTaskPriorityDisinherit+0x98>)
 8004b10:	4a11      	ldr	r2, [pc, #68]	; (8004b58 <xTaskPriorityDisinherit+0x9c>)
 8004b12:	b950      	cbnz	r0, 8004b2a <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004b14:	2114      	movs	r1, #20
 8004b16:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004b18:	4379      	muls	r1, r7
 8004b1a:	5873      	ldr	r3, [r6, r1]
 8004b1c:	b92b      	cbnz	r3, 8004b2a <xTaskPriorityDisinherit+0x6e>
 8004b1e:	2001      	movs	r0, #1
 8004b20:	6813      	ldr	r3, [r2, #0]
 8004b22:	40b8      	lsls	r0, r7
 8004b24:	ea23 0300 	bic.w	r3, r3, r0
 8004b28:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004b2a:	6c63      	ldr	r3, [r4, #68]	; 0x44
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b2c:	f1c3 0107 	rsb	r1, r3, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004b30:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b32:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8004b34:	2401      	movs	r4, #1
 8004b36:	6811      	ldr	r1, [r2, #0]
 8004b38:	fa04 f003 	lsl.w	r0, r4, r3
 8004b3c:	4308      	orrs	r0, r1
 8004b3e:	6010      	str	r0, [r2, #0]
 8004b40:	2014      	movs	r0, #20
 8004b42:	4629      	mov	r1, r5
 8004b44:	fb00 6003 	mla	r0, r0, r3, r6
 8004b48:	f7fe fe75 	bl	8003836 <vListInsertEnd>
					xReturn = pdTRUE;
 8004b4c:	4620      	mov	r0, r4
	}
 8004b4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b50:	20005084 	.word	0x20005084
 8004b54:	20005090 	.word	0x20005090
 8004b58:	20005130 	.word	0x20005130

08004b5c <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8004b5c:	4b04      	ldr	r3, [pc, #16]	; (8004b70 <pvTaskIncrementMutexHeldCount+0x14>)
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	b11a      	cbz	r2, 8004b6a <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8004b62:	6819      	ldr	r1, [r3, #0]
 8004b64:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 8004b66:	3201      	adds	r2, #1
 8004b68:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 8004b6a:	6818      	ldr	r0, [r3, #0]
	}
 8004b6c:	4770      	bx	lr
 8004b6e:	bf00      	nop
 8004b70:	20005084 	.word	0x20005084

08004b74 <fir_filter>:
extern uint16_t ADCRawData[4];
extern uint16_t sensorValue[4];
extern uint16_t filteredData[4];
extern uint8_t numberOfTries;

uint16_t fir_filter(uint16_t *signal, uint16_t sample){
 8004b74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b76:	b08b      	sub	sp, #44	; 0x2c
//	         -581
//		    };
//	uint32_t DCgain = 32768;

	//5 Hz Fcut = 1 Hz
	uint32_t FIRCoef[10] = {
 8004b78:	466c      	mov	r4, sp
uint16_t fir_filter(uint16_t *signal, uint16_t sample){
 8004b7a:	4606      	mov	r6, r0
	uint32_t FIRCoef[10] = {
 8004b7c:	4d0f      	ldr	r5, [pc, #60]	; (8004bbc <fir_filter+0x48>)
uint16_t fir_filter(uint16_t *signal, uint16_t sample){
 8004b7e:	460f      	mov	r7, r1
	uint32_t FIRCoef[10] = {
 8004b80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b88:	e895 0003 	ldmia.w	r5, {r0, r1}
 8004b8c:	e884 0003 	stmia.w	r4, {r0, r1}
 8004b90:	f106 0312 	add.w	r3, r6, #18


	uint8_t i = 0;

	for (i = 10 - 1; i> 0; i--){
		signal[i] = signal[i-1];
 8004b94:	f833 2d02 	ldrh.w	r2, [r3, #-2]!
	for (i = 10 - 1; i> 0; i--){
 8004b98:	429e      	cmp	r6, r3
		signal[i] = signal[i-1];
 8004b9a:	805a      	strh	r2, [r3, #2]
	for (i = 10 - 1; i> 0; i--){
 8004b9c:	d1fa      	bne.n	8004b94 <fir_filter+0x20>
	}

	signal[0] = sample;
 8004b9e:	2300      	movs	r3, #0
	filteredSample = 0;
 8004ba0:	4618      	mov	r0, r3
	signal[0] = sample;
 8004ba2:	8037      	strh	r7, [r6, #0]

	for (i = 0 ; i < 10; i++){
		filteredSample += FIRCoef[i] * (uint32_t)signal[i];
 8004ba4:	f836 2013 	ldrh.w	r2, [r6, r3, lsl #1]
 8004ba8:	f85d 1023 	ldr.w	r1, [sp, r3, lsl #2]
 8004bac:	3301      	adds	r3, #1
	for (i = 0 ; i < 10; i++){
 8004bae:	2b0a      	cmp	r3, #10
		filteredSample += FIRCoef[i] * (uint32_t)signal[i];
 8004bb0:	fb01 0002 	mla	r0, r1, r2, r0
	for (i = 0 ; i < 10; i++){
 8004bb4:	d1f6      	bne.n	8004ba4 <fir_filter+0x30>
	}
	filteredSample = filteredSample / DCgain;

	return (uint16_t) filteredSample;
}
 8004bb6:	0c00      	lsrs	r0, r0, #16
 8004bb8:	b00b      	add	sp, #44	; 0x2c
 8004bba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bbc:	08008a20 	.word	0x08008a20

08004bc0 <xStoreADCDataTask>:

void xStoreADCDataTask(void* arguments){
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b094      	sub	sp, #80	; 0x50

	uint16_t sens1_array[10] = {1};
 8004bc4:	2214      	movs	r2, #20
 8004bc6:	2100      	movs	r1, #0
 8004bc8:	4668      	mov	r0, sp
 8004bca:	f001 f9d6 	bl	8005f7a <memset>
	uint16_t sens2_array[10] = {2};
 8004bce:	2214      	movs	r2, #20
	uint16_t sens1_array[10] = {1};
 8004bd0:	2301      	movs	r3, #1
	uint16_t sens2_array[10] = {2};
 8004bd2:	2100      	movs	r1, #0
 8004bd4:	eb0d 0002 	add.w	r0, sp, r2
	uint16_t sens1_array[10] = {1};
 8004bd8:	f8ad 3000 	strh.w	r3, [sp]
	uint16_t sens2_array[10] = {2};
 8004bdc:	f001 f9cd 	bl	8005f7a <memset>
 8004be0:	2302      	movs	r3, #2
	uint16_t sens3_array[10] = {3};
 8004be2:	2214      	movs	r2, #20
 8004be4:	2100      	movs	r1, #0
 8004be6:	a80a      	add	r0, sp, #40	; 0x28
	uint16_t sens2_array[10] = {2};
 8004be8:	f8ad 3014 	strh.w	r3, [sp, #20]
	uint16_t sens3_array[10] = {3};
 8004bec:	f001 f9c5 	bl	8005f7a <memset>
 8004bf0:	2303      	movs	r3, #3
	uint16_t sens4_array[10] = {4};
 8004bf2:	2214      	movs	r2, #20
 8004bf4:	2100      	movs	r1, #0
 8004bf6:	a80f      	add	r0, sp, #60	; 0x3c


	for(;;){

		if (lastTimeCommand > 50){
 8004bf8:	4d5c      	ldr	r5, [pc, #368]	; (8004d6c <xStoreADCDataTask+0x1ac>)
	uint16_t sens3_array[10] = {3};
 8004bfa:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	uint16_t sens4_array[10] = {4};
 8004bfe:	f001 f9bc 	bl	8005f7a <memset>
 8004c02:	2304      	movs	r3, #4
 8004c04:	462e      	mov	r6, r5
 8004c06:	4f5a      	ldr	r7, [pc, #360]	; (8004d70 <xStoreADCDataTask+0x1b0>)
 8004c08:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
		if (lastTimeCommand > 50){
 8004c0c:	882b      	ldrh	r3, [r5, #0]
 8004c0e:	2b32      	cmp	r3, #50	; 0x32
 8004c10:	d974      	bls.n	8004cfc <xStoreADCDataTask+0x13c>
			if (pressureCompensation == OFF){
 8004c12:	783c      	ldrb	r4, [r7, #0]
 8004c14:	bb4c      	cbnz	r4, 8004c6a <xStoreADCDataTask+0xaa>
				C1_UP_OFF;
 8004c16:	4622      	mov	r2, r4
 8004c18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004c1c:	4855      	ldr	r0, [pc, #340]	; (8004d74 <xStoreADCDataTask+0x1b4>)
 8004c1e:	f7fd fbff 	bl	8002420 <HAL_GPIO_WritePin>
				C1_DOWN_OFF;
 8004c22:	4622      	mov	r2, r4
 8004c24:	2180      	movs	r1, #128	; 0x80
 8004c26:	4853      	ldr	r0, [pc, #332]	; (8004d74 <xStoreADCDataTask+0x1b4>)
 8004c28:	f7fd fbfa 	bl	8002420 <HAL_GPIO_WritePin>
				C2_UP_OFF;
 8004c2c:	4622      	mov	r2, r4
 8004c2e:	2120      	movs	r1, #32
 8004c30:	4850      	ldr	r0, [pc, #320]	; (8004d74 <xStoreADCDataTask+0x1b4>)
 8004c32:	f7fd fbf5 	bl	8002420 <HAL_GPIO_WritePin>
				C2_DOWN_OFF;
 8004c36:	4622      	mov	r2, r4
 8004c38:	2108      	movs	r1, #8
 8004c3a:	484e      	ldr	r0, [pc, #312]	; (8004d74 <xStoreADCDataTask+0x1b4>)
 8004c3c:	f7fd fbf0 	bl	8002420 <HAL_GPIO_WritePin>
				C3_UP_OFF;
 8004c40:	4622      	mov	r2, r4
 8004c42:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004c46:	484b      	ldr	r0, [pc, #300]	; (8004d74 <xStoreADCDataTask+0x1b4>)
 8004c48:	f7fd fbea 	bl	8002420 <HAL_GPIO_WritePin>
				C3_DOWN_OFF;
 8004c4c:	4622      	mov	r2, r4
 8004c4e:	2140      	movs	r1, #64	; 0x40
 8004c50:	4848      	ldr	r0, [pc, #288]	; (8004d74 <xStoreADCDataTask+0x1b4>)
 8004c52:	f7fd fbe5 	bl	8002420 <HAL_GPIO_WritePin>
				C4_UP_OFF;
 8004c56:	4622      	mov	r2, r4
 8004c58:	2110      	movs	r1, #16
 8004c5a:	4846      	ldr	r0, [pc, #280]	; (8004d74 <xStoreADCDataTask+0x1b4>)
 8004c5c:	f7fd fbe0 	bl	8002420 <HAL_GPIO_WritePin>
				C4_DOWN_OFF;
 8004c60:	4622      	mov	r2, r4
 8004c62:	2104      	movs	r1, #4
 8004c64:	4844      	ldr	r0, [pc, #272]	; (8004d78 <xStoreADCDataTask+0x1b8>)
 8004c66:	f7fd fbdb 	bl	8002420 <HAL_GPIO_WritePin>
			}

			if (indicationState != SEARCH){
 8004c6a:	4a44      	ldr	r2, [pc, #272]	; (8004d7c <xStoreADCDataTask+0x1bc>)
 8004c6c:	7813      	ldrb	r3, [r2, #0]
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d03c      	beq.n	8004cec <xStoreADCDataTask+0x12c>
				indicationState = NORMAL_NC;
 8004c72:	2301      	movs	r3, #1
 8004c74:	7013      	strb	r3, [r2, #0]
				lastTimeCommand = 0;
 8004c76:	2300      	movs	r3, #0
 8004c78:	8033      	strh	r3, [r6, #0]
		}
		else{
			lastTimeCommand++;
		}

		sensorValue[SENS_1] = ADCRawData[SENS_1];
 8004c7a:	4b41      	ldr	r3, [pc, #260]	; (8004d80 <xStoreADCDataTask+0x1c0>)
 8004c7c:	4c41      	ldr	r4, [pc, #260]	; (8004d84 <xStoreADCDataTask+0x1c4>)
 8004c7e:	881a      	ldrh	r2, [r3, #0]
		sensorValue[SENS_2] = ADCRawData[SENS_2];
		sensorValue[SENS_3] = ADCRawData[SENS_3];
		sensorValue[SENS_4] = ADCRawData[SENS_4];

		HAL_ADCEx_InjectedStart_IT(&hadc1);
 8004c80:	4841      	ldr	r0, [pc, #260]	; (8004d88 <xStoreADCDataTask+0x1c8>)
		sensorValue[SENS_1] = ADCRawData[SENS_1];
 8004c82:	8022      	strh	r2, [r4, #0]
		sensorValue[SENS_2] = ADCRawData[SENS_2];
 8004c84:	885a      	ldrh	r2, [r3, #2]


		filteredData[SENS_1] = fir_filter(sens1_array, sensorValue[SENS_1]);
 8004c86:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8004d94 <xStoreADCDataTask+0x1d4>
		sensorValue[SENS_2] = ADCRawData[SENS_2];
 8004c8a:	8062      	strh	r2, [r4, #2]
		sensorValue[SENS_3] = ADCRawData[SENS_3];
 8004c8c:	889a      	ldrh	r2, [r3, #4]
		sensorValue[SENS_4] = ADCRawData[SENS_4];
 8004c8e:	88db      	ldrh	r3, [r3, #6]
		sensorValue[SENS_3] = ADCRawData[SENS_3];
 8004c90:	80a2      	strh	r2, [r4, #4]
		sensorValue[SENS_4] = ADCRawData[SENS_4];
 8004c92:	80e3      	strh	r3, [r4, #6]
		HAL_ADCEx_InjectedStart_IT(&hadc1);
 8004c94:	f7fc fe32 	bl	80018fc <HAL_ADCEx_InjectedStart_IT>
		filteredData[SENS_1] = fir_filter(sens1_array, sensorValue[SENS_1]);
 8004c98:	8821      	ldrh	r1, [r4, #0]
 8004c9a:	4668      	mov	r0, sp
 8004c9c:	f7ff ff6a 	bl	8004b74 <fir_filter>
		filteredData[SENS_2] = fir_filter(sens2_array, sensorValue[SENS_2]);
 8004ca0:	8861      	ldrh	r1, [r4, #2]
		filteredData[SENS_1] = fir_filter(sens1_array, sensorValue[SENS_1]);
 8004ca2:	f8a8 0000 	strh.w	r0, [r8]
		filteredData[SENS_2] = fir_filter(sens2_array, sensorValue[SENS_2]);
 8004ca6:	a805      	add	r0, sp, #20
 8004ca8:	f7ff ff64 	bl	8004b74 <fir_filter>
		filteredData[SENS_3] = fir_filter(sens3_array, sensorValue[SENS_3]);
 8004cac:	88a1      	ldrh	r1, [r4, #4]
		filteredData[SENS_2] = fir_filter(sens2_array, sensorValue[SENS_2]);
 8004cae:	f8a8 0002 	strh.w	r0, [r8, #2]
		filteredData[SENS_3] = fir_filter(sens3_array, sensorValue[SENS_3]);
 8004cb2:	a80a      	add	r0, sp, #40	; 0x28
 8004cb4:	f7ff ff5e 	bl	8004b74 <fir_filter>
		filteredData[SENS_4] = fir_filter(sens4_array, sensorValue[SENS_4]);
 8004cb8:	88e1      	ldrh	r1, [r4, #6]
		filteredData[SENS_3] = fir_filter(sens3_array, sensorValue[SENS_3]);
 8004cba:	f8a8 0004 	strh.w	r0, [r8, #4]
		filteredData[SENS_4] = fir_filter(sens4_array, sensorValue[SENS_4]);
 8004cbe:	a80f      	add	r0, sp, #60	; 0x3c
 8004cc0:	f7ff ff58 	bl	8004b74 <fir_filter>


		if (pressureCompensation == ON){
 8004cc4:	783b      	ldrb	r3, [r7, #0]
		filteredData[SENS_4] = fir_filter(sens4_array, sensorValue[SENS_4]);
 8004cc6:	f8a8 0006 	strh.w	r0, [r8, #6]
		if (pressureCompensation == ON){
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 8004d98 <xStoreADCDataTask+0x1d8>
 8004cd0:	d117      	bne.n	8004d02 <xStoreADCDataTask+0x142>
			prevCompensation = ON;
 8004cd2:	f888 3000 	strb.w	r3, [r8]
			xSemaphoreGive(xPressureCompensationSemaphore);
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	482c      	ldr	r0, [pc, #176]	; (8004d8c <xStoreADCDataTask+0x1cc>)
 8004cda:	461a      	mov	r2, r3
 8004cdc:	4619      	mov	r1, r3
 8004cde:	6800      	ldr	r0, [r0, #0]
 8004ce0:	f7ff f8ee 	bl	8003ec0 <xQueueGenericSend>
				prevCompensation = OFF;
			}

		}

		vTaskDelay(ADC_DATA_PERIOD / portTICK_RATE_MS);
 8004ce4:	2032      	movs	r0, #50	; 0x32
 8004ce6:	f7ff fd4d 	bl	8004784 <vTaskDelay>
		if (lastTimeCommand > 50){
 8004cea:	e78f      	b.n	8004c0c <xStoreADCDataTask+0x4c>
				lastTimeCommand++;
 8004cec:	8833      	ldrh	r3, [r6, #0]
 8004cee:	3301      	adds	r3, #1
 8004cf0:	b29b      	uxth	r3, r3
				if (lastTimeCommand > 600){
 8004cf2:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
				lastTimeCommand++;
 8004cf6:	8033      	strh	r3, [r6, #0]
				if (lastTimeCommand > 600){
 8004cf8:	d8bb      	bhi.n	8004c72 <xStoreADCDataTask+0xb2>
 8004cfa:	e7be      	b.n	8004c7a <xStoreADCDataTask+0xba>
			lastTimeCommand++;
 8004cfc:	3301      	adds	r3, #1
 8004cfe:	802b      	strh	r3, [r5, #0]
 8004d00:	e7bb      	b.n	8004c7a <xStoreADCDataTask+0xba>
			if (prevCompensation == ON){
 8004d02:	f898 3000 	ldrb.w	r3, [r8]
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d1ec      	bne.n	8004ce4 <xStoreADCDataTask+0x124>
				numberOfTries = 0;
 8004d0a:	2400      	movs	r4, #0
 8004d0c:	4b20      	ldr	r3, [pc, #128]	; (8004d90 <xStoreADCDataTask+0x1d0>)
				C1_UP_OFF;
 8004d0e:	4622      	mov	r2, r4
 8004d10:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004d14:	4817      	ldr	r0, [pc, #92]	; (8004d74 <xStoreADCDataTask+0x1b4>)
				numberOfTries = 0;
 8004d16:	701c      	strb	r4, [r3, #0]
				C1_UP_OFF;
 8004d18:	f7fd fb82 	bl	8002420 <HAL_GPIO_WritePin>
				C1_DOWN_OFF;
 8004d1c:	4622      	mov	r2, r4
 8004d1e:	2180      	movs	r1, #128	; 0x80
 8004d20:	4814      	ldr	r0, [pc, #80]	; (8004d74 <xStoreADCDataTask+0x1b4>)
 8004d22:	f7fd fb7d 	bl	8002420 <HAL_GPIO_WritePin>
				C2_UP_OFF;
 8004d26:	4622      	mov	r2, r4
 8004d28:	2120      	movs	r1, #32
 8004d2a:	4812      	ldr	r0, [pc, #72]	; (8004d74 <xStoreADCDataTask+0x1b4>)
 8004d2c:	f7fd fb78 	bl	8002420 <HAL_GPIO_WritePin>
				C2_DOWN_OFF;
 8004d30:	4622      	mov	r2, r4
 8004d32:	2108      	movs	r1, #8
 8004d34:	480f      	ldr	r0, [pc, #60]	; (8004d74 <xStoreADCDataTask+0x1b4>)
 8004d36:	f7fd fb73 	bl	8002420 <HAL_GPIO_WritePin>
				C3_UP_OFF;
 8004d3a:	4622      	mov	r2, r4
 8004d3c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004d40:	480c      	ldr	r0, [pc, #48]	; (8004d74 <xStoreADCDataTask+0x1b4>)
 8004d42:	f7fd fb6d 	bl	8002420 <HAL_GPIO_WritePin>
				C3_DOWN_OFF;
 8004d46:	4622      	mov	r2, r4
 8004d48:	2140      	movs	r1, #64	; 0x40
 8004d4a:	480a      	ldr	r0, [pc, #40]	; (8004d74 <xStoreADCDataTask+0x1b4>)
 8004d4c:	f7fd fb68 	bl	8002420 <HAL_GPIO_WritePin>
				C4_UP_OFF;
 8004d50:	4622      	mov	r2, r4
 8004d52:	2110      	movs	r1, #16
 8004d54:	4807      	ldr	r0, [pc, #28]	; (8004d74 <xStoreADCDataTask+0x1b4>)
 8004d56:	f7fd fb63 	bl	8002420 <HAL_GPIO_WritePin>
				C4_DOWN_OFF;
 8004d5a:	4622      	mov	r2, r4
 8004d5c:	2104      	movs	r1, #4
 8004d5e:	4806      	ldr	r0, [pc, #24]	; (8004d78 <xStoreADCDataTask+0x1b8>)
 8004d60:	f7fd fb5e 	bl	8002420 <HAL_GPIO_WritePin>
				prevCompensation = OFF;
 8004d64:	f888 4000 	strb.w	r4, [r8]
 8004d68:	e7bc      	b.n	8004ce4 <xStoreADCDataTask+0x124>
 8004d6a:	bf00      	nop
 8004d6c:	200051b0 	.word	0x200051b0
 8004d70:	200052c2 	.word	0x200052c2
 8004d74:	40010c00 	.word	0x40010c00
 8004d78:	40011400 	.word	0x40011400
 8004d7c:	2000000d 	.word	0x2000000d
 8004d80:	20005384 	.word	0x20005384
 8004d84:	20005486 	.word	0x20005486
 8004d88:	20005414 	.word	0x20005414
 8004d8c:	200053cc 	.word	0x200053cc
 8004d90:	200051b3 	.word	0x200051b3
 8004d94:	20005230 	.word	0x20005230
 8004d98:	200051b2 	.word	0x200051b2

08004d9c <xAnalyzeTask>:
extern UART_HandleTypeDef huart1;
extern struct controllerData controllerSettings;
uint8_t numberOfTries = 0;
uint8_t waysType = 6;

void xAnalyzeTask(void *arguments){
 8004d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}



	uint8_t maxTries = 7;

	int32_t impTime[4] = {0, 1, 2, 3};
 8004da0:	4b9e      	ldr	r3, [pc, #632]	; (800501c <xAnalyzeTask+0x280>)
void xAnalyzeTask(void *arguments){
 8004da2:	b08f      	sub	sp, #60	; 0x3c
	int32_t impTime[4] = {0, 1, 2, 3};
 8004da4:	ac0a      	add	r4, sp, #40	; 0x28
 8004da6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004da8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint16_t startPressure[4];
	uint32_t dCounter = 0;
	uint8_t stopImp = 0;
	uint32_t impCounter = 0;
	uint8_t numOfAxles = 0;
	uint8_t numOfWays[2] = {0, 0};
 8004dac:	2400      	movs	r4, #0
	uint8_t axleCounter = 0;
	uint8_t wayCounter = 0;


	xStatus = xSemaphoreTake(xPressureCompensationSemaphore, portMAX_DELAY);
 8004dae:	489c      	ldr	r0, [pc, #624]	; (8005020 <xAnalyzeTask+0x284>)
 8004db0:	4623      	mov	r3, r4
 8004db2:	f04f 32ff 	mov.w	r2, #4294967295
 8004db6:	4621      	mov	r1, r4
 8004db8:	6800      	ldr	r0, [r0, #0]
	uint8_t numOfWays[2] = {0, 0};
 8004dba:	f88d 401c 	strb.w	r4, [sp, #28]
 8004dbe:	f88d 401d 	strb.w	r4, [sp, #29]
	xStatus = xSemaphoreTake(xPressureCompensationSemaphore, portMAX_DELAY);
 8004dc2:	f7ff f995 	bl	80040f0 <xQueueGenericReceive>
	uint8_t numOfAxles = 0;
 8004dc6:	9400      	str	r4, [sp, #0]
	for(;;){
		xStatus = xSemaphoreTake(xPressureCompensationSemaphore, portMAX_DELAY);
 8004dc8:	2300      	movs	r3, #0
 8004dca:	4895      	ldr	r0, [pc, #596]	; (8005020 <xAnalyzeTask+0x284>)
 8004dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8004dd0:	4619      	mov	r1, r3
 8004dd2:	6800      	ldr	r0, [r0, #0]
 8004dd4:	f7ff f98c 	bl	80040f0 <xQueueGenericReceive>
		if (xStatus == pdPASS){
 8004dd8:	2801      	cmp	r0, #1
 8004dda:	d1f5      	bne.n	8004dc8 <xAnalyzeTask+0x2c>
			if (airSystem == RECEIVER){
 8004ddc:	4b91      	ldr	r3, [pc, #580]	; (8005024 <xAnalyzeTask+0x288>)
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d1f1      	bne.n	8004dc8 <xAnalyzeTask+0x2c>
				workState = FREE;
 8004de4:	2200      	movs	r2, #0
				if (numberOfTries >= maxTries){
 8004de6:	4890      	ldr	r0, [pc, #576]	; (8005028 <xAnalyzeTask+0x28c>)
				workState = FREE;
 8004de8:	4b90      	ldr	r3, [pc, #576]	; (800502c <xAnalyzeTask+0x290>)
						else
							pressIsLower[i] = 0;
						workState = WORKING;
					}
					else{
						pressIsLower[i] = -1;
 8004dea:	f04f 09ff 	mov.w	r9, #255	; 0xff
				workState = FREE;
 8004dee:	701a      	strb	r2, [r3, #0]
				if (numberOfTries >= maxTries){
 8004df0:	7803      	ldrb	r3, [r0, #0]
 8004df2:	f04f 0a01 	mov.w	sl, #1
 8004df6:	2b06      	cmp	r3, #6
					pressureCompensation = OFF;
 8004df8:	bf8b      	itete	hi
 8004dfa:	4b8d      	ldrhi	r3, [pc, #564]	; (8005030 <xAnalyzeTask+0x294>)
					numberOfTries += 1;
 8004dfc:	3301      	addls	r3, #1
					pressureCompensation = OFF;
 8004dfe:	701a      	strbhi	r2, [r3, #0]
					numberOfTries += 1;
 8004e00:	7003      	strbls	r3, [r0, #0]
 8004e02:	4b8a      	ldr	r3, [pc, #552]	; (800502c <xAnalyzeTask+0x290>)
 8004e04:	498b      	ldr	r1, [pc, #556]	; (8005034 <xAnalyzeTask+0x298>)
 8004e06:	781e      	ldrb	r6, [r3, #0]
	uint8_t numOfAxles = 0;
 8004e08:	f04f 0300 	mov.w	r3, #0
 8004e0c:	461c      	mov	r4, r3
							pressIsLower[i] = 0;
 8004e0e:	469b      	mov	fp, r3
					startPressure[i] = filteredData[i];
 8004e10:	4f89      	ldr	r7, [pc, #548]	; (8005038 <xAnalyzeTask+0x29c>)
					deltaPressure = nessPressure[i] - filteredData[i];
 8004e12:	f8df 822c 	ldr.w	r8, [pc, #556]	; 8005040 <xAnalyzeTask+0x2a4>
					numberOfTries = 0;
 8004e16:	bf88      	it	hi
 8004e18:	7002      	strbhi	r2, [r0, #0]
					startPressure[i] = filteredData[i];
 8004e1a:	f10d 0c20 	add.w	ip, sp, #32
 8004e1e:	f837 5013 	ldrh.w	r5, [r7, r3, lsl #1]
					deltaPressure = nessPressure[i] - filteredData[i];
 8004e22:	f838 e013 	ldrh.w	lr, [r8, r3, lsl #1]
					startPressure[i] = filteredData[i];
 8004e26:	f82c 5013 	strh.w	r5, [ip, r3, lsl #1]
					deltaPressure = nessPressure[i] - filteredData[i];
 8004e2a:	ebae 0205 	sub.w	r2, lr, r5
					deltaPressure = abs(deltaPressure);
 8004e2e:	b212      	sxth	r2, r2
 8004e30:	2a00      	cmp	r2, #0
 8004e32:	bfb8      	it	lt
 8004e34:	4252      	neglt	r2, r2
					if (deltaPressure > pressureThreshold){
 8004e36:	b212      	sxth	r2, r2
 8004e38:	2a1e      	cmp	r2, #30
 8004e3a:	dd1a      	ble.n	8004e72 <xAnalyzeTask+0xd6>
 8004e3c:	2401      	movs	r4, #1
						workState = WORKING;
 8004e3e:	4626      	mov	r6, r4
						if (nessPressure[i] > filteredData[i])
 8004e40:	4575      	cmp	r5, lr
							pressIsLower[i] = 1;
 8004e42:	bf34      	ite	cc
 8004e44:	f881 a000 	strbcc.w	sl, [r1]
							pressIsLower[i] = 0;
 8004e48:	f881 b000 	strbcs.w	fp, [r1]
 8004e4c:	3301      	adds	r3, #1
				for (i = 0; i < 4; i++){
 8004e4e:	2b04      	cmp	r3, #4
 8004e50:	f101 0101 	add.w	r1, r1, #1
 8004e54:	d1e3      	bne.n	8004e1e <xAnalyzeTask+0x82>
 8004e56:	b10c      	cbz	r4, 8004e5c <xAnalyzeTask+0xc0>
 8004e58:	4b74      	ldr	r3, [pc, #464]	; (800502c <xAnalyzeTask+0x290>)
 8004e5a:	701e      	strb	r6, [r3, #0]
					}
				}

				//finish compensation
				if (workState == FREE){
 8004e5c:	4b73      	ldr	r3, [pc, #460]	; (800502c <xAnalyzeTask+0x290>)
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	b953      	cbnz	r3, 8004e78 <xAnalyzeTask+0xdc>
					pressureCompensation = OFF;
 8004e62:	4a73      	ldr	r2, [pc, #460]	; (8005030 <xAnalyzeTask+0x294>)
					impTime[0] = 0;
 8004e64:	930a      	str	r3, [sp, #40]	; 0x28
					pressureCompensation = OFF;
 8004e66:	7013      	strb	r3, [r2, #0]
					impTime[1] = 0;
 8004e68:	930b      	str	r3, [sp, #44]	; 0x2c
					impTime[2] = 0;
 8004e6a:	930c      	str	r3, [sp, #48]	; 0x30
					impTime[3] = 0;
 8004e6c:	930d      	str	r3, [sp, #52]	; 0x34
					numberOfTries = 0;
 8004e6e:	7003      	strb	r3, [r0, #0]
					continue;
 8004e70:	e7aa      	b.n	8004dc8 <xAnalyzeTask+0x2c>
						pressIsLower[i] = -1;
 8004e72:	f881 9000 	strb.w	r9, [r1]
 8004e76:	e7e9      	b.n	8004e4c <xAnalyzeTask+0xb0>
				}


				switch (waysType){
 8004e78:	4b70      	ldr	r3, [pc, #448]	; (800503c <xAnalyzeTask+0x2a0>)
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	3b01      	subs	r3, #1
 8004e80:	2b05      	cmp	r3, #5
 8004e82:	d811      	bhi.n	8004ea8 <xAnalyzeTask+0x10c>
 8004e84:	e8df f003 	tbb	[pc, r3]
 8004e88:	30290903 	.word	0x30290903
 8004e8c:	3c35      	.short	0x3c35
					case 1:{
						numOfAxles = 1;
						numOfWays[0] = 1;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	f88d 301c 	strb.w	r3, [sp, #28]
						break;
					}
					case 4:{
						numOfAxles = 2;
						numOfWays[0] = 2;
						numOfWays[1] = 1;
 8004e94:	f88d 201d 	strb.w	r2, [sp, #29]
 8004e98:	e005      	b.n	8004ea6 <xAnalyzeTask+0x10a>
						numOfWays[0] = 2;
 8004e9a:	2302      	movs	r3, #2
 8004e9c:	f88d 301c 	strb.w	r3, [sp, #28]
						numOfAxles = 1;
 8004ea0:	2301      	movs	r3, #1
						numOfWays[1] = 0;
 8004ea2:	f88d 201d 	strb.w	r2, [sp, #29]
						numOfWays[0] = 1;
						numOfWays[1] = 2;
						break;
					}
					case 6:{
						numOfAxles = 2;
 8004ea6:	9300      	str	r3, [sp, #0]
					messageLength = sprintf(message, "[INFO] ---IMP DATA---\n");
					HAL_UART_Transmit(&huart1, (uint8_t*)message, messageLength, 0xFFFF);
				#endif


				for (axleCounter = 0; axleCounter < numOfAxles; axleCounter++){
 8004ea8:	2700      	movs	r7, #0
 8004eaa:	9b00      	ldr	r3, [sp, #0]
 8004eac:	b2fd      	uxtb	r5, r7
 8004eae:	42ab      	cmp	r3, r5
 8004eb0:	f240 80ea 	bls.w	8005088 <xAnalyzeTask+0x2ec>
					for (wayCounter = 0; wayCounter < numOfWays[axleCounter]; wayCounter++){
						i = axleCounter + axleCounter*numOfWays[0] + wayCounter;
 8004eb4:	f04f 0a00 	mov.w	sl, #0
					for (wayCounter = 0; wayCounter < numOfWays[axleCounter]; wayCounter++){
 8004eb8:	ab07      	add	r3, sp, #28
 8004eba:	5cfb      	ldrb	r3, [r7, r3]
							else if (impTime[i] == 0) impTime[i] = 500;
							else if (impTime[i] > 10000) impTime[i] = 10000;
							else if (impTime[i] > 30000) impTime[i] = 500;
						}
						else{
							impTime[i] = 0;
 8004ebc:	46d1      	mov	r9, sl
					for (wayCounter = 0; wayCounter < numOfWays[axleCounter]; wayCounter++){
 8004ebe:	9301      	str	r3, [sp, #4]
						i = axleCounter + axleCounter*numOfWays[0] + wayCounter;
 8004ec0:	f89d 301c 	ldrb.w	r3, [sp, #28]
							impTime[i] = (int32_t)(controllerSettings.impDownCoeff[i] * (float)deltaPressure);
 8004ec4:	f8df 8184 	ldr.w	r8, [pc, #388]	; 800504c <xAnalyzeTask+0x2b0>
						i = axleCounter + axleCounter*numOfWays[0] + wayCounter;
 8004ec8:	9302      	str	r3, [sp, #8]
 8004eca:	3301      	adds	r3, #1
 8004ecc:	9303      	str	r3, [sp, #12]
 8004ece:	436b      	muls	r3, r5
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	9304      	str	r3, [sp, #16]
							else if (impTime[i] > 10000) impTime[i] = 10000;
 8004ed4:	f242 7610 	movw	r6, #10000	; 0x2710
 8004ed8:	e059      	b.n	8004f8e <xAnalyzeTask+0x1f2>
						numOfWays[0] = 1;
 8004eda:	2301      	movs	r3, #1
 8004edc:	f88d 301c 	strb.w	r3, [sp, #28]
						numOfWays[1] = 1;
 8004ee0:	f88d 301d 	strb.w	r3, [sp, #29]
						numOfAxles = 2;
 8004ee4:	2302      	movs	r3, #2
 8004ee6:	e7de      	b.n	8004ea6 <xAnalyzeTask+0x10a>
						numOfWays[0] = 2;
 8004ee8:	2302      	movs	r3, #2
						numOfWays[1] = 1;
 8004eea:	2201      	movs	r2, #1
						numOfWays[0] = 2;
 8004eec:	f88d 301c 	strb.w	r3, [sp, #28]
 8004ef0:	e7d0      	b.n	8004e94 <xAnalyzeTask+0xf8>
						numOfWays[0] = 1;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	f88d 301c 	strb.w	r3, [sp, #28]
						numOfWays[1] = 2;
 8004ef8:	2302      	movs	r3, #2
						numOfWays[1] = 2;
 8004efa:	f88d 301d 	strb.w	r3, [sp, #29]
 8004efe:	e7d2      	b.n	8004ea6 <xAnalyzeTask+0x10a>
						numOfWays[0] = 2;
 8004f00:	2302      	movs	r3, #2
 8004f02:	f88d 301c 	strb.w	r3, [sp, #28]
 8004f06:	e7f8      	b.n	8004efa <xAnalyzeTask+0x15e>
						deltaPressure = nessPressure[i] - filteredData[i];
 8004f08:	9b04      	ldr	r3, [sp, #16]
 8004f0a:	441c      	add	r4, r3
 8004f0c:	4b4c      	ldr	r3, [pc, #304]	; (8005040 <xAnalyzeTask+0x2a4>)
 8004f0e:	b2e4      	uxtb	r4, r4
 8004f10:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8004f14:	4b48      	ldr	r3, [pc, #288]	; (8005038 <xAnalyzeTask+0x29c>)
 8004f16:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8004f1a:	1ac0      	subs	r0, r0, r3
						if (pressIsLower[i] == 1){
 8004f1c:	4b45      	ldr	r3, [pc, #276]	; (8005034 <xAnalyzeTask+0x298>)
						deltaPressure = nessPressure[i] - filteredData[i];
 8004f1e:	b200      	sxth	r0, r0
						if (pressIsLower[i] == 1){
 8004f20:	f913 b004 	ldrsb.w	fp, [r3, r4]
 8004f24:	f1bb 0f01 	cmp.w	fp, #1
 8004f28:	d119      	bne.n	8004f5e <xAnalyzeTask+0x1c2>
							impTime[i] = (int32_t)(controllerSettings.impUpCoeff[i] * (float)deltaPressure);
 8004f2a:	f104 0b02 	add.w	fp, r4, #2
 8004f2e:	eb08 0b8b 	add.w	fp, r8, fp, lsl #2
 8004f32:	f7fb fedb 	bl	8000cec <__aeabi_i2f>
 8004f36:	f8db 1004 	ldr.w	r1, [fp, #4]
 8004f3a:	f7fb ff2b 	bl	8000d94 <__aeabi_fmul>
 8004f3e:	f7fc f8ef 	bl	8001120 <__aeabi_f2iz>
 8004f42:	00a4      	lsls	r4, r4, #2
							if (impTime[i] < 0) impTime[i] = 0;
 8004f44:	ab0e      	add	r3, sp, #56	; 0x38
 8004f46:	2800      	cmp	r0, #0
 8004f48:	441c      	add	r4, r3
 8004f4a:	da02      	bge.n	8004f52 <xAnalyzeTask+0x1b6>
							impTime[i] = 0;
 8004f4c:	f844 9c10 	str.w	r9, [r4, #-16]
 8004f50:	e01b      	b.n	8004f8a <xAnalyzeTask+0x1ee>
							else if (impTime[i] == 0) impTime[i] = 1000;
 8004f52:	d158      	bne.n	8005006 <xAnalyzeTask+0x26a>
 8004f54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
							else if (impTime[i] == 0) impTime[i] = 500;
 8004f58:	f844 3c10 	str.w	r3, [r4, #-16]
 8004f5c:	e015      	b.n	8004f8a <xAnalyzeTask+0x1ee>
						else if (pressIsLower[i] == 0){
 8004f5e:	f1bb 0f00 	cmp.w	fp, #0
 8004f62:	d157      	bne.n	8005014 <xAnalyzeTask+0x278>
							impTime[i] = (int32_t)(controllerSettings.impDownCoeff[i] * (float)deltaPressure);
 8004f64:	1da3      	adds	r3, r4, #6
 8004f66:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8004f6a:	9305      	str	r3, [sp, #20]
 8004f6c:	f7fb febe 	bl	8000cec <__aeabi_i2f>
 8004f70:	9b05      	ldr	r3, [sp, #20]
 8004f72:	00a4      	lsls	r4, r4, #2
 8004f74:	6859      	ldr	r1, [r3, #4]
 8004f76:	f7fb ff0d 	bl	8000d94 <__aeabi_fmul>
 8004f7a:	f7fc f8d1 	bl	8001120 <__aeabi_f2iz>
							if (impTime[i] < 0) impTime[i] = 0;
 8004f7e:	ab0e      	add	r3, sp, #56	; 0x38
 8004f80:	2800      	cmp	r0, #0
 8004f82:	441c      	add	r4, r3
 8004f84:	da3b      	bge.n	8004ffe <xAnalyzeTask+0x262>
 8004f86:	f844 bc10 	str.w	fp, [r4, #-16]
 8004f8a:	f10a 0a01 	add.w	sl, sl, #1
					for (wayCounter = 0; wayCounter < numOfWays[axleCounter]; wayCounter++){
 8004f8e:	9b01      	ldr	r3, [sp, #4]
 8004f90:	fa5f f48a 	uxtb.w	r4, sl
 8004f94:	42a3      	cmp	r3, r4
 8004f96:	d8b7      	bhi.n	8004f08 <xAnalyzeTask+0x16c>
						}
					}
					vTaskDelay(200);
 8004f98:	20c8      	movs	r0, #200	; 0xc8
 8004f9a:	f7ff fbf3 	bl	8004784 <vTaskDelay>

					if (pressureCompensation == OFF){
 8004f9e:	4b24      	ldr	r3, [pc, #144]	; (8005030 <xAnalyzeTask+0x294>)
 8004fa0:	781c      	ldrb	r4, [r3, #0]
 8004fa2:	2c00      	cmp	r4, #0
 8004fa4:	d054      	beq.n	8005050 <xAnalyzeTask+0x2b4>
 8004fa6:	f04f 0900 	mov.w	r9, #0
					}

					for (wayCounter = 0; wayCounter < numOfWays[axleCounter]; wayCounter++){
						i = axleCounter + axleCounter*numOfWays[0] + wayCounter;
						if (impTime[i] > 0){
							if (pressIsLower[i] == 1){
 8004faa:	4c22      	ldr	r4, [pc, #136]	; (8005034 <xAnalyzeTask+0x298>)
								HAL_GPIO_WritePin(UP_PORT[i], UP_PIN[i], GPIO_PIN_SET);
							}
							else if (pressIsLower[i] == 0){
								HAL_GPIO_WritePin(DOWN_PORT[i], DOWN_PIN[i], GPIO_PIN_SET);
 8004fac:	4e25      	ldr	r6, [pc, #148]	; (8005044 <xAnalyzeTask+0x2a8>)
 8004fae:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8005048 <xAnalyzeTask+0x2ac>
					for (wayCounter = 0; wayCounter < numOfWays[axleCounter]; wayCounter++){
 8004fb2:	9a01      	ldr	r2, [sp, #4]
 8004fb4:	fa5f f389 	uxtb.w	r3, r9
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	f0c0 80b5 	bcc.w	8005128 <xAnalyzeTask+0x38c>
							}
						}
					}

					impCounter = xTaskGetTickCount();
 8004fbe:	f7ff fad1 	bl	8004564 <xTaskGetTickCount>
 8004fc2:	4681      	mov	r9, r0
						vTaskDelay(20);
						dCounter = xTaskGetTickCount() - impCounter;

						stopImp = 0;
						for (wayCounter = 0; wayCounter < numOfWays[axleCounter]; wayCounter++){
							i = axleCounter + axleCounter*numOfWays[0] + wayCounter;
 8004fc4:	9b02      	ldr	r3, [sp, #8]
 8004fc6:	fb03 5505 	mla	r5, r3, r5, r5
						for (wayCounter = 0; wayCounter < numOfWays[axleCounter]; wayCounter++){
 8004fca:	f04f 0800 	mov.w	r8, #0
						vTaskDelay(20);
 8004fce:	2014      	movs	r0, #20
 8004fd0:	f7ff fbd8 	bl	8004784 <vTaskDelay>
						dCounter = xTaskGetTickCount() - impCounter;
 8004fd4:	f7ff fac6 	bl	8004564 <xTaskGetTickCount>
						stopImp = 0;
 8004fd8:	4646      	mov	r6, r8
							if(dCounter > impTime[i]){
								HAL_GPIO_WritePin(DOWN_PORT[i], DOWN_PIN[i], GPIO_PIN_RESET);
 8004fda:	f8df b068 	ldr.w	fp, [pc, #104]	; 8005044 <xAnalyzeTask+0x2a8>
						dCounter = xTaskGetTickCount() - impCounter;
 8004fde:	eba0 0a09 	sub.w	sl, r0, r9
						for (wayCounter = 0; wayCounter < numOfWays[axleCounter]; wayCounter++){
 8004fe2:	9b01      	ldr	r3, [sp, #4]
 8004fe4:	fa5f f488 	uxtb.w	r4, r8
 8004fe8:	429c      	cmp	r4, r3
 8004fea:	f0c0 80be 	bcc.w	800516a <xAnalyzeTask+0x3ce>
								HAL_GPIO_WritePin(UP_PORT[i], UP_PIN[i], GPIO_PIN_RESET);
								stopImp++;
							}
						}
						if (stopImp >= numOfWays[axleCounter]){
 8004fee:	429e      	cmp	r6, r3
 8004ff0:	d3eb      	bcc.n	8004fca <xAnalyzeTask+0x22e>
							break;
						}
					}
					vTaskDelay(1000);
 8004ff2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004ff6:	f7ff fbc5 	bl	8004784 <vTaskDelay>
 8004ffa:	3701      	adds	r7, #1
 8004ffc:	e755      	b.n	8004eaa <xAnalyzeTask+0x10e>
							else if (impTime[i] == 0) impTime[i] = 500;
 8004ffe:	d102      	bne.n	8005006 <xAnalyzeTask+0x26a>
 8005000:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8005004:	e7a8      	b.n	8004f58 <xAnalyzeTask+0x1bc>
							else if (impTime[i] > 10000) impTime[i] = 10000;
 8005006:	42b0      	cmp	r0, r6
							impTime[i] = (int32_t)(controllerSettings.impDownCoeff[i] * (float)deltaPressure);
 8005008:	bfd4      	ite	le
 800500a:	f844 0c10 	strle.w	r0, [r4, #-16]
							else if (impTime[i] > 10000) impTime[i] = 10000;
 800500e:	f844 6c10 	strgt.w	r6, [r4, #-16]
 8005012:	e7ba      	b.n	8004f8a <xAnalyzeTask+0x1ee>
							impTime[i] = 0;
 8005014:	ab0e      	add	r3, sp, #56	; 0x38
 8005016:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800501a:	e797      	b.n	8004f4c <xAnalyzeTask+0x1b0>
 800501c:	08008a48 	.word	0x08008a48
 8005020:	200053cc 	.word	0x200053cc
 8005024:	20005201 	.word	0x20005201
 8005028:	200051b3 	.word	0x200051b3
 800502c:	200052c6 	.word	0x200052c6
 8005030:	200052c2 	.word	0x200052c2
 8005034:	200052c7 	.word	0x200052c7
 8005038:	20005230 	.word	0x20005230
 800503c:	2000000c 	.word	0x2000000c
 8005040:	200052ba 	.word	0x200052ba
 8005044:	20000010 	.word	0x20000010
 8005048:	20000020 	.word	0x20000020
 800504c:	20005204 	.word	0x20005204
							HAL_GPIO_WritePin(DOWN_PORT[i], DOWN_PIN[i], GPIO_PIN_RESET);
 8005050:	4e5a      	ldr	r6, [pc, #360]	; (80051bc <xAnalyzeTask+0x420>)
 8005052:	4d5b      	ldr	r5, [pc, #364]	; (80051c0 <xAnalyzeTask+0x424>)
 8005054:	f836 1024 	ldrh.w	r1, [r6, r4, lsl #2]
 8005058:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 800505c:	2200      	movs	r2, #0
 800505e:	f7fd f9df 	bl	8002420 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(UP_PORT[i], UP_PIN[i], GPIO_PIN_RESET);
 8005062:	4b58      	ldr	r3, [pc, #352]	; (80051c4 <xAnalyzeTask+0x428>)
 8005064:	2200      	movs	r2, #0
 8005066:	f833 1024 	ldrh.w	r1, [r3, r4, lsl #2]
 800506a:	4b57      	ldr	r3, [pc, #348]	; (80051c8 <xAnalyzeTask+0x42c>)
 800506c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8005070:	3401      	adds	r4, #1
 8005072:	f7fd f9d5 	bl	8002420 <HAL_GPIO_WritePin>
						for (i = 0; i < 4; i++){
 8005076:	2c04      	cmp	r4, #4
 8005078:	d1ec      	bne.n	8005054 <xAnalyzeTask+0x2b8>
						impTime[0] = 0;
 800507a:	2300      	movs	r3, #0
						numberOfTries = 0;
 800507c:	4a53      	ldr	r2, [pc, #332]	; (80051cc <xAnalyzeTask+0x430>)
						impTime[0] = 0;
 800507e:	930a      	str	r3, [sp, #40]	; 0x28
						impTime[1] = 0;
 8005080:	930b      	str	r3, [sp, #44]	; 0x2c
						impTime[2] = 0;
 8005082:	930c      	str	r3, [sp, #48]	; 0x30
						impTime[3] = 0;
 8005084:	930d      	str	r3, [sp, #52]	; 0x34
						numberOfTries = 0;
 8005086:	7013      	strb	r3, [r2, #0]
				} //stepCounter
				if (pressureCompensation == OFF){
 8005088:	4b51      	ldr	r3, [pc, #324]	; (80051d0 <xAnalyzeTask+0x434>)
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	2b00      	cmp	r3, #0
 800508e:	f43f ae9b 	beq.w	8004dc8 <xAnalyzeTask+0x2c>
 8005092:	2200      	movs	r2, #0
				for (i = 0 ; i < 4; i++){
					if (impTime[i] > 500){
						deltaPressure = filteredData[i] - startPressure[i];
						deltaPressure = abs(deltaPressure);
						if (deltaPressure < 10){
							pressIsLower[i] = -1;
 8005094:	24ff      	movs	r4, #255	; 0xff
 8005096:	484f      	ldr	r0, [pc, #316]	; (80051d4 <xAnalyzeTask+0x438>)
						deltaPressure = filteredData[i] - startPressure[i];
 8005098:	a908      	add	r1, sp, #32
					if (impTime[i] > 500){
 800509a:	ab0a      	add	r3, sp, #40	; 0x28
 800509c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050a0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80050a4:	dd0d      	ble.n	80050c2 <xAnalyzeTask+0x326>
						deltaPressure = filteredData[i] - startPressure[i];
 80050a6:	4b4c      	ldr	r3, [pc, #304]	; (80051d8 <xAnalyzeTask+0x43c>)
 80050a8:	f831 5012 	ldrh.w	r5, [r1, r2, lsl #1]
 80050ac:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80050b0:	1b5b      	subs	r3, r3, r5
						deltaPressure = abs(deltaPressure);
 80050b2:	b21b      	sxth	r3, r3
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	bfb8      	it	lt
 80050b8:	425b      	neglt	r3, r3
						if (deltaPressure < 10){
 80050ba:	b21b      	sxth	r3, r3
 80050bc:	2b09      	cmp	r3, #9
							pressIsLower[i] = -1;
 80050be:	bfd8      	it	le
 80050c0:	5414      	strble	r4, [r2, r0]
 80050c2:	3201      	adds	r2, #1
				for (i = 0 ; i < 4; i++){
 80050c4:	2a04      	cmp	r2, #4
 80050c6:	d1e8      	bne.n	800509a <xAnalyzeTask+0x2fe>
 80050c8:	f04f 0800 	mov.w	r8, #0
 80050cc:	4c43      	ldr	r4, [pc, #268]	; (80051dc <xAnalyzeTask+0x440>)
#if DEBUG_SERIAL
	messageLength = sprintf(message, "[INFO] Results\n");
	HAL_UART_Transmit(&huart1, (uint8_t*)message, messageLength, 0xFFFF);
#endif
				for (i = 0 ; i < 4; i++){
					if (pressIsLower[i] >=0){
 80050ce:	4e41      	ldr	r6, [pc, #260]	; (80051d4 <xAnalyzeTask+0x438>)
						deltaPressure = filteredData[i] - startPressure[i];
 80050d0:	af08      	add	r7, sp, #32
					if (pressIsLower[i] >=0){
 80050d2:	f918 9006 	ldrsb.w	r9, [r8, r6]
 80050d6:	f1b9 0f00 	cmp.w	r9, #0
 80050da:	db1b      	blt.n	8005114 <xAnalyzeTask+0x378>
						impCoeff[i] = (float)impTime[i] / (float) deltaPressure;
 80050dc:	ab0a      	add	r3, sp, #40	; 0x28
 80050de:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80050e2:	f7fb fe03 	bl	8000cec <__aeabi_i2f>
						deltaPressure = filteredData[i] - startPressure[i];
 80050e6:	4b3c      	ldr	r3, [pc, #240]	; (80051d8 <xAnalyzeTask+0x43c>)
						impCoeff[i] = (float)impTime[i] / (float) deltaPressure;
 80050e8:	4605      	mov	r5, r0
						deltaPressure = filteredData[i] - startPressure[i];
 80050ea:	f833 0018 	ldrh.w	r0, [r3, r8, lsl #1]
 80050ee:	f837 3018 	ldrh.w	r3, [r7, r8, lsl #1]
 80050f2:	1ac0      	subs	r0, r0, r3
						impCoeff[i] = (float)impTime[i] / (float) deltaPressure;
 80050f4:	b200      	sxth	r0, r0
 80050f6:	f7fb fdf9 	bl	8000cec <__aeabi_i2f>
 80050fa:	4601      	mov	r1, r0
 80050fc:	4628      	mov	r0, r5
 80050fe:	f7fb fefd 	bl	8000efc <__aeabi_fdiv>
						if (pressIsLower[i] == 1){
 8005102:	f1b9 0f01 	cmp.w	r9, #1
						impCoeff[i] = (float)impTime[i] / (float) deltaPressure;
 8005106:	4605      	mov	r5, r0
						if (pressIsLower[i] == 1){
 8005108:	d14e      	bne.n	80051a8 <xAnalyzeTask+0x40c>
							if (impCoeff[i] >= 0.0)
 800510a:	2100      	movs	r1, #0
 800510c:	f7fb fff4 	bl	80010f8 <__aeabi_fcmpge>
 8005110:	b100      	cbz	r0, 8005114 <xAnalyzeTask+0x378>
								//controllerSettings.impUpCoeff[i] = (impCoeff[i] + controllerSettings.impUpCoeff[i]) / 2.0;
								controllerSettings.impUpCoeff[i] = impCoeff[i];
 8005112:	6025      	str	r5, [r4, #0]
 8005114:	f108 0801 	add.w	r8, r8, #1
				for (i = 0 ; i < 4; i++){
 8005118:	f1b8 0f04 	cmp.w	r8, #4
 800511c:	f104 0404 	add.w	r4, r4, #4
 8005120:	d1d7      	bne.n	80050d2 <xAnalyzeTask+0x336>
	messageLength = sprintf(message, "\t%d: %d\t%d\t%d\t%ld\t%d\t%d\n", i, nessPressure[i], startPressure[i], filteredData[i], impTime[i],(int)controllerSettings.impUpCoeff[i],(int)controllerSettings.impDownCoeff[i]);
	HAL_UART_Transmit(&huart1, (uint8_t*)message, messageLength, 0xFFFF);
#endif
					}
				}
				mWrite_flash();
 8005122:	f000 f977 	bl	8005414 <mWrite_flash>
 8005126:	e64f      	b.n	8004dc8 <xAnalyzeTask+0x2c>
						i = axleCounter + axleCounter*numOfWays[0] + wayCounter;
 8005128:	9a03      	ldr	r2, [sp, #12]
 800512a:	fb02 3305 	mla	r3, r2, r5, r3
						if (impTime[i] > 0){
 800512e:	aa0e      	add	r2, sp, #56	; 0x38
 8005130:	b2db      	uxtb	r3, r3
 8005132:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8005136:	f852 2c10 	ldr.w	r2, [r2, #-16]
 800513a:	2a00      	cmp	r2, #0
 800513c:	dd0a      	ble.n	8005154 <xAnalyzeTask+0x3b8>
							if (pressIsLower[i] == 1){
 800513e:	56e2      	ldrsb	r2, [r4, r3]
 8005140:	2a01      	cmp	r2, #1
 8005142:	d10a      	bne.n	800515a <xAnalyzeTask+0x3be>
								HAL_GPIO_WritePin(UP_PORT[i], UP_PIN[i], GPIO_PIN_SET);
 8005144:	491f      	ldr	r1, [pc, #124]	; (80051c4 <xAnalyzeTask+0x428>)
 8005146:	4820      	ldr	r0, [pc, #128]	; (80051c8 <xAnalyzeTask+0x42c>)
 8005148:	f831 1023 	ldrh.w	r1, [r1, r3, lsl #2]
 800514c:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
								HAL_GPIO_WritePin(DOWN_PORT[i], DOWN_PIN[i], GPIO_PIN_SET);
 8005150:	f7fd f966 	bl	8002420 <HAL_GPIO_WritePin>
 8005154:	f109 0901 	add.w	r9, r9, #1
 8005158:	e72b      	b.n	8004fb2 <xAnalyzeTask+0x216>
							else if (pressIsLower[i] == 0){
 800515a:	2a00      	cmp	r2, #0
 800515c:	d1fa      	bne.n	8005154 <xAnalyzeTask+0x3b8>
								HAL_GPIO_WritePin(DOWN_PORT[i], DOWN_PIN[i], GPIO_PIN_SET);
 800515e:	2201      	movs	r2, #1
 8005160:	f836 1023 	ldrh.w	r1, [r6, r3, lsl #2]
 8005164:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 8005168:	e7f2      	b.n	8005150 <xAnalyzeTask+0x3b4>
							i = axleCounter + axleCounter*numOfWays[0] + wayCounter;
 800516a:	442c      	add	r4, r5
							if(dCounter > impTime[i]){
 800516c:	b2e4      	uxtb	r4, r4
 800516e:	ab0e      	add	r3, sp, #56	; 0x38
 8005170:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005174:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8005178:	459a      	cmp	sl, r3
 800517a:	d912      	bls.n	80051a2 <xAnalyzeTask+0x406>
								HAL_GPIO_WritePin(DOWN_PORT[i], DOWN_PIN[i], GPIO_PIN_RESET);
 800517c:	4b10      	ldr	r3, [pc, #64]	; (80051c0 <xAnalyzeTask+0x424>)
 800517e:	2200      	movs	r2, #0
 8005180:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8005184:	f83b 1024 	ldrh.w	r1, [fp, r4, lsl #2]
 8005188:	f7fd f94a 	bl	8002420 <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(UP_PORT[i], UP_PIN[i], GPIO_PIN_RESET);
 800518c:	4b0d      	ldr	r3, [pc, #52]	; (80051c4 <xAnalyzeTask+0x428>)
 800518e:	2200      	movs	r2, #0
 8005190:	f833 1024 	ldrh.w	r1, [r3, r4, lsl #2]
 8005194:	4b0c      	ldr	r3, [pc, #48]	; (80051c8 <xAnalyzeTask+0x42c>)
								stopImp++;
 8005196:	3601      	adds	r6, #1
								HAL_GPIO_WritePin(UP_PORT[i], UP_PIN[i], GPIO_PIN_RESET);
 8005198:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800519c:	f7fd f940 	bl	8002420 <HAL_GPIO_WritePin>
								stopImp++;
 80051a0:	b2f6      	uxtb	r6, r6
 80051a2:	f108 0801 	add.w	r8, r8, #1
 80051a6:	e71c      	b.n	8004fe2 <xAnalyzeTask+0x246>
						else if (pressIsLower[i] == 0){
 80051a8:	f1b9 0f00 	cmp.w	r9, #0
 80051ac:	d1b2      	bne.n	8005114 <xAnalyzeTask+0x378>
							if (impCoeff[i] <= 0.0)
 80051ae:	2100      	movs	r1, #0
 80051b0:	f7fb ff98 	bl	80010e4 <__aeabi_fcmple>
 80051b4:	2800      	cmp	r0, #0
 80051b6:	d0ad      	beq.n	8005114 <xAnalyzeTask+0x378>
								controllerSettings.impDownCoeff[i] = impCoeff[i];
 80051b8:	6125      	str	r5, [r4, #16]
 80051ba:	e7ab      	b.n	8005114 <xAnalyzeTask+0x378>
 80051bc:	20000010 	.word	0x20000010
 80051c0:	20000020 	.word	0x20000020
 80051c4:	20000030 	.word	0x20000030
 80051c8:	20000040 	.word	0x20000040
 80051cc:	200051b3 	.word	0x200051b3
 80051d0:	200052c2 	.word	0x200052c2
 80051d4:	200052c7 	.word	0x200052c7
 80051d8:	20005230 	.word	0x20005230
 80051dc:	20005210 	.word	0x20005210

080051e0 <xBlynkTask>:
extern uint16_t server_UID;
uint32_t unique_ID[3] = {0};

enum IndicationState indicationState = NORMAL_NC;

void xBlynkTask(void* arguments){
 80051e0:	b508      	push	{r3, lr}
	for(;;){
		if (indicationState == NORMAL_C){
 80051e2:	4d13      	ldr	r5, [pc, #76]	; (8005230 <xBlynkTask+0x50>)
 80051e4:	4c13      	ldr	r4, [pc, #76]	; (8005234 <xBlynkTask+0x54>)
 80051e6:	782b      	ldrb	r3, [r5, #0]
 80051e8:	b97b      	cbnz	r3, 800520a <xBlynkTask+0x2a>
			TIM3->CCR2 = 10000;
 80051ea:	f242 7310 	movw	r3, #10000	; 0x2710
 80051ee:	63a3      	str	r3, [r4, #56]	; 0x38
		else if (indicationState == COMPENSATION){
			TIM3->CCR2 = 10000;
			TIM3->CCR3 = 10000;
		}

		vTaskDelay(500 / portTICK_RATE_MS);
 80051f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80051f4:	f7ff fac6 	bl	8004784 <vTaskDelay>
		TIM3->CCR1 = 0;
 80051f8:	2300      	movs	r3, #0
		TIM3->CCR2 = 0;
		TIM3->CCR3 = 0;
		vTaskDelay(500 / portTICK_RATE_MS);
 80051fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
		TIM3->CCR1 = 0;
 80051fe:	6363      	str	r3, [r4, #52]	; 0x34
		TIM3->CCR2 = 0;
 8005200:	63a3      	str	r3, [r4, #56]	; 0x38
		TIM3->CCR3 = 0;
 8005202:	63e3      	str	r3, [r4, #60]	; 0x3c
		vTaskDelay(500 / portTICK_RATE_MS);
 8005204:	f7ff fabe 	bl	8004784 <vTaskDelay>
		if (indicationState == NORMAL_C){
 8005208:	e7ed      	b.n	80051e6 <xBlynkTask+0x6>
		else if (indicationState == NORMAL_NC){
 800520a:	2b01      	cmp	r3, #1
 800520c:	d103      	bne.n	8005216 <xBlynkTask+0x36>
			TIM3->CCR1 = 10000;
 800520e:	f242 7310 	movw	r3, #10000	; 0x2710
 8005212:	6363      	str	r3, [r4, #52]	; 0x34
 8005214:	e7ec      	b.n	80051f0 <xBlynkTask+0x10>
		else if (indicationState == SEARCH){
 8005216:	2b02      	cmp	r3, #2
 8005218:	d103      	bne.n	8005222 <xBlynkTask+0x42>
			TIM3->CCR3 = 10000;
 800521a:	f242 7310 	movw	r3, #10000	; 0x2710
			TIM3->CCR3 = 10000;
 800521e:	63e3      	str	r3, [r4, #60]	; 0x3c
 8005220:	e7e6      	b.n	80051f0 <xBlynkTask+0x10>
		else if (indicationState == COMPENSATION){
 8005222:	2b03      	cmp	r3, #3
 8005224:	d1e4      	bne.n	80051f0 <xBlynkTask+0x10>
			TIM3->CCR2 = 10000;
 8005226:	f242 7310 	movw	r3, #10000	; 0x2710
 800522a:	63a3      	str	r3, [r4, #56]	; 0x38
 800522c:	e7f7      	b.n	800521e <xBlynkTask+0x3e>
 800522e:	bf00      	nop
 8005230:	2000000d 	.word	0x2000000d
 8005234:	40000400 	.word	0x40000400

08005238 <controller_init>:
	}
	vTaskDelete(NULL);
}

void controller_init(){
 8005238:	b537      	push	{r0, r1, r2, r4, r5, lr}
	mRead_flash();
	if(controllerSettings.rfChannel > 120){
 800523a:	4c38      	ldr	r4, [pc, #224]	; (800531c <controller_init+0xe4>)
	mRead_flash();
 800523c:	f000 f924 	bl	8005488 <mRead_flash>
	if(controllerSettings.rfChannel > 120){
 8005240:	7823      	ldrb	r3, [r4, #0]
		controllerSettings.rfChannel = 1;
	}

	HAL_GetUID(unique_ID);
 8005242:	4d37      	ldr	r5, [pc, #220]	; (8005320 <controller_init+0xe8>)
	if(controllerSettings.rfChannel > 120){
 8005244:	2b78      	cmp	r3, #120	; 0x78
		controllerSettings.rfChannel = 1;
 8005246:	bf88      	it	hi
 8005248:	2301      	movhi	r3, #1
	HAL_GetUID(unique_ID);
 800524a:	4628      	mov	r0, r5
		controllerSettings.rfChannel = 1;
 800524c:	bf88      	it	hi
 800524e:	7023      	strbhi	r3, [r4, #0]
	HAL_GetUID(unique_ID);
 8005250:	f7fc f96e 	bl	8001530 <HAL_GetUID>

	server_UID = (unique_ID[0] + unique_ID[1] + unique_ID[2]) / 65536;
 8005254:	e895 000c 	ldmia.w	r5, {r2, r3}
 8005258:	4413      	add	r3, r2
 800525a:	68aa      	ldr	r2, [r5, #8]

	init_rf433(controllerSettings.rfChannel); //TODO: change to more common
 800525c:	7820      	ldrb	r0, [r4, #0]
	server_UID = (unique_ID[0] + unique_ID[1] + unique_ID[2]) / 65536;
 800525e:	4413      	add	r3, r2
 8005260:	4a30      	ldr	r2, [pc, #192]	; (8005324 <controller_init+0xec>)
 8005262:	0c1b      	lsrs	r3, r3, #16
 8005264:	8013      	strh	r3, [r2, #0]
	init_rf433(controllerSettings.rfChannel); //TODO: change to more common
 8005266:	f000 f881 	bl	800536c <init_rf433>
//	sprintf(message, "ID: %ld\r\n", server_UID);
//				HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), 0xFFFF);
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800526a:	2100      	movs	r1, #0
 800526c:	482e      	ldr	r0, [pc, #184]	; (8005328 <controller_init+0xf0>)
 800526e:	f7fd ff9f 	bl	80031b0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8005272:	2104      	movs	r1, #4
 8005274:	482c      	ldr	r0, [pc, #176]	; (8005328 <controller_init+0xf0>)
 8005276:	f7fd ff9b 	bl	80031b0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800527a:	2108      	movs	r1, #8
 800527c:	482a      	ldr	r0, [pc, #168]	; (8005328 <controller_init+0xf0>)
 800527e:	f7fd ff97 	bl	80031b0 <HAL_TIM_PWM_Start>
	HAL_UART_Receive_IT(&huart1, &recCommandByte, 1);
 8005282:	2201      	movs	r2, #1
 8005284:	4929      	ldr	r1, [pc, #164]	; (800532c <controller_init+0xf4>)
 8005286:	482a      	ldr	r0, [pc, #168]	; (8005330 <controller_init+0xf8>)
 8005288:	f7fe f92a 	bl	80034e0 <HAL_UART_Receive_IT>
	HAL_ADCEx_InjectedStart_IT(&hadc1);
 800528c:	4829      	ldr	r0, [pc, #164]	; (8005334 <controller_init+0xfc>)
 800528e:	f7fc fb35 	bl	80018fc <HAL_ADCEx_InjectedStart_IT>

	vSemaphoreCreateBinary(xPressureCompensationSemaphore);
 8005292:	2203      	movs	r2, #3
 8005294:	2100      	movs	r1, #0
 8005296:	2001      	movs	r0, #1
 8005298:	f7fe fdf0 	bl	8003e7c <xQueueGenericCreate>
 800529c:	4a26      	ldr	r2, [pc, #152]	; (8005338 <controller_init+0x100>)
 800529e:	6010      	str	r0, [r2, #0]
 80052a0:	b120      	cbz	r0, 80052ac <controller_init+0x74>
 80052a2:	2300      	movs	r3, #0
 80052a4:	461a      	mov	r2, r3
 80052a6:	4619      	mov	r1, r3
 80052a8:	f7fe fe0a 	bl	8003ec0 <xQueueGenericSend>
		uint32_t fre=xPortGetFreeHeapSize();
		sprintf(message, "Free heap: %ld\r\n", fre);
		HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), 0xFFFF);
	#endif

	xTaskCreate(xBlynkTask,
 80052ac:	2400      	movs	r4, #0
 80052ae:	2501      	movs	r5, #1
 80052b0:	4623      	mov	r3, r4
 80052b2:	9401      	str	r4, [sp, #4]
 80052b4:	9500      	str	r5, [sp, #0]
 80052b6:	22c8      	movs	r2, #200	; 0xc8
 80052b8:	4920      	ldr	r1, [pc, #128]	; (800533c <controller_init+0x104>)
 80052ba:	4821      	ldr	r0, [pc, #132]	; (8005340 <controller_init+0x108>)
 80052bc:	f7ff f83e 	bl	800433c <xTaskCreate>
		fre=xPortGetFreeHeapSize();
		sprintf(message, "heap after Blynk: %ld\r\n", fre);
		HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), 0xFFFF);
	#endif

	xTaskCreate(xScanInputTask,
 80052c0:	4623      	mov	r3, r4
 80052c2:	9401      	str	r4, [sp, #4]
 80052c4:	9500      	str	r5, [sp, #0]
 80052c6:	22c8      	movs	r2, #200	; 0xc8
 80052c8:	491e      	ldr	r1, [pc, #120]	; (8005344 <controller_init+0x10c>)
 80052ca:	481f      	ldr	r0, [pc, #124]	; (8005348 <controller_init+0x110>)
 80052cc:	f7ff f836 	bl	800433c <xTaskCreate>
		fre=xPortGetFreeHeapSize();
		sprintf(message, "heap after Scan: %ld\r\n", fre);
		HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), 0xFFFF);
	#endif

	xTaskCreate(xStoreADCDataTask,
 80052d0:	4623      	mov	r3, r4
 80052d2:	9401      	str	r4, [sp, #4]
 80052d4:	9500      	str	r5, [sp, #0]
 80052d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052da:	491c      	ldr	r1, [pc, #112]	; (800534c <controller_init+0x114>)
 80052dc:	481c      	ldr	r0, [pc, #112]	; (8005350 <controller_init+0x118>)
 80052de:	f7ff f82d 	bl	800433c <xTaskCreate>
		fre=xPortGetFreeHeapSize();
		sprintf(message, "heap after SADCData: %ld\r\n", fre);
		HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), 0xFFFF);
	#endif

	xTaskCreate(xProcessCommandTask,
 80052e2:	2303      	movs	r3, #3
 80052e4:	9401      	str	r4, [sp, #4]
 80052e6:	9300      	str	r3, [sp, #0]
 80052e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052ec:	4623      	mov	r3, r4
 80052ee:	4919      	ldr	r1, [pc, #100]	; (8005354 <controller_init+0x11c>)
 80052f0:	4819      	ldr	r0, [pc, #100]	; (8005358 <controller_init+0x120>)
 80052f2:	f7ff f823 	bl	800433c <xTaskCreate>
		fre=xPortGetFreeHeapSize();
		sprintf(message, "heap after ProcCmd: %ld\r\n", fre);
		HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), 0xFFFF);
	#endif

	xTaskCreate(xAnalyzeTask,
 80052f6:	4623      	mov	r3, r4
 80052f8:	9401      	str	r4, [sp, #4]
 80052fa:	9500      	str	r5, [sp, #0]
 80052fc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005300:	4916      	ldr	r1, [pc, #88]	; (800535c <controller_init+0x124>)
 8005302:	4817      	ldr	r0, [pc, #92]	; (8005360 <controller_init+0x128>)
 8005304:	f7ff f81a 	bl	800433c <xTaskCreate>
		fre=xPortGetFreeHeapSize();
		sprintf(message, "heap after AnTask: %ld\r\n", fre);
		HAL_UART_Transmit(&huart1, (uint8_t*) message, strlen(message), 0xFFFF);
	#endif

	xRecCommandQueue = xQueueCreate(COMMAND_QUEUE_SIZE, MAX_COMMAND_LENGTH);
 8005308:	4622      	mov	r2, r4
 800530a:	2140      	movs	r1, #64	; 0x40
 800530c:	2002      	movs	r0, #2
 800530e:	f7fe fdb5 	bl	8003e7c <xQueueGenericCreate>
 8005312:	4b14      	ldr	r3, [pc, #80]	; (8005364 <controller_init+0x12c>)
 8005314:	6018      	str	r0, [r3, #0]
	#if DEBUG_SERIAL
		fre=xPortGetFreeHeapSize();
		sprintf(message, "heap after queue: %ld\r\n", fre);
		HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), 0xFFFF);
	#endif
}
 8005316:	b003      	add	sp, #12
 8005318:	bd30      	pop	{r4, r5, pc}
 800531a:	bf00      	nop
 800531c:	20005204 	.word	0x20005204
 8005320:	200051b4 	.word	0x200051b4
 8005324:	200052c4 	.word	0x200052c4
 8005328:	2000538c 	.word	0x2000538c
 800532c:	20005494 	.word	0x20005494
 8005330:	20005444 	.word	0x20005444
 8005334:	20005414 	.word	0x20005414
 8005338:	200053cc 	.word	0x200053cc
 800533c:	08008a69 	.word	0x08008a69
 8005340:	080051e1 	.word	0x080051e1
 8005344:	08008a6f 	.word	0x08008a6f
 8005348:	08005b8d 	.word	0x08005b8d
 800534c:	08008a74 	.word	0x08008a74
 8005350:	08004bc1 	.word	0x08004bc1
 8005354:	08008a7d 	.word	0x08008a7d
 8005358:	0800581d 	.word	0x0800581d
 800535c:	08008a85 	.word	0x08008a85
 8005360:	08004d9d 	.word	0x08004d9d
 8005364:	20005490 	.word	0x20005490

08005368 <print_debug>:
extern UART_HandleTypeDef huart1;

char debugMessage[64] = {};
uint8_t debugMessageLength = 0;

void print_debug(char* msg){
 8005368:	4770      	bx	lr
	...

0800536c <init_rf433>:
		debugMessageLength = sprintf(debugMessage, "%s", msg);
		HAL_UART_Transmit(&huart1, (uint8_t*) debugMessage, debugMessageLength, 0x2000);
	#endif
}

void init_rf433(uint8_t channel){
 800536c:	b538      	push	{r3, r4, r5, lr}
 800536e:	4605      	mov	r5, r0
	CMD_RF_ON;
	HAL_Delay(50);

	HAL_UART_Transmit(&huart1, (uint8_t*) "AT+FU1\r", 7, 0x2000);
 8005370:	4c21      	ldr	r4, [pc, #132]	; (80053f8 <init_rf433+0x8c>)
	CMD_RF_ON;
 8005372:	2200      	movs	r2, #0
 8005374:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005378:	4820      	ldr	r0, [pc, #128]	; (80053fc <init_rf433+0x90>)
 800537a:	f7fd f851 	bl	8002420 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800537e:	2032      	movs	r0, #50	; 0x32
 8005380:	f7fc f8c4 	bl	800150c <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*) "AT+FU1\r", 7, 0x2000);
 8005384:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005388:	2207      	movs	r2, #7
 800538a:	491d      	ldr	r1, [pc, #116]	; (8005400 <init_rf433+0x94>)
 800538c:	4620      	mov	r0, r4
 800538e:	f7fe f84b 	bl	8003428 <HAL_UART_Transmit>
	HAL_Delay(200);
 8005392:	20c8      	movs	r0, #200	; 0xc8
 8005394:	f7fc f8ba 	bl	800150c <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*) "AT+B19200\r", 7, 0x2000);
 8005398:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800539c:	2207      	movs	r2, #7
 800539e:	4919      	ldr	r1, [pc, #100]	; (8005404 <init_rf433+0x98>)
 80053a0:	4620      	mov	r0, r4
 80053a2:	f7fe f841 	bl	8003428 <HAL_UART_Transmit>
	HAL_Delay(200);
 80053a6:	20c8      	movs	r0, #200	; 0xc8
 80053a8:	f7fc f8b0 	bl	800150c <HAL_Delay>
	debugMessageLength = sprintf(debugMessage, "AT+C%03d\r", channel);
 80053ac:	462a      	mov	r2, r5
 80053ae:	4916      	ldr	r1, [pc, #88]	; (8005408 <init_rf433+0x9c>)
 80053b0:	4816      	ldr	r0, [pc, #88]	; (800540c <init_rf433+0xa0>)
 80053b2:	f001 fa4b 	bl	800684c <siprintf>
 80053b6:	4b16      	ldr	r3, [pc, #88]	; (8005410 <init_rf433+0xa4>)
 80053b8:	b2c2      	uxtb	r2, r0
 80053ba:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (uint8_t*) debugMessage, debugMessageLength, 0x2000);
 80053bc:	4913      	ldr	r1, [pc, #76]	; (800540c <init_rf433+0xa0>)
 80053be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80053c2:	4620      	mov	r0, r4
 80053c4:	f7fe f830 	bl	8003428 <HAL_UART_Transmit>
	HAL_Delay(200);
 80053c8:	20c8      	movs	r0, #200	; 0xc8
 80053ca:	f7fc f89f 	bl	800150c <HAL_Delay>

	CMD_RF_OFF;
 80053ce:	2201      	movs	r2, #1
 80053d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80053d4:	4809      	ldr	r0, [pc, #36]	; (80053fc <init_rf433+0x90>)
 80053d6:	f7fd f823 	bl	8002420 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80053da:	2032      	movs	r0, #50	; 0x32
 80053dc:	f7fc f896 	bl	800150c <HAL_Delay>

	huart1.Init.BaudRate = 19200;
 80053e0:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
	if (HAL_UART_Init(&huart1) != HAL_OK){
 80053e4:	4620      	mov	r0, r4
	huart1.Init.BaudRate = 19200;
 80053e6:	6063      	str	r3, [r4, #4]
	if (HAL_UART_Init(&huart1) != HAL_OK){
 80053e8:	f7fd fff0 	bl	80033cc <HAL_UART_Init>
 80053ec:	b118      	cbz	r0, 80053f6 <init_rf433+0x8a>
		Error_Handler();
	}
}
 80053ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		Error_Handler();
 80053f2:	f000 ba11 	b.w	8005818 <Error_Handler>
 80053f6:	bd38      	pop	{r3, r4, r5, pc}
 80053f8:	20005444 	.word	0x20005444
 80053fc:	40010800 	.word	0x40010800
 8005400:	08008a8b 	.word	0x08008a8b
 8005404:	08008a93 	.word	0x08008a93
 8005408:	08008a9e 	.word	0x08008a9e
 800540c:	200051c0 	.word	0x200051c0
 8005410:	20005200 	.word	0x20005200

08005414 <mWrite_flash>:

#define CONTROLLER_LENGTH_WORDS		(sizeof(controllerSettings)	/ 4)

extern struct controllerData controllerSettings;

void mWrite_flash(void){
 8005414:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005416:	b087      	sub	sp, #28
	FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t pageError;
	uint16_t i;

	HAL_FLASH_Unlock();
 8005418:	f7fc fe1e 	bl	8002058 <HAL_FLASH_Unlock>

	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 800541c:	2300      	movs	r3, #0
 800541e:	9302      	str	r3, [sp, #8]
	EraseInitStruct.PageAddress = SETTINGS_FLASH_PAGE_ADDR;
 8005420:	4b13      	ldr	r3, [pc, #76]	; (8005470 <mWrite_flash+0x5c>)
	EraseInitStruct.NbPages = 1;

	if(HAL_FLASHEx_Erase(&EraseInitStruct, &pageError) != HAL_OK){
 8005422:	a901      	add	r1, sp, #4
	EraseInitStruct.PageAddress = SETTINGS_FLASH_PAGE_ADDR;
 8005424:	9304      	str	r3, [sp, #16]
	EraseInitStruct.NbPages = 1;
 8005426:	2301      	movs	r3, #1
	if(HAL_FLASHEx_Erase(&EraseInitStruct, &pageError) != HAL_OK){
 8005428:	a802      	add	r0, sp, #8
	EraseInitStruct.NbPages = 1;
 800542a:	9305      	str	r3, [sp, #20]
	if(HAL_FLASHEx_Erase(&EraseInitStruct, &pageError) != HAL_OK){
 800542c:	f7fc fec4 	bl	80021b8 <HAL_FLASHEx_Erase>
 8005430:	b110      	cbz	r0, 8005438 <mWrite_flash+0x24>
		print_debug("Erase Flash Error\n");
 8005432:	4810      	ldr	r0, [pc, #64]	; (8005474 <mWrite_flash+0x60>)
 8005434:	f7ff ff98 	bl	8005368 <print_debug>
void mWrite_flash(void){
 8005438:	4c0d      	ldr	r4, [pc, #52]	; (8005470 <mWrite_flash+0x5c>)
	}

	uint32_t *source_addr = (void *)&controllerSettings;
	uint32_t *dest_addr = (uint32_t *) SETTINGS_FLASH_PAGE_ADDR;
	for (i=0; i<CONTROLLER_LENGTH_WORDS; i++) {
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,(uint32_t)dest_addr, *source_addr)!= HAL_OK){
 800543a:	4e0f      	ldr	r6, [pc, #60]	; (8005478 <mWrite_flash+0x64>)
			print_debug("Write Flash Error\n");
 800543c:	4f0f      	ldr	r7, [pc, #60]	; (800547c <mWrite_flash+0x68>)
	for (i=0; i<CONTROLLER_LENGTH_WORDS; i++) {
 800543e:	4d10      	ldr	r5, [pc, #64]	; (8005480 <mWrite_flash+0x6c>)
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,(uint32_t)dest_addr, *source_addr)!= HAL_OK){
 8005440:	f104 4378 	add.w	r3, r4, #4160749568	; 0xf8000000
 8005444:	f5a3 33fe 	sub.w	r3, r3, #130048	; 0x1fc00
 8005448:	599a      	ldr	r2, [r3, r6]
 800544a:	4621      	mov	r1, r4
 800544c:	2300      	movs	r3, #0
 800544e:	2002      	movs	r0, #2
 8005450:	f7fc fe48 	bl	80020e4 <HAL_FLASH_Program>
 8005454:	b110      	cbz	r0, 800545c <mWrite_flash+0x48>
			print_debug("Write Flash Error\n");
 8005456:	4638      	mov	r0, r7
 8005458:	f7ff ff86 	bl	8005368 <print_debug>
		}
		source_addr++;
		dest_addr++;
 800545c:	3404      	adds	r4, #4
	for (i=0; i<CONTROLLER_LENGTH_WORDS; i++) {
 800545e:	42ac      	cmp	r4, r5
 8005460:	d1ee      	bne.n	8005440 <mWrite_flash+0x2c>
	}

	HAL_FLASH_Lock();
 8005462:	f7fc fe0b 	bl	800207c <HAL_FLASH_Lock>
	print_debug("Flash ok\n");
 8005466:	4807      	ldr	r0, [pc, #28]	; (8005484 <mWrite_flash+0x70>)
 8005468:	f7ff ff7e 	bl	8005368 <print_debug>
}
 800546c:	b007      	add	sp, #28
 800546e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005470:	0801fc00 	.word	0x0801fc00
 8005474:	08008ac3 	.word	0x08008ac3
 8005478:	20005204 	.word	0x20005204
 800547c:	08008ad6 	.word	0x08008ad6
 8005480:	0801fc2c 	.word	0x0801fc2c
 8005484:	08008ae9 	.word	0x08008ae9

08005488 <mRead_flash>:

void mRead_flash(void){
	print_debug("reading flash\n");
 8005488:	480a      	ldr	r0, [pc, #40]	; (80054b4 <mRead_flash+0x2c>)
void mRead_flash(void){
 800548a:	b510      	push	{r4, lr}
	print_debug("reading flash\n");
 800548c:	f7ff ff6c 	bl	8005368 <print_debug>

	uint32_t *source_addr = (uint32_t *)SETTINGS_FLASH_PAGE_ADDR;
 8005490:	4b09      	ldr	r3, [pc, #36]	; (80054b8 <mRead_flash+0x30>)
    uint32_t *dest_addr = (void*)&controllerSettings;

    for (uint16_t i=0; i<CONTROLLER_LENGTH_WORDS; i++) {
        *dest_addr = *(__IO uint32_t*)source_addr;
 8005492:	480a      	ldr	r0, [pc, #40]	; (80054bc <mRead_flash+0x34>)
    for (uint16_t i=0; i<CONTROLLER_LENGTH_WORDS; i++) {
 8005494:	490a      	ldr	r1, [pc, #40]	; (80054c0 <mRead_flash+0x38>)
        *dest_addr = *(__IO uint32_t*)source_addr;
 8005496:	681c      	ldr	r4, [r3, #0]
 8005498:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
        source_addr++;
 800549c:	3304      	adds	r3, #4
        *dest_addr = *(__IO uint32_t*)source_addr;
 800549e:	f5a2 32fe 	sub.w	r2, r2, #130048	; 0x1fc00
    for (uint16_t i=0; i<CONTROLLER_LENGTH_WORDS; i++) {
 80054a2:	428b      	cmp	r3, r1
        *dest_addr = *(__IO uint32_t*)source_addr;
 80054a4:	5014      	str	r4, [r2, r0]
    for (uint16_t i=0; i<CONTROLLER_LENGTH_WORDS; i++) {
 80054a6:	d1f6      	bne.n	8005496 <mRead_flash+0xe>
        dest_addr++;
    }

    print_debug("Flash read\n");
 80054a8:	4806      	ldr	r0, [pc, #24]	; (80054c4 <mRead_flash+0x3c>)
}
 80054aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    print_debug("Flash read\n");
 80054ae:	f7ff bf5b 	b.w	8005368 <print_debug>
 80054b2:	bf00      	nop
 80054b4:	08008aa8 	.word	0x08008aa8
 80054b8:	0801fc00 	.word	0x0801fc00
 80054bc:	20005204 	.word	0x20005204
 80054c0:	0801fc2c 	.word	0x0801fc2c
 80054c4:	08008ab7 	.word	0x08008ab7

080054c8 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80054c8:	2238      	movs	r2, #56	; 0x38
{
 80054ca:	b530      	push	{r4, r5, lr}
 80054cc:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80054ce:	eb0d 0002 	add.w	r0, sp, r2
 80054d2:	2100      	movs	r1, #0
 80054d4:	f000 fd51 	bl	8005f7a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80054d8:	2214      	movs	r2, #20
 80054da:	2100      	movs	r1, #0
 80054dc:	a801      	add	r0, sp, #4
 80054de:	f000 fd4c 	bl	8005f7a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80054e2:	2220      	movs	r2, #32
 80054e4:	2100      	movs	r1, #0
 80054e6:	a806      	add	r0, sp, #24
 80054e8:	f000 fd47 	bl	8005f7a <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80054ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80054f0:	2402      	movs	r4, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80054f2:	2501      	movs	r5, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80054f4:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80054f6:	9317      	str	r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80054f8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80054fc:	a80e      	add	r0, sp, #56	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80054fe:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005500:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005502:	9513      	str	r5, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005504:	9416      	str	r4, [sp, #88]	; 0x58
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005506:	f7fc ff91 	bl	800242c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800550a:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800550c:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005510:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005512:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005514:	4621      	mov	r1, r4
 8005516:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005518:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800551a:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800551c:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800551e:	9402      	str	r4, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005520:	f7fd f9d2 	bl	80028c8 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8005524:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005528:	a806      	add	r0, sp, #24
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800552a:	9308      	str	r3, [sp, #32]
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800552c:	9406      	str	r4, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800552e:	f7fd fa9d 	bl	8002a6c <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
  /** Configure the Systick interrupt time 
  */
  __HAL_RCC_PLLI2S_ENABLE();
 8005532:	4b02      	ldr	r3, [pc, #8]	; (800553c <SystemClock_Config+0x74>)
 8005534:	601d      	str	r5, [r3, #0]
}
 8005536:	b01d      	add	sp, #116	; 0x74
 8005538:	bd30      	pop	{r4, r5, pc}
 800553a:	bf00      	nop
 800553c:	42420070 	.word	0x42420070

08005540 <main>:
{
 8005540:	b580      	push	{r7, lr}
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005542:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005544:	f44f 7880 	mov.w	r8, #256	; 0x100
{
 8005548:	b092      	sub	sp, #72	; 0x48
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800554a:	4d80      	ldr	r5, [pc, #512]	; (800574c <main+0x20c>)
  HAL_Init();
 800554c:	f7fb ffba 	bl	80014c4 <HAL_Init>
  SystemClock_Config();
 8005550:	f7ff ffba 	bl	80054c8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005554:	2210      	movs	r2, #16
 8005556:	2100      	movs	r1, #0
 8005558:	a80a      	add	r0, sp, #40	; 0x28
 800555a:	f000 fd0e 	bl	8005f7a <memset>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800555e:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8005560:	2201      	movs	r2, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005562:	f043 0320 	orr.w	r3, r3, #32
 8005566:	61ab      	str	r3, [r5, #24]
 8005568:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 800556a:	f44f 6100 	mov.w	r1, #2048	; 0x800
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800556e:	f003 0320 	and.w	r3, r3, #32
 8005572:	9301      	str	r3, [sp, #4]
 8005574:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005576:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8005578:	4875      	ldr	r0, [pc, #468]	; (8005750 <main+0x210>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800557a:	f043 0304 	orr.w	r3, r3, #4
 800557e:	61ab      	str	r3, [r5, #24]
 8005580:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005582:	2601      	movs	r6, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005584:	f003 0304 	and.w	r3, r3, #4
 8005588:	9302      	str	r3, [sp, #8]
 800558a:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800558c:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800558e:	2704      	movs	r7, #4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005590:	f043 0308 	orr.w	r3, r3, #8
 8005594:	61ab      	str	r3, [r5, #24]
 8005596:	69ab      	ldr	r3, [r5, #24]
 8005598:	f003 0308 	and.w	r3, r3, #8
 800559c:	9303      	str	r3, [sp, #12]
 800559e:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80055a0:	f7fc ff3e 	bl	8002420 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 80055a4:	2200      	movs	r2, #0
 80055a6:	2104      	movs	r1, #4
 80055a8:	486a      	ldr	r0, [pc, #424]	; (8005754 <main+0x214>)
 80055aa:	f7fc ff39 	bl	8002420 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
 80055ae:	2200      	movs	r2, #0
 80055b0:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 80055b4:	4868      	ldr	r0, [pc, #416]	; (8005758 <main+0x218>)
 80055b6:	f7fc ff33 	bl	8002420 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055ba:	a90a      	add	r1, sp, #40	; 0x28
 80055bc:	4864      	ldr	r0, [pc, #400]	; (8005750 <main+0x210>)
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80055be:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80055c2:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055c4:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055c6:	f7fc fe45 	bl	8002254 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80055ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055ce:	a90a      	add	r1, sp, #40	; 0x28
 80055d0:	485f      	ldr	r0, [pc, #380]	; (8005750 <main+0x210>)
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80055d2:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80055d4:	960b      	str	r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80055d6:	960d      	str	r6, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055d8:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055da:	f7fc fe3b 	bl	8002254 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80055de:	a90a      	add	r1, sp, #40	; 0x28
 80055e0:	485c      	ldr	r0, [pc, #368]	; (8005754 <main+0x214>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80055e2:	960b      	str	r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80055e4:	960d      	str	r6, [sp, #52]	; 0x34
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80055e6:	970a      	str	r7, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055e8:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80055ea:	f7fc fe33 	bl	8002254 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 PB6 
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
 80055ee:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055f2:	a90a      	add	r1, sp, #40	; 0x28
 80055f4:	4858      	ldr	r0, [pc, #352]	; (8005758 <main+0x218>)
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
 80055f6:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80055f8:	960b      	str	r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80055fa:	960d      	str	r6, [sp, #52]	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055fc:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055fe:	f7fc fe29 	bl	8002254 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005602:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8005604:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005606:	4333      	orrs	r3, r6
 8005608:	616b      	str	r3, [r5, #20]
 800560a:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 800560c:	2105      	movs	r1, #5
  __HAL_RCC_DMA1_CLK_ENABLE();
 800560e:	4033      	ands	r3, r6
 8005610:	9300      	str	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8005612:	200e      	movs	r0, #14
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005614:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8005616:	f7fc fad9 	bl	8001bcc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800561a:	200e      	movs	r0, #14
 800561c:	f7fc fb0a 	bl	8001c34 <HAL_NVIC_EnableIRQ>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8005620:	2220      	movs	r2, #32
 8005622:	4621      	mov	r1, r4
 8005624:	a80a      	add	r0, sp, #40	; 0x28
  hadc1.Instance = ADC1;
 8005626:	4d4d      	ldr	r5, [pc, #308]	; (800575c <main+0x21c>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8005628:	9406      	str	r4, [sp, #24]
 800562a:	9407      	str	r4, [sp, #28]
 800562c:	9408      	str	r4, [sp, #32]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800562e:	f000 fca4 	bl	8005f7a <memset>
  hadc1.Instance = ADC1;
 8005632:	4b4b      	ldr	r3, [pc, #300]	; (8005760 <main+0x220>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005634:	4628      	mov	r0, r5
  hadc1.Instance = ADC1;
 8005636:	602b      	str	r3, [r5, #0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005638:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  hadc1.Init.NbrOfConversion = 1;
 800563c:	612e      	str	r6, [r5, #16]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800563e:	61eb      	str	r3, [r5, #28]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8005640:	f8c5 8008 	str.w	r8, [r5, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8005644:	60ec      	str	r4, [r5, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005646:	616c      	str	r4, [r5, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005648:	606c      	str	r4, [r5, #4]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800564a:	f7fc f8d7 	bl	80017fc <HAL_ADC_Init>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800564e:	a906      	add	r1, sp, #24
 8005650:	4628      	mov	r0, r5
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005652:	9607      	str	r6, [sp, #28]
  sConfig.Channel = ADC_CHANNEL_0;
 8005654:	9406      	str	r4, [sp, #24]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8005656:	9408      	str	r4, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005658:	f7fb fff2 	bl	8001640 <HAL_ADC_ConfigChannel>
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800565c:	2307      	movs	r3, #7
 800565e:	930c      	str	r3, [sp, #48]	; 0x30
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8005660:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8005664:	a90a      	add	r1, sp, #40	; 0x28
 8005666:	4628      	mov	r0, r5
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8005668:	9311      	str	r3, [sp, #68]	; 0x44
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 800566a:	960b      	str	r6, [sp, #44]	; 0x2c
  sConfigInjected.InjectedChannel = ADC_CHANNEL_0;
 800566c:	940a      	str	r4, [sp, #40]	; 0x28
  sConfigInjected.InjectedNbrOfConversion = 4;
 800566e:	970e      	str	r7, [sp, #56]	; 0x38
  sConfigInjected.AutoInjectedConv = DISABLE;
 8005670:	9410      	str	r4, [sp, #64]	; 0x40
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8005672:	940f      	str	r4, [sp, #60]	; 0x3c
  sConfigInjected.InjectedOffset = 0;
 8005674:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8005676:	f7fc f9ab 	bl	80019d0 <HAL_ADCEx_InjectedConfigChannel>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 800567a:	960a      	str	r6, [sp, #40]	; 0x28
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 800567c:	2602      	movs	r6, #2
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800567e:	a90a      	add	r1, sp, #40	; 0x28
 8005680:	4628      	mov	r0, r5
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8005682:	960b      	str	r6, [sp, #44]	; 0x2c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8005684:	f7fc f9a4 	bl	80019d0 <HAL_ADCEx_InjectedConfigChannel>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 8005688:	960a      	str	r6, [sp, #40]	; 0x28
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 800568a:	2603      	movs	r6, #3
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800568c:	a90a      	add	r1, sp, #40	; 0x28
 800568e:	4628      	mov	r0, r5
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8005690:	960b      	str	r6, [sp, #44]	; 0x2c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8005692:	f7fc f99d 	bl	80019d0 <HAL_ADCEx_InjectedConfigChannel>
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8005696:	a90a      	add	r1, sp, #40	; 0x28
 8005698:	4628      	mov	r0, r5
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 800569a:	960a      	str	r6, [sp, #40]	; 0x28
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_4;
 800569c:	970b      	str	r7, [sp, #44]	; 0x2c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800569e:	f7fc f997 	bl	80019d0 <HAL_ADCEx_InjectedConfigChannel>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80056a2:	2210      	movs	r2, #16
 80056a4:	4621      	mov	r1, r4
 80056a6:	a806      	add	r0, sp, #24
 80056a8:	f000 fc67 	bl	8005f7a <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80056ac:	221c      	movs	r2, #28
 80056ae:	4621      	mov	r1, r4
 80056b0:	a80a      	add	r0, sp, #40	; 0x28
  htim3.Instance = TIM3;
 80056b2:	4d2c      	ldr	r5, [pc, #176]	; (8005764 <main+0x224>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80056b4:	9404      	str	r4, [sp, #16]
 80056b6:	9405      	str	r4, [sp, #20]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80056b8:	f000 fc5f 	bl	8005f7a <memset>
  htim3.Instance = TIM3;
 80056bc:	4b2a      	ldr	r3, [pc, #168]	; (8005768 <main+0x228>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80056be:	4628      	mov	r0, r5
  htim3.Init.Prescaler = 0;
 80056c0:	e885 0018 	stmia.w	r5, {r3, r4}
  htim3.Init.Period = 65535;
 80056c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80056c8:	60ac      	str	r4, [r5, #8]
  htim3.Init.Period = 65535;
 80056ca:	60eb      	str	r3, [r5, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80056cc:	612c      	str	r4, [r5, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80056ce:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80056d0:	f7fd fca0 	bl	8003014 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80056d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80056d8:	a906      	add	r1, sp, #24
 80056da:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80056dc:	9306      	str	r3, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80056de:	f7fd faf8 	bl	8002cd2 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80056e2:	4628      	mov	r0, r5
 80056e4:	f7fd fcb0 	bl	8003048 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80056e8:	a904      	add	r1, sp, #16
 80056ea:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80056ec:	9404      	str	r4, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80056ee:	9405      	str	r4, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80056f0:	f7fd fd74 	bl	80031dc <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80056f4:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80056f6:	4622      	mov	r2, r4
 80056f8:	a90a      	add	r1, sp, #40	; 0x28
 80056fa:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80056fc:	930a      	str	r3, [sp, #40]	; 0x28
  sConfigOC.Pulse = 0;
 80056fe:	940b      	str	r4, [sp, #44]	; 0x2c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005700:	940c      	str	r4, [sp, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005702:	940e      	str	r4, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005704:	f7fd fce6 	bl	80030d4 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005708:	463a      	mov	r2, r7
 800570a:	a90a      	add	r1, sp, #40	; 0x28
 800570c:	4628      	mov	r0, r5
 800570e:	f7fd fce1 	bl	80030d4 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005712:	a90a      	add	r1, sp, #40	; 0x28
 8005714:	2208      	movs	r2, #8
 8005716:	4628      	mov	r0, r5
 8005718:	f7fd fcdc 	bl	80030d4 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim3);
 800571c:	4628      	mov	r0, r5
 800571e:	f000 faf5 	bl	8005d0c <HAL_TIM_MspPostInit>
  huart1.Init.BaudRate = 9600;
 8005722:	f44f 5316 	mov.w	r3, #9600	; 0x2580
  huart1.Instance = USART1;
 8005726:	4811      	ldr	r0, [pc, #68]	; (800576c <main+0x22c>)
  huart1.Init.BaudRate = 9600;
 8005728:	4a11      	ldr	r2, [pc, #68]	; (8005770 <main+0x230>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800572a:	6084      	str	r4, [r0, #8]
  huart1.Init.BaudRate = 9600;
 800572c:	e880 000c 	stmia.w	r0, {r2, r3}
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005730:	230c      	movs	r3, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005732:	60c4      	str	r4, [r0, #12]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005734:	6143      	str	r3, [r0, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005736:	6104      	str	r4, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005738:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800573a:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800573c:	f7fd fe46 	bl	80033cc <HAL_UART_Init>
  controller_init();
 8005740:	f7ff fd7a 	bl	8005238 <controller_init>
  osKernelStart();
 8005744:	f7fe f85a 	bl	80037fc <osKernelStart>
 8005748:	e7fe      	b.n	8005748 <main+0x208>
 800574a:	bf00      	nop
 800574c:	40021000 	.word	0x40021000
 8005750:	40010800 	.word	0x40010800
 8005754:	40011400 	.word	0x40011400
 8005758:	40010c00 	.word	0x40010c00
 800575c:	20005414 	.word	0x20005414
 8005760:	40012400 	.word	0x40012400
 8005764:	2000538c 	.word	0x2000538c
 8005768:	40000400 	.word	0x40000400
 800576c:	20005444 	.word	0x20005444
 8005770:	40013800 	.word	0x40013800

08005774 <HAL_UART_RxCpltCallback>:
}

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
	if(huart->Instance == USART1){
 8005774:	6802      	ldr	r2, [r0, #0]
 8005776:	4b14      	ldr	r3, [pc, #80]	; (80057c8 <HAL_UART_RxCpltCallback+0x54>)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8005778:	b513      	push	{r0, r1, r4, lr}
	if(huart->Instance == USART1){
 800577a:	429a      	cmp	r2, r3
 800577c:	d122      	bne.n	80057c4 <HAL_UART_RxCpltCallback+0x50>
		if (recCommandByte != '\r'){
 800577e:	4b13      	ldr	r3, [pc, #76]	; (80057cc <HAL_UART_RxCpltCallback+0x58>)
 8005780:	781a      	ldrb	r2, [r3, #0]
 8005782:	2a0d      	cmp	r2, #13
 8005784:	d019      	beq.n	80057ba <HAL_UART_RxCpltCallback+0x46>
			recCommandBuffer[p_recCommandBuffer] = recCommandByte;
 8005786:	4c12      	ldr	r4, [pc, #72]	; (80057d0 <HAL_UART_RxCpltCallback+0x5c>)
 8005788:	4912      	ldr	r1, [pc, #72]	; (80057d4 <HAL_UART_RxCpltCallback+0x60>)
 800578a:	7823      	ldrb	r3, [r4, #0]
 800578c:	54ca      	strb	r2, [r1, r3]
			p_recCommandBuffer++;
 800578e:	3301      	adds	r3, #1
 8005790:	b2db      	uxtb	r3, r3

			if (p_recCommandBuffer == MAX_COMMAND_LENGTH) p_recCommandBuffer = 0;
 8005792:	2b40      	cmp	r3, #64	; 0x40
 8005794:	bf08      	it	eq
 8005796:	2300      	moveq	r3, #0

			if(recCommandByte == '\n'){
 8005798:	2a0a      	cmp	r2, #10
			if (p_recCommandBuffer == MAX_COMMAND_LENGTH) p_recCommandBuffer = 0;
 800579a:	7023      	strb	r3, [r4, #0]
			if(recCommandByte == '\n'){
 800579c:	d10d      	bne.n	80057ba <HAL_UART_RxCpltCallback+0x46>
				memcpy(commandToProcessBuffer, recCommandBuffer, p_recCommandBuffer);
 800579e:	7822      	ldrb	r2, [r4, #0]
 80057a0:	490c      	ldr	r1, [pc, #48]	; (80057d4 <HAL_UART_RxCpltCallback+0x60>)
 80057a2:	480d      	ldr	r0, [pc, #52]	; (80057d8 <HAL_UART_RxCpltCallback+0x64>)
 80057a4:	f000 fbde 	bl	8005f64 <memcpy>
				portBASE_TYPE r1;
				xQueueSendToBackFromISR(xRecCommandQueue, &commandToProcessBuffer, &r1);
 80057a8:	480c      	ldr	r0, [pc, #48]	; (80057dc <HAL_UART_RxCpltCallback+0x68>)
 80057aa:	2300      	movs	r3, #0
 80057ac:	aa01      	add	r2, sp, #4
 80057ae:	490a      	ldr	r1, [pc, #40]	; (80057d8 <HAL_UART_RxCpltCallback+0x64>)
 80057b0:	6800      	ldr	r0, [r0, #0]
 80057b2:	f7fe fc3b 	bl	800402c <xQueueGenericSendFromISR>
				p_recCommandBuffer = 0;
 80057b6:	2300      	movs	r3, #0
 80057b8:	7023      	strb	r3, [r4, #0]
//			else if (recCommandByte == 0xFF) {
//				p_recCommandBuffer = 0;
//			}
		}

		HAL_UART_Receive_IT(&huart1, &recCommandByte, 1);
 80057ba:	2201      	movs	r2, #1
 80057bc:	4903      	ldr	r1, [pc, #12]	; (80057cc <HAL_UART_RxCpltCallback+0x58>)
 80057be:	4808      	ldr	r0, [pc, #32]	; (80057e0 <HAL_UART_RxCpltCallback+0x6c>)
 80057c0:	f7fd fe8e 	bl	80034e0 <HAL_UART_Receive_IT>
	}
}
 80057c4:	b002      	add	sp, #8
 80057c6:	bd10      	pop	{r4, pc}
 80057c8:	40013800 	.word	0x40013800
 80057cc:	20005494 	.word	0x20005494
 80057d0:	2000548e 	.word	0x2000548e
 80057d4:	20005300 	.word	0x20005300
 80057d8:	20005340 	.word	0x20005340
 80057dc:	20005490 	.word	0x20005490
 80057e0:	20005444 	.word	0x20005444

080057e4 <HAL_ADCEx_InjectedConvCpltCallback>:

void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc1){
 80057e4:	b538      	push	{r3, r4, r5, lr}
	  ADCRawData[0]=HAL_ADCEx_InjectedGetValue(hadc1,ADC_INJECTED_RANK_1);
 80057e6:	2101      	movs	r1, #1
void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc1){
 80057e8:	4605      	mov	r5, r0
	  ADCRawData[0]=HAL_ADCEx_InjectedGetValue(hadc1,ADC_INJECTED_RANK_1);
 80057ea:	f7fc f8e1 	bl	80019b0 <HAL_ADCEx_InjectedGetValue>
 80057ee:	4c09      	ldr	r4, [pc, #36]	; (8005814 <HAL_ADCEx_InjectedConvCpltCallback+0x30>)
	  ADCRawData[1]=HAL_ADCEx_InjectedGetValue(hadc1,ADC_INJECTED_RANK_2);
 80057f0:	2102      	movs	r1, #2
	  ADCRawData[0]=HAL_ADCEx_InjectedGetValue(hadc1,ADC_INJECTED_RANK_1);
 80057f2:	8020      	strh	r0, [r4, #0]
	  ADCRawData[1]=HAL_ADCEx_InjectedGetValue(hadc1,ADC_INJECTED_RANK_2);
 80057f4:	4628      	mov	r0, r5
 80057f6:	f7fc f8db 	bl	80019b0 <HAL_ADCEx_InjectedGetValue>
	  ADCRawData[2]=HAL_ADCEx_InjectedGetValue(hadc1,ADC_INJECTED_RANK_3);
 80057fa:	2103      	movs	r1, #3
	  ADCRawData[1]=HAL_ADCEx_InjectedGetValue(hadc1,ADC_INJECTED_RANK_2);
 80057fc:	8060      	strh	r0, [r4, #2]
	  ADCRawData[2]=HAL_ADCEx_InjectedGetValue(hadc1,ADC_INJECTED_RANK_3);
 80057fe:	4628      	mov	r0, r5
 8005800:	f7fc f8d6 	bl	80019b0 <HAL_ADCEx_InjectedGetValue>
	  ADCRawData[3]=HAL_ADCEx_InjectedGetValue(hadc1,ADC_INJECTED_RANK_4);
 8005804:	2104      	movs	r1, #4
	  ADCRawData[2]=HAL_ADCEx_InjectedGetValue(hadc1,ADC_INJECTED_RANK_3);
 8005806:	80a0      	strh	r0, [r4, #4]
	  ADCRawData[3]=HAL_ADCEx_InjectedGetValue(hadc1,ADC_INJECTED_RANK_4);
 8005808:	4628      	mov	r0, r5
 800580a:	f7fc f8d1 	bl	80019b0 <HAL_ADCEx_InjectedGetValue>
 800580e:	80e0      	strh	r0, [r4, #6]
 8005810:	bd38      	pop	{r3, r4, r5, pc}
 8005812:	bf00      	nop
 8005814:	20005384 	.word	0x20005384

08005818 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005818:	4770      	bx	lr
	...

0800581c <xProcessCommandTask>:
extern uint8_t lastTimeCommand;

extern uint16_t server_UID;
extern enum AirSystemType airSystem;

void xProcessCommandTask(void* arguments){
 800581c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	portBASE_TYPE xStatus;
	uint8_t command[MAX_COMMAND_LENGTH] = {0};

	uint16_t id = 0;
 8005820:	2500      	movs	r5, #0
void xProcessCommandTask(void* arguments){
 8005822:	b097      	sub	sp, #92	; 0x5c
	uint8_t command[MAX_COMMAND_LENGTH] = {0};
 8005824:	2240      	movs	r2, #64	; 0x40
 8005826:	2100      	movs	r1, #0
 8005828:	a806      	add	r0, sp, #24
#endif
							pressureCompensation = OFF;
						}
					}
					else if (command[1] == ','){
						sscanf((char*)command, "s,%hu,%hu,%hu,%hu,%hu,%c,\n", &id, 	&nessPressure[0],
 800582a:	f8df a358 	ldr.w	sl, [pc, #856]	; 8005b84 <xProcessCommandTask+0x368>
								mWrite_flash();
								messageLength = sprintf(message, "xc,%05d,ok,\n", controllerSettings.clientID);
								HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);

								vTaskDelay(200 / portTICK_RATE_MS);
								CMD_RF_ON;
 800582e:	f8df 9358 	ldr.w	r9, [pc, #856]	; 8005b88 <xProcessCommandTask+0x36c>
	uint8_t command[MAX_COMMAND_LENGTH] = {0};
 8005832:	f000 fba2 	bl	8005f7a <memset>
	uint16_t id = 0;
 8005836:	f8ad 5014 	strh.w	r5, [sp, #20]
	char co = 0;
 800583a:	f88d 5011 	strb.w	r5, [sp, #17]
	char outputState = 0;
 800583e:	f88d 5012 	strb.w	r5, [sp, #18]
	uint16_t channel = 0;
 8005842:	f8ad 5016 	strh.w	r5, [sp, #22]
	char systemType = 0;
 8005846:	f88d 5013 	strb.w	r5, [sp, #19]
		xStatus = xQueueReceive(xRecCommandQueue, command, portMAX_DELAY);
 800584a:	4cb4      	ldr	r4, [pc, #720]	; (8005b1c <xProcessCommandTask+0x300>)
 800584c:	2300      	movs	r3, #0
 800584e:	f04f 32ff 	mov.w	r2, #4294967295
 8005852:	a906      	add	r1, sp, #24
 8005854:	6820      	ldr	r0, [r4, #0]
 8005856:	f7fe fc4b 	bl	80040f0 <xQueueGenericReceive>
		if (xStatus == pdPASS){
 800585a:	2801      	cmp	r0, #1
		xStatus = xQueueReceive(xRecCommandQueue, command, portMAX_DELAY);
 800585c:	4606      	mov	r6, r0
		if (xStatus == pdPASS){
 800585e:	d1f5      	bne.n	800584c <xProcessCommandTask+0x30>
			lastTimeCommand = 0;
 8005860:	2400      	movs	r4, #0
 8005862:	4baf      	ldr	r3, [pc, #700]	; (8005b20 <xProcessCommandTask+0x304>)
 8005864:	701c      	strb	r4, [r3, #0]
			switch(command[0]){
 8005866:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800586a:	2b73      	cmp	r3, #115	; 0x73
 800586c:	f000 8092 	beq.w	8005994 <xProcessCommandTask+0x178>
 8005870:	2b78      	cmp	r3, #120	; 0x78
 8005872:	f000 80d8 	beq.w	8005a26 <xProcessCommandTask+0x20a>
 8005876:	2b6d      	cmp	r3, #109	; 0x6d
 8005878:	d1e7      	bne.n	800584a <xProcessCommandTask+0x2e>
					if (indicationState != SEARCH){
 800587a:	4baa      	ldr	r3, [pc, #680]	; (8005b24 <xProcessCommandTask+0x308>)
					sscanf((char*)command, "m,%hu,%c,%c,\n", &id, &co, &outputState);
 800587c:	49aa      	ldr	r1, [pc, #680]	; (8005b28 <xProcessCommandTask+0x30c>)
					if (indicationState != SEARCH){
 800587e:	781a      	ldrb	r2, [r3, #0]
					sscanf((char*)command, "m,%hu,%c,%c,\n", &id, &co, &outputState);
 8005880:	a806      	add	r0, sp, #24
					if (indicationState != SEARCH){
 8005882:	2a02      	cmp	r2, #2
						indicationState = NORMAL_C;
 8005884:	bf18      	it	ne
 8005886:	701c      	strbne	r4, [r3, #0]
					sscanf((char*)command, "m,%hu,%c,%c,\n", &id, &co, &outputState);
 8005888:	f10d 0312 	add.w	r3, sp, #18
 800588c:	9300      	str	r3, [sp, #0]
 800588e:	aa05      	add	r2, sp, #20
 8005890:	f10d 0311 	add.w	r3, sp, #17
 8005894:	f000 fffe 	bl	8006894 <siscanf>
					outputState = command[10];
 8005898:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
					if (id == server_UID){
 800589c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
					outputState = command[10];
 80058a0:	f88d 3012 	strb.w	r3, [sp, #18]
					if (id == server_UID){
 80058a4:	4ba1      	ldr	r3, [pc, #644]	; (8005b2c <xProcessCommandTask+0x310>)
 80058a6:	881b      	ldrh	r3, [r3, #0]
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d1ce      	bne.n	800584a <xProcessCommandTask+0x2e>
						if (pressureCompensation == ON){
 80058ac:	4ca0      	ldr	r4, [pc, #640]	; (8005b30 <xProcessCommandTask+0x314>)
																						filteredData[SENS_1],
 80058ae:	49a1      	ldr	r1, [pc, #644]	; (8005b34 <xProcessCommandTask+0x318>)
						if (pressureCompensation == ON){
 80058b0:	7820      	ldrb	r0, [r4, #0]
						messageLength = sprintf(message, "m,%hu,%hu,%hu,%hu,%hu,%c,\n", 	controllerSettings.clientID,
 80058b2:	4aa1      	ldr	r2, [pc, #644]	; (8005b38 <xProcessCommandTask+0x31c>)
						if (pressureCompensation == ON){
 80058b4:	1e46      	subs	r6, r0, #1
 80058b6:	4270      	negs	r0, r6
 80058b8:	4170      	adcs	r0, r6
						messageLength = sprintf(message, "m,%hu,%hu,%hu,%hu,%hu,%c,\n", 	controllerSettings.clientID,
 80058ba:	880b      	ldrh	r3, [r1, #0]
 80058bc:	8892      	ldrh	r2, [r2, #4]
 80058be:	9003      	str	r0, [sp, #12]
 80058c0:	88c8      	ldrh	r0, [r1, #6]
 80058c2:	9002      	str	r0, [sp, #8]
 80058c4:	8888      	ldrh	r0, [r1, #4]
 80058c6:	9001      	str	r0, [sp, #4]
 80058c8:	8849      	ldrh	r1, [r1, #2]
 80058ca:	489c      	ldr	r0, [pc, #624]	; (8005b3c <xProcessCommandTask+0x320>)
 80058cc:	9100      	str	r1, [sp, #0]
 80058ce:	499c      	ldr	r1, [pc, #624]	; (8005b40 <xProcessCommandTask+0x324>)
 80058d0:	f000 ffbc 	bl	800684c <siprintf>
 80058d4:	4b9b      	ldr	r3, [pc, #620]	; (8005b44 <xProcessCommandTask+0x328>)
 80058d6:	b2c2      	uxtb	r2, r0
						HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);
 80058d8:	4998      	ldr	r1, [pc, #608]	; (8005b3c <xProcessCommandTask+0x320>)
 80058da:	489b      	ldr	r0, [pc, #620]	; (8005b48 <xProcessCommandTask+0x32c>)
						messageLength = sprintf(message, "m,%hu,%hu,%hu,%hu,%hu,%c,\n", 	controllerSettings.clientID,
 80058dc:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);
 80058de:	f7fd fe27 	bl	8003530 <HAL_UART_Transmit_DMA>
						if (outputState != prevOutputState){
 80058e2:	f89d 2012 	ldrb.w	r2, [sp, #18]
 80058e6:	4295      	cmp	r5, r2
 80058e8:	d0af      	beq.n	800584a <xProcessCommandTask+0x2e>
							pressureCompensation = OFF;
 80058ea:	2300      	movs	r3, #0
							if (outputState & 0b00000001) 	C1_UP_ON;
 80058ec:	f012 0201 	ands.w	r2, r2, #1
 80058f0:	bf18      	it	ne
 80058f2:	2201      	movne	r2, #1
							else 				   			C1_UP_OFF;
 80058f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80058f8:	4894      	ldr	r0, [pc, #592]	; (8005b4c <xProcessCommandTask+0x330>)
							pressureCompensation = OFF;
 80058fa:	7023      	strb	r3, [r4, #0]
							else 				   			C1_UP_OFF;
 80058fc:	f7fc fd90 	bl	8002420 <HAL_GPIO_WritePin>
							if (outputState & 0b00000010) 	C1_DOWN_ON;
 8005900:	f89d 2012 	ldrb.w	r2, [sp, #18]
							else 				   			C1_DOWN_OFF;
 8005904:	2180      	movs	r1, #128	; 0x80
							if (outputState & 0b00000010) 	C1_DOWN_ON;
 8005906:	f012 0202 	ands.w	r2, r2, #2
 800590a:	bf18      	it	ne
 800590c:	2201      	movne	r2, #1
							else 				   			C1_DOWN_OFF;
 800590e:	488f      	ldr	r0, [pc, #572]	; (8005b4c <xProcessCommandTask+0x330>)
 8005910:	f7fc fd86 	bl	8002420 <HAL_GPIO_WritePin>
							if (outputState & 0b00000100) 	C2_UP_ON;
 8005914:	f89d 2012 	ldrb.w	r2, [sp, #18]
							else 				   			C2_UP_OFF;
 8005918:	2120      	movs	r1, #32
							if (outputState & 0b00000100) 	C2_UP_ON;
 800591a:	f012 0204 	ands.w	r2, r2, #4
 800591e:	bf18      	it	ne
 8005920:	2201      	movne	r2, #1
							else 				   			C2_UP_OFF;
 8005922:	488a      	ldr	r0, [pc, #552]	; (8005b4c <xProcessCommandTask+0x330>)
 8005924:	f7fc fd7c 	bl	8002420 <HAL_GPIO_WritePin>
							if (outputState & 0b00001000) 	C2_DOWN_ON;
 8005928:	f89d 2012 	ldrb.w	r2, [sp, #18]
							else 				   			C2_DOWN_OFF;
 800592c:	2108      	movs	r1, #8
							if (outputState & 0b00001000) 	C2_DOWN_ON;
 800592e:	f012 0208 	ands.w	r2, r2, #8
 8005932:	bf18      	it	ne
 8005934:	2201      	movne	r2, #1
							else 				   			C2_DOWN_OFF;
 8005936:	4885      	ldr	r0, [pc, #532]	; (8005b4c <xProcessCommandTask+0x330>)
 8005938:	f7fc fd72 	bl	8002420 <HAL_GPIO_WritePin>
							if (outputState & 0b00010000) 	C3_UP_ON;
 800593c:	f89d 2012 	ldrb.w	r2, [sp, #18]
							else 				   			C3_UP_OFF;
 8005940:	f44f 7180 	mov.w	r1, #256	; 0x100
							if (outputState & 0b00010000) 	C3_UP_ON;
 8005944:	f012 0210 	ands.w	r2, r2, #16
 8005948:	bf18      	it	ne
 800594a:	2201      	movne	r2, #1
							else 				   			C3_UP_OFF;
 800594c:	487f      	ldr	r0, [pc, #508]	; (8005b4c <xProcessCommandTask+0x330>)
 800594e:	f7fc fd67 	bl	8002420 <HAL_GPIO_WritePin>
							if (outputState & 0b00100000) 	C3_DOWN_ON;
 8005952:	f89d 2012 	ldrb.w	r2, [sp, #18]
							else 				   			C3_DOWN_OFF;
 8005956:	2140      	movs	r1, #64	; 0x40
							if (outputState & 0b00100000) 	C3_DOWN_ON;
 8005958:	f012 0220 	ands.w	r2, r2, #32
 800595c:	bf18      	it	ne
 800595e:	2201      	movne	r2, #1
							else 				   			C3_DOWN_OFF;
 8005960:	487a      	ldr	r0, [pc, #488]	; (8005b4c <xProcessCommandTask+0x330>)
 8005962:	f7fc fd5d 	bl	8002420 <HAL_GPIO_WritePin>
							if (outputState & 0b01000000) 	C4_UP_ON;
 8005966:	f89d 2012 	ldrb.w	r2, [sp, #18]
							else 				   			C4_UP_OFF;
 800596a:	2110      	movs	r1, #16
							if (outputState & 0b01000000) 	C4_UP_ON;
 800596c:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 8005970:	bf18      	it	ne
 8005972:	2201      	movne	r2, #1
							else 				   			C4_UP_OFF;
 8005974:	4875      	ldr	r0, [pc, #468]	; (8005b4c <xProcessCommandTask+0x330>)
 8005976:	f7fc fd53 	bl	8002420 <HAL_GPIO_WritePin>
							if (outputState & 0b10000000) 	C4_DOWN_ON;
 800597a:	f99d 3012 	ldrsb.w	r3, [sp, #18]
							else 				   			C4_DOWN_OFF;
 800597e:	2104      	movs	r1, #4
							if (outputState & 0b10000000) 	C4_DOWN_ON;
 8005980:	2b00      	cmp	r3, #0
 8005982:	bfb4      	ite	lt
 8005984:	2201      	movlt	r2, #1
							else 				   			C4_DOWN_OFF;
 8005986:	2200      	movge	r2, #0
 8005988:	4871      	ldr	r0, [pc, #452]	; (8005b50 <xProcessCommandTask+0x334>)
 800598a:	f7fc fd49 	bl	8002420 <HAL_GPIO_WritePin>
							prevOutputState = outputState;
 800598e:	f89d 5012 	ldrb.w	r5, [sp, #18]
 8005992:	e75a      	b.n	800584a <xProcessCommandTask+0x2e>
					if (command[1] == 'x'){
 8005994:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8005998:	2b78      	cmp	r3, #120	; 0x78
 800599a:	d10e      	bne.n	80059ba <xProcessCommandTask+0x19e>
						sscanf((char*)command, "sx,%hu,\n", &id);
 800599c:	aa05      	add	r2, sp, #20
 800599e:	496d      	ldr	r1, [pc, #436]	; (8005b54 <xProcessCommandTask+0x338>)
 80059a0:	a806      	add	r0, sp, #24
 80059a2:	f000 ff77 	bl	8006894 <siscanf>
						if (id == server_UID){
 80059a6:	4b61      	ldr	r3, [pc, #388]	; (8005b2c <xProcessCommandTask+0x310>)
 80059a8:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80059ac:	881b      	ldrh	r3, [r3, #0]
 80059ae:	429a      	cmp	r2, r3
 80059b0:	f47f af4b 	bne.w	800584a <xProcessCommandTask+0x2e>
							pressureCompensation = OFF;
 80059b4:	4b5e      	ldr	r3, [pc, #376]	; (8005b30 <xProcessCommandTask+0x314>)
 80059b6:	701c      	strb	r4, [r3, #0]
 80059b8:	e747      	b.n	800584a <xProcessCommandTask+0x2e>
					else if (command[1] == ','){
 80059ba:	2b2c      	cmp	r3, #44	; 0x2c
 80059bc:	f47f af45 	bne.w	800584a <xProcessCommandTask+0x2e>
						sscanf((char*)command, "s,%hu,%hu,%hu,%hu,%hu,%c,\n", &id, 	&nessPressure[0],
 80059c0:	f10d 0313 	add.w	r3, sp, #19
 80059c4:	9303      	str	r3, [sp, #12]
 80059c6:	4b64      	ldr	r3, [pc, #400]	; (8005b58 <xProcessCommandTask+0x33c>)
 80059c8:	aa05      	add	r2, sp, #20
 80059ca:	1e9f      	subs	r7, r3, #2
 80059cc:	9301      	str	r3, [sp, #4]
 80059ce:	f8cd a008 	str.w	sl, [sp, #8]
 80059d2:	3b04      	subs	r3, #4
 80059d4:	9700      	str	r7, [sp, #0]
 80059d6:	4961      	ldr	r1, [pc, #388]	; (8005b5c <xProcessCommandTask+0x340>)
 80059d8:	a806      	add	r0, sp, #24
 80059da:	f000 ff5b 	bl	8006894 <siscanf>
						if (id == server_UID){
 80059de:	4b53      	ldr	r3, [pc, #332]	; (8005b2c <xProcessCommandTask+0x310>)
 80059e0:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80059e4:	881b      	ldrh	r3, [r3, #0]
 80059e6:	429a      	cmp	r2, r3
 80059e8:	f47f af2f 	bne.w	800584a <xProcessCommandTask+0x2e>
							if (systemType == '1'){ // air system choice
 80059ec:	f89d 3013 	ldrb.w	r3, [sp, #19]
									pressIsLower[i] = 0;
 80059f0:	4620      	mov	r0, r4
								airSystem = COMPRESSOR; // for compressor
 80059f2:	2b31      	cmp	r3, #49	; 0x31
 80059f4:	bf14      	ite	ne
 80059f6:	4632      	movne	r2, r6
 80059f8:	4622      	moveq	r2, r4
 80059fa:	4b59      	ldr	r3, [pc, #356]	; (8005b60 <xProcessCommandTask+0x344>)
								if (filteredData[i] > nessPressure[i])
 80059fc:	f8df e134 	ldr.w	lr, [pc, #308]	; 8005b34 <xProcessCommandTask+0x318>
 8005a00:	4958      	ldr	r1, [pc, #352]	; (8005b64 <xProcessCommandTask+0x348>)
								airSystem = COMPRESSOR; // for compressor
 8005a02:	701a      	strb	r2, [r3, #0]
								if (filteredData[i] > nessPressure[i])
 8005a04:	3f02      	subs	r7, #2
 8005a06:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
 8005a0a:	f83e 2014 	ldrh.w	r2, [lr, r4, lsl #1]
 8005a0e:	429a      	cmp	r2, r3
									pressIsLower[i] = 0;
 8005a10:	bf94      	ite	ls
 8005a12:	4633      	movls	r3, r6
 8005a14:	4603      	movhi	r3, r0
 8005a16:	550b      	strb	r3, [r1, r4]
 8005a18:	3401      	adds	r4, #1
							for (i = 0; i < 4; i++){
 8005a1a:	2c04      	cmp	r4, #4
 8005a1c:	d1f3      	bne.n	8005a06 <xProcessCommandTask+0x1ea>
							pressureCompensation = ON;
 8005a1e:	2201      	movs	r2, #1
 8005a20:	4b43      	ldr	r3, [pc, #268]	; (8005b30 <xProcessCommandTask+0x314>)
 8005a22:	701a      	strb	r2, [r3, #0]
 8005a24:	e711      	b.n	800584a <xProcessCommandTask+0x2e>
					if (indicationState == SEARCH){
 8005a26:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 8005b24 <xProcessCommandTask+0x308>
 8005a2a:	f898 3000 	ldrb.w	r3, [r8]
 8005a2e:	2b02      	cmp	r3, #2
 8005a30:	f47f af0b 	bne.w	800584a <xProcessCommandTask+0x2e>
						if (command[1] == '?'){
 8005a34:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8005a38:	2b3f      	cmp	r3, #63	; 0x3f
 8005a3a:	d114      	bne.n	8005a66 <xProcessCommandTask+0x24a>
							sscanf((char*)command, "x?%hu,\n", &controllerSettings.clientID);
 8005a3c:	4a4a      	ldr	r2, [pc, #296]	; (8005b68 <xProcessCommandTask+0x34c>)
 8005a3e:	494b      	ldr	r1, [pc, #300]	; (8005b6c <xProcessCommandTask+0x350>)
 8005a40:	a806      	add	r0, sp, #24
 8005a42:	f000 ff27 	bl	8006894 <siscanf>
							messageLength = sprintf(message, "x,%05d,%05d,\n", controllerSettings.clientID, server_UID);
 8005a46:	4b39      	ldr	r3, [pc, #228]	; (8005b2c <xProcessCommandTask+0x310>)
 8005a48:	4a3b      	ldr	r2, [pc, #236]	; (8005b38 <xProcessCommandTask+0x31c>)
 8005a4a:	881b      	ldrh	r3, [r3, #0]
 8005a4c:	8892      	ldrh	r2, [r2, #4]
 8005a4e:	4948      	ldr	r1, [pc, #288]	; (8005b70 <xProcessCommandTask+0x354>)
 8005a50:	483a      	ldr	r0, [pc, #232]	; (8005b3c <xProcessCommandTask+0x320>)
 8005a52:	f000 fefb 	bl	800684c <siprintf>
 8005a56:	4b3b      	ldr	r3, [pc, #236]	; (8005b44 <xProcessCommandTask+0x328>)
 8005a58:	b2c2      	uxtb	r2, r0
							HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);
 8005a5a:	4938      	ldr	r1, [pc, #224]	; (8005b3c <xProcessCommandTask+0x320>)
 8005a5c:	483a      	ldr	r0, [pc, #232]	; (8005b48 <xProcessCommandTask+0x32c>)
							messageLength = sprintf(message, "x,%05d,%05d,\n", controllerSettings.clientID, server_UID);
 8005a5e:	701a      	strb	r2, [r3, #0]
							HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);
 8005a60:	f7fd fd66 	bl	8003530 <HAL_UART_Transmit_DMA>
 8005a64:	e6f1      	b.n	800584a <xProcessCommandTask+0x2e>
						else if (command[1] == 'c'){
 8005a66:	2b63      	cmp	r3, #99	; 0x63
 8005a68:	f47f aeef 	bne.w	800584a <xProcessCommandTask+0x2e>
							sscanf((char*)command, "xc,%hu,%hu,\n", &id, &channel);
 8005a6c:	f10d 0316 	add.w	r3, sp, #22
 8005a70:	aa05      	add	r2, sp, #20
 8005a72:	4940      	ldr	r1, [pc, #256]	; (8005b74 <xProcessCommandTask+0x358>)
 8005a74:	a806      	add	r0, sp, #24
 8005a76:	f000 ff0d 	bl	8006894 <siscanf>
							messageLength = sprintf(message, "id,%05d,%05d,%03d\n", id, server_UID, channel);
 8005a7a:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 8005b2c <xProcessCommandTask+0x310>
 8005a7e:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8005a82:	f8bb 3000 	ldrh.w	r3, [fp]
 8005a86:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8005a8a:	9100      	str	r1, [sp, #0]
 8005a8c:	482b      	ldr	r0, [pc, #172]	; (8005b3c <xProcessCommandTask+0x320>)
 8005a8e:	493a      	ldr	r1, [pc, #232]	; (8005b78 <xProcessCommandTask+0x35c>)
 8005a90:	f000 fedc 	bl	800684c <siprintf>
 8005a94:	4f2b      	ldr	r7, [pc, #172]	; (8005b44 <xProcessCommandTask+0x328>)
 8005a96:	7038      	strb	r0, [r7, #0]
							print_debug(message);
 8005a98:	4828      	ldr	r0, [pc, #160]	; (8005b3c <xProcessCommandTask+0x320>)
 8005a9a:	f7ff fc65 	bl	8005368 <print_debug>
							if (id == server_UID){
 8005a9e:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8005aa2:	f8bb 3000 	ldrh.w	r3, [fp]
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	f47f aecf 	bne.w	800584a <xProcessCommandTask+0x2e>
								controllerSettings.rfChannel = channel;
 8005aac:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8005ab0:	f8df b084 	ldr.w	fp, [pc, #132]	; 8005b38 <xProcessCommandTask+0x31c>
 8005ab4:	f88b 3000 	strb.w	r3, [fp]
								mWrite_flash();
 8005ab8:	f7ff fcac 	bl	8005414 <mWrite_flash>
								messageLength = sprintf(message, "xc,%05d,ok,\n", controllerSettings.clientID);
 8005abc:	f8bb 2004 	ldrh.w	r2, [fp, #4]
 8005ac0:	492e      	ldr	r1, [pc, #184]	; (8005b7c <xProcessCommandTask+0x360>)
 8005ac2:	481e      	ldr	r0, [pc, #120]	; (8005b3c <xProcessCommandTask+0x320>)
 8005ac4:	f000 fec2 	bl	800684c <siprintf>
								HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);
 8005ac8:	491c      	ldr	r1, [pc, #112]	; (8005b3c <xProcessCommandTask+0x320>)
								messageLength = sprintf(message, "xc,%05d,ok,\n", controllerSettings.clientID);
 8005aca:	b2c2      	uxtb	r2, r0
								HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);
 8005acc:	481e      	ldr	r0, [pc, #120]	; (8005b48 <xProcessCommandTask+0x32c>)
								messageLength = sprintf(message, "xc,%05d,ok,\n", controllerSettings.clientID);
 8005ace:	703a      	strb	r2, [r7, #0]
								HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);
 8005ad0:	f7fd fd2e 	bl	8003530 <HAL_UART_Transmit_DMA>
								vTaskDelay(200 / portTICK_RATE_MS);
 8005ad4:	20c8      	movs	r0, #200	; 0xc8
 8005ad6:	f7fe fe55 	bl	8004784 <vTaskDelay>
								CMD_RF_ON;
 8005ada:	4622      	mov	r2, r4
 8005adc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005ae0:	4648      	mov	r0, r9
 8005ae2:	f7fc fc9d 	bl	8002420 <HAL_GPIO_WritePin>
								vTaskDelay(50 / portTICK_RATE_MS);
 8005ae6:	2032      	movs	r0, #50	; 0x32
 8005ae8:	f7fe fe4c 	bl	8004784 <vTaskDelay>

								messageLength = sprintf(message, "AT+C%03d\r", channel);
 8005aec:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8005af0:	4923      	ldr	r1, [pc, #140]	; (8005b80 <xProcessCommandTask+0x364>)
 8005af2:	4812      	ldr	r0, [pc, #72]	; (8005b3c <xProcessCommandTask+0x320>)
 8005af4:	f000 feaa 	bl	800684c <siprintf>
								HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);
 8005af8:	4910      	ldr	r1, [pc, #64]	; (8005b3c <xProcessCommandTask+0x320>)
								messageLength = sprintf(message, "AT+C%03d\r", channel);
 8005afa:	b2c2      	uxtb	r2, r0
								HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);
 8005afc:	4812      	ldr	r0, [pc, #72]	; (8005b48 <xProcessCommandTask+0x32c>)
								messageLength = sprintf(message, "AT+C%03d\r", channel);
 8005afe:	703a      	strb	r2, [r7, #0]
								HAL_UART_Transmit_DMA(&huart1, (uint8_t*) message, messageLength);
 8005b00:	f7fd fd16 	bl	8003530 <HAL_UART_Transmit_DMA>

								vTaskDelay(50 / portTICK_RATE_MS);
 8005b04:	2032      	movs	r0, #50	; 0x32
 8005b06:	f7fe fe3d 	bl	8004784 <vTaskDelay>
								CMD_RF_OFF;
 8005b0a:	4632      	mov	r2, r6
 8005b0c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005b10:	4648      	mov	r0, r9
 8005b12:	f7fc fc85 	bl	8002420 <HAL_GPIO_WritePin>

								indicationState = NORMAL_C;
 8005b16:	f888 4000 	strb.w	r4, [r8]
 8005b1a:	e696      	b.n	800584a <xProcessCommandTask+0x2e>
 8005b1c:	20005490 	.word	0x20005490
 8005b20:	200051b0 	.word	0x200051b0
 8005b24:	2000000d 	.word	0x2000000d
 8005b28:	08008af3 	.word	0x08008af3
 8005b2c:	200052c4 	.word	0x200052c4
 8005b30:	200052c2 	.word	0x200052c2
 8005b34:	20005230 	.word	0x20005230
 8005b38:	20005204 	.word	0x20005204
 8005b3c:	20005238 	.word	0x20005238
 8005b40:	08008b01 	.word	0x08008b01
 8005b44:	200052b8 	.word	0x200052b8
 8005b48:	20005444 	.word	0x20005444
 8005b4c:	40010c00 	.word	0x40010c00
 8005b50:	40011400 	.word	0x40011400
 8005b54:	08008b1c 	.word	0x08008b1c
 8005b58:	200052be 	.word	0x200052be
 8005b5c:	08008b25 	.word	0x08008b25
 8005b60:	20005201 	.word	0x20005201
 8005b64:	200052c7 	.word	0x200052c7
 8005b68:	20005208 	.word	0x20005208
 8005b6c:	08008b40 	.word	0x08008b40
 8005b70:	08008b48 	.word	0x08008b48
 8005b74:	08008b56 	.word	0x08008b56
 8005b78:	08008b63 	.word	0x08008b63
 8005b7c:	08008b76 	.word	0x08008b76
 8005b80:	08008a9e 	.word	0x08008a9e
 8005b84:	200052c0 	.word	0x200052c0
 8005b88:	40010800 	.word	0x40010800

08005b8c <xScanInputTask>:
#include "controllerUtils.h"

extern UART_HandleTypeDef huart1;
extern enum IndicationState indicationState;

void xScanInputTask(void* arguments){
 8005b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t prevInputState = 1;
 8005b90:	2501      	movs	r5, #1
	uint8_t curInputState = 1;

	for(;;){
		curInputState = HAL_GPIO_ReadPin(HALL_SENS_PORT, HALL_SENS_PIN);
 8005b92:	4e1c      	ldr	r6, [pc, #112]	; (8005c04 <xScanInputTask+0x78>)
			if (curInputState != prevInputState){
				prevInputState = curInputState;
				if (!prevInputState){
					//Change indication to searching
					//HAL_GPIO_WritePin(A_LED_PORT, A_LED_PIN, GPIO_PIN_SET);
					indicationState = SEARCH;
 8005b94:	4f1c      	ldr	r7, [pc, #112]	; (8005c08 <xScanInputTask+0x7c>)
					//Change channel
					//rf433_set_channel_1();
					CMD_RF_ON;
					vTaskDelay(50 / portTICK_RATE_MS);

					HAL_UART_Transmit(&huart1, (uint8_t*) "AT+C001\r", 8, 0x2000);
 8005b96:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8005c10 <xScanInputTask+0x84>
		curInputState = HAL_GPIO_ReadPin(HALL_SENS_PORT, HALL_SENS_PIN);
 8005b9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005b9e:	4819      	ldr	r0, [pc, #100]	; (8005c04 <xScanInputTask+0x78>)
 8005ba0:	f7fc fc38 	bl	8002414 <HAL_GPIO_ReadPin>
		if (curInputState != prevInputState){
 8005ba4:	4285      	cmp	r5, r0
		curInputState = HAL_GPIO_ReadPin(HALL_SENS_PORT, HALL_SENS_PIN);
 8005ba6:	4604      	mov	r4, r0
		if (curInputState != prevInputState){
 8005ba8:	d026      	beq.n	8005bf8 <xScanInputTask+0x6c>
			vTaskDelay(1 / portTICK_RATE_MS);
 8005baa:	2001      	movs	r0, #1
 8005bac:	f7fe fdea 	bl	8004784 <vTaskDelay>
			curInputState = HAL_GPIO_ReadPin(HALL_SENS_PORT, HALL_SENS_PIN);
 8005bb0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005bb4:	4630      	mov	r0, r6
 8005bb6:	f7fc fc2d 	bl	8002414 <HAL_GPIO_ReadPin>
			if (curInputState != prevInputState){
 8005bba:	4285      	cmp	r5, r0
			curInputState = HAL_GPIO_ReadPin(HALL_SENS_PORT, HALL_SENS_PIN);
 8005bbc:	4604      	mov	r4, r0
			if (curInputState != prevInputState){
 8005bbe:	d01b      	beq.n	8005bf8 <xScanInputTask+0x6c>
				if (!prevInputState){
 8005bc0:	b9d0      	cbnz	r0, 8005bf8 <xScanInputTask+0x6c>
					indicationState = SEARCH;
 8005bc2:	2302      	movs	r3, #2
					CMD_RF_ON;
 8005bc4:	4602      	mov	r2, r0
 8005bc6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005bca:	4630      	mov	r0, r6
					indicationState = SEARCH;
 8005bcc:	703b      	strb	r3, [r7, #0]
					CMD_RF_ON;
 8005bce:	f7fc fc27 	bl	8002420 <HAL_GPIO_WritePin>
					vTaskDelay(50 / portTICK_RATE_MS);
 8005bd2:	2032      	movs	r0, #50	; 0x32
 8005bd4:	f7fe fdd6 	bl	8004784 <vTaskDelay>
					HAL_UART_Transmit(&huart1, (uint8_t*) "AT+C001\r", 8, 0x2000);
 8005bd8:	2208      	movs	r2, #8
 8005bda:	4641      	mov	r1, r8
 8005bdc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005be0:	480a      	ldr	r0, [pc, #40]	; (8005c0c <xScanInputTask+0x80>)
 8005be2:	f7fd fc21 	bl	8003428 <HAL_UART_Transmit>

					vTaskDelay(50 / portTICK_RATE_MS);
 8005be6:	2032      	movs	r0, #50	; 0x32
 8005be8:	f7fe fdcc 	bl	8004784 <vTaskDelay>
					CMD_RF_OFF;
 8005bec:	2201      	movs	r2, #1
 8005bee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005bf2:	4630      	mov	r0, r6
 8005bf4:	f7fc fc14 	bl	8002420 <HAL_GPIO_WritePin>
				}
			}
		}

		vTaskDelay(10 / portTICK_RATE_MS);
 8005bf8:	200a      	movs	r0, #10
 8005bfa:	f7fe fdc3 	bl	8004784 <vTaskDelay>
		curInputState = HAL_GPIO_ReadPin(HALL_SENS_PORT, HALL_SENS_PIN);
 8005bfe:	4625      	mov	r5, r4
 8005c00:	e7cb      	b.n	8005b9a <xScanInputTask+0xe>
 8005c02:	bf00      	nop
 8005c04:	40010800 	.word	0x40010800
 8005c08:	2000000d 	.word	0x2000000d
 8005c0c:	20005444 	.word	0x20005444
 8005c10:	08008b83 	.word	0x08008b83

08005c14 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005c14:	4b11      	ldr	r3, [pc, #68]	; (8005c5c <HAL_MspInit+0x48>)
{
 8005c16:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8005c18:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005c1a:	210f      	movs	r1, #15
  __HAL_RCC_AFIO_CLK_ENABLE();
 8005c1c:	f042 0201 	orr.w	r2, r2, #1
 8005c20:	619a      	str	r2, [r3, #24]
 8005c22:	699a      	ldr	r2, [r3, #24]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005c24:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_AFIO_CLK_ENABLE();
 8005c28:	f002 0201 	and.w	r2, r2, #1
 8005c2c:	9200      	str	r2, [sp, #0]
 8005c2e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005c30:	69da      	ldr	r2, [r3, #28]
 8005c32:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005c36:	61da      	str	r2, [r3, #28]
 8005c38:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005c3a:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 8005c3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c40:	9301      	str	r3, [sp, #4]
 8005c42:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005c44:	f7fb ffc2 	bl	8001bcc <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005c48:	4a05      	ldr	r2, [pc, #20]	; (8005c60 <HAL_MspInit+0x4c>)
 8005c4a:	6853      	ldr	r3, [r2, #4]
 8005c4c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005c50:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005c54:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005c56:	b003      	add	sp, #12
 8005c58:	f85d fb04 	ldr.w	pc, [sp], #4
 8005c5c:	40021000 	.word	0x40021000
 8005c60:	40010000 	.word	0x40010000

08005c64 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005c64:	b510      	push	{r4, lr}
 8005c66:	4604      	mov	r4, r0
 8005c68:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c6a:	2210      	movs	r2, #16
 8005c6c:	2100      	movs	r1, #0
 8005c6e:	a802      	add	r0, sp, #8
 8005c70:	f000 f983 	bl	8005f7a <memset>
  if(hadc->Instance==ADC1)
 8005c74:	6822      	ldr	r2, [r4, #0]
 8005c76:	4b14      	ldr	r3, [pc, #80]	; (8005cc8 <HAL_ADC_MspInit+0x64>)
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d123      	bne.n	8005cc4 <HAL_ADC_MspInit+0x60>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005c7c:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8005c80:	699a      	ldr	r2, [r3, #24]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c82:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005c84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c88:	619a      	str	r2, [r3, #24]
 8005c8a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c8c:	480f      	ldr	r0, [pc, #60]	; (8005ccc <HAL_ADC_MspInit+0x68>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005c8e:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8005c92:	9200      	str	r2, [sp, #0]
 8005c94:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c96:	699a      	ldr	r2, [r3, #24]
 8005c98:	f042 0204 	orr.w	r2, r2, #4
 8005c9c:	619a      	str	r2, [r3, #24]
 8005c9e:	699b      	ldr	r3, [r3, #24]
 8005ca0:	f003 0304 	and.w	r3, r3, #4
 8005ca4:	9301      	str	r3, [sp, #4]
 8005ca6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8005ca8:	230f      	movs	r3, #15
 8005caa:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005cac:	2303      	movs	r3, #3
 8005cae:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005cb0:	f7fc fad0 	bl	8002254 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8005cb4:	2012      	movs	r0, #18
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	2105      	movs	r1, #5
 8005cba:	f7fb ff87 	bl	8001bcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8005cbe:	2012      	movs	r0, #18
 8005cc0:	f7fb ffb8 	bl	8001c34 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8005cc4:	b006      	add	sp, #24
 8005cc6:	bd10      	pop	{r4, pc}
 8005cc8:	40012400 	.word	0x40012400
 8005ccc:	40010800 	.word	0x40010800

08005cd0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005cd0:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM3)
 8005cd2:	4b0d      	ldr	r3, [pc, #52]	; (8005d08 <HAL_TIM_Base_MspInit+0x38>)
 8005cd4:	6802      	ldr	r2, [r0, #0]
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d112      	bne.n	8005d00 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005cda:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 8005cde:	69da      	ldr	r2, [r3, #28]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8005ce0:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005ce2:	f042 0202 	orr.w	r2, r2, #2
 8005ce6:	61da      	str	r2, [r3, #28]
 8005ce8:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8005cea:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005cec:	f003 0302 	and.w	r3, r3, #2
 8005cf0:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8005cf2:	2105      	movs	r1, #5
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005cf4:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8005cf6:	f7fb ff69 	bl	8001bcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005cfa:	201d      	movs	r0, #29
 8005cfc:	f7fb ff9a 	bl	8001c34 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8005d00:	b003      	add	sp, #12
 8005d02:	f85d fb04 	ldr.w	pc, [sp], #4
 8005d06:	bf00      	nop
 8005d08:	40000400 	.word	0x40000400

08005d0c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005d0c:	b510      	push	{r4, lr}
 8005d0e:	4604      	mov	r4, r0
 8005d10:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d12:	2210      	movs	r2, #16
 8005d14:	2100      	movs	r1, #0
 8005d16:	a802      	add	r0, sp, #8
 8005d18:	f000 f92f 	bl	8005f7a <memset>
  if(htim->Instance==TIM3)
 8005d1c:	6822      	ldr	r2, [r4, #0]
 8005d1e:	4b15      	ldr	r3, [pc, #84]	; (8005d74 <HAL_TIM_MspPostInit+0x68>)
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d124      	bne.n	8005d6e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d24:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 8005d28:	699a      	ldr	r2, [r3, #24]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d2a:	2402      	movs	r4, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d2c:	f042 0204 	orr.w	r2, r2, #4
 8005d30:	619a      	str	r2, [r3, #24]
 8005d32:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d34:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d36:	f002 0204 	and.w	r2, r2, #4
 8005d3a:	9200      	str	r2, [sp, #0]
 8005d3c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005d3e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d40:	480d      	ldr	r0, [pc, #52]	; (8005d78 <HAL_TIM_MspPostInit+0x6c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005d42:	f042 0208 	orr.w	r2, r2, #8
 8005d46:	619a      	str	r2, [r3, #24]
 8005d48:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d4a:	9403      	str	r4, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005d4c:	f003 0308 	and.w	r3, r3, #8
 8005d50:	9301      	str	r3, [sp, #4]
 8005d52:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005d54:	23c0      	movs	r3, #192	; 0xc0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d56:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005d58:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d5a:	f7fc fa7b 	bl	8002254 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005d5e:	2301      	movs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d60:	a902      	add	r1, sp, #8
 8005d62:	4806      	ldr	r0, [pc, #24]	; (8005d7c <HAL_TIM_MspPostInit+0x70>)
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005d64:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d66:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d68:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d6a:	f7fc fa73 	bl	8002254 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8005d6e:	b006      	add	sp, #24
 8005d70:	bd10      	pop	{r4, pc}
 8005d72:	bf00      	nop
 8005d74:	40000400 	.word	0x40000400
 8005d78:	40010800 	.word	0x40010800
 8005d7c:	40010c00 	.word	0x40010c00

08005d80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005d80:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d82:	2710      	movs	r7, #16
{
 8005d84:	4606      	mov	r6, r0
 8005d86:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d88:	463a      	mov	r2, r7
 8005d8a:	2100      	movs	r1, #0
 8005d8c:	a802      	add	r0, sp, #8
 8005d8e:	f000 f8f4 	bl	8005f7a <memset>
  if(huart->Instance==USART1)
 8005d92:	6832      	ldr	r2, [r6, #0]
 8005d94:	4b24      	ldr	r3, [pc, #144]	; (8005e28 <HAL_UART_MspInit+0xa8>)
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d143      	bne.n	8005e22 <HAL_UART_MspInit+0xa2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005d9a:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8005d9e:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005da0:	a902      	add	r1, sp, #8
    __HAL_RCC_USART1_CLK_ENABLE();
 8005da2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005da6:	619a      	str	r2, [r3, #24]
 8005da8:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005daa:	4820      	ldr	r0, [pc, #128]	; (8005e2c <HAL_UART_MspInit+0xac>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8005dac:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8005db0:	9200      	str	r2, [sp, #0]
 8005db2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005db4:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005db6:	2500      	movs	r5, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005db8:	f042 0204 	orr.w	r2, r2, #4
 8005dbc:	619a      	str	r2, [r3, #24]
 8005dbe:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8005dc0:	4c1b      	ldr	r4, [pc, #108]	; (8005e30 <HAL_UART_MspInit+0xb0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005dc2:	f003 0304 	and.w	r3, r3, #4
 8005dc6:	9301      	str	r3, [sp, #4]
 8005dc8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005dca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005dce:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005dd0:	2302      	movs	r3, #2
 8005dd2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005dd4:	2303      	movs	r3, #3
 8005dd6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005dd8:	f7fc fa3c 	bl	8002254 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005ddc:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005de0:	4812      	ldr	r0, [pc, #72]	; (8005e2c <HAL_UART_MspInit+0xac>)
 8005de2:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005de4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005de6:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005de8:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005dea:	f7fc fa33 	bl	8002254 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8005dee:	4b11      	ldr	r3, [pc, #68]	; (8005e34 <HAL_UART_MspInit+0xb4>)
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8005df0:	4620      	mov	r0, r4
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005df2:	e884 0088 	stmia.w	r4, {r3, r7}
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005df6:	2380      	movs	r3, #128	; 0x80
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005df8:	60a5      	str	r5, [r4, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005dfa:	60e3      	str	r3, [r4, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005dfc:	6125      	str	r5, [r4, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005dfe:	6165      	str	r5, [r4, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8005e00:	61a5      	str	r5, [r4, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005e02:	61e5      	str	r5, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8005e04:	f7fb ff38 	bl	8001c78 <HAL_DMA_Init>
 8005e08:	b108      	cbz	r0, 8005e0e <HAL_UART_MspInit+0x8e>
    {
      Error_Handler();
 8005e0a:	f7ff fd05 	bl	8005818 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8005e0e:	2025      	movs	r0, #37	; 0x25
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8005e10:	6334      	str	r4, [r6, #48]	; 0x30
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8005e12:	2200      	movs	r2, #0
 8005e14:	2105      	movs	r1, #5
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8005e16:	6266      	str	r6, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8005e18:	f7fb fed8 	bl	8001bcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005e1c:	2025      	movs	r0, #37	; 0x25
 8005e1e:	f7fb ff09 	bl	8001c34 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8005e22:	b007      	add	sp, #28
 8005e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e26:	bf00      	nop
 8005e28:	40013800 	.word	0x40013800
 8005e2c:	40010800 	.word	0x40010800
 8005e30:	200053d0 	.word	0x200053d0
 8005e34:	40020044 	.word	0x40020044

08005e38 <NMI_Handler>:
 8005e38:	4770      	bx	lr

08005e3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005e3a:	e7fe      	b.n	8005e3a <HardFault_Handler>

08005e3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005e3c:	e7fe      	b.n	8005e3c <MemManage_Handler>

08005e3e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005e3e:	e7fe      	b.n	8005e3e <BusFault_Handler>

08005e40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005e40:	e7fe      	b.n	8005e40 <UsageFault_Handler>

08005e42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005e42:	4770      	bx	lr

08005e44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005e44:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005e46:	f7fb fb4f 	bl	80014e8 <HAL_IncTick>
  osSystickHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005e4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  osSystickHandler();
 8005e4e:	f7fd bcda 	b.w	8003806 <osSystickHandler>
	...

08005e54 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8005e54:	4801      	ldr	r0, [pc, #4]	; (8005e5c <DMA1_Channel4_IRQHandler+0x8>)
 8005e56:	f7fb bffb 	b.w	8001e50 <HAL_DMA_IRQHandler>
 8005e5a:	bf00      	nop
 8005e5c:	200053d0 	.word	0x200053d0

08005e60 <ADC1_2_IRQHandler>:
void ADC1_2_IRQHandler(void)
{
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8005e60:	4801      	ldr	r0, [pc, #4]	; (8005e68 <ADC1_2_IRQHandler+0x8>)
 8005e62:	f7fb bb77 	b.w	8001554 <HAL_ADC_IRQHandler>
 8005e66:	bf00      	nop
 8005e68:	20005414 	.word	0x20005414

08005e6c <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005e6c:	4801      	ldr	r0, [pc, #4]	; (8005e74 <TIM3_IRQHandler+0x8>)
 8005e6e:	f7fc bfee 	b.w	8002e4e <HAL_TIM_IRQHandler>
 8005e72:	bf00      	nop
 8005e74:	2000538c 	.word	0x2000538c

08005e78 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005e78:	4801      	ldr	r0, [pc, #4]	; (8005e80 <USART1_IRQHandler+0x8>)
 8005e7a:	f7fd bc17 	b.w	80036ac <HAL_UART_IRQHandler>
 8005e7e:	bf00      	nop
 8005e80:	20005444 	.word	0x20005444

08005e84 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8005e84:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005e86:	4b0a      	ldr	r3, [pc, #40]	; (8005eb0 <_sbrk+0x2c>)
{
 8005e88:	4602      	mov	r2, r0
	if (heap_end == 0)
 8005e8a:	6819      	ldr	r1, [r3, #0]
 8005e8c:	b909      	cbnz	r1, 8005e92 <_sbrk+0xe>
		heap_end = &end;
 8005e8e:	4909      	ldr	r1, [pc, #36]	; (8005eb4 <_sbrk+0x30>)
 8005e90:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8005e92:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8005e94:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8005e96:	4402      	add	r2, r0
 8005e98:	428a      	cmp	r2, r1
 8005e9a:	d906      	bls.n	8005eaa <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8005e9c:	f000 f85c 	bl	8005f58 <__errno>
 8005ea0:	230c      	movs	r3, #12
 8005ea2:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8005ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ea8:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8005eaa:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8005eac:	bd08      	pop	{r3, pc}
 8005eae:	bf00      	nop
 8005eb0:	200052cc 	.word	0x200052cc
 8005eb4:	2000549c 	.word	0x2000549c

08005eb8 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8005eb8:	4b12      	ldr	r3, [pc, #72]	; (8005f04 <SystemInit+0x4c>)
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	f042 0201 	orr.w	r2, r2, #1
 8005ec0:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
#else
  RCC->CFGR &= 0xF0FF0000U;
 8005ec2:	6859      	ldr	r1, [r3, #4]
 8005ec4:	4a10      	ldr	r2, [pc, #64]	; (8005f08 <SystemInit+0x50>)
 8005ec6:	400a      	ands	r2, r1
 8005ec8:	605a      	str	r2, [r3, #4]
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8005ed0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005ed4:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005edc:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8005ede:	685a      	ldr	r2, [r3, #4]
 8005ee0:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8005ee4:	605a      	str	r2, [r3, #4]

#if defined(STM32F105xC) || defined(STM32F107xC)
  /* Reset PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEBFFFFFFU;
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	f022 52a0 	bic.w	r2, r2, #335544320	; 0x14000000
 8005eec:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x00FF0000U;
 8005eee:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8005ef2:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8005ef8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005efc:	4b03      	ldr	r3, [pc, #12]	; (8005f0c <SystemInit+0x54>)
 8005efe:	609a      	str	r2, [r3, #8]
 8005f00:	4770      	bx	lr
 8005f02:	bf00      	nop
 8005f04:	40021000 	.word	0x40021000
 8005f08:	f0ff0000 	.word	0xf0ff0000
 8005f0c:	e000ed00 	.word	0xe000ed00

08005f10 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8005f10:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8005f12:	e003      	b.n	8005f1c <LoopCopyDataInit>

08005f14 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8005f14:	4b0a      	ldr	r3, [pc, #40]	; (8005f40 <LoopFillZerobss+0x10>)
  ldr r3, [r3, r1]
 8005f16:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8005f18:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8005f1a:	3104      	adds	r1, #4

08005f1c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8005f1c:	4809      	ldr	r0, [pc, #36]	; (8005f44 <LoopFillZerobss+0x14>)
  ldr r3, =_edata
 8005f1e:	4b0a      	ldr	r3, [pc, #40]	; (8005f48 <LoopFillZerobss+0x18>)
  adds r2, r0, r1
 8005f20:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8005f22:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8005f24:	d3f6      	bcc.n	8005f14 <CopyDataInit>
  ldr r2, =_sbss
 8005f26:	4a09      	ldr	r2, [pc, #36]	; (8005f4c <LoopFillZerobss+0x1c>)
  b LoopFillZerobss
 8005f28:	e002      	b.n	8005f30 <LoopFillZerobss>

08005f2a <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8005f2a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8005f2c:	f842 3b04 	str.w	r3, [r2], #4

08005f30 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8005f30:	4b07      	ldr	r3, [pc, #28]	; (8005f50 <LoopFillZerobss+0x20>)
  cmp r2, r3
 8005f32:	429a      	cmp	r2, r3
  bcc FillZerobss
 8005f34:	d3f9      	bcc.n	8005f2a <FillZerobss>
/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005f36:	f7ff ffbf 	bl	8005eb8 <SystemInit>
/* Call the application's entry point.*/
  bl main
 8005f3a:	f7ff fb01 	bl	8005540 <main>
  bx lr
 8005f3e:	4770      	bx	lr
  ldr r3, =_sidata
 8005f40:	08008e8c 	.word	0x08008e8c
  ldr r0, =_sdata
 8005f44:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8005f48:	20000224 	.word	0x20000224
  ldr r2, =_sbss
 8005f4c:	20000228 	.word	0x20000228
  ldr r3, = _ebss
 8005f50:	2000549c 	.word	0x2000549c

08005f54 <CAN1_RX0_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005f54:	e7fe      	b.n	8005f54 <CAN1_RX0_IRQHandler>
	...

08005f58 <__errno>:
 8005f58:	4b01      	ldr	r3, [pc, #4]	; (8005f60 <__errno+0x8>)
 8005f5a:	6818      	ldr	r0, [r3, #0]
 8005f5c:	4770      	bx	lr
 8005f5e:	bf00      	nop
 8005f60:	20000054 	.word	0x20000054

08005f64 <memcpy>:
 8005f64:	b510      	push	{r4, lr}
 8005f66:	1e43      	subs	r3, r0, #1
 8005f68:	440a      	add	r2, r1
 8005f6a:	4291      	cmp	r1, r2
 8005f6c:	d100      	bne.n	8005f70 <memcpy+0xc>
 8005f6e:	bd10      	pop	{r4, pc}
 8005f70:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f74:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f78:	e7f7      	b.n	8005f6a <memcpy+0x6>

08005f7a <memset>:
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	4402      	add	r2, r0
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d100      	bne.n	8005f84 <memset+0xa>
 8005f82:	4770      	bx	lr
 8005f84:	f803 1b01 	strb.w	r1, [r3], #1
 8005f88:	e7f9      	b.n	8005f7e <memset+0x4>

08005f8a <__cvt>:
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f90:	461e      	mov	r6, r3
 8005f92:	bfbb      	ittet	lt
 8005f94:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005f98:	461e      	movlt	r6, r3
 8005f9a:	2300      	movge	r3, #0
 8005f9c:	232d      	movlt	r3, #45	; 0x2d
 8005f9e:	b088      	sub	sp, #32
 8005fa0:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005fa2:	9912      	ldr	r1, [sp, #72]	; 0x48
 8005fa4:	f027 0720 	bic.w	r7, r7, #32
 8005fa8:	2f46      	cmp	r7, #70	; 0x46
 8005faa:	4614      	mov	r4, r2
 8005fac:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005fae:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005fb2:	700b      	strb	r3, [r1, #0]
 8005fb4:	d004      	beq.n	8005fc0 <__cvt+0x36>
 8005fb6:	2f45      	cmp	r7, #69	; 0x45
 8005fb8:	d100      	bne.n	8005fbc <__cvt+0x32>
 8005fba:	3501      	adds	r5, #1
 8005fbc:	2302      	movs	r3, #2
 8005fbe:	e000      	b.n	8005fc2 <__cvt+0x38>
 8005fc0:	2303      	movs	r3, #3
 8005fc2:	aa07      	add	r2, sp, #28
 8005fc4:	9204      	str	r2, [sp, #16]
 8005fc6:	aa06      	add	r2, sp, #24
 8005fc8:	9203      	str	r2, [sp, #12]
 8005fca:	e88d 0428 	stmia.w	sp, {r3, r5, sl}
 8005fce:	4622      	mov	r2, r4
 8005fd0:	4633      	mov	r3, r6
 8005fd2:	f000 fd19 	bl	8006a08 <_dtoa_r>
 8005fd6:	2f47      	cmp	r7, #71	; 0x47
 8005fd8:	4680      	mov	r8, r0
 8005fda:	d102      	bne.n	8005fe2 <__cvt+0x58>
 8005fdc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005fde:	07db      	lsls	r3, r3, #31
 8005fe0:	d526      	bpl.n	8006030 <__cvt+0xa6>
 8005fe2:	2f46      	cmp	r7, #70	; 0x46
 8005fe4:	eb08 0905 	add.w	r9, r8, r5
 8005fe8:	d111      	bne.n	800600e <__cvt+0x84>
 8005fea:	f898 3000 	ldrb.w	r3, [r8]
 8005fee:	2b30      	cmp	r3, #48	; 0x30
 8005ff0:	d10a      	bne.n	8006008 <__cvt+0x7e>
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	4620      	mov	r0, r4
 8005ff8:	4631      	mov	r1, r6
 8005ffa:	f7fa fd4d 	bl	8000a98 <__aeabi_dcmpeq>
 8005ffe:	b918      	cbnz	r0, 8006008 <__cvt+0x7e>
 8006000:	f1c5 0501 	rsb	r5, r5, #1
 8006004:	f8ca 5000 	str.w	r5, [sl]
 8006008:	f8da 3000 	ldr.w	r3, [sl]
 800600c:	4499      	add	r9, r3
 800600e:	2200      	movs	r2, #0
 8006010:	2300      	movs	r3, #0
 8006012:	4620      	mov	r0, r4
 8006014:	4631      	mov	r1, r6
 8006016:	f7fa fd3f 	bl	8000a98 <__aeabi_dcmpeq>
 800601a:	b938      	cbnz	r0, 800602c <__cvt+0xa2>
 800601c:	2230      	movs	r2, #48	; 0x30
 800601e:	9b07      	ldr	r3, [sp, #28]
 8006020:	4599      	cmp	r9, r3
 8006022:	d905      	bls.n	8006030 <__cvt+0xa6>
 8006024:	1c59      	adds	r1, r3, #1
 8006026:	9107      	str	r1, [sp, #28]
 8006028:	701a      	strb	r2, [r3, #0]
 800602a:	e7f8      	b.n	800601e <__cvt+0x94>
 800602c:	f8cd 901c 	str.w	r9, [sp, #28]
 8006030:	4640      	mov	r0, r8
 8006032:	9b07      	ldr	r3, [sp, #28]
 8006034:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006036:	eba3 0308 	sub.w	r3, r3, r8
 800603a:	6013      	str	r3, [r2, #0]
 800603c:	b008      	add	sp, #32
 800603e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006042 <__exponent>:
 8006042:	4603      	mov	r3, r0
 8006044:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006046:	2900      	cmp	r1, #0
 8006048:	f803 2b02 	strb.w	r2, [r3], #2
 800604c:	bfb6      	itet	lt
 800604e:	222d      	movlt	r2, #45	; 0x2d
 8006050:	222b      	movge	r2, #43	; 0x2b
 8006052:	4249      	neglt	r1, r1
 8006054:	2909      	cmp	r1, #9
 8006056:	7042      	strb	r2, [r0, #1]
 8006058:	dd21      	ble.n	800609e <__exponent+0x5c>
 800605a:	f10d 0207 	add.w	r2, sp, #7
 800605e:	4617      	mov	r7, r2
 8006060:	260a      	movs	r6, #10
 8006062:	fb91 f5f6 	sdiv	r5, r1, r6
 8006066:	fb06 1115 	mls	r1, r6, r5, r1
 800606a:	2d09      	cmp	r5, #9
 800606c:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8006070:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006074:	f102 34ff 	add.w	r4, r2, #4294967295
 8006078:	4629      	mov	r1, r5
 800607a:	dc09      	bgt.n	8006090 <__exponent+0x4e>
 800607c:	3130      	adds	r1, #48	; 0x30
 800607e:	3a02      	subs	r2, #2
 8006080:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006084:	42ba      	cmp	r2, r7
 8006086:	461c      	mov	r4, r3
 8006088:	d304      	bcc.n	8006094 <__exponent+0x52>
 800608a:	1a20      	subs	r0, r4, r0
 800608c:	b003      	add	sp, #12
 800608e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006090:	4622      	mov	r2, r4
 8006092:	e7e6      	b.n	8006062 <__exponent+0x20>
 8006094:	f812 1b01 	ldrb.w	r1, [r2], #1
 8006098:	f803 1b01 	strb.w	r1, [r3], #1
 800609c:	e7f2      	b.n	8006084 <__exponent+0x42>
 800609e:	2230      	movs	r2, #48	; 0x30
 80060a0:	461c      	mov	r4, r3
 80060a2:	4411      	add	r1, r2
 80060a4:	f804 2b02 	strb.w	r2, [r4], #2
 80060a8:	7059      	strb	r1, [r3, #1]
 80060aa:	e7ee      	b.n	800608a <__exponent+0x48>

080060ac <_printf_float>:
 80060ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060b0:	b091      	sub	sp, #68	; 0x44
 80060b2:	460c      	mov	r4, r1
 80060b4:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80060b6:	4693      	mov	fp, r2
 80060b8:	461e      	mov	r6, r3
 80060ba:	4605      	mov	r5, r0
 80060bc:	f001 fa78 	bl	80075b0 <_localeconv_r>
 80060c0:	6803      	ldr	r3, [r0, #0]
 80060c2:	4618      	mov	r0, r3
 80060c4:	9309      	str	r3, [sp, #36]	; 0x24
 80060c6:	f7fa f8b3 	bl	8000230 <strlen>
 80060ca:	2300      	movs	r3, #0
 80060cc:	930e      	str	r3, [sp, #56]	; 0x38
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	900a      	str	r0, [sp, #40]	; 0x28
 80060d2:	3307      	adds	r3, #7
 80060d4:	f023 0307 	bic.w	r3, r3, #7
 80060d8:	f103 0208 	add.w	r2, r3, #8
 80060dc:	f894 8018 	ldrb.w	r8, [r4, #24]
 80060e0:	f8d4 a000 	ldr.w	sl, [r4]
 80060e4:	603a      	str	r2, [r7, #0]
 80060e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ea:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80060ee:	f8d4 904c 	ldr.w	r9, [r4, #76]	; 0x4c
 80060f2:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 80060f4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80060f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80060fa:	f04f 32ff 	mov.w	r2, #4294967295
 80060fe:	4ba6      	ldr	r3, [pc, #664]	; (8006398 <_printf_float+0x2ec>)
 8006100:	4638      	mov	r0, r7
 8006102:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006104:	f7fa fcfa 	bl	8000afc <__aeabi_dcmpun>
 8006108:	2800      	cmp	r0, #0
 800610a:	f040 81f7 	bne.w	80064fc <_printf_float+0x450>
 800610e:	f04f 32ff 	mov.w	r2, #4294967295
 8006112:	4ba1      	ldr	r3, [pc, #644]	; (8006398 <_printf_float+0x2ec>)
 8006114:	4638      	mov	r0, r7
 8006116:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006118:	f7fa fcd2 	bl	8000ac0 <__aeabi_dcmple>
 800611c:	2800      	cmp	r0, #0
 800611e:	f040 81ed 	bne.w	80064fc <_printf_float+0x450>
 8006122:	2200      	movs	r2, #0
 8006124:	2300      	movs	r3, #0
 8006126:	4638      	mov	r0, r7
 8006128:	4649      	mov	r1, r9
 800612a:	f7fa fcbf 	bl	8000aac <__aeabi_dcmplt>
 800612e:	b110      	cbz	r0, 8006136 <_printf_float+0x8a>
 8006130:	232d      	movs	r3, #45	; 0x2d
 8006132:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006136:	4b99      	ldr	r3, [pc, #612]	; (800639c <_printf_float+0x2f0>)
 8006138:	4f99      	ldr	r7, [pc, #612]	; (80063a0 <_printf_float+0x2f4>)
 800613a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800613e:	bf98      	it	ls
 8006140:	461f      	movls	r7, r3
 8006142:	2303      	movs	r3, #3
 8006144:	f04f 0900 	mov.w	r9, #0
 8006148:	6123      	str	r3, [r4, #16]
 800614a:	f02a 0304 	bic.w	r3, sl, #4
 800614e:	6023      	str	r3, [r4, #0]
 8006150:	9600      	str	r6, [sp, #0]
 8006152:	465b      	mov	r3, fp
 8006154:	aa0f      	add	r2, sp, #60	; 0x3c
 8006156:	4621      	mov	r1, r4
 8006158:	4628      	mov	r0, r5
 800615a:	f000 f9df 	bl	800651c <_printf_common>
 800615e:	3001      	adds	r0, #1
 8006160:	f040 809a 	bne.w	8006298 <_printf_float+0x1ec>
 8006164:	f04f 30ff 	mov.w	r0, #4294967295
 8006168:	b011      	add	sp, #68	; 0x44
 800616a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800616e:	6862      	ldr	r2, [r4, #4]
 8006170:	a80e      	add	r0, sp, #56	; 0x38
 8006172:	1c53      	adds	r3, r2, #1
 8006174:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
 8006178:	f44a 6380 	orr.w	r3, sl, #1024	; 0x400
 800617c:	d141      	bne.n	8006202 <_printf_float+0x156>
 800617e:	2206      	movs	r2, #6
 8006180:	6062      	str	r2, [r4, #4]
 8006182:	2100      	movs	r1, #0
 8006184:	6023      	str	r3, [r4, #0]
 8006186:	9301      	str	r3, [sp, #4]
 8006188:	6863      	ldr	r3, [r4, #4]
 800618a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800618e:	9005      	str	r0, [sp, #20]
 8006190:	9202      	str	r2, [sp, #8]
 8006192:	9300      	str	r3, [sp, #0]
 8006194:	463a      	mov	r2, r7
 8006196:	464b      	mov	r3, r9
 8006198:	9106      	str	r1, [sp, #24]
 800619a:	f8cd 8010 	str.w	r8, [sp, #16]
 800619e:	f8cd e00c 	str.w	lr, [sp, #12]
 80061a2:	4628      	mov	r0, r5
 80061a4:	f7ff fef1 	bl	8005f8a <__cvt>
 80061a8:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 80061ac:	2b47      	cmp	r3, #71	; 0x47
 80061ae:	4607      	mov	r7, r0
 80061b0:	d109      	bne.n	80061c6 <_printf_float+0x11a>
 80061b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80061b4:	1cd8      	adds	r0, r3, #3
 80061b6:	db02      	blt.n	80061be <_printf_float+0x112>
 80061b8:	6862      	ldr	r2, [r4, #4]
 80061ba:	4293      	cmp	r3, r2
 80061bc:	dd59      	ble.n	8006272 <_printf_float+0x1c6>
 80061be:	f1a8 0802 	sub.w	r8, r8, #2
 80061c2:	fa5f f888 	uxtb.w	r8, r8
 80061c6:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80061ca:	990d      	ldr	r1, [sp, #52]	; 0x34
 80061cc:	d836      	bhi.n	800623c <_printf_float+0x190>
 80061ce:	3901      	subs	r1, #1
 80061d0:	4642      	mov	r2, r8
 80061d2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80061d6:	910d      	str	r1, [sp, #52]	; 0x34
 80061d8:	f7ff ff33 	bl	8006042 <__exponent>
 80061dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80061de:	4681      	mov	r9, r0
 80061e0:	1883      	adds	r3, r0, r2
 80061e2:	2a01      	cmp	r2, #1
 80061e4:	6123      	str	r3, [r4, #16]
 80061e6:	dc02      	bgt.n	80061ee <_printf_float+0x142>
 80061e8:	6822      	ldr	r2, [r4, #0]
 80061ea:	07d1      	lsls	r1, r2, #31
 80061ec:	d501      	bpl.n	80061f2 <_printf_float+0x146>
 80061ee:	3301      	adds	r3, #1
 80061f0:	6123      	str	r3, [r4, #16]
 80061f2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d0aa      	beq.n	8006150 <_printf_float+0xa4>
 80061fa:	232d      	movs	r3, #45	; 0x2d
 80061fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006200:	e7a6      	b.n	8006150 <_printf_float+0xa4>
 8006202:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8006206:	d002      	beq.n	800620e <_printf_float+0x162>
 8006208:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800620c:	d1b9      	bne.n	8006182 <_printf_float+0xd6>
 800620e:	b19a      	cbz	r2, 8006238 <_printf_float+0x18c>
 8006210:	2100      	movs	r1, #0
 8006212:	9106      	str	r1, [sp, #24]
 8006214:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8006218:	e88d 000c 	stmia.w	sp, {r2, r3}
 800621c:	6023      	str	r3, [r4, #0]
 800621e:	9005      	str	r0, [sp, #20]
 8006220:	463a      	mov	r2, r7
 8006222:	f8cd 8010 	str.w	r8, [sp, #16]
 8006226:	f8cd e00c 	str.w	lr, [sp, #12]
 800622a:	9102      	str	r1, [sp, #8]
 800622c:	464b      	mov	r3, r9
 800622e:	4628      	mov	r0, r5
 8006230:	f7ff feab 	bl	8005f8a <__cvt>
 8006234:	4607      	mov	r7, r0
 8006236:	e7bc      	b.n	80061b2 <_printf_float+0x106>
 8006238:	2201      	movs	r2, #1
 800623a:	e7a1      	b.n	8006180 <_printf_float+0xd4>
 800623c:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8006240:	d119      	bne.n	8006276 <_printf_float+0x1ca>
 8006242:	2900      	cmp	r1, #0
 8006244:	6863      	ldr	r3, [r4, #4]
 8006246:	dd0c      	ble.n	8006262 <_printf_float+0x1b6>
 8006248:	6121      	str	r1, [r4, #16]
 800624a:	b913      	cbnz	r3, 8006252 <_printf_float+0x1a6>
 800624c:	6822      	ldr	r2, [r4, #0]
 800624e:	07d2      	lsls	r2, r2, #31
 8006250:	d502      	bpl.n	8006258 <_printf_float+0x1ac>
 8006252:	3301      	adds	r3, #1
 8006254:	440b      	add	r3, r1
 8006256:	6123      	str	r3, [r4, #16]
 8006258:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800625a:	f04f 0900 	mov.w	r9, #0
 800625e:	65a3      	str	r3, [r4, #88]	; 0x58
 8006260:	e7c7      	b.n	80061f2 <_printf_float+0x146>
 8006262:	b913      	cbnz	r3, 800626a <_printf_float+0x1be>
 8006264:	6822      	ldr	r2, [r4, #0]
 8006266:	07d0      	lsls	r0, r2, #31
 8006268:	d501      	bpl.n	800626e <_printf_float+0x1c2>
 800626a:	3302      	adds	r3, #2
 800626c:	e7f3      	b.n	8006256 <_printf_float+0x1aa>
 800626e:	2301      	movs	r3, #1
 8006270:	e7f1      	b.n	8006256 <_printf_float+0x1aa>
 8006272:	f04f 0867 	mov.w	r8, #103	; 0x67
 8006276:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006278:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800627a:	4293      	cmp	r3, r2
 800627c:	db05      	blt.n	800628a <_printf_float+0x1de>
 800627e:	6822      	ldr	r2, [r4, #0]
 8006280:	6123      	str	r3, [r4, #16]
 8006282:	07d1      	lsls	r1, r2, #31
 8006284:	d5e8      	bpl.n	8006258 <_printf_float+0x1ac>
 8006286:	3301      	adds	r3, #1
 8006288:	e7e5      	b.n	8006256 <_printf_float+0x1aa>
 800628a:	2b00      	cmp	r3, #0
 800628c:	bfcc      	ite	gt
 800628e:	2301      	movgt	r3, #1
 8006290:	f1c3 0302 	rsble	r3, r3, #2
 8006294:	4413      	add	r3, r2
 8006296:	e7de      	b.n	8006256 <_printf_float+0x1aa>
 8006298:	6823      	ldr	r3, [r4, #0]
 800629a:	055a      	lsls	r2, r3, #21
 800629c:	d407      	bmi.n	80062ae <_printf_float+0x202>
 800629e:	6923      	ldr	r3, [r4, #16]
 80062a0:	463a      	mov	r2, r7
 80062a2:	4659      	mov	r1, fp
 80062a4:	4628      	mov	r0, r5
 80062a6:	47b0      	blx	r6
 80062a8:	3001      	adds	r0, #1
 80062aa:	d12a      	bne.n	8006302 <_printf_float+0x256>
 80062ac:	e75a      	b.n	8006164 <_printf_float+0xb8>
 80062ae:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80062b2:	f240 80dc 	bls.w	800646e <_printf_float+0x3c2>
 80062b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80062ba:	2200      	movs	r2, #0
 80062bc:	2300      	movs	r3, #0
 80062be:	f7fa fbeb 	bl	8000a98 <__aeabi_dcmpeq>
 80062c2:	2800      	cmp	r0, #0
 80062c4:	d039      	beq.n	800633a <_printf_float+0x28e>
 80062c6:	2301      	movs	r3, #1
 80062c8:	4a36      	ldr	r2, [pc, #216]	; (80063a4 <_printf_float+0x2f8>)
 80062ca:	4659      	mov	r1, fp
 80062cc:	4628      	mov	r0, r5
 80062ce:	47b0      	blx	r6
 80062d0:	3001      	adds	r0, #1
 80062d2:	f43f af47 	beq.w	8006164 <_printf_float+0xb8>
 80062d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80062d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80062da:	429a      	cmp	r2, r3
 80062dc:	db02      	blt.n	80062e4 <_printf_float+0x238>
 80062de:	6823      	ldr	r3, [r4, #0]
 80062e0:	07d8      	lsls	r0, r3, #31
 80062e2:	d50e      	bpl.n	8006302 <_printf_float+0x256>
 80062e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062e8:	4659      	mov	r1, fp
 80062ea:	4628      	mov	r0, r5
 80062ec:	47b0      	blx	r6
 80062ee:	3001      	adds	r0, #1
 80062f0:	f43f af38 	beq.w	8006164 <_printf_float+0xb8>
 80062f4:	2700      	movs	r7, #0
 80062f6:	f104 081a 	add.w	r8, r4, #26
 80062fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80062fc:	3b01      	subs	r3, #1
 80062fe:	429f      	cmp	r7, r3
 8006300:	db11      	blt.n	8006326 <_printf_float+0x27a>
 8006302:	6823      	ldr	r3, [r4, #0]
 8006304:	079f      	lsls	r7, r3, #30
 8006306:	d508      	bpl.n	800631a <_printf_float+0x26e>
 8006308:	2700      	movs	r7, #0
 800630a:	f104 0819 	add.w	r8, r4, #25
 800630e:	68e3      	ldr	r3, [r4, #12]
 8006310:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006312:	1a9b      	subs	r3, r3, r2
 8006314:	429f      	cmp	r7, r3
 8006316:	f2c0 80e7 	blt.w	80064e8 <_printf_float+0x43c>
 800631a:	68e0      	ldr	r0, [r4, #12]
 800631c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800631e:	4298      	cmp	r0, r3
 8006320:	bfb8      	it	lt
 8006322:	4618      	movlt	r0, r3
 8006324:	e720      	b.n	8006168 <_printf_float+0xbc>
 8006326:	2301      	movs	r3, #1
 8006328:	4642      	mov	r2, r8
 800632a:	4659      	mov	r1, fp
 800632c:	4628      	mov	r0, r5
 800632e:	47b0      	blx	r6
 8006330:	3001      	adds	r0, #1
 8006332:	f43f af17 	beq.w	8006164 <_printf_float+0xb8>
 8006336:	3701      	adds	r7, #1
 8006338:	e7df      	b.n	80062fa <_printf_float+0x24e>
 800633a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800633c:	2b00      	cmp	r3, #0
 800633e:	dc33      	bgt.n	80063a8 <_printf_float+0x2fc>
 8006340:	2301      	movs	r3, #1
 8006342:	4a18      	ldr	r2, [pc, #96]	; (80063a4 <_printf_float+0x2f8>)
 8006344:	4659      	mov	r1, fp
 8006346:	4628      	mov	r0, r5
 8006348:	47b0      	blx	r6
 800634a:	3001      	adds	r0, #1
 800634c:	f43f af0a 	beq.w	8006164 <_printf_float+0xb8>
 8006350:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006352:	b923      	cbnz	r3, 800635e <_printf_float+0x2b2>
 8006354:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006356:	b913      	cbnz	r3, 800635e <_printf_float+0x2b2>
 8006358:	6823      	ldr	r3, [r4, #0]
 800635a:	07d9      	lsls	r1, r3, #31
 800635c:	d5d1      	bpl.n	8006302 <_printf_float+0x256>
 800635e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006360:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006362:	4659      	mov	r1, fp
 8006364:	4628      	mov	r0, r5
 8006366:	47b0      	blx	r6
 8006368:	3001      	adds	r0, #1
 800636a:	f43f aefb 	beq.w	8006164 <_printf_float+0xb8>
 800636e:	f04f 0800 	mov.w	r8, #0
 8006372:	f104 091a 	add.w	r9, r4, #26
 8006376:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006378:	425b      	negs	r3, r3
 800637a:	4598      	cmp	r8, r3
 800637c:	db01      	blt.n	8006382 <_printf_float+0x2d6>
 800637e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006380:	e78e      	b.n	80062a0 <_printf_float+0x1f4>
 8006382:	2301      	movs	r3, #1
 8006384:	464a      	mov	r2, r9
 8006386:	4659      	mov	r1, fp
 8006388:	4628      	mov	r0, r5
 800638a:	47b0      	blx	r6
 800638c:	3001      	adds	r0, #1
 800638e:	f43f aee9 	beq.w	8006164 <_printf_float+0xb8>
 8006392:	f108 0801 	add.w	r8, r8, #1
 8006396:	e7ee      	b.n	8006376 <_printf_float+0x2ca>
 8006398:	7fefffff 	.word	0x7fefffff
 800639c:	08008ba4 	.word	0x08008ba4
 80063a0:	08008ba8 	.word	0x08008ba8
 80063a4:	08008d0b 	.word	0x08008d0b
 80063a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80063aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80063ac:	429a      	cmp	r2, r3
 80063ae:	bfa8      	it	ge
 80063b0:	461a      	movge	r2, r3
 80063b2:	2a00      	cmp	r2, #0
 80063b4:	4690      	mov	r8, r2
 80063b6:	dc36      	bgt.n	8006426 <_printf_float+0x37a>
 80063b8:	f04f 0a00 	mov.w	sl, #0
 80063bc:	f104 031a 	add.w	r3, r4, #26
 80063c0:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 80063c4:	930b      	str	r3, [sp, #44]	; 0x2c
 80063c6:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80063ca:	eba9 0308 	sub.w	r3, r9, r8
 80063ce:	459a      	cmp	sl, r3
 80063d0:	db31      	blt.n	8006436 <_printf_float+0x38a>
 80063d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80063d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80063d6:	429a      	cmp	r2, r3
 80063d8:	db38      	blt.n	800644c <_printf_float+0x3a0>
 80063da:	6823      	ldr	r3, [r4, #0]
 80063dc:	07da      	lsls	r2, r3, #31
 80063de:	d435      	bmi.n	800644c <_printf_float+0x3a0>
 80063e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80063e2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80063e4:	eba3 0209 	sub.w	r2, r3, r9
 80063e8:	eba3 0801 	sub.w	r8, r3, r1
 80063ec:	4590      	cmp	r8, r2
 80063ee:	bfa8      	it	ge
 80063f0:	4690      	movge	r8, r2
 80063f2:	f1b8 0f00 	cmp.w	r8, #0
 80063f6:	dc31      	bgt.n	800645c <_printf_float+0x3b0>
 80063f8:	2700      	movs	r7, #0
 80063fa:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 80063fe:	f104 091a 	add.w	r9, r4, #26
 8006402:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006404:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006406:	1a9b      	subs	r3, r3, r2
 8006408:	eba3 0308 	sub.w	r3, r3, r8
 800640c:	429f      	cmp	r7, r3
 800640e:	f6bf af78 	bge.w	8006302 <_printf_float+0x256>
 8006412:	2301      	movs	r3, #1
 8006414:	464a      	mov	r2, r9
 8006416:	4659      	mov	r1, fp
 8006418:	4628      	mov	r0, r5
 800641a:	47b0      	blx	r6
 800641c:	3001      	adds	r0, #1
 800641e:	f43f aea1 	beq.w	8006164 <_printf_float+0xb8>
 8006422:	3701      	adds	r7, #1
 8006424:	e7ed      	b.n	8006402 <_printf_float+0x356>
 8006426:	4613      	mov	r3, r2
 8006428:	4659      	mov	r1, fp
 800642a:	463a      	mov	r2, r7
 800642c:	4628      	mov	r0, r5
 800642e:	47b0      	blx	r6
 8006430:	3001      	adds	r0, #1
 8006432:	d1c1      	bne.n	80063b8 <_printf_float+0x30c>
 8006434:	e696      	b.n	8006164 <_printf_float+0xb8>
 8006436:	2301      	movs	r3, #1
 8006438:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800643a:	4659      	mov	r1, fp
 800643c:	4628      	mov	r0, r5
 800643e:	47b0      	blx	r6
 8006440:	3001      	adds	r0, #1
 8006442:	f43f ae8f 	beq.w	8006164 <_printf_float+0xb8>
 8006446:	f10a 0a01 	add.w	sl, sl, #1
 800644a:	e7bc      	b.n	80063c6 <_printf_float+0x31a>
 800644c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800644e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006450:	4659      	mov	r1, fp
 8006452:	4628      	mov	r0, r5
 8006454:	47b0      	blx	r6
 8006456:	3001      	adds	r0, #1
 8006458:	d1c2      	bne.n	80063e0 <_printf_float+0x334>
 800645a:	e683      	b.n	8006164 <_printf_float+0xb8>
 800645c:	4643      	mov	r3, r8
 800645e:	eb07 0209 	add.w	r2, r7, r9
 8006462:	4659      	mov	r1, fp
 8006464:	4628      	mov	r0, r5
 8006466:	47b0      	blx	r6
 8006468:	3001      	adds	r0, #1
 800646a:	d1c5      	bne.n	80063f8 <_printf_float+0x34c>
 800646c:	e67a      	b.n	8006164 <_printf_float+0xb8>
 800646e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006470:	2a01      	cmp	r2, #1
 8006472:	dc01      	bgt.n	8006478 <_printf_float+0x3cc>
 8006474:	07db      	lsls	r3, r3, #31
 8006476:	d534      	bpl.n	80064e2 <_printf_float+0x436>
 8006478:	2301      	movs	r3, #1
 800647a:	463a      	mov	r2, r7
 800647c:	4659      	mov	r1, fp
 800647e:	4628      	mov	r0, r5
 8006480:	47b0      	blx	r6
 8006482:	3001      	adds	r0, #1
 8006484:	f43f ae6e 	beq.w	8006164 <_printf_float+0xb8>
 8006488:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800648a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800648c:	4659      	mov	r1, fp
 800648e:	4628      	mov	r0, r5
 8006490:	47b0      	blx	r6
 8006492:	3001      	adds	r0, #1
 8006494:	f43f ae66 	beq.w	8006164 <_printf_float+0xb8>
 8006498:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800649c:	2200      	movs	r2, #0
 800649e:	2300      	movs	r3, #0
 80064a0:	f7fa fafa 	bl	8000a98 <__aeabi_dcmpeq>
 80064a4:	b150      	cbz	r0, 80064bc <_printf_float+0x410>
 80064a6:	2700      	movs	r7, #0
 80064a8:	f104 081a 	add.w	r8, r4, #26
 80064ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80064ae:	3b01      	subs	r3, #1
 80064b0:	429f      	cmp	r7, r3
 80064b2:	db0c      	blt.n	80064ce <_printf_float+0x422>
 80064b4:	464b      	mov	r3, r9
 80064b6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80064ba:	e6f2      	b.n	80062a2 <_printf_float+0x1f6>
 80064bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80064be:	1c7a      	adds	r2, r7, #1
 80064c0:	3b01      	subs	r3, #1
 80064c2:	4659      	mov	r1, fp
 80064c4:	4628      	mov	r0, r5
 80064c6:	47b0      	blx	r6
 80064c8:	3001      	adds	r0, #1
 80064ca:	d1f3      	bne.n	80064b4 <_printf_float+0x408>
 80064cc:	e64a      	b.n	8006164 <_printf_float+0xb8>
 80064ce:	2301      	movs	r3, #1
 80064d0:	4642      	mov	r2, r8
 80064d2:	4659      	mov	r1, fp
 80064d4:	4628      	mov	r0, r5
 80064d6:	47b0      	blx	r6
 80064d8:	3001      	adds	r0, #1
 80064da:	f43f ae43 	beq.w	8006164 <_printf_float+0xb8>
 80064de:	3701      	adds	r7, #1
 80064e0:	e7e4      	b.n	80064ac <_printf_float+0x400>
 80064e2:	2301      	movs	r3, #1
 80064e4:	463a      	mov	r2, r7
 80064e6:	e7ec      	b.n	80064c2 <_printf_float+0x416>
 80064e8:	2301      	movs	r3, #1
 80064ea:	4642      	mov	r2, r8
 80064ec:	4659      	mov	r1, fp
 80064ee:	4628      	mov	r0, r5
 80064f0:	47b0      	blx	r6
 80064f2:	3001      	adds	r0, #1
 80064f4:	f43f ae36 	beq.w	8006164 <_printf_float+0xb8>
 80064f8:	3701      	adds	r7, #1
 80064fa:	e708      	b.n	800630e <_printf_float+0x262>
 80064fc:	463a      	mov	r2, r7
 80064fe:	464b      	mov	r3, r9
 8006500:	4638      	mov	r0, r7
 8006502:	4649      	mov	r1, r9
 8006504:	f7fa fafa 	bl	8000afc <__aeabi_dcmpun>
 8006508:	2800      	cmp	r0, #0
 800650a:	f43f ae30 	beq.w	800616e <_printf_float+0xc2>
 800650e:	4b01      	ldr	r3, [pc, #4]	; (8006514 <_printf_float+0x468>)
 8006510:	4f01      	ldr	r7, [pc, #4]	; (8006518 <_printf_float+0x46c>)
 8006512:	e612      	b.n	800613a <_printf_float+0x8e>
 8006514:	08008bac 	.word	0x08008bac
 8006518:	08008bb0 	.word	0x08008bb0

0800651c <_printf_common>:
 800651c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006520:	4691      	mov	r9, r2
 8006522:	461f      	mov	r7, r3
 8006524:	688a      	ldr	r2, [r1, #8]
 8006526:	690b      	ldr	r3, [r1, #16]
 8006528:	4606      	mov	r6, r0
 800652a:	4293      	cmp	r3, r2
 800652c:	bfb8      	it	lt
 800652e:	4613      	movlt	r3, r2
 8006530:	f8c9 3000 	str.w	r3, [r9]
 8006534:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006538:	460c      	mov	r4, r1
 800653a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800653e:	b112      	cbz	r2, 8006546 <_printf_common+0x2a>
 8006540:	3301      	adds	r3, #1
 8006542:	f8c9 3000 	str.w	r3, [r9]
 8006546:	6823      	ldr	r3, [r4, #0]
 8006548:	0699      	lsls	r1, r3, #26
 800654a:	bf42      	ittt	mi
 800654c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006550:	3302      	addmi	r3, #2
 8006552:	f8c9 3000 	strmi.w	r3, [r9]
 8006556:	6825      	ldr	r5, [r4, #0]
 8006558:	f015 0506 	ands.w	r5, r5, #6
 800655c:	d107      	bne.n	800656e <_printf_common+0x52>
 800655e:	f104 0a19 	add.w	sl, r4, #25
 8006562:	68e3      	ldr	r3, [r4, #12]
 8006564:	f8d9 2000 	ldr.w	r2, [r9]
 8006568:	1a9b      	subs	r3, r3, r2
 800656a:	429d      	cmp	r5, r3
 800656c:	db2a      	blt.n	80065c4 <_printf_common+0xa8>
 800656e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006572:	6822      	ldr	r2, [r4, #0]
 8006574:	3300      	adds	r3, #0
 8006576:	bf18      	it	ne
 8006578:	2301      	movne	r3, #1
 800657a:	0692      	lsls	r2, r2, #26
 800657c:	d42f      	bmi.n	80065de <_printf_common+0xc2>
 800657e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006582:	4639      	mov	r1, r7
 8006584:	4630      	mov	r0, r6
 8006586:	47c0      	blx	r8
 8006588:	3001      	adds	r0, #1
 800658a:	d022      	beq.n	80065d2 <_printf_common+0xb6>
 800658c:	6823      	ldr	r3, [r4, #0]
 800658e:	68e5      	ldr	r5, [r4, #12]
 8006590:	f003 0306 	and.w	r3, r3, #6
 8006594:	2b04      	cmp	r3, #4
 8006596:	bf18      	it	ne
 8006598:	2500      	movne	r5, #0
 800659a:	f8d9 2000 	ldr.w	r2, [r9]
 800659e:	f04f 0900 	mov.w	r9, #0
 80065a2:	bf08      	it	eq
 80065a4:	1aad      	subeq	r5, r5, r2
 80065a6:	68a3      	ldr	r3, [r4, #8]
 80065a8:	6922      	ldr	r2, [r4, #16]
 80065aa:	bf08      	it	eq
 80065ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80065b0:	4293      	cmp	r3, r2
 80065b2:	bfc4      	itt	gt
 80065b4:	1a9b      	subgt	r3, r3, r2
 80065b6:	18ed      	addgt	r5, r5, r3
 80065b8:	341a      	adds	r4, #26
 80065ba:	454d      	cmp	r5, r9
 80065bc:	d11b      	bne.n	80065f6 <_printf_common+0xda>
 80065be:	2000      	movs	r0, #0
 80065c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065c4:	2301      	movs	r3, #1
 80065c6:	4652      	mov	r2, sl
 80065c8:	4639      	mov	r1, r7
 80065ca:	4630      	mov	r0, r6
 80065cc:	47c0      	blx	r8
 80065ce:	3001      	adds	r0, #1
 80065d0:	d103      	bne.n	80065da <_printf_common+0xbe>
 80065d2:	f04f 30ff 	mov.w	r0, #4294967295
 80065d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065da:	3501      	adds	r5, #1
 80065dc:	e7c1      	b.n	8006562 <_printf_common+0x46>
 80065de:	2030      	movs	r0, #48	; 0x30
 80065e0:	18e1      	adds	r1, r4, r3
 80065e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80065e6:	1c5a      	adds	r2, r3, #1
 80065e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80065ec:	4422      	add	r2, r4
 80065ee:	3302      	adds	r3, #2
 80065f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80065f4:	e7c3      	b.n	800657e <_printf_common+0x62>
 80065f6:	2301      	movs	r3, #1
 80065f8:	4622      	mov	r2, r4
 80065fa:	4639      	mov	r1, r7
 80065fc:	4630      	mov	r0, r6
 80065fe:	47c0      	blx	r8
 8006600:	3001      	adds	r0, #1
 8006602:	d0e6      	beq.n	80065d2 <_printf_common+0xb6>
 8006604:	f109 0901 	add.w	r9, r9, #1
 8006608:	e7d7      	b.n	80065ba <_printf_common+0x9e>
	...

0800660c <_printf_i>:
 800660c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006610:	4617      	mov	r7, r2
 8006612:	7e0a      	ldrb	r2, [r1, #24]
 8006614:	b085      	sub	sp, #20
 8006616:	2a6e      	cmp	r2, #110	; 0x6e
 8006618:	4698      	mov	r8, r3
 800661a:	4606      	mov	r6, r0
 800661c:	460c      	mov	r4, r1
 800661e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006620:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8006624:	f000 80bc 	beq.w	80067a0 <_printf_i+0x194>
 8006628:	d81a      	bhi.n	8006660 <_printf_i+0x54>
 800662a:	2a63      	cmp	r2, #99	; 0x63
 800662c:	d02e      	beq.n	800668c <_printf_i+0x80>
 800662e:	d80a      	bhi.n	8006646 <_printf_i+0x3a>
 8006630:	2a00      	cmp	r2, #0
 8006632:	f000 80c8 	beq.w	80067c6 <_printf_i+0x1ba>
 8006636:	2a58      	cmp	r2, #88	; 0x58
 8006638:	f000 808a 	beq.w	8006750 <_printf_i+0x144>
 800663c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006640:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8006644:	e02a      	b.n	800669c <_printf_i+0x90>
 8006646:	2a64      	cmp	r2, #100	; 0x64
 8006648:	d001      	beq.n	800664e <_printf_i+0x42>
 800664a:	2a69      	cmp	r2, #105	; 0x69
 800664c:	d1f6      	bne.n	800663c <_printf_i+0x30>
 800664e:	6821      	ldr	r1, [r4, #0]
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	f011 0f80 	tst.w	r1, #128	; 0x80
 8006656:	d023      	beq.n	80066a0 <_printf_i+0x94>
 8006658:	1d11      	adds	r1, r2, #4
 800665a:	6019      	str	r1, [r3, #0]
 800665c:	6813      	ldr	r3, [r2, #0]
 800665e:	e027      	b.n	80066b0 <_printf_i+0xa4>
 8006660:	2a73      	cmp	r2, #115	; 0x73
 8006662:	f000 80b4 	beq.w	80067ce <_printf_i+0x1c2>
 8006666:	d808      	bhi.n	800667a <_printf_i+0x6e>
 8006668:	2a6f      	cmp	r2, #111	; 0x6f
 800666a:	d02a      	beq.n	80066c2 <_printf_i+0xb6>
 800666c:	2a70      	cmp	r2, #112	; 0x70
 800666e:	d1e5      	bne.n	800663c <_printf_i+0x30>
 8006670:	680a      	ldr	r2, [r1, #0]
 8006672:	f042 0220 	orr.w	r2, r2, #32
 8006676:	600a      	str	r2, [r1, #0]
 8006678:	e003      	b.n	8006682 <_printf_i+0x76>
 800667a:	2a75      	cmp	r2, #117	; 0x75
 800667c:	d021      	beq.n	80066c2 <_printf_i+0xb6>
 800667e:	2a78      	cmp	r2, #120	; 0x78
 8006680:	d1dc      	bne.n	800663c <_printf_i+0x30>
 8006682:	2278      	movs	r2, #120	; 0x78
 8006684:	496f      	ldr	r1, [pc, #444]	; (8006844 <_printf_i+0x238>)
 8006686:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800668a:	e064      	b.n	8006756 <_printf_i+0x14a>
 800668c:	681a      	ldr	r2, [r3, #0]
 800668e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8006692:	1d11      	adds	r1, r2, #4
 8006694:	6019      	str	r1, [r3, #0]
 8006696:	6813      	ldr	r3, [r2, #0]
 8006698:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800669c:	2301      	movs	r3, #1
 800669e:	e0a3      	b.n	80067e8 <_printf_i+0x1dc>
 80066a0:	f011 0f40 	tst.w	r1, #64	; 0x40
 80066a4:	f102 0104 	add.w	r1, r2, #4
 80066a8:	6019      	str	r1, [r3, #0]
 80066aa:	d0d7      	beq.n	800665c <_printf_i+0x50>
 80066ac:	f9b2 3000 	ldrsh.w	r3, [r2]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	da03      	bge.n	80066bc <_printf_i+0xb0>
 80066b4:	222d      	movs	r2, #45	; 0x2d
 80066b6:	425b      	negs	r3, r3
 80066b8:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80066bc:	4962      	ldr	r1, [pc, #392]	; (8006848 <_printf_i+0x23c>)
 80066be:	220a      	movs	r2, #10
 80066c0:	e017      	b.n	80066f2 <_printf_i+0xe6>
 80066c2:	6820      	ldr	r0, [r4, #0]
 80066c4:	6819      	ldr	r1, [r3, #0]
 80066c6:	f010 0f80 	tst.w	r0, #128	; 0x80
 80066ca:	d003      	beq.n	80066d4 <_printf_i+0xc8>
 80066cc:	1d08      	adds	r0, r1, #4
 80066ce:	6018      	str	r0, [r3, #0]
 80066d0:	680b      	ldr	r3, [r1, #0]
 80066d2:	e006      	b.n	80066e2 <_printf_i+0xd6>
 80066d4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80066d8:	f101 0004 	add.w	r0, r1, #4
 80066dc:	6018      	str	r0, [r3, #0]
 80066de:	d0f7      	beq.n	80066d0 <_printf_i+0xc4>
 80066e0:	880b      	ldrh	r3, [r1, #0]
 80066e2:	2a6f      	cmp	r2, #111	; 0x6f
 80066e4:	bf14      	ite	ne
 80066e6:	220a      	movne	r2, #10
 80066e8:	2208      	moveq	r2, #8
 80066ea:	4957      	ldr	r1, [pc, #348]	; (8006848 <_printf_i+0x23c>)
 80066ec:	2000      	movs	r0, #0
 80066ee:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80066f2:	6865      	ldr	r5, [r4, #4]
 80066f4:	2d00      	cmp	r5, #0
 80066f6:	60a5      	str	r5, [r4, #8]
 80066f8:	f2c0 809c 	blt.w	8006834 <_printf_i+0x228>
 80066fc:	6820      	ldr	r0, [r4, #0]
 80066fe:	f020 0004 	bic.w	r0, r0, #4
 8006702:	6020      	str	r0, [r4, #0]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d13f      	bne.n	8006788 <_printf_i+0x17c>
 8006708:	2d00      	cmp	r5, #0
 800670a:	f040 8095 	bne.w	8006838 <_printf_i+0x22c>
 800670e:	4675      	mov	r5, lr
 8006710:	2a08      	cmp	r2, #8
 8006712:	d10b      	bne.n	800672c <_printf_i+0x120>
 8006714:	6823      	ldr	r3, [r4, #0]
 8006716:	07da      	lsls	r2, r3, #31
 8006718:	d508      	bpl.n	800672c <_printf_i+0x120>
 800671a:	6923      	ldr	r3, [r4, #16]
 800671c:	6862      	ldr	r2, [r4, #4]
 800671e:	429a      	cmp	r2, r3
 8006720:	bfde      	ittt	le
 8006722:	2330      	movle	r3, #48	; 0x30
 8006724:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006728:	f105 35ff 	addle.w	r5, r5, #4294967295
 800672c:	ebae 0305 	sub.w	r3, lr, r5
 8006730:	6123      	str	r3, [r4, #16]
 8006732:	f8cd 8000 	str.w	r8, [sp]
 8006736:	463b      	mov	r3, r7
 8006738:	aa03      	add	r2, sp, #12
 800673a:	4621      	mov	r1, r4
 800673c:	4630      	mov	r0, r6
 800673e:	f7ff feed 	bl	800651c <_printf_common>
 8006742:	3001      	adds	r0, #1
 8006744:	d155      	bne.n	80067f2 <_printf_i+0x1e6>
 8006746:	f04f 30ff 	mov.w	r0, #4294967295
 800674a:	b005      	add	sp, #20
 800674c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006750:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8006754:	493c      	ldr	r1, [pc, #240]	; (8006848 <_printf_i+0x23c>)
 8006756:	6822      	ldr	r2, [r4, #0]
 8006758:	6818      	ldr	r0, [r3, #0]
 800675a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800675e:	f100 0504 	add.w	r5, r0, #4
 8006762:	601d      	str	r5, [r3, #0]
 8006764:	d001      	beq.n	800676a <_printf_i+0x15e>
 8006766:	6803      	ldr	r3, [r0, #0]
 8006768:	e002      	b.n	8006770 <_printf_i+0x164>
 800676a:	0655      	lsls	r5, r2, #25
 800676c:	d5fb      	bpl.n	8006766 <_printf_i+0x15a>
 800676e:	8803      	ldrh	r3, [r0, #0]
 8006770:	07d0      	lsls	r0, r2, #31
 8006772:	bf44      	itt	mi
 8006774:	f042 0220 	orrmi.w	r2, r2, #32
 8006778:	6022      	strmi	r2, [r4, #0]
 800677a:	b91b      	cbnz	r3, 8006784 <_printf_i+0x178>
 800677c:	6822      	ldr	r2, [r4, #0]
 800677e:	f022 0220 	bic.w	r2, r2, #32
 8006782:	6022      	str	r2, [r4, #0]
 8006784:	2210      	movs	r2, #16
 8006786:	e7b1      	b.n	80066ec <_printf_i+0xe0>
 8006788:	4675      	mov	r5, lr
 800678a:	fbb3 f0f2 	udiv	r0, r3, r2
 800678e:	fb02 3310 	mls	r3, r2, r0, r3
 8006792:	5ccb      	ldrb	r3, [r1, r3]
 8006794:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006798:	4603      	mov	r3, r0
 800679a:	2800      	cmp	r0, #0
 800679c:	d1f5      	bne.n	800678a <_printf_i+0x17e>
 800679e:	e7b7      	b.n	8006710 <_printf_i+0x104>
 80067a0:	6808      	ldr	r0, [r1, #0]
 80067a2:	681a      	ldr	r2, [r3, #0]
 80067a4:	f010 0f80 	tst.w	r0, #128	; 0x80
 80067a8:	6949      	ldr	r1, [r1, #20]
 80067aa:	d004      	beq.n	80067b6 <_printf_i+0x1aa>
 80067ac:	1d10      	adds	r0, r2, #4
 80067ae:	6018      	str	r0, [r3, #0]
 80067b0:	6813      	ldr	r3, [r2, #0]
 80067b2:	6019      	str	r1, [r3, #0]
 80067b4:	e007      	b.n	80067c6 <_printf_i+0x1ba>
 80067b6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80067ba:	f102 0004 	add.w	r0, r2, #4
 80067be:	6018      	str	r0, [r3, #0]
 80067c0:	6813      	ldr	r3, [r2, #0]
 80067c2:	d0f6      	beq.n	80067b2 <_printf_i+0x1a6>
 80067c4:	8019      	strh	r1, [r3, #0]
 80067c6:	2300      	movs	r3, #0
 80067c8:	4675      	mov	r5, lr
 80067ca:	6123      	str	r3, [r4, #16]
 80067cc:	e7b1      	b.n	8006732 <_printf_i+0x126>
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	1d11      	adds	r1, r2, #4
 80067d2:	6019      	str	r1, [r3, #0]
 80067d4:	6815      	ldr	r5, [r2, #0]
 80067d6:	2100      	movs	r1, #0
 80067d8:	6862      	ldr	r2, [r4, #4]
 80067da:	4628      	mov	r0, r5
 80067dc:	f000 fefe 	bl	80075dc <memchr>
 80067e0:	b108      	cbz	r0, 80067e6 <_printf_i+0x1da>
 80067e2:	1b40      	subs	r0, r0, r5
 80067e4:	6060      	str	r0, [r4, #4]
 80067e6:	6863      	ldr	r3, [r4, #4]
 80067e8:	6123      	str	r3, [r4, #16]
 80067ea:	2300      	movs	r3, #0
 80067ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067f0:	e79f      	b.n	8006732 <_printf_i+0x126>
 80067f2:	6923      	ldr	r3, [r4, #16]
 80067f4:	462a      	mov	r2, r5
 80067f6:	4639      	mov	r1, r7
 80067f8:	4630      	mov	r0, r6
 80067fa:	47c0      	blx	r8
 80067fc:	3001      	adds	r0, #1
 80067fe:	d0a2      	beq.n	8006746 <_printf_i+0x13a>
 8006800:	6823      	ldr	r3, [r4, #0]
 8006802:	079b      	lsls	r3, r3, #30
 8006804:	d507      	bpl.n	8006816 <_printf_i+0x20a>
 8006806:	2500      	movs	r5, #0
 8006808:	f104 0919 	add.w	r9, r4, #25
 800680c:	68e3      	ldr	r3, [r4, #12]
 800680e:	9a03      	ldr	r2, [sp, #12]
 8006810:	1a9b      	subs	r3, r3, r2
 8006812:	429d      	cmp	r5, r3
 8006814:	db05      	blt.n	8006822 <_printf_i+0x216>
 8006816:	68e0      	ldr	r0, [r4, #12]
 8006818:	9b03      	ldr	r3, [sp, #12]
 800681a:	4298      	cmp	r0, r3
 800681c:	bfb8      	it	lt
 800681e:	4618      	movlt	r0, r3
 8006820:	e793      	b.n	800674a <_printf_i+0x13e>
 8006822:	2301      	movs	r3, #1
 8006824:	464a      	mov	r2, r9
 8006826:	4639      	mov	r1, r7
 8006828:	4630      	mov	r0, r6
 800682a:	47c0      	blx	r8
 800682c:	3001      	adds	r0, #1
 800682e:	d08a      	beq.n	8006746 <_printf_i+0x13a>
 8006830:	3501      	adds	r5, #1
 8006832:	e7eb      	b.n	800680c <_printf_i+0x200>
 8006834:	2b00      	cmp	r3, #0
 8006836:	d1a7      	bne.n	8006788 <_printf_i+0x17c>
 8006838:	780b      	ldrb	r3, [r1, #0]
 800683a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800683e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006842:	e765      	b.n	8006710 <_printf_i+0x104>
 8006844:	08008bc5 	.word	0x08008bc5
 8006848:	08008bb4 	.word	0x08008bb4

0800684c <siprintf>:
 800684c:	b40e      	push	{r1, r2, r3}
 800684e:	f44f 7102 	mov.w	r1, #520	; 0x208
 8006852:	b500      	push	{lr}
 8006854:	b09c      	sub	sp, #112	; 0x70
 8006856:	f8ad 1014 	strh.w	r1, [sp, #20]
 800685a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800685e:	9104      	str	r1, [sp, #16]
 8006860:	9107      	str	r1, [sp, #28]
 8006862:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006866:	ab1d      	add	r3, sp, #116	; 0x74
 8006868:	9002      	str	r0, [sp, #8]
 800686a:	9006      	str	r0, [sp, #24]
 800686c:	4808      	ldr	r0, [pc, #32]	; (8006890 <siprintf+0x44>)
 800686e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006872:	f8ad 1016 	strh.w	r1, [sp, #22]
 8006876:	6800      	ldr	r0, [r0, #0]
 8006878:	a902      	add	r1, sp, #8
 800687a:	9301      	str	r3, [sp, #4]
 800687c:	f001 faa2 	bl	8007dc4 <_svfiprintf_r>
 8006880:	2200      	movs	r2, #0
 8006882:	9b02      	ldr	r3, [sp, #8]
 8006884:	701a      	strb	r2, [r3, #0]
 8006886:	b01c      	add	sp, #112	; 0x70
 8006888:	f85d eb04 	ldr.w	lr, [sp], #4
 800688c:	b003      	add	sp, #12
 800688e:	4770      	bx	lr
 8006890:	20000054 	.word	0x20000054

08006894 <siscanf>:
 8006894:	b40e      	push	{r1, r2, r3}
 8006896:	f44f 7201 	mov.w	r2, #516	; 0x204
 800689a:	b530      	push	{r4, r5, lr}
 800689c:	b09c      	sub	sp, #112	; 0x70
 800689e:	ac1f      	add	r4, sp, #124	; 0x7c
 80068a0:	f854 5b04 	ldr.w	r5, [r4], #4
 80068a4:	f8ad 2014 	strh.w	r2, [sp, #20]
 80068a8:	9002      	str	r0, [sp, #8]
 80068aa:	9006      	str	r0, [sp, #24]
 80068ac:	f7f9 fcc0 	bl	8000230 <strlen>
 80068b0:	4b0b      	ldr	r3, [pc, #44]	; (80068e0 <siscanf+0x4c>)
 80068b2:	9003      	str	r0, [sp, #12]
 80068b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80068b6:	2300      	movs	r3, #0
 80068b8:	930f      	str	r3, [sp, #60]	; 0x3c
 80068ba:	9314      	str	r3, [sp, #80]	; 0x50
 80068bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80068c0:	9007      	str	r0, [sp, #28]
 80068c2:	4808      	ldr	r0, [pc, #32]	; (80068e4 <siscanf+0x50>)
 80068c4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80068c8:	462a      	mov	r2, r5
 80068ca:	4623      	mov	r3, r4
 80068cc:	a902      	add	r1, sp, #8
 80068ce:	6800      	ldr	r0, [r0, #0]
 80068d0:	9401      	str	r4, [sp, #4]
 80068d2:	f001 fbc5 	bl	8008060 <__ssvfiscanf_r>
 80068d6:	b01c      	add	sp, #112	; 0x70
 80068d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80068dc:	b003      	add	sp, #12
 80068de:	4770      	bx	lr
 80068e0:	080068e9 	.word	0x080068e9
 80068e4:	20000054 	.word	0x20000054

080068e8 <__seofread>:
 80068e8:	2000      	movs	r0, #0
 80068ea:	4770      	bx	lr

080068ec <quorem>:
 80068ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068f0:	6903      	ldr	r3, [r0, #16]
 80068f2:	690c      	ldr	r4, [r1, #16]
 80068f4:	4680      	mov	r8, r0
 80068f6:	429c      	cmp	r4, r3
 80068f8:	f300 8082 	bgt.w	8006a00 <quorem+0x114>
 80068fc:	3c01      	subs	r4, #1
 80068fe:	f101 0714 	add.w	r7, r1, #20
 8006902:	f100 0614 	add.w	r6, r0, #20
 8006906:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800690a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800690e:	3501      	adds	r5, #1
 8006910:	fbb0 f5f5 	udiv	r5, r0, r5
 8006914:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8006918:	eb06 030e 	add.w	r3, r6, lr
 800691c:	eb07 090e 	add.w	r9, r7, lr
 8006920:	9301      	str	r3, [sp, #4]
 8006922:	b38d      	cbz	r5, 8006988 <quorem+0x9c>
 8006924:	f04f 0a00 	mov.w	sl, #0
 8006928:	4638      	mov	r0, r7
 800692a:	46b4      	mov	ip, r6
 800692c:	46d3      	mov	fp, sl
 800692e:	f850 2b04 	ldr.w	r2, [r0], #4
 8006932:	b293      	uxth	r3, r2
 8006934:	fb05 a303 	mla	r3, r5, r3, sl
 8006938:	0c12      	lsrs	r2, r2, #16
 800693a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800693e:	fb05 a202 	mla	r2, r5, r2, sl
 8006942:	b29b      	uxth	r3, r3
 8006944:	ebab 0303 	sub.w	r3, fp, r3
 8006948:	f8bc b000 	ldrh.w	fp, [ip]
 800694c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8006950:	445b      	add	r3, fp
 8006952:	fa1f fb82 	uxth.w	fp, r2
 8006956:	f8dc 2000 	ldr.w	r2, [ip]
 800695a:	4581      	cmp	r9, r0
 800695c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8006960:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006964:	b29b      	uxth	r3, r3
 8006966:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800696a:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800696e:	f84c 3b04 	str.w	r3, [ip], #4
 8006972:	d2dc      	bcs.n	800692e <quorem+0x42>
 8006974:	f856 300e 	ldr.w	r3, [r6, lr]
 8006978:	b933      	cbnz	r3, 8006988 <quorem+0x9c>
 800697a:	9b01      	ldr	r3, [sp, #4]
 800697c:	3b04      	subs	r3, #4
 800697e:	429e      	cmp	r6, r3
 8006980:	461a      	mov	r2, r3
 8006982:	d331      	bcc.n	80069e8 <quorem+0xfc>
 8006984:	f8c8 4010 	str.w	r4, [r8, #16]
 8006988:	4640      	mov	r0, r8
 800698a:	f001 f83e 	bl	8007a0a <__mcmp>
 800698e:	2800      	cmp	r0, #0
 8006990:	db26      	blt.n	80069e0 <quorem+0xf4>
 8006992:	4630      	mov	r0, r6
 8006994:	f04f 0e00 	mov.w	lr, #0
 8006998:	3501      	adds	r5, #1
 800699a:	f857 1b04 	ldr.w	r1, [r7], #4
 800699e:	f8d0 c000 	ldr.w	ip, [r0]
 80069a2:	b28b      	uxth	r3, r1
 80069a4:	ebae 0303 	sub.w	r3, lr, r3
 80069a8:	fa1f f28c 	uxth.w	r2, ip
 80069ac:	4413      	add	r3, r2
 80069ae:	0c0a      	lsrs	r2, r1, #16
 80069b0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80069b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80069be:	45b9      	cmp	r9, r7
 80069c0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80069c4:	f840 3b04 	str.w	r3, [r0], #4
 80069c8:	d2e7      	bcs.n	800699a <quorem+0xae>
 80069ca:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80069ce:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80069d2:	b92a      	cbnz	r2, 80069e0 <quorem+0xf4>
 80069d4:	3b04      	subs	r3, #4
 80069d6:	429e      	cmp	r6, r3
 80069d8:	461a      	mov	r2, r3
 80069da:	d30b      	bcc.n	80069f4 <quorem+0x108>
 80069dc:	f8c8 4010 	str.w	r4, [r8, #16]
 80069e0:	4628      	mov	r0, r5
 80069e2:	b003      	add	sp, #12
 80069e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069e8:	6812      	ldr	r2, [r2, #0]
 80069ea:	3b04      	subs	r3, #4
 80069ec:	2a00      	cmp	r2, #0
 80069ee:	d1c9      	bne.n	8006984 <quorem+0x98>
 80069f0:	3c01      	subs	r4, #1
 80069f2:	e7c4      	b.n	800697e <quorem+0x92>
 80069f4:	6812      	ldr	r2, [r2, #0]
 80069f6:	3b04      	subs	r3, #4
 80069f8:	2a00      	cmp	r2, #0
 80069fa:	d1ef      	bne.n	80069dc <quorem+0xf0>
 80069fc:	3c01      	subs	r4, #1
 80069fe:	e7ea      	b.n	80069d6 <quorem+0xea>
 8006a00:	2000      	movs	r0, #0
 8006a02:	e7ee      	b.n	80069e2 <quorem+0xf6>
 8006a04:	0000      	movs	r0, r0
	...

08006a08 <_dtoa_r>:
 8006a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a0c:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006a0e:	b095      	sub	sp, #84	; 0x54
 8006a10:	4604      	mov	r4, r0
 8006a12:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8006a14:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006a18:	b93e      	cbnz	r6, 8006a2a <_dtoa_r+0x22>
 8006a1a:	2010      	movs	r0, #16
 8006a1c:	f000 fdd6 	bl	80075cc <malloc>
 8006a20:	6260      	str	r0, [r4, #36]	; 0x24
 8006a22:	6046      	str	r6, [r0, #4]
 8006a24:	6086      	str	r6, [r0, #8]
 8006a26:	6006      	str	r6, [r0, #0]
 8006a28:	60c6      	str	r6, [r0, #12]
 8006a2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a2c:	6819      	ldr	r1, [r3, #0]
 8006a2e:	b151      	cbz	r1, 8006a46 <_dtoa_r+0x3e>
 8006a30:	685a      	ldr	r2, [r3, #4]
 8006a32:	2301      	movs	r3, #1
 8006a34:	4093      	lsls	r3, r2
 8006a36:	604a      	str	r2, [r1, #4]
 8006a38:	608b      	str	r3, [r1, #8]
 8006a3a:	4620      	mov	r0, r4
 8006a3c:	f000 fe10 	bl	8007660 <_Bfree>
 8006a40:	2200      	movs	r2, #0
 8006a42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a44:	601a      	str	r2, [r3, #0]
 8006a46:	9b03      	ldr	r3, [sp, #12]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	bfb7      	itett	lt
 8006a4c:	2301      	movlt	r3, #1
 8006a4e:	2300      	movge	r3, #0
 8006a50:	602b      	strlt	r3, [r5, #0]
 8006a52:	9b03      	ldrlt	r3, [sp, #12]
 8006a54:	bfae      	itee	ge
 8006a56:	602b      	strge	r3, [r5, #0]
 8006a58:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006a5c:	9303      	strlt	r3, [sp, #12]
 8006a5e:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8006a62:	4bab      	ldr	r3, [pc, #684]	; (8006d10 <_dtoa_r+0x308>)
 8006a64:	ea33 0309 	bics.w	r3, r3, r9
 8006a68:	d11b      	bne.n	8006aa2 <_dtoa_r+0x9a>
 8006a6a:	f242 730f 	movw	r3, #9999	; 0x270f
 8006a6e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006a70:	6013      	str	r3, [r2, #0]
 8006a72:	9b02      	ldr	r3, [sp, #8]
 8006a74:	b923      	cbnz	r3, 8006a80 <_dtoa_r+0x78>
 8006a76:	f3c9 0013 	ubfx	r0, r9, #0, #20
 8006a7a:	2800      	cmp	r0, #0
 8006a7c:	f000 8583 	beq.w	8007586 <_dtoa_r+0xb7e>
 8006a80:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006a82:	b953      	cbnz	r3, 8006a9a <_dtoa_r+0x92>
 8006a84:	4ba3      	ldr	r3, [pc, #652]	; (8006d14 <_dtoa_r+0x30c>)
 8006a86:	e021      	b.n	8006acc <_dtoa_r+0xc4>
 8006a88:	4ba3      	ldr	r3, [pc, #652]	; (8006d18 <_dtoa_r+0x310>)
 8006a8a:	9306      	str	r3, [sp, #24]
 8006a8c:	3308      	adds	r3, #8
 8006a8e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006a90:	6013      	str	r3, [r2, #0]
 8006a92:	9806      	ldr	r0, [sp, #24]
 8006a94:	b015      	add	sp, #84	; 0x54
 8006a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a9a:	4b9e      	ldr	r3, [pc, #632]	; (8006d14 <_dtoa_r+0x30c>)
 8006a9c:	9306      	str	r3, [sp, #24]
 8006a9e:	3303      	adds	r3, #3
 8006aa0:	e7f5      	b.n	8006a8e <_dtoa_r+0x86>
 8006aa2:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	4630      	mov	r0, r6
 8006aac:	4639      	mov	r1, r7
 8006aae:	f7f9 fff3 	bl	8000a98 <__aeabi_dcmpeq>
 8006ab2:	4680      	mov	r8, r0
 8006ab4:	b160      	cbz	r0, 8006ad0 <_dtoa_r+0xc8>
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006aba:	6013      	str	r3, [r2, #0]
 8006abc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	f000 855e 	beq.w	8007580 <_dtoa_r+0xb78>
 8006ac4:	4b95      	ldr	r3, [pc, #596]	; (8006d1c <_dtoa_r+0x314>)
 8006ac6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006ac8:	6013      	str	r3, [r2, #0]
 8006aca:	3b01      	subs	r3, #1
 8006acc:	9306      	str	r3, [sp, #24]
 8006ace:	e7e0      	b.n	8006a92 <_dtoa_r+0x8a>
 8006ad0:	ab12      	add	r3, sp, #72	; 0x48
 8006ad2:	9301      	str	r3, [sp, #4]
 8006ad4:	ab13      	add	r3, sp, #76	; 0x4c
 8006ad6:	9300      	str	r3, [sp, #0]
 8006ad8:	4632      	mov	r2, r6
 8006ada:	463b      	mov	r3, r7
 8006adc:	4620      	mov	r0, r4
 8006ade:	f001 f80d 	bl	8007afc <__d2b>
 8006ae2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006ae6:	4682      	mov	sl, r0
 8006ae8:	2d00      	cmp	r5, #0
 8006aea:	d07d      	beq.n	8006be8 <_dtoa_r+0x1e0>
 8006aec:	4630      	mov	r0, r6
 8006aee:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006af2:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8006af6:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006afa:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006afe:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8006b02:	2200      	movs	r2, #0
 8006b04:	4b86      	ldr	r3, [pc, #536]	; (8006d20 <_dtoa_r+0x318>)
 8006b06:	f7f9 fbab 	bl	8000260 <__aeabi_dsub>
 8006b0a:	a37b      	add	r3, pc, #492	; (adr r3, 8006cf8 <_dtoa_r+0x2f0>)
 8006b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b10:	f7f9 fd5a 	bl	80005c8 <__aeabi_dmul>
 8006b14:	a37a      	add	r3, pc, #488	; (adr r3, 8006d00 <_dtoa_r+0x2f8>)
 8006b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b1a:	f7f9 fba3 	bl	8000264 <__adddf3>
 8006b1e:	4606      	mov	r6, r0
 8006b20:	4628      	mov	r0, r5
 8006b22:	460f      	mov	r7, r1
 8006b24:	f7f9 fcea 	bl	80004fc <__aeabi_i2d>
 8006b28:	a377      	add	r3, pc, #476	; (adr r3, 8006d08 <_dtoa_r+0x300>)
 8006b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b2e:	f7f9 fd4b 	bl	80005c8 <__aeabi_dmul>
 8006b32:	4602      	mov	r2, r0
 8006b34:	460b      	mov	r3, r1
 8006b36:	4630      	mov	r0, r6
 8006b38:	4639      	mov	r1, r7
 8006b3a:	f7f9 fb93 	bl	8000264 <__adddf3>
 8006b3e:	4606      	mov	r6, r0
 8006b40:	460f      	mov	r7, r1
 8006b42:	f7f9 fff1 	bl	8000b28 <__aeabi_d2iz>
 8006b46:	2200      	movs	r2, #0
 8006b48:	4683      	mov	fp, r0
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	4630      	mov	r0, r6
 8006b4e:	4639      	mov	r1, r7
 8006b50:	f7f9 ffac 	bl	8000aac <__aeabi_dcmplt>
 8006b54:	b158      	cbz	r0, 8006b6e <_dtoa_r+0x166>
 8006b56:	4658      	mov	r0, fp
 8006b58:	f7f9 fcd0 	bl	80004fc <__aeabi_i2d>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	460b      	mov	r3, r1
 8006b60:	4630      	mov	r0, r6
 8006b62:	4639      	mov	r1, r7
 8006b64:	f7f9 ff98 	bl	8000a98 <__aeabi_dcmpeq>
 8006b68:	b908      	cbnz	r0, 8006b6e <_dtoa_r+0x166>
 8006b6a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006b6e:	f1bb 0f16 	cmp.w	fp, #22
 8006b72:	d858      	bhi.n	8006c26 <_dtoa_r+0x21e>
 8006b74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006b78:	496a      	ldr	r1, [pc, #424]	; (8006d24 <_dtoa_r+0x31c>)
 8006b7a:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8006b7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b82:	f7f9 ffb1 	bl	8000ae8 <__aeabi_dcmpgt>
 8006b86:	2800      	cmp	r0, #0
 8006b88:	d04f      	beq.n	8006c2a <_dtoa_r+0x222>
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006b90:	930d      	str	r3, [sp, #52]	; 0x34
 8006b92:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006b94:	1b5d      	subs	r5, r3, r5
 8006b96:	1e6b      	subs	r3, r5, #1
 8006b98:	9307      	str	r3, [sp, #28]
 8006b9a:	bf43      	ittte	mi
 8006b9c:	2300      	movmi	r3, #0
 8006b9e:	f1c5 0801 	rsbmi	r8, r5, #1
 8006ba2:	9307      	strmi	r3, [sp, #28]
 8006ba4:	f04f 0800 	movpl.w	r8, #0
 8006ba8:	f1bb 0f00 	cmp.w	fp, #0
 8006bac:	db3f      	blt.n	8006c2e <_dtoa_r+0x226>
 8006bae:	9b07      	ldr	r3, [sp, #28]
 8006bb0:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8006bb4:	445b      	add	r3, fp
 8006bb6:	9307      	str	r3, [sp, #28]
 8006bb8:	2300      	movs	r3, #0
 8006bba:	9308      	str	r3, [sp, #32]
 8006bbc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006bbe:	2b09      	cmp	r3, #9
 8006bc0:	f200 80b4 	bhi.w	8006d2c <_dtoa_r+0x324>
 8006bc4:	2b05      	cmp	r3, #5
 8006bc6:	bfc4      	itt	gt
 8006bc8:	3b04      	subgt	r3, #4
 8006bca:	931e      	strgt	r3, [sp, #120]	; 0x78
 8006bcc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006bce:	bfc8      	it	gt
 8006bd0:	2600      	movgt	r6, #0
 8006bd2:	f1a3 0302 	sub.w	r3, r3, #2
 8006bd6:	bfd8      	it	le
 8006bd8:	2601      	movle	r6, #1
 8006bda:	2b03      	cmp	r3, #3
 8006bdc:	f200 80b2 	bhi.w	8006d44 <_dtoa_r+0x33c>
 8006be0:	e8df f003 	tbb	[pc, r3]
 8006be4:	782d8684 	.word	0x782d8684
 8006be8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006bea:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8006bec:	441d      	add	r5, r3
 8006bee:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006bf2:	2b20      	cmp	r3, #32
 8006bf4:	dd11      	ble.n	8006c1a <_dtoa_r+0x212>
 8006bf6:	9a02      	ldr	r2, [sp, #8]
 8006bf8:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8006bfc:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8006c00:	fa22 f000 	lsr.w	r0, r2, r0
 8006c04:	fa09 f303 	lsl.w	r3, r9, r3
 8006c08:	4318      	orrs	r0, r3
 8006c0a:	f7f9 fc67 	bl	80004dc <__aeabi_ui2d>
 8006c0e:	2301      	movs	r3, #1
 8006c10:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8006c14:	3d01      	subs	r5, #1
 8006c16:	9310      	str	r3, [sp, #64]	; 0x40
 8006c18:	e773      	b.n	8006b02 <_dtoa_r+0xfa>
 8006c1a:	f1c3 0020 	rsb	r0, r3, #32
 8006c1e:	9b02      	ldr	r3, [sp, #8]
 8006c20:	fa03 f000 	lsl.w	r0, r3, r0
 8006c24:	e7f1      	b.n	8006c0a <_dtoa_r+0x202>
 8006c26:	2301      	movs	r3, #1
 8006c28:	e7b2      	b.n	8006b90 <_dtoa_r+0x188>
 8006c2a:	900d      	str	r0, [sp, #52]	; 0x34
 8006c2c:	e7b1      	b.n	8006b92 <_dtoa_r+0x18a>
 8006c2e:	f1cb 0300 	rsb	r3, fp, #0
 8006c32:	9308      	str	r3, [sp, #32]
 8006c34:	2300      	movs	r3, #0
 8006c36:	eba8 080b 	sub.w	r8, r8, fp
 8006c3a:	930c      	str	r3, [sp, #48]	; 0x30
 8006c3c:	e7be      	b.n	8006bbc <_dtoa_r+0x1b4>
 8006c3e:	2301      	movs	r3, #1
 8006c40:	9309      	str	r3, [sp, #36]	; 0x24
 8006c42:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	f340 8080 	ble.w	8006d4a <_dtoa_r+0x342>
 8006c4a:	4699      	mov	r9, r3
 8006c4c:	9304      	str	r3, [sp, #16]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	2104      	movs	r1, #4
 8006c52:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006c54:	606a      	str	r2, [r5, #4]
 8006c56:	f101 0214 	add.w	r2, r1, #20
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	d97a      	bls.n	8006d54 <_dtoa_r+0x34c>
 8006c5e:	6869      	ldr	r1, [r5, #4]
 8006c60:	4620      	mov	r0, r4
 8006c62:	f000 fcc9 	bl	80075f8 <_Balloc>
 8006c66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c68:	6028      	str	r0, [r5, #0]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f1b9 0f0e 	cmp.w	r9, #14
 8006c70:	9306      	str	r3, [sp, #24]
 8006c72:	f200 80f0 	bhi.w	8006e56 <_dtoa_r+0x44e>
 8006c76:	2e00      	cmp	r6, #0
 8006c78:	f000 80ed 	beq.w	8006e56 <_dtoa_r+0x44e>
 8006c7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006c80:	f1bb 0f00 	cmp.w	fp, #0
 8006c84:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8006c88:	dd79      	ble.n	8006d7e <_dtoa_r+0x376>
 8006c8a:	4a26      	ldr	r2, [pc, #152]	; (8006d24 <_dtoa_r+0x31c>)
 8006c8c:	f00b 030f 	and.w	r3, fp, #15
 8006c90:	ea4f 162b 	mov.w	r6, fp, asr #4
 8006c94:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006c98:	06f0      	lsls	r0, r6, #27
 8006c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c9e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006ca2:	d55c      	bpl.n	8006d5e <_dtoa_r+0x356>
 8006ca4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006ca8:	4b1f      	ldr	r3, [pc, #124]	; (8006d28 <_dtoa_r+0x320>)
 8006caa:	2503      	movs	r5, #3
 8006cac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006cb0:	f7f9 fdb4 	bl	800081c <__aeabi_ddiv>
 8006cb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006cb8:	f006 060f 	and.w	r6, r6, #15
 8006cbc:	4f1a      	ldr	r7, [pc, #104]	; (8006d28 <_dtoa_r+0x320>)
 8006cbe:	2e00      	cmp	r6, #0
 8006cc0:	d14f      	bne.n	8006d62 <_dtoa_r+0x35a>
 8006cc2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006cc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006cca:	f7f9 fda7 	bl	800081c <__aeabi_ddiv>
 8006cce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006cd2:	e06e      	b.n	8006db2 <_dtoa_r+0x3aa>
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	9309      	str	r3, [sp, #36]	; 0x24
 8006cd8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006cda:	445b      	add	r3, fp
 8006cdc:	f103 0901 	add.w	r9, r3, #1
 8006ce0:	9304      	str	r3, [sp, #16]
 8006ce2:	464b      	mov	r3, r9
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	bfb8      	it	lt
 8006ce8:	2301      	movlt	r3, #1
 8006cea:	e7b0      	b.n	8006c4e <_dtoa_r+0x246>
 8006cec:	2300      	movs	r3, #0
 8006cee:	e7a7      	b.n	8006c40 <_dtoa_r+0x238>
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	e7f0      	b.n	8006cd6 <_dtoa_r+0x2ce>
 8006cf4:	f3af 8000 	nop.w
 8006cf8:	636f4361 	.word	0x636f4361
 8006cfc:	3fd287a7 	.word	0x3fd287a7
 8006d00:	8b60c8b3 	.word	0x8b60c8b3
 8006d04:	3fc68a28 	.word	0x3fc68a28
 8006d08:	509f79fb 	.word	0x509f79fb
 8006d0c:	3fd34413 	.word	0x3fd34413
 8006d10:	7ff00000 	.word	0x7ff00000
 8006d14:	08008bdf 	.word	0x08008bdf
 8006d18:	08008bd6 	.word	0x08008bd6
 8006d1c:	08008d0c 	.word	0x08008d0c
 8006d20:	3ff80000 	.word	0x3ff80000
 8006d24:	08008c10 	.word	0x08008c10
 8006d28:	08008be8 	.word	0x08008be8
 8006d2c:	2601      	movs	r6, #1
 8006d2e:	2300      	movs	r3, #0
 8006d30:	9609      	str	r6, [sp, #36]	; 0x24
 8006d32:	931e      	str	r3, [sp, #120]	; 0x78
 8006d34:	f04f 33ff 	mov.w	r3, #4294967295
 8006d38:	2200      	movs	r2, #0
 8006d3a:	9304      	str	r3, [sp, #16]
 8006d3c:	4699      	mov	r9, r3
 8006d3e:	2312      	movs	r3, #18
 8006d40:	921f      	str	r2, [sp, #124]	; 0x7c
 8006d42:	e784      	b.n	8006c4e <_dtoa_r+0x246>
 8006d44:	2301      	movs	r3, #1
 8006d46:	9309      	str	r3, [sp, #36]	; 0x24
 8006d48:	e7f4      	b.n	8006d34 <_dtoa_r+0x32c>
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	9304      	str	r3, [sp, #16]
 8006d4e:	4699      	mov	r9, r3
 8006d50:	461a      	mov	r2, r3
 8006d52:	e7f5      	b.n	8006d40 <_dtoa_r+0x338>
 8006d54:	686a      	ldr	r2, [r5, #4]
 8006d56:	0049      	lsls	r1, r1, #1
 8006d58:	3201      	adds	r2, #1
 8006d5a:	606a      	str	r2, [r5, #4]
 8006d5c:	e77b      	b.n	8006c56 <_dtoa_r+0x24e>
 8006d5e:	2502      	movs	r5, #2
 8006d60:	e7ac      	b.n	8006cbc <_dtoa_r+0x2b4>
 8006d62:	07f1      	lsls	r1, r6, #31
 8006d64:	d508      	bpl.n	8006d78 <_dtoa_r+0x370>
 8006d66:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006d6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d6e:	f7f9 fc2b 	bl	80005c8 <__aeabi_dmul>
 8006d72:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006d76:	3501      	adds	r5, #1
 8006d78:	1076      	asrs	r6, r6, #1
 8006d7a:	3708      	adds	r7, #8
 8006d7c:	e79f      	b.n	8006cbe <_dtoa_r+0x2b6>
 8006d7e:	f000 80a5 	beq.w	8006ecc <_dtoa_r+0x4c4>
 8006d82:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006d86:	f1cb 0600 	rsb	r6, fp, #0
 8006d8a:	4ba2      	ldr	r3, [pc, #648]	; (8007014 <_dtoa_r+0x60c>)
 8006d8c:	f006 020f 	and.w	r2, r6, #15
 8006d90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d98:	f7f9 fc16 	bl	80005c8 <__aeabi_dmul>
 8006d9c:	2502      	movs	r5, #2
 8006d9e:	2300      	movs	r3, #0
 8006da0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006da4:	4f9c      	ldr	r7, [pc, #624]	; (8007018 <_dtoa_r+0x610>)
 8006da6:	1136      	asrs	r6, r6, #4
 8006da8:	2e00      	cmp	r6, #0
 8006daa:	f040 8084 	bne.w	8006eb6 <_dtoa_r+0x4ae>
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d18d      	bne.n	8006cce <_dtoa_r+0x2c6>
 8006db2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	f000 808b 	beq.w	8006ed0 <_dtoa_r+0x4c8>
 8006dba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006dbe:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006dc2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	4b94      	ldr	r3, [pc, #592]	; (800701c <_dtoa_r+0x614>)
 8006dca:	f7f9 fe6f 	bl	8000aac <__aeabi_dcmplt>
 8006dce:	2800      	cmp	r0, #0
 8006dd0:	d07e      	beq.n	8006ed0 <_dtoa_r+0x4c8>
 8006dd2:	f1b9 0f00 	cmp.w	r9, #0
 8006dd6:	d07b      	beq.n	8006ed0 <_dtoa_r+0x4c8>
 8006dd8:	9b04      	ldr	r3, [sp, #16]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	dd37      	ble.n	8006e4e <_dtoa_r+0x446>
 8006dde:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006de2:	2200      	movs	r2, #0
 8006de4:	4b8e      	ldr	r3, [pc, #568]	; (8007020 <_dtoa_r+0x618>)
 8006de6:	f7f9 fbef 	bl	80005c8 <__aeabi_dmul>
 8006dea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006dee:	9e04      	ldr	r6, [sp, #16]
 8006df0:	f10b 37ff 	add.w	r7, fp, #4294967295
 8006df4:	3501      	adds	r5, #1
 8006df6:	4628      	mov	r0, r5
 8006df8:	f7f9 fb80 	bl	80004fc <__aeabi_i2d>
 8006dfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006e00:	f7f9 fbe2 	bl	80005c8 <__aeabi_dmul>
 8006e04:	4b87      	ldr	r3, [pc, #540]	; (8007024 <_dtoa_r+0x61c>)
 8006e06:	2200      	movs	r2, #0
 8006e08:	f7f9 fa2c 	bl	8000264 <__adddf3>
 8006e0c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006e10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e12:	f1a3 7550 	sub.w	r5, r3, #54525952	; 0x3400000
 8006e16:	950b      	str	r5, [sp, #44]	; 0x2c
 8006e18:	2e00      	cmp	r6, #0
 8006e1a:	d15c      	bne.n	8006ed6 <_dtoa_r+0x4ce>
 8006e1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e20:	2200      	movs	r2, #0
 8006e22:	4b81      	ldr	r3, [pc, #516]	; (8007028 <_dtoa_r+0x620>)
 8006e24:	f7f9 fa1c 	bl	8000260 <__aeabi_dsub>
 8006e28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e2a:	462b      	mov	r3, r5
 8006e2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e30:	f7f9 fe5a 	bl	8000ae8 <__aeabi_dcmpgt>
 8006e34:	2800      	cmp	r0, #0
 8006e36:	f040 82f7 	bne.w	8007428 <_dtoa_r+0xa20>
 8006e3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e40:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006e44:	f7f9 fe32 	bl	8000aac <__aeabi_dcmplt>
 8006e48:	2800      	cmp	r0, #0
 8006e4a:	f040 82eb 	bne.w	8007424 <_dtoa_r+0xa1c>
 8006e4e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006e52:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006e56:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	f2c0 8150 	blt.w	80070fe <_dtoa_r+0x6f6>
 8006e5e:	f1bb 0f0e 	cmp.w	fp, #14
 8006e62:	f300 814c 	bgt.w	80070fe <_dtoa_r+0x6f6>
 8006e66:	4b6b      	ldr	r3, [pc, #428]	; (8007014 <_dtoa_r+0x60c>)
 8006e68:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e70:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006e74:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	f280 80da 	bge.w	8007030 <_dtoa_r+0x628>
 8006e7c:	f1b9 0f00 	cmp.w	r9, #0
 8006e80:	f300 80d6 	bgt.w	8007030 <_dtoa_r+0x628>
 8006e84:	f040 82cd 	bne.w	8007422 <_dtoa_r+0xa1a>
 8006e88:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	4b66      	ldr	r3, [pc, #408]	; (8007028 <_dtoa_r+0x620>)
 8006e90:	f7f9 fb9a 	bl	80005c8 <__aeabi_dmul>
 8006e94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006e98:	f7f9 fe1c 	bl	8000ad4 <__aeabi_dcmpge>
 8006e9c:	464e      	mov	r6, r9
 8006e9e:	464f      	mov	r7, r9
 8006ea0:	2800      	cmp	r0, #0
 8006ea2:	f040 82a4 	bne.w	80073ee <_dtoa_r+0x9e6>
 8006ea6:	9b06      	ldr	r3, [sp, #24]
 8006ea8:	9a06      	ldr	r2, [sp, #24]
 8006eaa:	1c5d      	adds	r5, r3, #1
 8006eac:	2331      	movs	r3, #49	; 0x31
 8006eae:	f10b 0b01 	add.w	fp, fp, #1
 8006eb2:	7013      	strb	r3, [r2, #0]
 8006eb4:	e29f      	b.n	80073f6 <_dtoa_r+0x9ee>
 8006eb6:	07f2      	lsls	r2, r6, #31
 8006eb8:	d505      	bpl.n	8006ec6 <_dtoa_r+0x4be>
 8006eba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ebe:	f7f9 fb83 	bl	80005c8 <__aeabi_dmul>
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	3501      	adds	r5, #1
 8006ec6:	1076      	asrs	r6, r6, #1
 8006ec8:	3708      	adds	r7, #8
 8006eca:	e76d      	b.n	8006da8 <_dtoa_r+0x3a0>
 8006ecc:	2502      	movs	r5, #2
 8006ece:	e770      	b.n	8006db2 <_dtoa_r+0x3aa>
 8006ed0:	465f      	mov	r7, fp
 8006ed2:	464e      	mov	r6, r9
 8006ed4:	e78f      	b.n	8006df6 <_dtoa_r+0x3ee>
 8006ed6:	9a06      	ldr	r2, [sp, #24]
 8006ed8:	4b4e      	ldr	r3, [pc, #312]	; (8007014 <_dtoa_r+0x60c>)
 8006eda:	4432      	add	r2, r6
 8006edc:	9211      	str	r2, [sp, #68]	; 0x44
 8006ede:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ee0:	1e71      	subs	r1, r6, #1
 8006ee2:	2a00      	cmp	r2, #0
 8006ee4:	d048      	beq.n	8006f78 <_dtoa_r+0x570>
 8006ee6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8006eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eee:	2000      	movs	r0, #0
 8006ef0:	494e      	ldr	r1, [pc, #312]	; (800702c <_dtoa_r+0x624>)
 8006ef2:	f7f9 fc93 	bl	800081c <__aeabi_ddiv>
 8006ef6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006efa:	f7f9 f9b1 	bl	8000260 <__aeabi_dsub>
 8006efe:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006f02:	9d06      	ldr	r5, [sp, #24]
 8006f04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f08:	f7f9 fe0e 	bl	8000b28 <__aeabi_d2iz>
 8006f0c:	4606      	mov	r6, r0
 8006f0e:	f7f9 faf5 	bl	80004fc <__aeabi_i2d>
 8006f12:	4602      	mov	r2, r0
 8006f14:	460b      	mov	r3, r1
 8006f16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f1a:	f7f9 f9a1 	bl	8000260 <__aeabi_dsub>
 8006f1e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006f22:	3630      	adds	r6, #48	; 0x30
 8006f24:	f805 6b01 	strb.w	r6, [r5], #1
 8006f28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f2c:	f7f9 fdbe 	bl	8000aac <__aeabi_dcmplt>
 8006f30:	2800      	cmp	r0, #0
 8006f32:	d164      	bne.n	8006ffe <_dtoa_r+0x5f6>
 8006f34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006f38:	2000      	movs	r0, #0
 8006f3a:	4938      	ldr	r1, [pc, #224]	; (800701c <_dtoa_r+0x614>)
 8006f3c:	f7f9 f990 	bl	8000260 <__aeabi_dsub>
 8006f40:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006f44:	f7f9 fdb2 	bl	8000aac <__aeabi_dcmplt>
 8006f48:	2800      	cmp	r0, #0
 8006f4a:	f040 80b9 	bne.w	80070c0 <_dtoa_r+0x6b8>
 8006f4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006f50:	429d      	cmp	r5, r3
 8006f52:	f43f af7c 	beq.w	8006e4e <_dtoa_r+0x446>
 8006f56:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	4b30      	ldr	r3, [pc, #192]	; (8007020 <_dtoa_r+0x618>)
 8006f5e:	f7f9 fb33 	bl	80005c8 <__aeabi_dmul>
 8006f62:	2200      	movs	r2, #0
 8006f64:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006f68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f6c:	4b2c      	ldr	r3, [pc, #176]	; (8007020 <_dtoa_r+0x618>)
 8006f6e:	f7f9 fb2b 	bl	80005c8 <__aeabi_dmul>
 8006f72:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f76:	e7c5      	b.n	8006f04 <_dtoa_r+0x4fc>
 8006f78:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8006f7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f80:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006f84:	f7f9 fb20 	bl	80005c8 <__aeabi_dmul>
 8006f88:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006f8c:	9d06      	ldr	r5, [sp, #24]
 8006f8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f92:	f7f9 fdc9 	bl	8000b28 <__aeabi_d2iz>
 8006f96:	4606      	mov	r6, r0
 8006f98:	f7f9 fab0 	bl	80004fc <__aeabi_i2d>
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	460b      	mov	r3, r1
 8006fa0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006fa4:	f7f9 f95c 	bl	8000260 <__aeabi_dsub>
 8006fa8:	3630      	adds	r6, #48	; 0x30
 8006faa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006fac:	f805 6b01 	strb.w	r6, [r5], #1
 8006fb0:	42ab      	cmp	r3, r5
 8006fb2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006fb6:	f04f 0200 	mov.w	r2, #0
 8006fba:	d124      	bne.n	8007006 <_dtoa_r+0x5fe>
 8006fbc:	4b1b      	ldr	r3, [pc, #108]	; (800702c <_dtoa_r+0x624>)
 8006fbe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006fc2:	f7f9 f94f 	bl	8000264 <__adddf3>
 8006fc6:	4602      	mov	r2, r0
 8006fc8:	460b      	mov	r3, r1
 8006fca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006fce:	f7f9 fd8b 	bl	8000ae8 <__aeabi_dcmpgt>
 8006fd2:	2800      	cmp	r0, #0
 8006fd4:	d174      	bne.n	80070c0 <_dtoa_r+0x6b8>
 8006fd6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006fda:	2000      	movs	r0, #0
 8006fdc:	4913      	ldr	r1, [pc, #76]	; (800702c <_dtoa_r+0x624>)
 8006fde:	f7f9 f93f 	bl	8000260 <__aeabi_dsub>
 8006fe2:	4602      	mov	r2, r0
 8006fe4:	460b      	mov	r3, r1
 8006fe6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006fea:	f7f9 fd5f 	bl	8000aac <__aeabi_dcmplt>
 8006fee:	2800      	cmp	r0, #0
 8006ff0:	f43f af2d 	beq.w	8006e4e <_dtoa_r+0x446>
 8006ff4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006ff8:	1e6a      	subs	r2, r5, #1
 8006ffa:	2b30      	cmp	r3, #48	; 0x30
 8006ffc:	d001      	beq.n	8007002 <_dtoa_r+0x5fa>
 8006ffe:	46bb      	mov	fp, r7
 8007000:	e04d      	b.n	800709e <_dtoa_r+0x696>
 8007002:	4615      	mov	r5, r2
 8007004:	e7f6      	b.n	8006ff4 <_dtoa_r+0x5ec>
 8007006:	4b06      	ldr	r3, [pc, #24]	; (8007020 <_dtoa_r+0x618>)
 8007008:	f7f9 fade 	bl	80005c8 <__aeabi_dmul>
 800700c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007010:	e7bd      	b.n	8006f8e <_dtoa_r+0x586>
 8007012:	bf00      	nop
 8007014:	08008c10 	.word	0x08008c10
 8007018:	08008be8 	.word	0x08008be8
 800701c:	3ff00000 	.word	0x3ff00000
 8007020:	40240000 	.word	0x40240000
 8007024:	401c0000 	.word	0x401c0000
 8007028:	40140000 	.word	0x40140000
 800702c:	3fe00000 	.word	0x3fe00000
 8007030:	9d06      	ldr	r5, [sp, #24]
 8007032:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007036:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800703a:	4630      	mov	r0, r6
 800703c:	4639      	mov	r1, r7
 800703e:	f7f9 fbed 	bl	800081c <__aeabi_ddiv>
 8007042:	f7f9 fd71 	bl	8000b28 <__aeabi_d2iz>
 8007046:	4680      	mov	r8, r0
 8007048:	f7f9 fa58 	bl	80004fc <__aeabi_i2d>
 800704c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007050:	f7f9 faba 	bl	80005c8 <__aeabi_dmul>
 8007054:	4602      	mov	r2, r0
 8007056:	460b      	mov	r3, r1
 8007058:	4630      	mov	r0, r6
 800705a:	4639      	mov	r1, r7
 800705c:	f7f9 f900 	bl	8000260 <__aeabi_dsub>
 8007060:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8007064:	f805 6b01 	strb.w	r6, [r5], #1
 8007068:	9e06      	ldr	r6, [sp, #24]
 800706a:	4602      	mov	r2, r0
 800706c:	1bae      	subs	r6, r5, r6
 800706e:	45b1      	cmp	r9, r6
 8007070:	460b      	mov	r3, r1
 8007072:	d137      	bne.n	80070e4 <_dtoa_r+0x6dc>
 8007074:	f7f9 f8f6 	bl	8000264 <__adddf3>
 8007078:	4606      	mov	r6, r0
 800707a:	460f      	mov	r7, r1
 800707c:	4602      	mov	r2, r0
 800707e:	460b      	mov	r3, r1
 8007080:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007084:	f7f9 fd12 	bl	8000aac <__aeabi_dcmplt>
 8007088:	b9c8      	cbnz	r0, 80070be <_dtoa_r+0x6b6>
 800708a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800708e:	4632      	mov	r2, r6
 8007090:	463b      	mov	r3, r7
 8007092:	f7f9 fd01 	bl	8000a98 <__aeabi_dcmpeq>
 8007096:	b110      	cbz	r0, 800709e <_dtoa_r+0x696>
 8007098:	f018 0f01 	tst.w	r8, #1
 800709c:	d10f      	bne.n	80070be <_dtoa_r+0x6b6>
 800709e:	4651      	mov	r1, sl
 80070a0:	4620      	mov	r0, r4
 80070a2:	f000 fadd 	bl	8007660 <_Bfree>
 80070a6:	2300      	movs	r3, #0
 80070a8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80070aa:	702b      	strb	r3, [r5, #0]
 80070ac:	f10b 0301 	add.w	r3, fp, #1
 80070b0:	6013      	str	r3, [r2, #0]
 80070b2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	f43f acec 	beq.w	8006a92 <_dtoa_r+0x8a>
 80070ba:	601d      	str	r5, [r3, #0]
 80070bc:	e4e9      	b.n	8006a92 <_dtoa_r+0x8a>
 80070be:	465f      	mov	r7, fp
 80070c0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80070c4:	1e6b      	subs	r3, r5, #1
 80070c6:	2a39      	cmp	r2, #57	; 0x39
 80070c8:	d106      	bne.n	80070d8 <_dtoa_r+0x6d0>
 80070ca:	9a06      	ldr	r2, [sp, #24]
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d107      	bne.n	80070e0 <_dtoa_r+0x6d8>
 80070d0:	2330      	movs	r3, #48	; 0x30
 80070d2:	7013      	strb	r3, [r2, #0]
 80070d4:	4613      	mov	r3, r2
 80070d6:	3701      	adds	r7, #1
 80070d8:	781a      	ldrb	r2, [r3, #0]
 80070da:	3201      	adds	r2, #1
 80070dc:	701a      	strb	r2, [r3, #0]
 80070de:	e78e      	b.n	8006ffe <_dtoa_r+0x5f6>
 80070e0:	461d      	mov	r5, r3
 80070e2:	e7ed      	b.n	80070c0 <_dtoa_r+0x6b8>
 80070e4:	2200      	movs	r2, #0
 80070e6:	4bb5      	ldr	r3, [pc, #724]	; (80073bc <_dtoa_r+0x9b4>)
 80070e8:	f7f9 fa6e 	bl	80005c8 <__aeabi_dmul>
 80070ec:	2200      	movs	r2, #0
 80070ee:	2300      	movs	r3, #0
 80070f0:	4606      	mov	r6, r0
 80070f2:	460f      	mov	r7, r1
 80070f4:	f7f9 fcd0 	bl	8000a98 <__aeabi_dcmpeq>
 80070f8:	2800      	cmp	r0, #0
 80070fa:	d09c      	beq.n	8007036 <_dtoa_r+0x62e>
 80070fc:	e7cf      	b.n	800709e <_dtoa_r+0x696>
 80070fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007100:	2a00      	cmp	r2, #0
 8007102:	f000 8129 	beq.w	8007358 <_dtoa_r+0x950>
 8007106:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007108:	2a01      	cmp	r2, #1
 800710a:	f300 810e 	bgt.w	800732a <_dtoa_r+0x922>
 800710e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007110:	2a00      	cmp	r2, #0
 8007112:	f000 8106 	beq.w	8007322 <_dtoa_r+0x91a>
 8007116:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800711a:	4645      	mov	r5, r8
 800711c:	9e08      	ldr	r6, [sp, #32]
 800711e:	9a07      	ldr	r2, [sp, #28]
 8007120:	2101      	movs	r1, #1
 8007122:	441a      	add	r2, r3
 8007124:	4620      	mov	r0, r4
 8007126:	4498      	add	r8, r3
 8007128:	9207      	str	r2, [sp, #28]
 800712a:	f000 fb39 	bl	80077a0 <__i2b>
 800712e:	4607      	mov	r7, r0
 8007130:	2d00      	cmp	r5, #0
 8007132:	dd0b      	ble.n	800714c <_dtoa_r+0x744>
 8007134:	9b07      	ldr	r3, [sp, #28]
 8007136:	2b00      	cmp	r3, #0
 8007138:	dd08      	ble.n	800714c <_dtoa_r+0x744>
 800713a:	42ab      	cmp	r3, r5
 800713c:	bfa8      	it	ge
 800713e:	462b      	movge	r3, r5
 8007140:	9a07      	ldr	r2, [sp, #28]
 8007142:	eba8 0803 	sub.w	r8, r8, r3
 8007146:	1aed      	subs	r5, r5, r3
 8007148:	1ad3      	subs	r3, r2, r3
 800714a:	9307      	str	r3, [sp, #28]
 800714c:	9b08      	ldr	r3, [sp, #32]
 800714e:	b1fb      	cbz	r3, 8007190 <_dtoa_r+0x788>
 8007150:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007152:	2b00      	cmp	r3, #0
 8007154:	f000 8104 	beq.w	8007360 <_dtoa_r+0x958>
 8007158:	2e00      	cmp	r6, #0
 800715a:	dd11      	ble.n	8007180 <_dtoa_r+0x778>
 800715c:	4639      	mov	r1, r7
 800715e:	4632      	mov	r2, r6
 8007160:	4620      	mov	r0, r4
 8007162:	f000 fbb3 	bl	80078cc <__pow5mult>
 8007166:	4652      	mov	r2, sl
 8007168:	4601      	mov	r1, r0
 800716a:	4607      	mov	r7, r0
 800716c:	4620      	mov	r0, r4
 800716e:	f000 fb20 	bl	80077b2 <__multiply>
 8007172:	4651      	mov	r1, sl
 8007174:	900a      	str	r0, [sp, #40]	; 0x28
 8007176:	4620      	mov	r0, r4
 8007178:	f000 fa72 	bl	8007660 <_Bfree>
 800717c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800717e:	469a      	mov	sl, r3
 8007180:	9b08      	ldr	r3, [sp, #32]
 8007182:	1b9a      	subs	r2, r3, r6
 8007184:	d004      	beq.n	8007190 <_dtoa_r+0x788>
 8007186:	4651      	mov	r1, sl
 8007188:	4620      	mov	r0, r4
 800718a:	f000 fb9f 	bl	80078cc <__pow5mult>
 800718e:	4682      	mov	sl, r0
 8007190:	2101      	movs	r1, #1
 8007192:	4620      	mov	r0, r4
 8007194:	f000 fb04 	bl	80077a0 <__i2b>
 8007198:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800719a:	4606      	mov	r6, r0
 800719c:	2b00      	cmp	r3, #0
 800719e:	f340 80e1 	ble.w	8007364 <_dtoa_r+0x95c>
 80071a2:	461a      	mov	r2, r3
 80071a4:	4601      	mov	r1, r0
 80071a6:	4620      	mov	r0, r4
 80071a8:	f000 fb90 	bl	80078cc <__pow5mult>
 80071ac:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80071ae:	4606      	mov	r6, r0
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	f340 80da 	ble.w	800736a <_dtoa_r+0x962>
 80071b6:	2300      	movs	r3, #0
 80071b8:	9308      	str	r3, [sp, #32]
 80071ba:	6933      	ldr	r3, [r6, #16]
 80071bc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80071c0:	6918      	ldr	r0, [r3, #16]
 80071c2:	f000 fa9f 	bl	8007704 <__hi0bits>
 80071c6:	f1c0 0020 	rsb	r0, r0, #32
 80071ca:	9b07      	ldr	r3, [sp, #28]
 80071cc:	4418      	add	r0, r3
 80071ce:	f010 001f 	ands.w	r0, r0, #31
 80071d2:	f000 80f0 	beq.w	80073b6 <_dtoa_r+0x9ae>
 80071d6:	f1c0 0320 	rsb	r3, r0, #32
 80071da:	2b04      	cmp	r3, #4
 80071dc:	f340 80e2 	ble.w	80073a4 <_dtoa_r+0x99c>
 80071e0:	9b07      	ldr	r3, [sp, #28]
 80071e2:	f1c0 001c 	rsb	r0, r0, #28
 80071e6:	4480      	add	r8, r0
 80071e8:	4405      	add	r5, r0
 80071ea:	4403      	add	r3, r0
 80071ec:	9307      	str	r3, [sp, #28]
 80071ee:	f1b8 0f00 	cmp.w	r8, #0
 80071f2:	dd05      	ble.n	8007200 <_dtoa_r+0x7f8>
 80071f4:	4651      	mov	r1, sl
 80071f6:	4642      	mov	r2, r8
 80071f8:	4620      	mov	r0, r4
 80071fa:	f000 fbb5 	bl	8007968 <__lshift>
 80071fe:	4682      	mov	sl, r0
 8007200:	9b07      	ldr	r3, [sp, #28]
 8007202:	2b00      	cmp	r3, #0
 8007204:	dd05      	ble.n	8007212 <_dtoa_r+0x80a>
 8007206:	4631      	mov	r1, r6
 8007208:	461a      	mov	r2, r3
 800720a:	4620      	mov	r0, r4
 800720c:	f000 fbac 	bl	8007968 <__lshift>
 8007210:	4606      	mov	r6, r0
 8007212:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007214:	2b00      	cmp	r3, #0
 8007216:	f000 80d3 	beq.w	80073c0 <_dtoa_r+0x9b8>
 800721a:	4631      	mov	r1, r6
 800721c:	4650      	mov	r0, sl
 800721e:	f000 fbf4 	bl	8007a0a <__mcmp>
 8007222:	2800      	cmp	r0, #0
 8007224:	f280 80cc 	bge.w	80073c0 <_dtoa_r+0x9b8>
 8007228:	2300      	movs	r3, #0
 800722a:	4651      	mov	r1, sl
 800722c:	220a      	movs	r2, #10
 800722e:	4620      	mov	r0, r4
 8007230:	f000 fa2d 	bl	800768e <__multadd>
 8007234:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007236:	f10b 3bff 	add.w	fp, fp, #4294967295
 800723a:	4682      	mov	sl, r0
 800723c:	2b00      	cmp	r3, #0
 800723e:	f000 81a9 	beq.w	8007594 <_dtoa_r+0xb8c>
 8007242:	2300      	movs	r3, #0
 8007244:	4639      	mov	r1, r7
 8007246:	220a      	movs	r2, #10
 8007248:	4620      	mov	r0, r4
 800724a:	f000 fa20 	bl	800768e <__multadd>
 800724e:	9b04      	ldr	r3, [sp, #16]
 8007250:	4607      	mov	r7, r0
 8007252:	2b00      	cmp	r3, #0
 8007254:	dc03      	bgt.n	800725e <_dtoa_r+0x856>
 8007256:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007258:	2b02      	cmp	r3, #2
 800725a:	f300 80b9 	bgt.w	80073d0 <_dtoa_r+0x9c8>
 800725e:	2d00      	cmp	r5, #0
 8007260:	dd05      	ble.n	800726e <_dtoa_r+0x866>
 8007262:	4639      	mov	r1, r7
 8007264:	462a      	mov	r2, r5
 8007266:	4620      	mov	r0, r4
 8007268:	f000 fb7e 	bl	8007968 <__lshift>
 800726c:	4607      	mov	r7, r0
 800726e:	9b08      	ldr	r3, [sp, #32]
 8007270:	2b00      	cmp	r3, #0
 8007272:	f000 8110 	beq.w	8007496 <_dtoa_r+0xa8e>
 8007276:	6879      	ldr	r1, [r7, #4]
 8007278:	4620      	mov	r0, r4
 800727a:	f000 f9bd 	bl	80075f8 <_Balloc>
 800727e:	4605      	mov	r5, r0
 8007280:	693a      	ldr	r2, [r7, #16]
 8007282:	f107 010c 	add.w	r1, r7, #12
 8007286:	3202      	adds	r2, #2
 8007288:	0092      	lsls	r2, r2, #2
 800728a:	300c      	adds	r0, #12
 800728c:	f7fe fe6a 	bl	8005f64 <memcpy>
 8007290:	2201      	movs	r2, #1
 8007292:	4629      	mov	r1, r5
 8007294:	4620      	mov	r0, r4
 8007296:	f000 fb67 	bl	8007968 <__lshift>
 800729a:	9707      	str	r7, [sp, #28]
 800729c:	4607      	mov	r7, r0
 800729e:	9b02      	ldr	r3, [sp, #8]
 80072a0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80072a4:	f003 0301 	and.w	r3, r3, #1
 80072a8:	9308      	str	r3, [sp, #32]
 80072aa:	4631      	mov	r1, r6
 80072ac:	4650      	mov	r0, sl
 80072ae:	f7ff fb1d 	bl	80068ec <quorem>
 80072b2:	9907      	ldr	r1, [sp, #28]
 80072b4:	4605      	mov	r5, r0
 80072b6:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80072ba:	4650      	mov	r0, sl
 80072bc:	f000 fba5 	bl	8007a0a <__mcmp>
 80072c0:	463a      	mov	r2, r7
 80072c2:	9002      	str	r0, [sp, #8]
 80072c4:	4631      	mov	r1, r6
 80072c6:	4620      	mov	r0, r4
 80072c8:	f000 fbb9 	bl	8007a3e <__mdiff>
 80072cc:	68c3      	ldr	r3, [r0, #12]
 80072ce:	4602      	mov	r2, r0
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	f040 80e2 	bne.w	800749a <_dtoa_r+0xa92>
 80072d6:	4601      	mov	r1, r0
 80072d8:	9009      	str	r0, [sp, #36]	; 0x24
 80072da:	4650      	mov	r0, sl
 80072dc:	f000 fb95 	bl	8007a0a <__mcmp>
 80072e0:	4603      	mov	r3, r0
 80072e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072e4:	4611      	mov	r1, r2
 80072e6:	4620      	mov	r0, r4
 80072e8:	9309      	str	r3, [sp, #36]	; 0x24
 80072ea:	f000 f9b9 	bl	8007660 <_Bfree>
 80072ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	f040 80d4 	bne.w	800749e <_dtoa_r+0xa96>
 80072f6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80072f8:	2a00      	cmp	r2, #0
 80072fa:	f040 80d0 	bne.w	800749e <_dtoa_r+0xa96>
 80072fe:	9a08      	ldr	r2, [sp, #32]
 8007300:	2a00      	cmp	r2, #0
 8007302:	f040 80cc 	bne.w	800749e <_dtoa_r+0xa96>
 8007306:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800730a:	f000 80e8 	beq.w	80074de <_dtoa_r+0xad6>
 800730e:	9b02      	ldr	r3, [sp, #8]
 8007310:	2b00      	cmp	r3, #0
 8007312:	dd01      	ble.n	8007318 <_dtoa_r+0x910>
 8007314:	f105 0931 	add.w	r9, r5, #49	; 0x31
 8007318:	f108 0501 	add.w	r5, r8, #1
 800731c:	f888 9000 	strb.w	r9, [r8]
 8007320:	e06b      	b.n	80073fa <_dtoa_r+0x9f2>
 8007322:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007324:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007328:	e6f7      	b.n	800711a <_dtoa_r+0x712>
 800732a:	9b08      	ldr	r3, [sp, #32]
 800732c:	f109 36ff 	add.w	r6, r9, #4294967295
 8007330:	42b3      	cmp	r3, r6
 8007332:	bfb7      	itett	lt
 8007334:	9b08      	ldrlt	r3, [sp, #32]
 8007336:	1b9e      	subge	r6, r3, r6
 8007338:	1af2      	sublt	r2, r6, r3
 800733a:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800733c:	bfbf      	itttt	lt
 800733e:	9608      	strlt	r6, [sp, #32]
 8007340:	189b      	addlt	r3, r3, r2
 8007342:	930c      	strlt	r3, [sp, #48]	; 0x30
 8007344:	2600      	movlt	r6, #0
 8007346:	f1b9 0f00 	cmp.w	r9, #0
 800734a:	bfb9      	ittee	lt
 800734c:	eba8 0509 	sublt.w	r5, r8, r9
 8007350:	2300      	movlt	r3, #0
 8007352:	4645      	movge	r5, r8
 8007354:	464b      	movge	r3, r9
 8007356:	e6e2      	b.n	800711e <_dtoa_r+0x716>
 8007358:	9e08      	ldr	r6, [sp, #32]
 800735a:	4645      	mov	r5, r8
 800735c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800735e:	e6e7      	b.n	8007130 <_dtoa_r+0x728>
 8007360:	9a08      	ldr	r2, [sp, #32]
 8007362:	e710      	b.n	8007186 <_dtoa_r+0x77e>
 8007364:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007366:	2b01      	cmp	r3, #1
 8007368:	dc18      	bgt.n	800739c <_dtoa_r+0x994>
 800736a:	9b02      	ldr	r3, [sp, #8]
 800736c:	b9b3      	cbnz	r3, 800739c <_dtoa_r+0x994>
 800736e:	9b03      	ldr	r3, [sp, #12]
 8007370:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007374:	b9a3      	cbnz	r3, 80073a0 <_dtoa_r+0x998>
 8007376:	9b03      	ldr	r3, [sp, #12]
 8007378:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800737c:	0d1b      	lsrs	r3, r3, #20
 800737e:	051b      	lsls	r3, r3, #20
 8007380:	b12b      	cbz	r3, 800738e <_dtoa_r+0x986>
 8007382:	9b07      	ldr	r3, [sp, #28]
 8007384:	f108 0801 	add.w	r8, r8, #1
 8007388:	3301      	adds	r3, #1
 800738a:	9307      	str	r3, [sp, #28]
 800738c:	2301      	movs	r3, #1
 800738e:	9308      	str	r3, [sp, #32]
 8007390:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007392:	2b00      	cmp	r3, #0
 8007394:	f47f af11 	bne.w	80071ba <_dtoa_r+0x7b2>
 8007398:	2001      	movs	r0, #1
 800739a:	e716      	b.n	80071ca <_dtoa_r+0x7c2>
 800739c:	2300      	movs	r3, #0
 800739e:	e7f6      	b.n	800738e <_dtoa_r+0x986>
 80073a0:	9b02      	ldr	r3, [sp, #8]
 80073a2:	e7f4      	b.n	800738e <_dtoa_r+0x986>
 80073a4:	f43f af23 	beq.w	80071ee <_dtoa_r+0x7e6>
 80073a8:	9a07      	ldr	r2, [sp, #28]
 80073aa:	331c      	adds	r3, #28
 80073ac:	441a      	add	r2, r3
 80073ae:	4498      	add	r8, r3
 80073b0:	441d      	add	r5, r3
 80073b2:	4613      	mov	r3, r2
 80073b4:	e71a      	b.n	80071ec <_dtoa_r+0x7e4>
 80073b6:	4603      	mov	r3, r0
 80073b8:	e7f6      	b.n	80073a8 <_dtoa_r+0x9a0>
 80073ba:	bf00      	nop
 80073bc:	40240000 	.word	0x40240000
 80073c0:	f1b9 0f00 	cmp.w	r9, #0
 80073c4:	dc33      	bgt.n	800742e <_dtoa_r+0xa26>
 80073c6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80073c8:	2b02      	cmp	r3, #2
 80073ca:	dd30      	ble.n	800742e <_dtoa_r+0xa26>
 80073cc:	f8cd 9010 	str.w	r9, [sp, #16]
 80073d0:	9b04      	ldr	r3, [sp, #16]
 80073d2:	b963      	cbnz	r3, 80073ee <_dtoa_r+0x9e6>
 80073d4:	4631      	mov	r1, r6
 80073d6:	2205      	movs	r2, #5
 80073d8:	4620      	mov	r0, r4
 80073da:	f000 f958 	bl	800768e <__multadd>
 80073de:	4601      	mov	r1, r0
 80073e0:	4606      	mov	r6, r0
 80073e2:	4650      	mov	r0, sl
 80073e4:	f000 fb11 	bl	8007a0a <__mcmp>
 80073e8:	2800      	cmp	r0, #0
 80073ea:	f73f ad5c 	bgt.w	8006ea6 <_dtoa_r+0x49e>
 80073ee:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80073f0:	9d06      	ldr	r5, [sp, #24]
 80073f2:	ea6f 0b03 	mvn.w	fp, r3
 80073f6:	2300      	movs	r3, #0
 80073f8:	9307      	str	r3, [sp, #28]
 80073fa:	4631      	mov	r1, r6
 80073fc:	4620      	mov	r0, r4
 80073fe:	f000 f92f 	bl	8007660 <_Bfree>
 8007402:	2f00      	cmp	r7, #0
 8007404:	f43f ae4b 	beq.w	800709e <_dtoa_r+0x696>
 8007408:	9b07      	ldr	r3, [sp, #28]
 800740a:	b12b      	cbz	r3, 8007418 <_dtoa_r+0xa10>
 800740c:	42bb      	cmp	r3, r7
 800740e:	d003      	beq.n	8007418 <_dtoa_r+0xa10>
 8007410:	4619      	mov	r1, r3
 8007412:	4620      	mov	r0, r4
 8007414:	f000 f924 	bl	8007660 <_Bfree>
 8007418:	4639      	mov	r1, r7
 800741a:	4620      	mov	r0, r4
 800741c:	f000 f920 	bl	8007660 <_Bfree>
 8007420:	e63d      	b.n	800709e <_dtoa_r+0x696>
 8007422:	2600      	movs	r6, #0
 8007424:	4637      	mov	r7, r6
 8007426:	e7e2      	b.n	80073ee <_dtoa_r+0x9e6>
 8007428:	46bb      	mov	fp, r7
 800742a:	4637      	mov	r7, r6
 800742c:	e53b      	b.n	8006ea6 <_dtoa_r+0x49e>
 800742e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007430:	f8cd 9010 	str.w	r9, [sp, #16]
 8007434:	2b00      	cmp	r3, #0
 8007436:	f47f af12 	bne.w	800725e <_dtoa_r+0x856>
 800743a:	9d06      	ldr	r5, [sp, #24]
 800743c:	4631      	mov	r1, r6
 800743e:	4650      	mov	r0, sl
 8007440:	f7ff fa54 	bl	80068ec <quorem>
 8007444:	9b06      	ldr	r3, [sp, #24]
 8007446:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800744a:	f805 9b01 	strb.w	r9, [r5], #1
 800744e:	9a04      	ldr	r2, [sp, #16]
 8007450:	1aeb      	subs	r3, r5, r3
 8007452:	429a      	cmp	r2, r3
 8007454:	f300 8081 	bgt.w	800755a <_dtoa_r+0xb52>
 8007458:	9b06      	ldr	r3, [sp, #24]
 800745a:	2a01      	cmp	r2, #1
 800745c:	bfac      	ite	ge
 800745e:	189b      	addge	r3, r3, r2
 8007460:	3301      	addlt	r3, #1
 8007462:	4698      	mov	r8, r3
 8007464:	2300      	movs	r3, #0
 8007466:	9307      	str	r3, [sp, #28]
 8007468:	4651      	mov	r1, sl
 800746a:	2201      	movs	r2, #1
 800746c:	4620      	mov	r0, r4
 800746e:	f000 fa7b 	bl	8007968 <__lshift>
 8007472:	4631      	mov	r1, r6
 8007474:	4682      	mov	sl, r0
 8007476:	f000 fac8 	bl	8007a0a <__mcmp>
 800747a:	2800      	cmp	r0, #0
 800747c:	dc34      	bgt.n	80074e8 <_dtoa_r+0xae0>
 800747e:	d102      	bne.n	8007486 <_dtoa_r+0xa7e>
 8007480:	f019 0f01 	tst.w	r9, #1
 8007484:	d130      	bne.n	80074e8 <_dtoa_r+0xae0>
 8007486:	4645      	mov	r5, r8
 8007488:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800748c:	1e6a      	subs	r2, r5, #1
 800748e:	2b30      	cmp	r3, #48	; 0x30
 8007490:	d1b3      	bne.n	80073fa <_dtoa_r+0x9f2>
 8007492:	4615      	mov	r5, r2
 8007494:	e7f8      	b.n	8007488 <_dtoa_r+0xa80>
 8007496:	4638      	mov	r0, r7
 8007498:	e6ff      	b.n	800729a <_dtoa_r+0x892>
 800749a:	2301      	movs	r3, #1
 800749c:	e722      	b.n	80072e4 <_dtoa_r+0x8dc>
 800749e:	9a02      	ldr	r2, [sp, #8]
 80074a0:	2a00      	cmp	r2, #0
 80074a2:	db04      	blt.n	80074ae <_dtoa_r+0xaa6>
 80074a4:	d128      	bne.n	80074f8 <_dtoa_r+0xaf0>
 80074a6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80074a8:	bb32      	cbnz	r2, 80074f8 <_dtoa_r+0xaf0>
 80074aa:	9a08      	ldr	r2, [sp, #32]
 80074ac:	bb22      	cbnz	r2, 80074f8 <_dtoa_r+0xaf0>
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	f77f af32 	ble.w	8007318 <_dtoa_r+0x910>
 80074b4:	4651      	mov	r1, sl
 80074b6:	2201      	movs	r2, #1
 80074b8:	4620      	mov	r0, r4
 80074ba:	f000 fa55 	bl	8007968 <__lshift>
 80074be:	4631      	mov	r1, r6
 80074c0:	4682      	mov	sl, r0
 80074c2:	f000 faa2 	bl	8007a0a <__mcmp>
 80074c6:	2800      	cmp	r0, #0
 80074c8:	dc05      	bgt.n	80074d6 <_dtoa_r+0xace>
 80074ca:	f47f af25 	bne.w	8007318 <_dtoa_r+0x910>
 80074ce:	f019 0f01 	tst.w	r9, #1
 80074d2:	f43f af21 	beq.w	8007318 <_dtoa_r+0x910>
 80074d6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80074da:	f47f af1b 	bne.w	8007314 <_dtoa_r+0x90c>
 80074de:	2339      	movs	r3, #57	; 0x39
 80074e0:	f108 0801 	add.w	r8, r8, #1
 80074e4:	f808 3c01 	strb.w	r3, [r8, #-1]
 80074e8:	4645      	mov	r5, r8
 80074ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80074ee:	1e6a      	subs	r2, r5, #1
 80074f0:	2b39      	cmp	r3, #57	; 0x39
 80074f2:	d03a      	beq.n	800756a <_dtoa_r+0xb62>
 80074f4:	3301      	adds	r3, #1
 80074f6:	e03f      	b.n	8007578 <_dtoa_r+0xb70>
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	f108 0501 	add.w	r5, r8, #1
 80074fe:	dd05      	ble.n	800750c <_dtoa_r+0xb04>
 8007500:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007504:	d0eb      	beq.n	80074de <_dtoa_r+0xad6>
 8007506:	f109 0901 	add.w	r9, r9, #1
 800750a:	e707      	b.n	800731c <_dtoa_r+0x914>
 800750c:	9b06      	ldr	r3, [sp, #24]
 800750e:	9a04      	ldr	r2, [sp, #16]
 8007510:	1aeb      	subs	r3, r5, r3
 8007512:	4293      	cmp	r3, r2
 8007514:	46a8      	mov	r8, r5
 8007516:	f805 9c01 	strb.w	r9, [r5, #-1]
 800751a:	d0a5      	beq.n	8007468 <_dtoa_r+0xa60>
 800751c:	4651      	mov	r1, sl
 800751e:	2300      	movs	r3, #0
 8007520:	220a      	movs	r2, #10
 8007522:	4620      	mov	r0, r4
 8007524:	f000 f8b3 	bl	800768e <__multadd>
 8007528:	9b07      	ldr	r3, [sp, #28]
 800752a:	4682      	mov	sl, r0
 800752c:	42bb      	cmp	r3, r7
 800752e:	f04f 020a 	mov.w	r2, #10
 8007532:	f04f 0300 	mov.w	r3, #0
 8007536:	9907      	ldr	r1, [sp, #28]
 8007538:	4620      	mov	r0, r4
 800753a:	d104      	bne.n	8007546 <_dtoa_r+0xb3e>
 800753c:	f000 f8a7 	bl	800768e <__multadd>
 8007540:	9007      	str	r0, [sp, #28]
 8007542:	4607      	mov	r7, r0
 8007544:	e6b1      	b.n	80072aa <_dtoa_r+0x8a2>
 8007546:	f000 f8a2 	bl	800768e <__multadd>
 800754a:	2300      	movs	r3, #0
 800754c:	9007      	str	r0, [sp, #28]
 800754e:	220a      	movs	r2, #10
 8007550:	4639      	mov	r1, r7
 8007552:	4620      	mov	r0, r4
 8007554:	f000 f89b 	bl	800768e <__multadd>
 8007558:	e7f3      	b.n	8007542 <_dtoa_r+0xb3a>
 800755a:	4651      	mov	r1, sl
 800755c:	2300      	movs	r3, #0
 800755e:	220a      	movs	r2, #10
 8007560:	4620      	mov	r0, r4
 8007562:	f000 f894 	bl	800768e <__multadd>
 8007566:	4682      	mov	sl, r0
 8007568:	e768      	b.n	800743c <_dtoa_r+0xa34>
 800756a:	9b06      	ldr	r3, [sp, #24]
 800756c:	4293      	cmp	r3, r2
 800756e:	d105      	bne.n	800757c <_dtoa_r+0xb74>
 8007570:	2331      	movs	r3, #49	; 0x31
 8007572:	9a06      	ldr	r2, [sp, #24]
 8007574:	f10b 0b01 	add.w	fp, fp, #1
 8007578:	7013      	strb	r3, [r2, #0]
 800757a:	e73e      	b.n	80073fa <_dtoa_r+0x9f2>
 800757c:	4615      	mov	r5, r2
 800757e:	e7b4      	b.n	80074ea <_dtoa_r+0xae2>
 8007580:	4b09      	ldr	r3, [pc, #36]	; (80075a8 <_dtoa_r+0xba0>)
 8007582:	f7ff baa3 	b.w	8006acc <_dtoa_r+0xc4>
 8007586:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007588:	2b00      	cmp	r3, #0
 800758a:	f47f aa7d 	bne.w	8006a88 <_dtoa_r+0x80>
 800758e:	4b07      	ldr	r3, [pc, #28]	; (80075ac <_dtoa_r+0xba4>)
 8007590:	f7ff ba9c 	b.w	8006acc <_dtoa_r+0xc4>
 8007594:	9b04      	ldr	r3, [sp, #16]
 8007596:	2b00      	cmp	r3, #0
 8007598:	f73f af4f 	bgt.w	800743a <_dtoa_r+0xa32>
 800759c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800759e:	2b02      	cmp	r3, #2
 80075a0:	f77f af4b 	ble.w	800743a <_dtoa_r+0xa32>
 80075a4:	e714      	b.n	80073d0 <_dtoa_r+0x9c8>
 80075a6:	bf00      	nop
 80075a8:	08008d0b 	.word	0x08008d0b
 80075ac:	08008bd6 	.word	0x08008bd6

080075b0 <_localeconv_r>:
 80075b0:	4b04      	ldr	r3, [pc, #16]	; (80075c4 <_localeconv_r+0x14>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	6a18      	ldr	r0, [r3, #32]
 80075b6:	4b04      	ldr	r3, [pc, #16]	; (80075c8 <_localeconv_r+0x18>)
 80075b8:	2800      	cmp	r0, #0
 80075ba:	bf08      	it	eq
 80075bc:	4618      	moveq	r0, r3
 80075be:	30f0      	adds	r0, #240	; 0xf0
 80075c0:	4770      	bx	lr
 80075c2:	bf00      	nop
 80075c4:	20000054 	.word	0x20000054
 80075c8:	200000b8 	.word	0x200000b8

080075cc <malloc>:
 80075cc:	4b02      	ldr	r3, [pc, #8]	; (80075d8 <malloc+0xc>)
 80075ce:	4601      	mov	r1, r0
 80075d0:	6818      	ldr	r0, [r3, #0]
 80075d2:	f000 bb3d 	b.w	8007c50 <_malloc_r>
 80075d6:	bf00      	nop
 80075d8:	20000054 	.word	0x20000054

080075dc <memchr>:
 80075dc:	b510      	push	{r4, lr}
 80075de:	b2c9      	uxtb	r1, r1
 80075e0:	4402      	add	r2, r0
 80075e2:	4290      	cmp	r0, r2
 80075e4:	4603      	mov	r3, r0
 80075e6:	d101      	bne.n	80075ec <memchr+0x10>
 80075e8:	2000      	movs	r0, #0
 80075ea:	bd10      	pop	{r4, pc}
 80075ec:	781c      	ldrb	r4, [r3, #0]
 80075ee:	3001      	adds	r0, #1
 80075f0:	428c      	cmp	r4, r1
 80075f2:	d1f6      	bne.n	80075e2 <memchr+0x6>
 80075f4:	4618      	mov	r0, r3
 80075f6:	bd10      	pop	{r4, pc}

080075f8 <_Balloc>:
 80075f8:	b570      	push	{r4, r5, r6, lr}
 80075fa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80075fc:	4604      	mov	r4, r0
 80075fe:	460e      	mov	r6, r1
 8007600:	b93d      	cbnz	r5, 8007612 <_Balloc+0x1a>
 8007602:	2010      	movs	r0, #16
 8007604:	f7ff ffe2 	bl	80075cc <malloc>
 8007608:	6260      	str	r0, [r4, #36]	; 0x24
 800760a:	6045      	str	r5, [r0, #4]
 800760c:	6085      	str	r5, [r0, #8]
 800760e:	6005      	str	r5, [r0, #0]
 8007610:	60c5      	str	r5, [r0, #12]
 8007612:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007614:	68eb      	ldr	r3, [r5, #12]
 8007616:	b183      	cbz	r3, 800763a <_Balloc+0x42>
 8007618:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800761a:	68db      	ldr	r3, [r3, #12]
 800761c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007620:	b9b8      	cbnz	r0, 8007652 <_Balloc+0x5a>
 8007622:	2101      	movs	r1, #1
 8007624:	fa01 f506 	lsl.w	r5, r1, r6
 8007628:	1d6a      	adds	r2, r5, #5
 800762a:	0092      	lsls	r2, r2, #2
 800762c:	4620      	mov	r0, r4
 800762e:	f000 fab4 	bl	8007b9a <_calloc_r>
 8007632:	b160      	cbz	r0, 800764e <_Balloc+0x56>
 8007634:	6046      	str	r6, [r0, #4]
 8007636:	6085      	str	r5, [r0, #8]
 8007638:	e00e      	b.n	8007658 <_Balloc+0x60>
 800763a:	2221      	movs	r2, #33	; 0x21
 800763c:	2104      	movs	r1, #4
 800763e:	4620      	mov	r0, r4
 8007640:	f000 faab 	bl	8007b9a <_calloc_r>
 8007644:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007646:	60e8      	str	r0, [r5, #12]
 8007648:	68db      	ldr	r3, [r3, #12]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d1e4      	bne.n	8007618 <_Balloc+0x20>
 800764e:	2000      	movs	r0, #0
 8007650:	bd70      	pop	{r4, r5, r6, pc}
 8007652:	6802      	ldr	r2, [r0, #0]
 8007654:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8007658:	2300      	movs	r3, #0
 800765a:	6103      	str	r3, [r0, #16]
 800765c:	60c3      	str	r3, [r0, #12]
 800765e:	bd70      	pop	{r4, r5, r6, pc}

08007660 <_Bfree>:
 8007660:	b570      	push	{r4, r5, r6, lr}
 8007662:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007664:	4606      	mov	r6, r0
 8007666:	460d      	mov	r5, r1
 8007668:	b93c      	cbnz	r4, 800767a <_Bfree+0x1a>
 800766a:	2010      	movs	r0, #16
 800766c:	f7ff ffae 	bl	80075cc <malloc>
 8007670:	6270      	str	r0, [r6, #36]	; 0x24
 8007672:	6044      	str	r4, [r0, #4]
 8007674:	6084      	str	r4, [r0, #8]
 8007676:	6004      	str	r4, [r0, #0]
 8007678:	60c4      	str	r4, [r0, #12]
 800767a:	b13d      	cbz	r5, 800768c <_Bfree+0x2c>
 800767c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800767e:	686a      	ldr	r2, [r5, #4]
 8007680:	68db      	ldr	r3, [r3, #12]
 8007682:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007686:	6029      	str	r1, [r5, #0]
 8007688:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800768c:	bd70      	pop	{r4, r5, r6, pc}

0800768e <__multadd>:
 800768e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007692:	461f      	mov	r7, r3
 8007694:	4606      	mov	r6, r0
 8007696:	460c      	mov	r4, r1
 8007698:	2300      	movs	r3, #0
 800769a:	690d      	ldr	r5, [r1, #16]
 800769c:	f101 0e14 	add.w	lr, r1, #20
 80076a0:	f8de 0000 	ldr.w	r0, [lr]
 80076a4:	3301      	adds	r3, #1
 80076a6:	b281      	uxth	r1, r0
 80076a8:	fb02 7101 	mla	r1, r2, r1, r7
 80076ac:	0c00      	lsrs	r0, r0, #16
 80076ae:	0c0f      	lsrs	r7, r1, #16
 80076b0:	fb02 7000 	mla	r0, r2, r0, r7
 80076b4:	b289      	uxth	r1, r1
 80076b6:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80076ba:	429d      	cmp	r5, r3
 80076bc:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80076c0:	f84e 1b04 	str.w	r1, [lr], #4
 80076c4:	dcec      	bgt.n	80076a0 <__multadd+0x12>
 80076c6:	b1d7      	cbz	r7, 80076fe <__multadd+0x70>
 80076c8:	68a3      	ldr	r3, [r4, #8]
 80076ca:	429d      	cmp	r5, r3
 80076cc:	db12      	blt.n	80076f4 <__multadd+0x66>
 80076ce:	6861      	ldr	r1, [r4, #4]
 80076d0:	4630      	mov	r0, r6
 80076d2:	3101      	adds	r1, #1
 80076d4:	f7ff ff90 	bl	80075f8 <_Balloc>
 80076d8:	4680      	mov	r8, r0
 80076da:	6922      	ldr	r2, [r4, #16]
 80076dc:	f104 010c 	add.w	r1, r4, #12
 80076e0:	3202      	adds	r2, #2
 80076e2:	0092      	lsls	r2, r2, #2
 80076e4:	300c      	adds	r0, #12
 80076e6:	f7fe fc3d 	bl	8005f64 <memcpy>
 80076ea:	4621      	mov	r1, r4
 80076ec:	4630      	mov	r0, r6
 80076ee:	f7ff ffb7 	bl	8007660 <_Bfree>
 80076f2:	4644      	mov	r4, r8
 80076f4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80076f8:	3501      	adds	r5, #1
 80076fa:	615f      	str	r7, [r3, #20]
 80076fc:	6125      	str	r5, [r4, #16]
 80076fe:	4620      	mov	r0, r4
 8007700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007704 <__hi0bits>:
 8007704:	0c02      	lsrs	r2, r0, #16
 8007706:	0412      	lsls	r2, r2, #16
 8007708:	4603      	mov	r3, r0
 800770a:	b9b2      	cbnz	r2, 800773a <__hi0bits+0x36>
 800770c:	0403      	lsls	r3, r0, #16
 800770e:	2010      	movs	r0, #16
 8007710:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007714:	bf04      	itt	eq
 8007716:	021b      	lsleq	r3, r3, #8
 8007718:	3008      	addeq	r0, #8
 800771a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800771e:	bf04      	itt	eq
 8007720:	011b      	lsleq	r3, r3, #4
 8007722:	3004      	addeq	r0, #4
 8007724:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007728:	bf04      	itt	eq
 800772a:	009b      	lsleq	r3, r3, #2
 800772c:	3002      	addeq	r0, #2
 800772e:	2b00      	cmp	r3, #0
 8007730:	db06      	blt.n	8007740 <__hi0bits+0x3c>
 8007732:	005b      	lsls	r3, r3, #1
 8007734:	d503      	bpl.n	800773e <__hi0bits+0x3a>
 8007736:	3001      	adds	r0, #1
 8007738:	4770      	bx	lr
 800773a:	2000      	movs	r0, #0
 800773c:	e7e8      	b.n	8007710 <__hi0bits+0xc>
 800773e:	2020      	movs	r0, #32
 8007740:	4770      	bx	lr

08007742 <__lo0bits>:
 8007742:	6803      	ldr	r3, [r0, #0]
 8007744:	4601      	mov	r1, r0
 8007746:	f013 0207 	ands.w	r2, r3, #7
 800774a:	d00b      	beq.n	8007764 <__lo0bits+0x22>
 800774c:	07da      	lsls	r2, r3, #31
 800774e:	d423      	bmi.n	8007798 <__lo0bits+0x56>
 8007750:	0798      	lsls	r0, r3, #30
 8007752:	bf49      	itett	mi
 8007754:	085b      	lsrmi	r3, r3, #1
 8007756:	089b      	lsrpl	r3, r3, #2
 8007758:	2001      	movmi	r0, #1
 800775a:	600b      	strmi	r3, [r1, #0]
 800775c:	bf5c      	itt	pl
 800775e:	600b      	strpl	r3, [r1, #0]
 8007760:	2002      	movpl	r0, #2
 8007762:	4770      	bx	lr
 8007764:	b298      	uxth	r0, r3
 8007766:	b9a8      	cbnz	r0, 8007794 <__lo0bits+0x52>
 8007768:	2010      	movs	r0, #16
 800776a:	0c1b      	lsrs	r3, r3, #16
 800776c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007770:	bf04      	itt	eq
 8007772:	0a1b      	lsreq	r3, r3, #8
 8007774:	3008      	addeq	r0, #8
 8007776:	071a      	lsls	r2, r3, #28
 8007778:	bf04      	itt	eq
 800777a:	091b      	lsreq	r3, r3, #4
 800777c:	3004      	addeq	r0, #4
 800777e:	079a      	lsls	r2, r3, #30
 8007780:	bf04      	itt	eq
 8007782:	089b      	lsreq	r3, r3, #2
 8007784:	3002      	addeq	r0, #2
 8007786:	07da      	lsls	r2, r3, #31
 8007788:	d402      	bmi.n	8007790 <__lo0bits+0x4e>
 800778a:	085b      	lsrs	r3, r3, #1
 800778c:	d006      	beq.n	800779c <__lo0bits+0x5a>
 800778e:	3001      	adds	r0, #1
 8007790:	600b      	str	r3, [r1, #0]
 8007792:	4770      	bx	lr
 8007794:	4610      	mov	r0, r2
 8007796:	e7e9      	b.n	800776c <__lo0bits+0x2a>
 8007798:	2000      	movs	r0, #0
 800779a:	4770      	bx	lr
 800779c:	2020      	movs	r0, #32
 800779e:	4770      	bx	lr

080077a0 <__i2b>:
 80077a0:	b510      	push	{r4, lr}
 80077a2:	460c      	mov	r4, r1
 80077a4:	2101      	movs	r1, #1
 80077a6:	f7ff ff27 	bl	80075f8 <_Balloc>
 80077aa:	2201      	movs	r2, #1
 80077ac:	6144      	str	r4, [r0, #20]
 80077ae:	6102      	str	r2, [r0, #16]
 80077b0:	bd10      	pop	{r4, pc}

080077b2 <__multiply>:
 80077b2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077b6:	4614      	mov	r4, r2
 80077b8:	690a      	ldr	r2, [r1, #16]
 80077ba:	6923      	ldr	r3, [r4, #16]
 80077bc:	4689      	mov	r9, r1
 80077be:	429a      	cmp	r2, r3
 80077c0:	bfbe      	ittt	lt
 80077c2:	460b      	movlt	r3, r1
 80077c4:	46a1      	movlt	r9, r4
 80077c6:	461c      	movlt	r4, r3
 80077c8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80077cc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80077d0:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80077d4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80077d8:	eb07 060a 	add.w	r6, r7, sl
 80077dc:	429e      	cmp	r6, r3
 80077de:	bfc8      	it	gt
 80077e0:	3101      	addgt	r1, #1
 80077e2:	f7ff ff09 	bl	80075f8 <_Balloc>
 80077e6:	f100 0514 	add.w	r5, r0, #20
 80077ea:	462b      	mov	r3, r5
 80077ec:	2200      	movs	r2, #0
 80077ee:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80077f2:	4543      	cmp	r3, r8
 80077f4:	d316      	bcc.n	8007824 <__multiply+0x72>
 80077f6:	f104 0214 	add.w	r2, r4, #20
 80077fa:	f109 0114 	add.w	r1, r9, #20
 80077fe:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8007802:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007806:	9301      	str	r3, [sp, #4]
 8007808:	9c01      	ldr	r4, [sp, #4]
 800780a:	4613      	mov	r3, r2
 800780c:	4294      	cmp	r4, r2
 800780e:	d80c      	bhi.n	800782a <__multiply+0x78>
 8007810:	2e00      	cmp	r6, #0
 8007812:	dd03      	ble.n	800781c <__multiply+0x6a>
 8007814:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007818:	2b00      	cmp	r3, #0
 800781a:	d054      	beq.n	80078c6 <__multiply+0x114>
 800781c:	6106      	str	r6, [r0, #16]
 800781e:	b003      	add	sp, #12
 8007820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007824:	f843 2b04 	str.w	r2, [r3], #4
 8007828:	e7e3      	b.n	80077f2 <__multiply+0x40>
 800782a:	f8b3 a000 	ldrh.w	sl, [r3]
 800782e:	3204      	adds	r2, #4
 8007830:	f1ba 0f00 	cmp.w	sl, #0
 8007834:	d020      	beq.n	8007878 <__multiply+0xc6>
 8007836:	46ae      	mov	lr, r5
 8007838:	4689      	mov	r9, r1
 800783a:	f04f 0c00 	mov.w	ip, #0
 800783e:	f859 4b04 	ldr.w	r4, [r9], #4
 8007842:	f8be b000 	ldrh.w	fp, [lr]
 8007846:	b2a3      	uxth	r3, r4
 8007848:	fb0a b303 	mla	r3, sl, r3, fp
 800784c:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8007850:	f8de 4000 	ldr.w	r4, [lr]
 8007854:	4463      	add	r3, ip
 8007856:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800785a:	fb0a c40b 	mla	r4, sl, fp, ip
 800785e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007862:	b29b      	uxth	r3, r3
 8007864:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007868:	454f      	cmp	r7, r9
 800786a:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800786e:	f84e 3b04 	str.w	r3, [lr], #4
 8007872:	d8e4      	bhi.n	800783e <__multiply+0x8c>
 8007874:	f8ce c000 	str.w	ip, [lr]
 8007878:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 800787c:	f1b9 0f00 	cmp.w	r9, #0
 8007880:	d01f      	beq.n	80078c2 <__multiply+0x110>
 8007882:	46ae      	mov	lr, r5
 8007884:	468c      	mov	ip, r1
 8007886:	f04f 0a00 	mov.w	sl, #0
 800788a:	682b      	ldr	r3, [r5, #0]
 800788c:	f8bc 4000 	ldrh.w	r4, [ip]
 8007890:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007894:	b29b      	uxth	r3, r3
 8007896:	fb09 b404 	mla	r4, r9, r4, fp
 800789a:	44a2      	add	sl, r4
 800789c:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 80078a0:	f84e 3b04 	str.w	r3, [lr], #4
 80078a4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80078a8:	f8be 4000 	ldrh.w	r4, [lr]
 80078ac:	0c1b      	lsrs	r3, r3, #16
 80078ae:	fb09 4303 	mla	r3, r9, r3, r4
 80078b2:	4567      	cmp	r7, ip
 80078b4:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 80078b8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80078bc:	d8e6      	bhi.n	800788c <__multiply+0xda>
 80078be:	f8ce 3000 	str.w	r3, [lr]
 80078c2:	3504      	adds	r5, #4
 80078c4:	e7a0      	b.n	8007808 <__multiply+0x56>
 80078c6:	3e01      	subs	r6, #1
 80078c8:	e7a2      	b.n	8007810 <__multiply+0x5e>
	...

080078cc <__pow5mult>:
 80078cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078d0:	4615      	mov	r5, r2
 80078d2:	f012 0203 	ands.w	r2, r2, #3
 80078d6:	4606      	mov	r6, r0
 80078d8:	460f      	mov	r7, r1
 80078da:	d007      	beq.n	80078ec <__pow5mult+0x20>
 80078dc:	4c21      	ldr	r4, [pc, #132]	; (8007964 <__pow5mult+0x98>)
 80078de:	3a01      	subs	r2, #1
 80078e0:	2300      	movs	r3, #0
 80078e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80078e6:	f7ff fed2 	bl	800768e <__multadd>
 80078ea:	4607      	mov	r7, r0
 80078ec:	10ad      	asrs	r5, r5, #2
 80078ee:	d035      	beq.n	800795c <__pow5mult+0x90>
 80078f0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80078f2:	b93c      	cbnz	r4, 8007904 <__pow5mult+0x38>
 80078f4:	2010      	movs	r0, #16
 80078f6:	f7ff fe69 	bl	80075cc <malloc>
 80078fa:	6270      	str	r0, [r6, #36]	; 0x24
 80078fc:	6044      	str	r4, [r0, #4]
 80078fe:	6084      	str	r4, [r0, #8]
 8007900:	6004      	str	r4, [r0, #0]
 8007902:	60c4      	str	r4, [r0, #12]
 8007904:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007908:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800790c:	b94c      	cbnz	r4, 8007922 <__pow5mult+0x56>
 800790e:	f240 2171 	movw	r1, #625	; 0x271
 8007912:	4630      	mov	r0, r6
 8007914:	f7ff ff44 	bl	80077a0 <__i2b>
 8007918:	2300      	movs	r3, #0
 800791a:	4604      	mov	r4, r0
 800791c:	f8c8 0008 	str.w	r0, [r8, #8]
 8007920:	6003      	str	r3, [r0, #0]
 8007922:	f04f 0800 	mov.w	r8, #0
 8007926:	07eb      	lsls	r3, r5, #31
 8007928:	d50a      	bpl.n	8007940 <__pow5mult+0x74>
 800792a:	4639      	mov	r1, r7
 800792c:	4622      	mov	r2, r4
 800792e:	4630      	mov	r0, r6
 8007930:	f7ff ff3f 	bl	80077b2 <__multiply>
 8007934:	4681      	mov	r9, r0
 8007936:	4639      	mov	r1, r7
 8007938:	4630      	mov	r0, r6
 800793a:	f7ff fe91 	bl	8007660 <_Bfree>
 800793e:	464f      	mov	r7, r9
 8007940:	106d      	asrs	r5, r5, #1
 8007942:	d00b      	beq.n	800795c <__pow5mult+0x90>
 8007944:	6820      	ldr	r0, [r4, #0]
 8007946:	b938      	cbnz	r0, 8007958 <__pow5mult+0x8c>
 8007948:	4622      	mov	r2, r4
 800794a:	4621      	mov	r1, r4
 800794c:	4630      	mov	r0, r6
 800794e:	f7ff ff30 	bl	80077b2 <__multiply>
 8007952:	6020      	str	r0, [r4, #0]
 8007954:	f8c0 8000 	str.w	r8, [r0]
 8007958:	4604      	mov	r4, r0
 800795a:	e7e4      	b.n	8007926 <__pow5mult+0x5a>
 800795c:	4638      	mov	r0, r7
 800795e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007962:	bf00      	nop
 8007964:	08008cd8 	.word	0x08008cd8

08007968 <__lshift>:
 8007968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800796c:	460c      	mov	r4, r1
 800796e:	4607      	mov	r7, r0
 8007970:	4616      	mov	r6, r2
 8007972:	6923      	ldr	r3, [r4, #16]
 8007974:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007978:	eb0a 0903 	add.w	r9, sl, r3
 800797c:	6849      	ldr	r1, [r1, #4]
 800797e:	68a3      	ldr	r3, [r4, #8]
 8007980:	f109 0501 	add.w	r5, r9, #1
 8007984:	42ab      	cmp	r3, r5
 8007986:	db31      	blt.n	80079ec <__lshift+0x84>
 8007988:	4638      	mov	r0, r7
 800798a:	f7ff fe35 	bl	80075f8 <_Balloc>
 800798e:	2200      	movs	r2, #0
 8007990:	4680      	mov	r8, r0
 8007992:	4611      	mov	r1, r2
 8007994:	f100 0314 	add.w	r3, r0, #20
 8007998:	4552      	cmp	r2, sl
 800799a:	db2a      	blt.n	80079f2 <__lshift+0x8a>
 800799c:	6920      	ldr	r0, [r4, #16]
 800799e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80079a2:	f104 0114 	add.w	r1, r4, #20
 80079a6:	f016 021f 	ands.w	r2, r6, #31
 80079aa:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80079ae:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 80079b2:	d022      	beq.n	80079fa <__lshift+0x92>
 80079b4:	2000      	movs	r0, #0
 80079b6:	f1c2 0c20 	rsb	ip, r2, #32
 80079ba:	680e      	ldr	r6, [r1, #0]
 80079bc:	4096      	lsls	r6, r2
 80079be:	4330      	orrs	r0, r6
 80079c0:	f843 0b04 	str.w	r0, [r3], #4
 80079c4:	f851 0b04 	ldr.w	r0, [r1], #4
 80079c8:	458e      	cmp	lr, r1
 80079ca:	fa20 f00c 	lsr.w	r0, r0, ip
 80079ce:	d8f4      	bhi.n	80079ba <__lshift+0x52>
 80079d0:	6018      	str	r0, [r3, #0]
 80079d2:	b108      	cbz	r0, 80079d8 <__lshift+0x70>
 80079d4:	f109 0502 	add.w	r5, r9, #2
 80079d8:	3d01      	subs	r5, #1
 80079da:	4638      	mov	r0, r7
 80079dc:	f8c8 5010 	str.w	r5, [r8, #16]
 80079e0:	4621      	mov	r1, r4
 80079e2:	f7ff fe3d 	bl	8007660 <_Bfree>
 80079e6:	4640      	mov	r0, r8
 80079e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079ec:	3101      	adds	r1, #1
 80079ee:	005b      	lsls	r3, r3, #1
 80079f0:	e7c8      	b.n	8007984 <__lshift+0x1c>
 80079f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80079f6:	3201      	adds	r2, #1
 80079f8:	e7ce      	b.n	8007998 <__lshift+0x30>
 80079fa:	3b04      	subs	r3, #4
 80079fc:	f851 2b04 	ldr.w	r2, [r1], #4
 8007a00:	458e      	cmp	lr, r1
 8007a02:	f843 2f04 	str.w	r2, [r3, #4]!
 8007a06:	d8f9      	bhi.n	80079fc <__lshift+0x94>
 8007a08:	e7e6      	b.n	80079d8 <__lshift+0x70>

08007a0a <__mcmp>:
 8007a0a:	6903      	ldr	r3, [r0, #16]
 8007a0c:	690a      	ldr	r2, [r1, #16]
 8007a0e:	b530      	push	{r4, r5, lr}
 8007a10:	1a9b      	subs	r3, r3, r2
 8007a12:	d10c      	bne.n	8007a2e <__mcmp+0x24>
 8007a14:	0092      	lsls	r2, r2, #2
 8007a16:	3014      	adds	r0, #20
 8007a18:	3114      	adds	r1, #20
 8007a1a:	1884      	adds	r4, r0, r2
 8007a1c:	4411      	add	r1, r2
 8007a1e:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007a22:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007a26:	4295      	cmp	r5, r2
 8007a28:	d003      	beq.n	8007a32 <__mcmp+0x28>
 8007a2a:	d305      	bcc.n	8007a38 <__mcmp+0x2e>
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	4618      	mov	r0, r3
 8007a30:	bd30      	pop	{r4, r5, pc}
 8007a32:	42a0      	cmp	r0, r4
 8007a34:	d3f3      	bcc.n	8007a1e <__mcmp+0x14>
 8007a36:	e7fa      	b.n	8007a2e <__mcmp+0x24>
 8007a38:	f04f 33ff 	mov.w	r3, #4294967295
 8007a3c:	e7f7      	b.n	8007a2e <__mcmp+0x24>

08007a3e <__mdiff>:
 8007a3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a42:	460d      	mov	r5, r1
 8007a44:	4607      	mov	r7, r0
 8007a46:	4611      	mov	r1, r2
 8007a48:	4628      	mov	r0, r5
 8007a4a:	4614      	mov	r4, r2
 8007a4c:	f7ff ffdd 	bl	8007a0a <__mcmp>
 8007a50:	1e06      	subs	r6, r0, #0
 8007a52:	d108      	bne.n	8007a66 <__mdiff+0x28>
 8007a54:	4631      	mov	r1, r6
 8007a56:	4638      	mov	r0, r7
 8007a58:	f7ff fdce 	bl	80075f8 <_Balloc>
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	6146      	str	r6, [r0, #20]
 8007a60:	6103      	str	r3, [r0, #16]
 8007a62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a66:	bfa4      	itt	ge
 8007a68:	4623      	movge	r3, r4
 8007a6a:	462c      	movge	r4, r5
 8007a6c:	4638      	mov	r0, r7
 8007a6e:	6861      	ldr	r1, [r4, #4]
 8007a70:	bfa6      	itte	ge
 8007a72:	461d      	movge	r5, r3
 8007a74:	2600      	movge	r6, #0
 8007a76:	2601      	movlt	r6, #1
 8007a78:	f7ff fdbe 	bl	80075f8 <_Balloc>
 8007a7c:	f04f 0c00 	mov.w	ip, #0
 8007a80:	60c6      	str	r6, [r0, #12]
 8007a82:	692b      	ldr	r3, [r5, #16]
 8007a84:	6926      	ldr	r6, [r4, #16]
 8007a86:	f104 0214 	add.w	r2, r4, #20
 8007a8a:	f105 0914 	add.w	r9, r5, #20
 8007a8e:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007a92:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007a96:	f100 0114 	add.w	r1, r0, #20
 8007a9a:	f852 ab04 	ldr.w	sl, [r2], #4
 8007a9e:	f859 5b04 	ldr.w	r5, [r9], #4
 8007aa2:	fa1f f38a 	uxth.w	r3, sl
 8007aa6:	4463      	add	r3, ip
 8007aa8:	b2ac      	uxth	r4, r5
 8007aaa:	1b1b      	subs	r3, r3, r4
 8007aac:	0c2c      	lsrs	r4, r5, #16
 8007aae:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8007ab2:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8007ab6:	b29b      	uxth	r3, r3
 8007ab8:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007abc:	45c8      	cmp	r8, r9
 8007abe:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8007ac2:	4696      	mov	lr, r2
 8007ac4:	f841 4b04 	str.w	r4, [r1], #4
 8007ac8:	d8e7      	bhi.n	8007a9a <__mdiff+0x5c>
 8007aca:	45be      	cmp	lr, r7
 8007acc:	d305      	bcc.n	8007ada <__mdiff+0x9c>
 8007ace:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007ad2:	b18b      	cbz	r3, 8007af8 <__mdiff+0xba>
 8007ad4:	6106      	str	r6, [r0, #16]
 8007ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ada:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007ade:	b2a2      	uxth	r2, r4
 8007ae0:	4462      	add	r2, ip
 8007ae2:	1413      	asrs	r3, r2, #16
 8007ae4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007ae8:	b292      	uxth	r2, r2
 8007aea:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007aee:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007af2:	f841 2b04 	str.w	r2, [r1], #4
 8007af6:	e7e8      	b.n	8007aca <__mdiff+0x8c>
 8007af8:	3e01      	subs	r6, #1
 8007afa:	e7e8      	b.n	8007ace <__mdiff+0x90>

08007afc <__d2b>:
 8007afc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007b00:	461c      	mov	r4, r3
 8007b02:	2101      	movs	r1, #1
 8007b04:	4690      	mov	r8, r2
 8007b06:	9e08      	ldr	r6, [sp, #32]
 8007b08:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007b0a:	f7ff fd75 	bl	80075f8 <_Balloc>
 8007b0e:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8007b12:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8007b16:	4607      	mov	r7, r0
 8007b18:	bb34      	cbnz	r4, 8007b68 <__d2b+0x6c>
 8007b1a:	9201      	str	r2, [sp, #4]
 8007b1c:	f1b8 0f00 	cmp.w	r8, #0
 8007b20:	d027      	beq.n	8007b72 <__d2b+0x76>
 8007b22:	a802      	add	r0, sp, #8
 8007b24:	f840 8d08 	str.w	r8, [r0, #-8]!
 8007b28:	f7ff fe0b 	bl	8007742 <__lo0bits>
 8007b2c:	9900      	ldr	r1, [sp, #0]
 8007b2e:	b1f0      	cbz	r0, 8007b6e <__d2b+0x72>
 8007b30:	9a01      	ldr	r2, [sp, #4]
 8007b32:	f1c0 0320 	rsb	r3, r0, #32
 8007b36:	fa02 f303 	lsl.w	r3, r2, r3
 8007b3a:	430b      	orrs	r3, r1
 8007b3c:	40c2      	lsrs	r2, r0
 8007b3e:	617b      	str	r3, [r7, #20]
 8007b40:	9201      	str	r2, [sp, #4]
 8007b42:	9b01      	ldr	r3, [sp, #4]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	bf14      	ite	ne
 8007b48:	2102      	movne	r1, #2
 8007b4a:	2101      	moveq	r1, #1
 8007b4c:	61bb      	str	r3, [r7, #24]
 8007b4e:	6139      	str	r1, [r7, #16]
 8007b50:	b1c4      	cbz	r4, 8007b84 <__d2b+0x88>
 8007b52:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007b56:	4404      	add	r4, r0
 8007b58:	6034      	str	r4, [r6, #0]
 8007b5a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007b5e:	6028      	str	r0, [r5, #0]
 8007b60:	4638      	mov	r0, r7
 8007b62:	b002      	add	sp, #8
 8007b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b68:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007b6c:	e7d5      	b.n	8007b1a <__d2b+0x1e>
 8007b6e:	6179      	str	r1, [r7, #20]
 8007b70:	e7e7      	b.n	8007b42 <__d2b+0x46>
 8007b72:	a801      	add	r0, sp, #4
 8007b74:	f7ff fde5 	bl	8007742 <__lo0bits>
 8007b78:	2101      	movs	r1, #1
 8007b7a:	9b01      	ldr	r3, [sp, #4]
 8007b7c:	6139      	str	r1, [r7, #16]
 8007b7e:	617b      	str	r3, [r7, #20]
 8007b80:	3020      	adds	r0, #32
 8007b82:	e7e5      	b.n	8007b50 <__d2b+0x54>
 8007b84:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007b88:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007b8c:	6030      	str	r0, [r6, #0]
 8007b8e:	6918      	ldr	r0, [r3, #16]
 8007b90:	f7ff fdb8 	bl	8007704 <__hi0bits>
 8007b94:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007b98:	e7e1      	b.n	8007b5e <__d2b+0x62>

08007b9a <_calloc_r>:
 8007b9a:	b538      	push	{r3, r4, r5, lr}
 8007b9c:	fb02 f401 	mul.w	r4, r2, r1
 8007ba0:	4621      	mov	r1, r4
 8007ba2:	f000 f855 	bl	8007c50 <_malloc_r>
 8007ba6:	4605      	mov	r5, r0
 8007ba8:	b118      	cbz	r0, 8007bb2 <_calloc_r+0x18>
 8007baa:	4622      	mov	r2, r4
 8007bac:	2100      	movs	r1, #0
 8007bae:	f7fe f9e4 	bl	8005f7a <memset>
 8007bb2:	4628      	mov	r0, r5
 8007bb4:	bd38      	pop	{r3, r4, r5, pc}
	...

08007bb8 <_free_r>:
 8007bb8:	b538      	push	{r3, r4, r5, lr}
 8007bba:	4605      	mov	r5, r0
 8007bbc:	2900      	cmp	r1, #0
 8007bbe:	d043      	beq.n	8007c48 <_free_r+0x90>
 8007bc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bc4:	1f0c      	subs	r4, r1, #4
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	bfb8      	it	lt
 8007bca:	18e4      	addlt	r4, r4, r3
 8007bcc:	f000 fece 	bl	800896c <__malloc_lock>
 8007bd0:	4a1e      	ldr	r2, [pc, #120]	; (8007c4c <_free_r+0x94>)
 8007bd2:	6813      	ldr	r3, [r2, #0]
 8007bd4:	4610      	mov	r0, r2
 8007bd6:	b933      	cbnz	r3, 8007be6 <_free_r+0x2e>
 8007bd8:	6063      	str	r3, [r4, #4]
 8007bda:	6014      	str	r4, [r2, #0]
 8007bdc:	4628      	mov	r0, r5
 8007bde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007be2:	f000 bec4 	b.w	800896e <__malloc_unlock>
 8007be6:	42a3      	cmp	r3, r4
 8007be8:	d90b      	bls.n	8007c02 <_free_r+0x4a>
 8007bea:	6821      	ldr	r1, [r4, #0]
 8007bec:	1862      	adds	r2, r4, r1
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	bf01      	itttt	eq
 8007bf2:	681a      	ldreq	r2, [r3, #0]
 8007bf4:	685b      	ldreq	r3, [r3, #4]
 8007bf6:	1852      	addeq	r2, r2, r1
 8007bf8:	6022      	streq	r2, [r4, #0]
 8007bfa:	6063      	str	r3, [r4, #4]
 8007bfc:	6004      	str	r4, [r0, #0]
 8007bfe:	e7ed      	b.n	8007bdc <_free_r+0x24>
 8007c00:	4613      	mov	r3, r2
 8007c02:	685a      	ldr	r2, [r3, #4]
 8007c04:	b10a      	cbz	r2, 8007c0a <_free_r+0x52>
 8007c06:	42a2      	cmp	r2, r4
 8007c08:	d9fa      	bls.n	8007c00 <_free_r+0x48>
 8007c0a:	6819      	ldr	r1, [r3, #0]
 8007c0c:	1858      	adds	r0, r3, r1
 8007c0e:	42a0      	cmp	r0, r4
 8007c10:	d10b      	bne.n	8007c2a <_free_r+0x72>
 8007c12:	6820      	ldr	r0, [r4, #0]
 8007c14:	4401      	add	r1, r0
 8007c16:	1858      	adds	r0, r3, r1
 8007c18:	4282      	cmp	r2, r0
 8007c1a:	6019      	str	r1, [r3, #0]
 8007c1c:	d1de      	bne.n	8007bdc <_free_r+0x24>
 8007c1e:	6810      	ldr	r0, [r2, #0]
 8007c20:	6852      	ldr	r2, [r2, #4]
 8007c22:	4401      	add	r1, r0
 8007c24:	6019      	str	r1, [r3, #0]
 8007c26:	605a      	str	r2, [r3, #4]
 8007c28:	e7d8      	b.n	8007bdc <_free_r+0x24>
 8007c2a:	d902      	bls.n	8007c32 <_free_r+0x7a>
 8007c2c:	230c      	movs	r3, #12
 8007c2e:	602b      	str	r3, [r5, #0]
 8007c30:	e7d4      	b.n	8007bdc <_free_r+0x24>
 8007c32:	6820      	ldr	r0, [r4, #0]
 8007c34:	1821      	adds	r1, r4, r0
 8007c36:	428a      	cmp	r2, r1
 8007c38:	bf01      	itttt	eq
 8007c3a:	6811      	ldreq	r1, [r2, #0]
 8007c3c:	6852      	ldreq	r2, [r2, #4]
 8007c3e:	1809      	addeq	r1, r1, r0
 8007c40:	6021      	streq	r1, [r4, #0]
 8007c42:	6062      	str	r2, [r4, #4]
 8007c44:	605c      	str	r4, [r3, #4]
 8007c46:	e7c9      	b.n	8007bdc <_free_r+0x24>
 8007c48:	bd38      	pop	{r3, r4, r5, pc}
 8007c4a:	bf00      	nop
 8007c4c:	200052d0 	.word	0x200052d0

08007c50 <_malloc_r>:
 8007c50:	b570      	push	{r4, r5, r6, lr}
 8007c52:	1ccd      	adds	r5, r1, #3
 8007c54:	f025 0503 	bic.w	r5, r5, #3
 8007c58:	3508      	adds	r5, #8
 8007c5a:	2d0c      	cmp	r5, #12
 8007c5c:	bf38      	it	cc
 8007c5e:	250c      	movcc	r5, #12
 8007c60:	2d00      	cmp	r5, #0
 8007c62:	4606      	mov	r6, r0
 8007c64:	db01      	blt.n	8007c6a <_malloc_r+0x1a>
 8007c66:	42a9      	cmp	r1, r5
 8007c68:	d903      	bls.n	8007c72 <_malloc_r+0x22>
 8007c6a:	230c      	movs	r3, #12
 8007c6c:	6033      	str	r3, [r6, #0]
 8007c6e:	2000      	movs	r0, #0
 8007c70:	bd70      	pop	{r4, r5, r6, pc}
 8007c72:	f000 fe7b 	bl	800896c <__malloc_lock>
 8007c76:	4a23      	ldr	r2, [pc, #140]	; (8007d04 <_malloc_r+0xb4>)
 8007c78:	6814      	ldr	r4, [r2, #0]
 8007c7a:	4621      	mov	r1, r4
 8007c7c:	b991      	cbnz	r1, 8007ca4 <_malloc_r+0x54>
 8007c7e:	4c22      	ldr	r4, [pc, #136]	; (8007d08 <_malloc_r+0xb8>)
 8007c80:	6823      	ldr	r3, [r4, #0]
 8007c82:	b91b      	cbnz	r3, 8007c8c <_malloc_r+0x3c>
 8007c84:	4630      	mov	r0, r6
 8007c86:	f000 fc99 	bl	80085bc <_sbrk_r>
 8007c8a:	6020      	str	r0, [r4, #0]
 8007c8c:	4629      	mov	r1, r5
 8007c8e:	4630      	mov	r0, r6
 8007c90:	f000 fc94 	bl	80085bc <_sbrk_r>
 8007c94:	1c43      	adds	r3, r0, #1
 8007c96:	d126      	bne.n	8007ce6 <_malloc_r+0x96>
 8007c98:	230c      	movs	r3, #12
 8007c9a:	4630      	mov	r0, r6
 8007c9c:	6033      	str	r3, [r6, #0]
 8007c9e:	f000 fe66 	bl	800896e <__malloc_unlock>
 8007ca2:	e7e4      	b.n	8007c6e <_malloc_r+0x1e>
 8007ca4:	680b      	ldr	r3, [r1, #0]
 8007ca6:	1b5b      	subs	r3, r3, r5
 8007ca8:	d41a      	bmi.n	8007ce0 <_malloc_r+0x90>
 8007caa:	2b0b      	cmp	r3, #11
 8007cac:	d90f      	bls.n	8007cce <_malloc_r+0x7e>
 8007cae:	600b      	str	r3, [r1, #0]
 8007cb0:	18cc      	adds	r4, r1, r3
 8007cb2:	50cd      	str	r5, [r1, r3]
 8007cb4:	4630      	mov	r0, r6
 8007cb6:	f000 fe5a 	bl	800896e <__malloc_unlock>
 8007cba:	f104 000b 	add.w	r0, r4, #11
 8007cbe:	1d23      	adds	r3, r4, #4
 8007cc0:	f020 0007 	bic.w	r0, r0, #7
 8007cc4:	1ac3      	subs	r3, r0, r3
 8007cc6:	d01b      	beq.n	8007d00 <_malloc_r+0xb0>
 8007cc8:	425a      	negs	r2, r3
 8007cca:	50e2      	str	r2, [r4, r3]
 8007ccc:	bd70      	pop	{r4, r5, r6, pc}
 8007cce:	428c      	cmp	r4, r1
 8007cd0:	bf0b      	itete	eq
 8007cd2:	6863      	ldreq	r3, [r4, #4]
 8007cd4:	684b      	ldrne	r3, [r1, #4]
 8007cd6:	6013      	streq	r3, [r2, #0]
 8007cd8:	6063      	strne	r3, [r4, #4]
 8007cda:	bf18      	it	ne
 8007cdc:	460c      	movne	r4, r1
 8007cde:	e7e9      	b.n	8007cb4 <_malloc_r+0x64>
 8007ce0:	460c      	mov	r4, r1
 8007ce2:	6849      	ldr	r1, [r1, #4]
 8007ce4:	e7ca      	b.n	8007c7c <_malloc_r+0x2c>
 8007ce6:	1cc4      	adds	r4, r0, #3
 8007ce8:	f024 0403 	bic.w	r4, r4, #3
 8007cec:	42a0      	cmp	r0, r4
 8007cee:	d005      	beq.n	8007cfc <_malloc_r+0xac>
 8007cf0:	1a21      	subs	r1, r4, r0
 8007cf2:	4630      	mov	r0, r6
 8007cf4:	f000 fc62 	bl	80085bc <_sbrk_r>
 8007cf8:	3001      	adds	r0, #1
 8007cfa:	d0cd      	beq.n	8007c98 <_malloc_r+0x48>
 8007cfc:	6025      	str	r5, [r4, #0]
 8007cfe:	e7d9      	b.n	8007cb4 <_malloc_r+0x64>
 8007d00:	bd70      	pop	{r4, r5, r6, pc}
 8007d02:	bf00      	nop
 8007d04:	200052d0 	.word	0x200052d0
 8007d08:	200052d4 	.word	0x200052d4

08007d0c <__ssputs_r>:
 8007d0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d10:	688e      	ldr	r6, [r1, #8]
 8007d12:	4682      	mov	sl, r0
 8007d14:	429e      	cmp	r6, r3
 8007d16:	460c      	mov	r4, r1
 8007d18:	4691      	mov	r9, r2
 8007d1a:	4698      	mov	r8, r3
 8007d1c:	d835      	bhi.n	8007d8a <__ssputs_r+0x7e>
 8007d1e:	898a      	ldrh	r2, [r1, #12]
 8007d20:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007d24:	d031      	beq.n	8007d8a <__ssputs_r+0x7e>
 8007d26:	2302      	movs	r3, #2
 8007d28:	6825      	ldr	r5, [r4, #0]
 8007d2a:	6909      	ldr	r1, [r1, #16]
 8007d2c:	1a6f      	subs	r7, r5, r1
 8007d2e:	6965      	ldr	r5, [r4, #20]
 8007d30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007d34:	fb95 f5f3 	sdiv	r5, r5, r3
 8007d38:	f108 0301 	add.w	r3, r8, #1
 8007d3c:	443b      	add	r3, r7
 8007d3e:	429d      	cmp	r5, r3
 8007d40:	bf38      	it	cc
 8007d42:	461d      	movcc	r5, r3
 8007d44:	0553      	lsls	r3, r2, #21
 8007d46:	d531      	bpl.n	8007dac <__ssputs_r+0xa0>
 8007d48:	4629      	mov	r1, r5
 8007d4a:	f7ff ff81 	bl	8007c50 <_malloc_r>
 8007d4e:	4606      	mov	r6, r0
 8007d50:	b950      	cbnz	r0, 8007d68 <__ssputs_r+0x5c>
 8007d52:	230c      	movs	r3, #12
 8007d54:	f8ca 3000 	str.w	r3, [sl]
 8007d58:	89a3      	ldrh	r3, [r4, #12]
 8007d5a:	f04f 30ff 	mov.w	r0, #4294967295
 8007d5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d62:	81a3      	strh	r3, [r4, #12]
 8007d64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d68:	463a      	mov	r2, r7
 8007d6a:	6921      	ldr	r1, [r4, #16]
 8007d6c:	f7fe f8fa 	bl	8005f64 <memcpy>
 8007d70:	89a3      	ldrh	r3, [r4, #12]
 8007d72:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007d76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d7a:	81a3      	strh	r3, [r4, #12]
 8007d7c:	6126      	str	r6, [r4, #16]
 8007d7e:	443e      	add	r6, r7
 8007d80:	6026      	str	r6, [r4, #0]
 8007d82:	4646      	mov	r6, r8
 8007d84:	6165      	str	r5, [r4, #20]
 8007d86:	1bed      	subs	r5, r5, r7
 8007d88:	60a5      	str	r5, [r4, #8]
 8007d8a:	4546      	cmp	r6, r8
 8007d8c:	bf28      	it	cs
 8007d8e:	4646      	movcs	r6, r8
 8007d90:	4649      	mov	r1, r9
 8007d92:	4632      	mov	r2, r6
 8007d94:	6820      	ldr	r0, [r4, #0]
 8007d96:	f000 fdcf 	bl	8008938 <memmove>
 8007d9a:	68a3      	ldr	r3, [r4, #8]
 8007d9c:	2000      	movs	r0, #0
 8007d9e:	1b9b      	subs	r3, r3, r6
 8007da0:	60a3      	str	r3, [r4, #8]
 8007da2:	6823      	ldr	r3, [r4, #0]
 8007da4:	441e      	add	r6, r3
 8007da6:	6026      	str	r6, [r4, #0]
 8007da8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dac:	462a      	mov	r2, r5
 8007dae:	f000 fddf 	bl	8008970 <_realloc_r>
 8007db2:	4606      	mov	r6, r0
 8007db4:	2800      	cmp	r0, #0
 8007db6:	d1e1      	bne.n	8007d7c <__ssputs_r+0x70>
 8007db8:	6921      	ldr	r1, [r4, #16]
 8007dba:	4650      	mov	r0, sl
 8007dbc:	f7ff fefc 	bl	8007bb8 <_free_r>
 8007dc0:	e7c7      	b.n	8007d52 <__ssputs_r+0x46>
	...

08007dc4 <_svfiprintf_r>:
 8007dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dc8:	b09d      	sub	sp, #116	; 0x74
 8007dca:	9303      	str	r3, [sp, #12]
 8007dcc:	898b      	ldrh	r3, [r1, #12]
 8007dce:	4680      	mov	r8, r0
 8007dd0:	061c      	lsls	r4, r3, #24
 8007dd2:	460d      	mov	r5, r1
 8007dd4:	4616      	mov	r6, r2
 8007dd6:	d50f      	bpl.n	8007df8 <_svfiprintf_r+0x34>
 8007dd8:	690b      	ldr	r3, [r1, #16]
 8007dda:	b96b      	cbnz	r3, 8007df8 <_svfiprintf_r+0x34>
 8007ddc:	2140      	movs	r1, #64	; 0x40
 8007dde:	f7ff ff37 	bl	8007c50 <_malloc_r>
 8007de2:	6028      	str	r0, [r5, #0]
 8007de4:	6128      	str	r0, [r5, #16]
 8007de6:	b928      	cbnz	r0, 8007df4 <_svfiprintf_r+0x30>
 8007de8:	230c      	movs	r3, #12
 8007dea:	f8c8 3000 	str.w	r3, [r8]
 8007dee:	f04f 30ff 	mov.w	r0, #4294967295
 8007df2:	e0c4      	b.n	8007f7e <_svfiprintf_r+0x1ba>
 8007df4:	2340      	movs	r3, #64	; 0x40
 8007df6:	616b      	str	r3, [r5, #20]
 8007df8:	2300      	movs	r3, #0
 8007dfa:	9309      	str	r3, [sp, #36]	; 0x24
 8007dfc:	2320      	movs	r3, #32
 8007dfe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e02:	2330      	movs	r3, #48	; 0x30
 8007e04:	f04f 0b01 	mov.w	fp, #1
 8007e08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007e0c:	4637      	mov	r7, r6
 8007e0e:	463c      	mov	r4, r7
 8007e10:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d13c      	bne.n	8007e92 <_svfiprintf_r+0xce>
 8007e18:	ebb7 0a06 	subs.w	sl, r7, r6
 8007e1c:	d00b      	beq.n	8007e36 <_svfiprintf_r+0x72>
 8007e1e:	4653      	mov	r3, sl
 8007e20:	4632      	mov	r2, r6
 8007e22:	4629      	mov	r1, r5
 8007e24:	4640      	mov	r0, r8
 8007e26:	f7ff ff71 	bl	8007d0c <__ssputs_r>
 8007e2a:	3001      	adds	r0, #1
 8007e2c:	f000 80a2 	beq.w	8007f74 <_svfiprintf_r+0x1b0>
 8007e30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e32:	4453      	add	r3, sl
 8007e34:	9309      	str	r3, [sp, #36]	; 0x24
 8007e36:	783b      	ldrb	r3, [r7, #0]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	f000 809b 	beq.w	8007f74 <_svfiprintf_r+0x1b0>
 8007e3e:	2300      	movs	r3, #0
 8007e40:	f04f 32ff 	mov.w	r2, #4294967295
 8007e44:	9304      	str	r3, [sp, #16]
 8007e46:	9307      	str	r3, [sp, #28]
 8007e48:	9205      	str	r2, [sp, #20]
 8007e4a:	9306      	str	r3, [sp, #24]
 8007e4c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e50:	931a      	str	r3, [sp, #104]	; 0x68
 8007e52:	2205      	movs	r2, #5
 8007e54:	7821      	ldrb	r1, [r4, #0]
 8007e56:	4850      	ldr	r0, [pc, #320]	; (8007f98 <_svfiprintf_r+0x1d4>)
 8007e58:	f7ff fbc0 	bl	80075dc <memchr>
 8007e5c:	1c67      	adds	r7, r4, #1
 8007e5e:	9b04      	ldr	r3, [sp, #16]
 8007e60:	b9d8      	cbnz	r0, 8007e9a <_svfiprintf_r+0xd6>
 8007e62:	06d9      	lsls	r1, r3, #27
 8007e64:	bf44      	itt	mi
 8007e66:	2220      	movmi	r2, #32
 8007e68:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007e6c:	071a      	lsls	r2, r3, #28
 8007e6e:	bf44      	itt	mi
 8007e70:	222b      	movmi	r2, #43	; 0x2b
 8007e72:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007e76:	7822      	ldrb	r2, [r4, #0]
 8007e78:	2a2a      	cmp	r2, #42	; 0x2a
 8007e7a:	d016      	beq.n	8007eaa <_svfiprintf_r+0xe6>
 8007e7c:	2100      	movs	r1, #0
 8007e7e:	200a      	movs	r0, #10
 8007e80:	9a07      	ldr	r2, [sp, #28]
 8007e82:	4627      	mov	r7, r4
 8007e84:	783b      	ldrb	r3, [r7, #0]
 8007e86:	3401      	adds	r4, #1
 8007e88:	3b30      	subs	r3, #48	; 0x30
 8007e8a:	2b09      	cmp	r3, #9
 8007e8c:	d950      	bls.n	8007f30 <_svfiprintf_r+0x16c>
 8007e8e:	b1c9      	cbz	r1, 8007ec4 <_svfiprintf_r+0x100>
 8007e90:	e011      	b.n	8007eb6 <_svfiprintf_r+0xf2>
 8007e92:	2b25      	cmp	r3, #37	; 0x25
 8007e94:	d0c0      	beq.n	8007e18 <_svfiprintf_r+0x54>
 8007e96:	4627      	mov	r7, r4
 8007e98:	e7b9      	b.n	8007e0e <_svfiprintf_r+0x4a>
 8007e9a:	4a3f      	ldr	r2, [pc, #252]	; (8007f98 <_svfiprintf_r+0x1d4>)
 8007e9c:	463c      	mov	r4, r7
 8007e9e:	1a80      	subs	r0, r0, r2
 8007ea0:	fa0b f000 	lsl.w	r0, fp, r0
 8007ea4:	4318      	orrs	r0, r3
 8007ea6:	9004      	str	r0, [sp, #16]
 8007ea8:	e7d3      	b.n	8007e52 <_svfiprintf_r+0x8e>
 8007eaa:	9a03      	ldr	r2, [sp, #12]
 8007eac:	1d11      	adds	r1, r2, #4
 8007eae:	6812      	ldr	r2, [r2, #0]
 8007eb0:	9103      	str	r1, [sp, #12]
 8007eb2:	2a00      	cmp	r2, #0
 8007eb4:	db01      	blt.n	8007eba <_svfiprintf_r+0xf6>
 8007eb6:	9207      	str	r2, [sp, #28]
 8007eb8:	e004      	b.n	8007ec4 <_svfiprintf_r+0x100>
 8007eba:	4252      	negs	r2, r2
 8007ebc:	f043 0302 	orr.w	r3, r3, #2
 8007ec0:	9207      	str	r2, [sp, #28]
 8007ec2:	9304      	str	r3, [sp, #16]
 8007ec4:	783b      	ldrb	r3, [r7, #0]
 8007ec6:	2b2e      	cmp	r3, #46	; 0x2e
 8007ec8:	d10d      	bne.n	8007ee6 <_svfiprintf_r+0x122>
 8007eca:	787b      	ldrb	r3, [r7, #1]
 8007ecc:	1c79      	adds	r1, r7, #1
 8007ece:	2b2a      	cmp	r3, #42	; 0x2a
 8007ed0:	d132      	bne.n	8007f38 <_svfiprintf_r+0x174>
 8007ed2:	9b03      	ldr	r3, [sp, #12]
 8007ed4:	3702      	adds	r7, #2
 8007ed6:	1d1a      	adds	r2, r3, #4
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	9203      	str	r2, [sp, #12]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	bfb8      	it	lt
 8007ee0:	f04f 33ff 	movlt.w	r3, #4294967295
 8007ee4:	9305      	str	r3, [sp, #20]
 8007ee6:	4c2d      	ldr	r4, [pc, #180]	; (8007f9c <_svfiprintf_r+0x1d8>)
 8007ee8:	2203      	movs	r2, #3
 8007eea:	7839      	ldrb	r1, [r7, #0]
 8007eec:	4620      	mov	r0, r4
 8007eee:	f7ff fb75 	bl	80075dc <memchr>
 8007ef2:	b138      	cbz	r0, 8007f04 <_svfiprintf_r+0x140>
 8007ef4:	2340      	movs	r3, #64	; 0x40
 8007ef6:	1b00      	subs	r0, r0, r4
 8007ef8:	fa03 f000 	lsl.w	r0, r3, r0
 8007efc:	9b04      	ldr	r3, [sp, #16]
 8007efe:	3701      	adds	r7, #1
 8007f00:	4303      	orrs	r3, r0
 8007f02:	9304      	str	r3, [sp, #16]
 8007f04:	7839      	ldrb	r1, [r7, #0]
 8007f06:	2206      	movs	r2, #6
 8007f08:	4825      	ldr	r0, [pc, #148]	; (8007fa0 <_svfiprintf_r+0x1dc>)
 8007f0a:	1c7e      	adds	r6, r7, #1
 8007f0c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f10:	f7ff fb64 	bl	80075dc <memchr>
 8007f14:	2800      	cmp	r0, #0
 8007f16:	d035      	beq.n	8007f84 <_svfiprintf_r+0x1c0>
 8007f18:	4b22      	ldr	r3, [pc, #136]	; (8007fa4 <_svfiprintf_r+0x1e0>)
 8007f1a:	b9fb      	cbnz	r3, 8007f5c <_svfiprintf_r+0x198>
 8007f1c:	9b03      	ldr	r3, [sp, #12]
 8007f1e:	3307      	adds	r3, #7
 8007f20:	f023 0307 	bic.w	r3, r3, #7
 8007f24:	3308      	adds	r3, #8
 8007f26:	9303      	str	r3, [sp, #12]
 8007f28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f2a:	444b      	add	r3, r9
 8007f2c:	9309      	str	r3, [sp, #36]	; 0x24
 8007f2e:	e76d      	b.n	8007e0c <_svfiprintf_r+0x48>
 8007f30:	fb00 3202 	mla	r2, r0, r2, r3
 8007f34:	2101      	movs	r1, #1
 8007f36:	e7a4      	b.n	8007e82 <_svfiprintf_r+0xbe>
 8007f38:	2300      	movs	r3, #0
 8007f3a:	240a      	movs	r4, #10
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	9305      	str	r3, [sp, #20]
 8007f40:	460f      	mov	r7, r1
 8007f42:	783a      	ldrb	r2, [r7, #0]
 8007f44:	3101      	adds	r1, #1
 8007f46:	3a30      	subs	r2, #48	; 0x30
 8007f48:	2a09      	cmp	r2, #9
 8007f4a:	d903      	bls.n	8007f54 <_svfiprintf_r+0x190>
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d0ca      	beq.n	8007ee6 <_svfiprintf_r+0x122>
 8007f50:	9005      	str	r0, [sp, #20]
 8007f52:	e7c8      	b.n	8007ee6 <_svfiprintf_r+0x122>
 8007f54:	fb04 2000 	mla	r0, r4, r0, r2
 8007f58:	2301      	movs	r3, #1
 8007f5a:	e7f1      	b.n	8007f40 <_svfiprintf_r+0x17c>
 8007f5c:	ab03      	add	r3, sp, #12
 8007f5e:	9300      	str	r3, [sp, #0]
 8007f60:	462a      	mov	r2, r5
 8007f62:	4b11      	ldr	r3, [pc, #68]	; (8007fa8 <_svfiprintf_r+0x1e4>)
 8007f64:	a904      	add	r1, sp, #16
 8007f66:	4640      	mov	r0, r8
 8007f68:	f7fe f8a0 	bl	80060ac <_printf_float>
 8007f6c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007f70:	4681      	mov	r9, r0
 8007f72:	d1d9      	bne.n	8007f28 <_svfiprintf_r+0x164>
 8007f74:	89ab      	ldrh	r3, [r5, #12]
 8007f76:	065b      	lsls	r3, r3, #25
 8007f78:	f53f af39 	bmi.w	8007dee <_svfiprintf_r+0x2a>
 8007f7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f7e:	b01d      	add	sp, #116	; 0x74
 8007f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f84:	ab03      	add	r3, sp, #12
 8007f86:	9300      	str	r3, [sp, #0]
 8007f88:	462a      	mov	r2, r5
 8007f8a:	4b07      	ldr	r3, [pc, #28]	; (8007fa8 <_svfiprintf_r+0x1e4>)
 8007f8c:	a904      	add	r1, sp, #16
 8007f8e:	4640      	mov	r0, r8
 8007f90:	f7fe fb3c 	bl	800660c <_printf_i>
 8007f94:	e7ea      	b.n	8007f6c <_svfiprintf_r+0x1a8>
 8007f96:	bf00      	nop
 8007f98:	08008ce4 	.word	0x08008ce4
 8007f9c:	08008cea 	.word	0x08008cea
 8007fa0:	08008cee 	.word	0x08008cee
 8007fa4:	080060ad 	.word	0x080060ad
 8007fa8:	08007d0d 	.word	0x08007d0d

08007fac <_sungetc_r>:
 8007fac:	b538      	push	{r3, r4, r5, lr}
 8007fae:	1c4b      	adds	r3, r1, #1
 8007fb0:	4614      	mov	r4, r2
 8007fb2:	d103      	bne.n	8007fbc <_sungetc_r+0x10>
 8007fb4:	f04f 35ff 	mov.w	r5, #4294967295
 8007fb8:	4628      	mov	r0, r5
 8007fba:	bd38      	pop	{r3, r4, r5, pc}
 8007fbc:	8993      	ldrh	r3, [r2, #12]
 8007fbe:	b2cd      	uxtb	r5, r1
 8007fc0:	f023 0320 	bic.w	r3, r3, #32
 8007fc4:	8193      	strh	r3, [r2, #12]
 8007fc6:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8007fc8:	6852      	ldr	r2, [r2, #4]
 8007fca:	b18b      	cbz	r3, 8007ff0 <_sungetc_r+0x44>
 8007fcc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007fce:	429a      	cmp	r2, r3
 8007fd0:	da08      	bge.n	8007fe4 <_sungetc_r+0x38>
 8007fd2:	6823      	ldr	r3, [r4, #0]
 8007fd4:	1e5a      	subs	r2, r3, #1
 8007fd6:	6022      	str	r2, [r4, #0]
 8007fd8:	f803 5c01 	strb.w	r5, [r3, #-1]
 8007fdc:	6863      	ldr	r3, [r4, #4]
 8007fde:	3301      	adds	r3, #1
 8007fe0:	6063      	str	r3, [r4, #4]
 8007fe2:	e7e9      	b.n	8007fb8 <_sungetc_r+0xc>
 8007fe4:	4621      	mov	r1, r4
 8007fe6:	f000 fc4b 	bl	8008880 <__submore>
 8007fea:	2800      	cmp	r0, #0
 8007fec:	d0f1      	beq.n	8007fd2 <_sungetc_r+0x26>
 8007fee:	e7e1      	b.n	8007fb4 <_sungetc_r+0x8>
 8007ff0:	6921      	ldr	r1, [r4, #16]
 8007ff2:	6823      	ldr	r3, [r4, #0]
 8007ff4:	b151      	cbz	r1, 800800c <_sungetc_r+0x60>
 8007ff6:	4299      	cmp	r1, r3
 8007ff8:	d208      	bcs.n	800800c <_sungetc_r+0x60>
 8007ffa:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8007ffe:	428d      	cmp	r5, r1
 8008000:	d104      	bne.n	800800c <_sungetc_r+0x60>
 8008002:	3b01      	subs	r3, #1
 8008004:	3201      	adds	r2, #1
 8008006:	6023      	str	r3, [r4, #0]
 8008008:	6062      	str	r2, [r4, #4]
 800800a:	e7d5      	b.n	8007fb8 <_sungetc_r+0xc>
 800800c:	63e3      	str	r3, [r4, #60]	; 0x3c
 800800e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008012:	6363      	str	r3, [r4, #52]	; 0x34
 8008014:	2303      	movs	r3, #3
 8008016:	63a3      	str	r3, [r4, #56]	; 0x38
 8008018:	4623      	mov	r3, r4
 800801a:	6422      	str	r2, [r4, #64]	; 0x40
 800801c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008020:	6023      	str	r3, [r4, #0]
 8008022:	2301      	movs	r3, #1
 8008024:	e7dc      	b.n	8007fe0 <_sungetc_r+0x34>

08008026 <__ssrefill_r>:
 8008026:	b510      	push	{r4, lr}
 8008028:	460c      	mov	r4, r1
 800802a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800802c:	b169      	cbz	r1, 800804a <__ssrefill_r+0x24>
 800802e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008032:	4299      	cmp	r1, r3
 8008034:	d001      	beq.n	800803a <__ssrefill_r+0x14>
 8008036:	f7ff fdbf 	bl	8007bb8 <_free_r>
 800803a:	2000      	movs	r0, #0
 800803c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800803e:	6360      	str	r0, [r4, #52]	; 0x34
 8008040:	6063      	str	r3, [r4, #4]
 8008042:	b113      	cbz	r3, 800804a <__ssrefill_r+0x24>
 8008044:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008046:	6023      	str	r3, [r4, #0]
 8008048:	bd10      	pop	{r4, pc}
 800804a:	6923      	ldr	r3, [r4, #16]
 800804c:	f04f 30ff 	mov.w	r0, #4294967295
 8008050:	6023      	str	r3, [r4, #0]
 8008052:	2300      	movs	r3, #0
 8008054:	6063      	str	r3, [r4, #4]
 8008056:	89a3      	ldrh	r3, [r4, #12]
 8008058:	f043 0320 	orr.w	r3, r3, #32
 800805c:	81a3      	strh	r3, [r4, #12]
 800805e:	bd10      	pop	{r4, pc}

08008060 <__ssvfiscanf_r>:
 8008060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008064:	f5ad 7d25 	sub.w	sp, sp, #660	; 0x294
 8008068:	9301      	str	r3, [sp, #4]
 800806a:	2300      	movs	r3, #0
 800806c:	4606      	mov	r6, r0
 800806e:	460c      	mov	r4, r1
 8008070:	4692      	mov	sl, r2
 8008072:	270a      	movs	r7, #10
 8008074:	9346      	str	r3, [sp, #280]	; 0x118
 8008076:	9347      	str	r3, [sp, #284]	; 0x11c
 8008078:	4b9f      	ldr	r3, [pc, #636]	; (80082f8 <__ssvfiscanf_r+0x298>)
 800807a:	f10d 080c 	add.w	r8, sp, #12
 800807e:	93a2      	str	r3, [sp, #648]	; 0x288
 8008080:	4b9e      	ldr	r3, [pc, #632]	; (80082fc <__ssvfiscanf_r+0x29c>)
 8008082:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8008300 <__ssvfiscanf_r+0x2a0>
 8008086:	f8cd 8120 	str.w	r8, [sp, #288]	; 0x120
 800808a:	93a3      	str	r3, [sp, #652]	; 0x28c
 800808c:	f89a 3000 	ldrb.w	r3, [sl]
 8008090:	2b00      	cmp	r3, #0
 8008092:	f000 812f 	beq.w	80082f4 <__ssvfiscanf_r+0x294>
 8008096:	f000 fc2f 	bl	80088f8 <__locale_ctype_ptr>
 800809a:	f89a b000 	ldrb.w	fp, [sl]
 800809e:	4458      	add	r0, fp
 80080a0:	7843      	ldrb	r3, [r0, #1]
 80080a2:	f013 0308 	ands.w	r3, r3, #8
 80080a6:	d143      	bne.n	8008130 <__ssvfiscanf_r+0xd0>
 80080a8:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 80080ac:	f10a 0501 	add.w	r5, sl, #1
 80080b0:	f040 8099 	bne.w	80081e6 <__ssvfiscanf_r+0x186>
 80080b4:	9345      	str	r3, [sp, #276]	; 0x114
 80080b6:	9343      	str	r3, [sp, #268]	; 0x10c
 80080b8:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80080bc:	2b2a      	cmp	r3, #42	; 0x2a
 80080be:	d103      	bne.n	80080c8 <__ssvfiscanf_r+0x68>
 80080c0:	2310      	movs	r3, #16
 80080c2:	f10a 0502 	add.w	r5, sl, #2
 80080c6:	9343      	str	r3, [sp, #268]	; 0x10c
 80080c8:	7829      	ldrb	r1, [r5, #0]
 80080ca:	46aa      	mov	sl, r5
 80080cc:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80080d0:	2a09      	cmp	r2, #9
 80080d2:	f105 0501 	add.w	r5, r5, #1
 80080d6:	d941      	bls.n	800815c <__ssvfiscanf_r+0xfc>
 80080d8:	2203      	movs	r2, #3
 80080da:	4889      	ldr	r0, [pc, #548]	; (8008300 <__ssvfiscanf_r+0x2a0>)
 80080dc:	f7ff fa7e 	bl	80075dc <memchr>
 80080e0:	b138      	cbz	r0, 80080f2 <__ssvfiscanf_r+0x92>
 80080e2:	eba0 0309 	sub.w	r3, r0, r9
 80080e6:	2001      	movs	r0, #1
 80080e8:	46aa      	mov	sl, r5
 80080ea:	4098      	lsls	r0, r3
 80080ec:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80080ee:	4318      	orrs	r0, r3
 80080f0:	9043      	str	r0, [sp, #268]	; 0x10c
 80080f2:	f89a 3000 	ldrb.w	r3, [sl]
 80080f6:	f10a 0501 	add.w	r5, sl, #1
 80080fa:	2b67      	cmp	r3, #103	; 0x67
 80080fc:	d84a      	bhi.n	8008194 <__ssvfiscanf_r+0x134>
 80080fe:	2b65      	cmp	r3, #101	; 0x65
 8008100:	f080 80b7 	bcs.w	8008272 <__ssvfiscanf_r+0x212>
 8008104:	2b47      	cmp	r3, #71	; 0x47
 8008106:	d82f      	bhi.n	8008168 <__ssvfiscanf_r+0x108>
 8008108:	2b45      	cmp	r3, #69	; 0x45
 800810a:	f080 80b2 	bcs.w	8008272 <__ssvfiscanf_r+0x212>
 800810e:	2b00      	cmp	r3, #0
 8008110:	f000 8082 	beq.w	8008218 <__ssvfiscanf_r+0x1b8>
 8008114:	2b25      	cmp	r3, #37	; 0x25
 8008116:	d066      	beq.n	80081e6 <__ssvfiscanf_r+0x186>
 8008118:	2303      	movs	r3, #3
 800811a:	9744      	str	r7, [sp, #272]	; 0x110
 800811c:	9349      	str	r3, [sp, #292]	; 0x124
 800811e:	e045      	b.n	80081ac <__ssvfiscanf_r+0x14c>
 8008120:	9947      	ldr	r1, [sp, #284]	; 0x11c
 8008122:	3301      	adds	r3, #1
 8008124:	3101      	adds	r1, #1
 8008126:	9147      	str	r1, [sp, #284]	; 0x11c
 8008128:	6861      	ldr	r1, [r4, #4]
 800812a:	6023      	str	r3, [r4, #0]
 800812c:	3901      	subs	r1, #1
 800812e:	6061      	str	r1, [r4, #4]
 8008130:	6863      	ldr	r3, [r4, #4]
 8008132:	2b00      	cmp	r3, #0
 8008134:	dd0b      	ble.n	800814e <__ssvfiscanf_r+0xee>
 8008136:	f000 fbdf 	bl	80088f8 <__locale_ctype_ptr>
 800813a:	6823      	ldr	r3, [r4, #0]
 800813c:	7819      	ldrb	r1, [r3, #0]
 800813e:	4408      	add	r0, r1
 8008140:	7841      	ldrb	r1, [r0, #1]
 8008142:	070d      	lsls	r5, r1, #28
 8008144:	d4ec      	bmi.n	8008120 <__ssvfiscanf_r+0xc0>
 8008146:	f10a 0501 	add.w	r5, sl, #1
 800814a:	46aa      	mov	sl, r5
 800814c:	e79e      	b.n	800808c <__ssvfiscanf_r+0x2c>
 800814e:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8008150:	4621      	mov	r1, r4
 8008152:	4630      	mov	r0, r6
 8008154:	4798      	blx	r3
 8008156:	2800      	cmp	r0, #0
 8008158:	d0ed      	beq.n	8008136 <__ssvfiscanf_r+0xd6>
 800815a:	e7f4      	b.n	8008146 <__ssvfiscanf_r+0xe6>
 800815c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800815e:	fb07 1303 	mla	r3, r7, r3, r1
 8008162:	3b30      	subs	r3, #48	; 0x30
 8008164:	9345      	str	r3, [sp, #276]	; 0x114
 8008166:	e7af      	b.n	80080c8 <__ssvfiscanf_r+0x68>
 8008168:	2b5b      	cmp	r3, #91	; 0x5b
 800816a:	d061      	beq.n	8008230 <__ssvfiscanf_r+0x1d0>
 800816c:	d80c      	bhi.n	8008188 <__ssvfiscanf_r+0x128>
 800816e:	2b58      	cmp	r3, #88	; 0x58
 8008170:	d1d2      	bne.n	8008118 <__ssvfiscanf_r+0xb8>
 8008172:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8008174:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008178:	9243      	str	r2, [sp, #268]	; 0x10c
 800817a:	2210      	movs	r2, #16
 800817c:	9244      	str	r2, [sp, #272]	; 0x110
 800817e:	2b6f      	cmp	r3, #111	; 0x6f
 8008180:	bfb4      	ite	lt
 8008182:	2303      	movlt	r3, #3
 8008184:	2304      	movge	r3, #4
 8008186:	e010      	b.n	80081aa <__ssvfiscanf_r+0x14a>
 8008188:	2b63      	cmp	r3, #99	; 0x63
 800818a:	d05c      	beq.n	8008246 <__ssvfiscanf_r+0x1e6>
 800818c:	2b64      	cmp	r3, #100	; 0x64
 800818e:	d1c3      	bne.n	8008118 <__ssvfiscanf_r+0xb8>
 8008190:	9744      	str	r7, [sp, #272]	; 0x110
 8008192:	e7f4      	b.n	800817e <__ssvfiscanf_r+0x11e>
 8008194:	2b70      	cmp	r3, #112	; 0x70
 8008196:	d042      	beq.n	800821e <__ssvfiscanf_r+0x1be>
 8008198:	d81d      	bhi.n	80081d6 <__ssvfiscanf_r+0x176>
 800819a:	2b6e      	cmp	r3, #110	; 0x6e
 800819c:	d059      	beq.n	8008252 <__ssvfiscanf_r+0x1f2>
 800819e:	d843      	bhi.n	8008228 <__ssvfiscanf_r+0x1c8>
 80081a0:	2b69      	cmp	r3, #105	; 0x69
 80081a2:	d1b9      	bne.n	8008118 <__ssvfiscanf_r+0xb8>
 80081a4:	2300      	movs	r3, #0
 80081a6:	9344      	str	r3, [sp, #272]	; 0x110
 80081a8:	2303      	movs	r3, #3
 80081aa:	9349      	str	r3, [sp, #292]	; 0x124
 80081ac:	6863      	ldr	r3, [r4, #4]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	dd61      	ble.n	8008276 <__ssvfiscanf_r+0x216>
 80081b2:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80081b4:	0659      	lsls	r1, r3, #25
 80081b6:	d56f      	bpl.n	8008298 <__ssvfiscanf_r+0x238>
 80081b8:	9b49      	ldr	r3, [sp, #292]	; 0x124
 80081ba:	2b02      	cmp	r3, #2
 80081bc:	dc7c      	bgt.n	80082b8 <__ssvfiscanf_r+0x258>
 80081be:	ab01      	add	r3, sp, #4
 80081c0:	4622      	mov	r2, r4
 80081c2:	a943      	add	r1, sp, #268	; 0x10c
 80081c4:	4630      	mov	r0, r6
 80081c6:	f000 f89f 	bl	8008308 <_scanf_chars>
 80081ca:	2801      	cmp	r0, #1
 80081cc:	f000 8092 	beq.w	80082f4 <__ssvfiscanf_r+0x294>
 80081d0:	2802      	cmp	r0, #2
 80081d2:	d1ba      	bne.n	800814a <__ssvfiscanf_r+0xea>
 80081d4:	e01d      	b.n	8008212 <__ssvfiscanf_r+0x1b2>
 80081d6:	2b75      	cmp	r3, #117	; 0x75
 80081d8:	d0da      	beq.n	8008190 <__ssvfiscanf_r+0x130>
 80081da:	2b78      	cmp	r3, #120	; 0x78
 80081dc:	d0c9      	beq.n	8008172 <__ssvfiscanf_r+0x112>
 80081de:	2b73      	cmp	r3, #115	; 0x73
 80081e0:	d19a      	bne.n	8008118 <__ssvfiscanf_r+0xb8>
 80081e2:	2302      	movs	r3, #2
 80081e4:	e7e1      	b.n	80081aa <__ssvfiscanf_r+0x14a>
 80081e6:	6863      	ldr	r3, [r4, #4]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	dd0c      	ble.n	8008206 <__ssvfiscanf_r+0x1a6>
 80081ec:	6823      	ldr	r3, [r4, #0]
 80081ee:	781a      	ldrb	r2, [r3, #0]
 80081f0:	4593      	cmp	fp, r2
 80081f2:	d17f      	bne.n	80082f4 <__ssvfiscanf_r+0x294>
 80081f4:	3301      	adds	r3, #1
 80081f6:	6862      	ldr	r2, [r4, #4]
 80081f8:	6023      	str	r3, [r4, #0]
 80081fa:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80081fc:	3a01      	subs	r2, #1
 80081fe:	3301      	adds	r3, #1
 8008200:	6062      	str	r2, [r4, #4]
 8008202:	9347      	str	r3, [sp, #284]	; 0x11c
 8008204:	e7a1      	b.n	800814a <__ssvfiscanf_r+0xea>
 8008206:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8008208:	4621      	mov	r1, r4
 800820a:	4630      	mov	r0, r6
 800820c:	4798      	blx	r3
 800820e:	2800      	cmp	r0, #0
 8008210:	d0ec      	beq.n	80081ec <__ssvfiscanf_r+0x18c>
 8008212:	9846      	ldr	r0, [sp, #280]	; 0x118
 8008214:	2800      	cmp	r0, #0
 8008216:	d163      	bne.n	80082e0 <__ssvfiscanf_r+0x280>
 8008218:	f04f 30ff 	mov.w	r0, #4294967295
 800821c:	e066      	b.n	80082ec <__ssvfiscanf_r+0x28c>
 800821e:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8008220:	f042 0220 	orr.w	r2, r2, #32
 8008224:	9243      	str	r2, [sp, #268]	; 0x10c
 8008226:	e7a4      	b.n	8008172 <__ssvfiscanf_r+0x112>
 8008228:	2308      	movs	r3, #8
 800822a:	9344      	str	r3, [sp, #272]	; 0x110
 800822c:	2304      	movs	r3, #4
 800822e:	e7bc      	b.n	80081aa <__ssvfiscanf_r+0x14a>
 8008230:	4629      	mov	r1, r5
 8008232:	4640      	mov	r0, r8
 8008234:	f000 f9d2 	bl	80085dc <__sccl>
 8008238:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800823a:	4605      	mov	r5, r0
 800823c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008240:	9343      	str	r3, [sp, #268]	; 0x10c
 8008242:	2301      	movs	r3, #1
 8008244:	e7b1      	b.n	80081aa <__ssvfiscanf_r+0x14a>
 8008246:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8008248:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800824c:	9343      	str	r3, [sp, #268]	; 0x10c
 800824e:	2300      	movs	r3, #0
 8008250:	e7ab      	b.n	80081aa <__ssvfiscanf_r+0x14a>
 8008252:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 8008254:	06d0      	lsls	r0, r2, #27
 8008256:	f53f af78 	bmi.w	800814a <__ssvfiscanf_r+0xea>
 800825a:	f012 0f01 	tst.w	r2, #1
 800825e:	9a01      	ldr	r2, [sp, #4]
 8008260:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8008262:	f102 0104 	add.w	r1, r2, #4
 8008266:	9101      	str	r1, [sp, #4]
 8008268:	6812      	ldr	r2, [r2, #0]
 800826a:	bf14      	ite	ne
 800826c:	8013      	strhne	r3, [r2, #0]
 800826e:	6013      	streq	r3, [r2, #0]
 8008270:	e76b      	b.n	800814a <__ssvfiscanf_r+0xea>
 8008272:	2305      	movs	r3, #5
 8008274:	e799      	b.n	80081aa <__ssvfiscanf_r+0x14a>
 8008276:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8008278:	4621      	mov	r1, r4
 800827a:	4630      	mov	r0, r6
 800827c:	4798      	blx	r3
 800827e:	2800      	cmp	r0, #0
 8008280:	d097      	beq.n	80081b2 <__ssvfiscanf_r+0x152>
 8008282:	e7c6      	b.n	8008212 <__ssvfiscanf_r+0x1b2>
 8008284:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 8008286:	3201      	adds	r2, #1
 8008288:	9247      	str	r2, [sp, #284]	; 0x11c
 800828a:	6862      	ldr	r2, [r4, #4]
 800828c:	3a01      	subs	r2, #1
 800828e:	2a00      	cmp	r2, #0
 8008290:	6062      	str	r2, [r4, #4]
 8008292:	dd0a      	ble.n	80082aa <__ssvfiscanf_r+0x24a>
 8008294:	3301      	adds	r3, #1
 8008296:	6023      	str	r3, [r4, #0]
 8008298:	f000 fb2e 	bl	80088f8 <__locale_ctype_ptr>
 800829c:	6823      	ldr	r3, [r4, #0]
 800829e:	781a      	ldrb	r2, [r3, #0]
 80082a0:	4410      	add	r0, r2
 80082a2:	7842      	ldrb	r2, [r0, #1]
 80082a4:	0712      	lsls	r2, r2, #28
 80082a6:	d4ed      	bmi.n	8008284 <__ssvfiscanf_r+0x224>
 80082a8:	e786      	b.n	80081b8 <__ssvfiscanf_r+0x158>
 80082aa:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80082ac:	4621      	mov	r1, r4
 80082ae:	4630      	mov	r0, r6
 80082b0:	4798      	blx	r3
 80082b2:	2800      	cmp	r0, #0
 80082b4:	d0f0      	beq.n	8008298 <__ssvfiscanf_r+0x238>
 80082b6:	e7ac      	b.n	8008212 <__ssvfiscanf_r+0x1b2>
 80082b8:	2b04      	cmp	r3, #4
 80082ba:	dc06      	bgt.n	80082ca <__ssvfiscanf_r+0x26a>
 80082bc:	ab01      	add	r3, sp, #4
 80082be:	4622      	mov	r2, r4
 80082c0:	a943      	add	r1, sp, #268	; 0x10c
 80082c2:	4630      	mov	r0, r6
 80082c4:	f000 f884 	bl	80083d0 <_scanf_i>
 80082c8:	e77f      	b.n	80081ca <__ssvfiscanf_r+0x16a>
 80082ca:	4b0e      	ldr	r3, [pc, #56]	; (8008304 <__ssvfiscanf_r+0x2a4>)
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	f43f af3c 	beq.w	800814a <__ssvfiscanf_r+0xea>
 80082d2:	ab01      	add	r3, sp, #4
 80082d4:	4622      	mov	r2, r4
 80082d6:	a943      	add	r1, sp, #268	; 0x10c
 80082d8:	4630      	mov	r0, r6
 80082da:	f3af 8000 	nop.w
 80082de:	e774      	b.n	80081ca <__ssvfiscanf_r+0x16a>
 80082e0:	89a3      	ldrh	r3, [r4, #12]
 80082e2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80082e6:	bf18      	it	ne
 80082e8:	f04f 30ff 	movne.w	r0, #4294967295
 80082ec:	f50d 7d25 	add.w	sp, sp, #660	; 0x294
 80082f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082f4:	9846      	ldr	r0, [sp, #280]	; 0x118
 80082f6:	e7f9      	b.n	80082ec <__ssvfiscanf_r+0x28c>
 80082f8:	08007fad 	.word	0x08007fad
 80082fc:	08008027 	.word	0x08008027
 8008300:	08008cea 	.word	0x08008cea
 8008304:	00000000 	.word	0x00000000

08008308 <_scanf_chars>:
 8008308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800830c:	4615      	mov	r5, r2
 800830e:	688a      	ldr	r2, [r1, #8]
 8008310:	4680      	mov	r8, r0
 8008312:	460c      	mov	r4, r1
 8008314:	b932      	cbnz	r2, 8008324 <_scanf_chars+0x1c>
 8008316:	698a      	ldr	r2, [r1, #24]
 8008318:	2a00      	cmp	r2, #0
 800831a:	bf0c      	ite	eq
 800831c:	2201      	moveq	r2, #1
 800831e:	f04f 32ff 	movne.w	r2, #4294967295
 8008322:	608a      	str	r2, [r1, #8]
 8008324:	2600      	movs	r6, #0
 8008326:	6822      	ldr	r2, [r4, #0]
 8008328:	06d1      	lsls	r1, r2, #27
 800832a:	bf5f      	itttt	pl
 800832c:	681a      	ldrpl	r2, [r3, #0]
 800832e:	1d11      	addpl	r1, r2, #4
 8008330:	6019      	strpl	r1, [r3, #0]
 8008332:	6817      	ldrpl	r7, [r2, #0]
 8008334:	69a3      	ldr	r3, [r4, #24]
 8008336:	b1db      	cbz	r3, 8008370 <_scanf_chars+0x68>
 8008338:	2b01      	cmp	r3, #1
 800833a:	d107      	bne.n	800834c <_scanf_chars+0x44>
 800833c:	682b      	ldr	r3, [r5, #0]
 800833e:	6962      	ldr	r2, [r4, #20]
 8008340:	781b      	ldrb	r3, [r3, #0]
 8008342:	5cd3      	ldrb	r3, [r2, r3]
 8008344:	b9a3      	cbnz	r3, 8008370 <_scanf_chars+0x68>
 8008346:	2e00      	cmp	r6, #0
 8008348:	d131      	bne.n	80083ae <_scanf_chars+0xa6>
 800834a:	e006      	b.n	800835a <_scanf_chars+0x52>
 800834c:	2b02      	cmp	r3, #2
 800834e:	d007      	beq.n	8008360 <_scanf_chars+0x58>
 8008350:	2e00      	cmp	r6, #0
 8008352:	d12c      	bne.n	80083ae <_scanf_chars+0xa6>
 8008354:	69a3      	ldr	r3, [r4, #24]
 8008356:	2b01      	cmp	r3, #1
 8008358:	d129      	bne.n	80083ae <_scanf_chars+0xa6>
 800835a:	2001      	movs	r0, #1
 800835c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008360:	f000 faca 	bl	80088f8 <__locale_ctype_ptr>
 8008364:	682b      	ldr	r3, [r5, #0]
 8008366:	781b      	ldrb	r3, [r3, #0]
 8008368:	4418      	add	r0, r3
 800836a:	7843      	ldrb	r3, [r0, #1]
 800836c:	071b      	lsls	r3, r3, #28
 800836e:	d4ef      	bmi.n	8008350 <_scanf_chars+0x48>
 8008370:	6823      	ldr	r3, [r4, #0]
 8008372:	3601      	adds	r6, #1
 8008374:	06da      	lsls	r2, r3, #27
 8008376:	bf5e      	ittt	pl
 8008378:	682b      	ldrpl	r3, [r5, #0]
 800837a:	781b      	ldrbpl	r3, [r3, #0]
 800837c:	703b      	strbpl	r3, [r7, #0]
 800837e:	682a      	ldr	r2, [r5, #0]
 8008380:	686b      	ldr	r3, [r5, #4]
 8008382:	f102 0201 	add.w	r2, r2, #1
 8008386:	602a      	str	r2, [r5, #0]
 8008388:	68a2      	ldr	r2, [r4, #8]
 800838a:	f103 33ff 	add.w	r3, r3, #4294967295
 800838e:	f102 32ff 	add.w	r2, r2, #4294967295
 8008392:	606b      	str	r3, [r5, #4]
 8008394:	bf58      	it	pl
 8008396:	3701      	addpl	r7, #1
 8008398:	60a2      	str	r2, [r4, #8]
 800839a:	b142      	cbz	r2, 80083ae <_scanf_chars+0xa6>
 800839c:	2b00      	cmp	r3, #0
 800839e:	dcc9      	bgt.n	8008334 <_scanf_chars+0x2c>
 80083a0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80083a4:	4629      	mov	r1, r5
 80083a6:	4640      	mov	r0, r8
 80083a8:	4798      	blx	r3
 80083aa:	2800      	cmp	r0, #0
 80083ac:	d0c2      	beq.n	8008334 <_scanf_chars+0x2c>
 80083ae:	6823      	ldr	r3, [r4, #0]
 80083b0:	f013 0310 	ands.w	r3, r3, #16
 80083b4:	d105      	bne.n	80083c2 <_scanf_chars+0xba>
 80083b6:	68e2      	ldr	r2, [r4, #12]
 80083b8:	3201      	adds	r2, #1
 80083ba:	60e2      	str	r2, [r4, #12]
 80083bc:	69a2      	ldr	r2, [r4, #24]
 80083be:	b102      	cbz	r2, 80083c2 <_scanf_chars+0xba>
 80083c0:	703b      	strb	r3, [r7, #0]
 80083c2:	6923      	ldr	r3, [r4, #16]
 80083c4:	2000      	movs	r0, #0
 80083c6:	441e      	add	r6, r3
 80083c8:	6126      	str	r6, [r4, #16]
 80083ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080083d0 <_scanf_i>:
 80083d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083d4:	460c      	mov	r4, r1
 80083d6:	469a      	mov	sl, r3
 80083d8:	4b74      	ldr	r3, [pc, #464]	; (80085ac <_scanf_i+0x1dc>)
 80083da:	b087      	sub	sp, #28
 80083dc:	4683      	mov	fp, r0
 80083de:	4616      	mov	r6, r2
 80083e0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80083e4:	ab03      	add	r3, sp, #12
 80083e6:	68a7      	ldr	r7, [r4, #8]
 80083e8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80083ec:	4b70      	ldr	r3, [pc, #448]	; (80085b0 <_scanf_i+0x1e0>)
 80083ee:	69a1      	ldr	r1, [r4, #24]
 80083f0:	4a70      	ldr	r2, [pc, #448]	; (80085b4 <_scanf_i+0x1e4>)
 80083f2:	f104 091c 	add.w	r9, r4, #28
 80083f6:	2903      	cmp	r1, #3
 80083f8:	bf18      	it	ne
 80083fa:	461a      	movne	r2, r3
 80083fc:	1e7b      	subs	r3, r7, #1
 80083fe:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8008402:	bf84      	itt	hi
 8008404:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008408:	60a3      	strhi	r3, [r4, #8]
 800840a:	6823      	ldr	r3, [r4, #0]
 800840c:	bf88      	it	hi
 800840e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008412:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8008416:	6023      	str	r3, [r4, #0]
 8008418:	bf98      	it	ls
 800841a:	2700      	movls	r7, #0
 800841c:	464b      	mov	r3, r9
 800841e:	f04f 0800 	mov.w	r8, #0
 8008422:	9200      	str	r2, [sp, #0]
 8008424:	bf88      	it	hi
 8008426:	197f      	addhi	r7, r7, r5
 8008428:	6831      	ldr	r1, [r6, #0]
 800842a:	9301      	str	r3, [sp, #4]
 800842c:	ab03      	add	r3, sp, #12
 800842e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8008432:	2202      	movs	r2, #2
 8008434:	7809      	ldrb	r1, [r1, #0]
 8008436:	f7ff f8d1 	bl	80075dc <memchr>
 800843a:	9b01      	ldr	r3, [sp, #4]
 800843c:	b328      	cbz	r0, 800848a <_scanf_i+0xba>
 800843e:	f1b8 0f01 	cmp.w	r8, #1
 8008442:	d156      	bne.n	80084f2 <_scanf_i+0x122>
 8008444:	6862      	ldr	r2, [r4, #4]
 8008446:	b92a      	cbnz	r2, 8008454 <_scanf_i+0x84>
 8008448:	2208      	movs	r2, #8
 800844a:	6062      	str	r2, [r4, #4]
 800844c:	6822      	ldr	r2, [r4, #0]
 800844e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008452:	6022      	str	r2, [r4, #0]
 8008454:	6822      	ldr	r2, [r4, #0]
 8008456:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800845a:	6022      	str	r2, [r4, #0]
 800845c:	68a2      	ldr	r2, [r4, #8]
 800845e:	1e51      	subs	r1, r2, #1
 8008460:	60a1      	str	r1, [r4, #8]
 8008462:	b192      	cbz	r2, 800848a <_scanf_i+0xba>
 8008464:	6832      	ldr	r2, [r6, #0]
 8008466:	1c5d      	adds	r5, r3, #1
 8008468:	1c51      	adds	r1, r2, #1
 800846a:	6031      	str	r1, [r6, #0]
 800846c:	7812      	ldrb	r2, [r2, #0]
 800846e:	701a      	strb	r2, [r3, #0]
 8008470:	6873      	ldr	r3, [r6, #4]
 8008472:	3b01      	subs	r3, #1
 8008474:	2b00      	cmp	r3, #0
 8008476:	6073      	str	r3, [r6, #4]
 8008478:	dc06      	bgt.n	8008488 <_scanf_i+0xb8>
 800847a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800847e:	4631      	mov	r1, r6
 8008480:	4658      	mov	r0, fp
 8008482:	4798      	blx	r3
 8008484:	2800      	cmp	r0, #0
 8008486:	d177      	bne.n	8008578 <_scanf_i+0x1a8>
 8008488:	462b      	mov	r3, r5
 800848a:	f108 0801 	add.w	r8, r8, #1
 800848e:	f1b8 0f03 	cmp.w	r8, #3
 8008492:	d1c9      	bne.n	8008428 <_scanf_i+0x58>
 8008494:	6862      	ldr	r2, [r4, #4]
 8008496:	b90a      	cbnz	r2, 800849c <_scanf_i+0xcc>
 8008498:	220a      	movs	r2, #10
 800849a:	6062      	str	r2, [r4, #4]
 800849c:	6862      	ldr	r2, [r4, #4]
 800849e:	4946      	ldr	r1, [pc, #280]	; (80085b8 <_scanf_i+0x1e8>)
 80084a0:	6960      	ldr	r0, [r4, #20]
 80084a2:	1a89      	subs	r1, r1, r2
 80084a4:	9301      	str	r3, [sp, #4]
 80084a6:	f000 f899 	bl	80085dc <__sccl>
 80084aa:	9b01      	ldr	r3, [sp, #4]
 80084ac:	f04f 0800 	mov.w	r8, #0
 80084b0:	461d      	mov	r5, r3
 80084b2:	68a3      	ldr	r3, [r4, #8]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d039      	beq.n	800852c <_scanf_i+0x15c>
 80084b8:	6831      	ldr	r1, [r6, #0]
 80084ba:	6960      	ldr	r0, [r4, #20]
 80084bc:	780a      	ldrb	r2, [r1, #0]
 80084be:	5c80      	ldrb	r0, [r0, r2]
 80084c0:	2800      	cmp	r0, #0
 80084c2:	d033      	beq.n	800852c <_scanf_i+0x15c>
 80084c4:	2a30      	cmp	r2, #48	; 0x30
 80084c6:	6822      	ldr	r2, [r4, #0]
 80084c8:	d121      	bne.n	800850e <_scanf_i+0x13e>
 80084ca:	0510      	lsls	r0, r2, #20
 80084cc:	d51f      	bpl.n	800850e <_scanf_i+0x13e>
 80084ce:	f108 0801 	add.w	r8, r8, #1
 80084d2:	b117      	cbz	r7, 80084da <_scanf_i+0x10a>
 80084d4:	3301      	adds	r3, #1
 80084d6:	3f01      	subs	r7, #1
 80084d8:	60a3      	str	r3, [r4, #8]
 80084da:	6873      	ldr	r3, [r6, #4]
 80084dc:	3b01      	subs	r3, #1
 80084de:	2b00      	cmp	r3, #0
 80084e0:	6073      	str	r3, [r6, #4]
 80084e2:	dd1c      	ble.n	800851e <_scanf_i+0x14e>
 80084e4:	6833      	ldr	r3, [r6, #0]
 80084e6:	3301      	adds	r3, #1
 80084e8:	6033      	str	r3, [r6, #0]
 80084ea:	68a3      	ldr	r3, [r4, #8]
 80084ec:	3b01      	subs	r3, #1
 80084ee:	60a3      	str	r3, [r4, #8]
 80084f0:	e7df      	b.n	80084b2 <_scanf_i+0xe2>
 80084f2:	f1b8 0f02 	cmp.w	r8, #2
 80084f6:	d1b1      	bne.n	800845c <_scanf_i+0x8c>
 80084f8:	6822      	ldr	r2, [r4, #0]
 80084fa:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80084fe:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8008502:	d1c2      	bne.n	800848a <_scanf_i+0xba>
 8008504:	2110      	movs	r1, #16
 8008506:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800850a:	6061      	str	r1, [r4, #4]
 800850c:	e7a5      	b.n	800845a <_scanf_i+0x8a>
 800850e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8008512:	6022      	str	r2, [r4, #0]
 8008514:	780b      	ldrb	r3, [r1, #0]
 8008516:	3501      	adds	r5, #1
 8008518:	f805 3c01 	strb.w	r3, [r5, #-1]
 800851c:	e7dd      	b.n	80084da <_scanf_i+0x10a>
 800851e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008522:	4631      	mov	r1, r6
 8008524:	4658      	mov	r0, fp
 8008526:	4798      	blx	r3
 8008528:	2800      	cmp	r0, #0
 800852a:	d0de      	beq.n	80084ea <_scanf_i+0x11a>
 800852c:	6823      	ldr	r3, [r4, #0]
 800852e:	05d9      	lsls	r1, r3, #23
 8008530:	d50c      	bpl.n	800854c <_scanf_i+0x17c>
 8008532:	454d      	cmp	r5, r9
 8008534:	d908      	bls.n	8008548 <_scanf_i+0x178>
 8008536:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800853a:	1e6f      	subs	r7, r5, #1
 800853c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008540:	4632      	mov	r2, r6
 8008542:	4658      	mov	r0, fp
 8008544:	4798      	blx	r3
 8008546:	463d      	mov	r5, r7
 8008548:	454d      	cmp	r5, r9
 800854a:	d02c      	beq.n	80085a6 <_scanf_i+0x1d6>
 800854c:	6822      	ldr	r2, [r4, #0]
 800854e:	f012 0210 	ands.w	r2, r2, #16
 8008552:	d11e      	bne.n	8008592 <_scanf_i+0x1c2>
 8008554:	702a      	strb	r2, [r5, #0]
 8008556:	6863      	ldr	r3, [r4, #4]
 8008558:	4649      	mov	r1, r9
 800855a:	4658      	mov	r0, fp
 800855c:	9e00      	ldr	r6, [sp, #0]
 800855e:	47b0      	blx	r6
 8008560:	6822      	ldr	r2, [r4, #0]
 8008562:	f8da 3000 	ldr.w	r3, [sl]
 8008566:	f012 0f20 	tst.w	r2, #32
 800856a:	d008      	beq.n	800857e <_scanf_i+0x1ae>
 800856c:	1d1a      	adds	r2, r3, #4
 800856e:	f8ca 2000 	str.w	r2, [sl]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	6018      	str	r0, [r3, #0]
 8008576:	e009      	b.n	800858c <_scanf_i+0x1bc>
 8008578:	f04f 0800 	mov.w	r8, #0
 800857c:	e7d6      	b.n	800852c <_scanf_i+0x15c>
 800857e:	07d2      	lsls	r2, r2, #31
 8008580:	d5f4      	bpl.n	800856c <_scanf_i+0x19c>
 8008582:	1d1a      	adds	r2, r3, #4
 8008584:	f8ca 2000 	str.w	r2, [sl]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	8018      	strh	r0, [r3, #0]
 800858c:	68e3      	ldr	r3, [r4, #12]
 800858e:	3301      	adds	r3, #1
 8008590:	60e3      	str	r3, [r4, #12]
 8008592:	2000      	movs	r0, #0
 8008594:	eba5 0509 	sub.w	r5, r5, r9
 8008598:	44a8      	add	r8, r5
 800859a:	6925      	ldr	r5, [r4, #16]
 800859c:	4445      	add	r5, r8
 800859e:	6125      	str	r5, [r4, #16]
 80085a0:	b007      	add	sp, #28
 80085a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085a6:	2001      	movs	r0, #1
 80085a8:	e7fa      	b.n	80085a0 <_scanf_i+0x1d0>
 80085aa:	bf00      	nop
 80085ac:	08008a58 	.word	0x08008a58
 80085b0:	0800885d 	.word	0x0800885d
 80085b4:	0800873d 	.word	0x0800873d
 80085b8:	08008d05 	.word	0x08008d05

080085bc <_sbrk_r>:
 80085bc:	b538      	push	{r3, r4, r5, lr}
 80085be:	2300      	movs	r3, #0
 80085c0:	4c05      	ldr	r4, [pc, #20]	; (80085d8 <_sbrk_r+0x1c>)
 80085c2:	4605      	mov	r5, r0
 80085c4:	4608      	mov	r0, r1
 80085c6:	6023      	str	r3, [r4, #0]
 80085c8:	f7fd fc5c 	bl	8005e84 <_sbrk>
 80085cc:	1c43      	adds	r3, r0, #1
 80085ce:	d102      	bne.n	80085d6 <_sbrk_r+0x1a>
 80085d0:	6823      	ldr	r3, [r4, #0]
 80085d2:	b103      	cbz	r3, 80085d6 <_sbrk_r+0x1a>
 80085d4:	602b      	str	r3, [r5, #0]
 80085d6:	bd38      	pop	{r3, r4, r5, pc}
 80085d8:	20005498 	.word	0x20005498

080085dc <__sccl>:
 80085dc:	b570      	push	{r4, r5, r6, lr}
 80085de:	780b      	ldrb	r3, [r1, #0]
 80085e0:	1e44      	subs	r4, r0, #1
 80085e2:	2b5e      	cmp	r3, #94	; 0x5e
 80085e4:	bf13      	iteet	ne
 80085e6:	1c4a      	addne	r2, r1, #1
 80085e8:	1c8a      	addeq	r2, r1, #2
 80085ea:	784b      	ldrbeq	r3, [r1, #1]
 80085ec:	2100      	movne	r1, #0
 80085ee:	bf08      	it	eq
 80085f0:	2101      	moveq	r1, #1
 80085f2:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 80085f6:	f804 1f01 	strb.w	r1, [r4, #1]!
 80085fa:	42a5      	cmp	r5, r4
 80085fc:	d1fb      	bne.n	80085f6 <__sccl+0x1a>
 80085fe:	b913      	cbnz	r3, 8008606 <__sccl+0x2a>
 8008600:	3a01      	subs	r2, #1
 8008602:	4610      	mov	r0, r2
 8008604:	bd70      	pop	{r4, r5, r6, pc}
 8008606:	f081 0401 	eor.w	r4, r1, #1
 800860a:	4611      	mov	r1, r2
 800860c:	54c4      	strb	r4, [r0, r3]
 800860e:	780d      	ldrb	r5, [r1, #0]
 8008610:	1c4a      	adds	r2, r1, #1
 8008612:	2d2d      	cmp	r5, #45	; 0x2d
 8008614:	d006      	beq.n	8008624 <__sccl+0x48>
 8008616:	2d5d      	cmp	r5, #93	; 0x5d
 8008618:	d0f3      	beq.n	8008602 <__sccl+0x26>
 800861a:	b90d      	cbnz	r5, 8008620 <__sccl+0x44>
 800861c:	460a      	mov	r2, r1
 800861e:	e7f0      	b.n	8008602 <__sccl+0x26>
 8008620:	462b      	mov	r3, r5
 8008622:	e7f2      	b.n	800860a <__sccl+0x2e>
 8008624:	784e      	ldrb	r6, [r1, #1]
 8008626:	2e5d      	cmp	r6, #93	; 0x5d
 8008628:	d0fa      	beq.n	8008620 <__sccl+0x44>
 800862a:	42b3      	cmp	r3, r6
 800862c:	dcf8      	bgt.n	8008620 <__sccl+0x44>
 800862e:	3102      	adds	r1, #2
 8008630:	3301      	adds	r3, #1
 8008632:	429e      	cmp	r6, r3
 8008634:	54c4      	strb	r4, [r0, r3]
 8008636:	dcfb      	bgt.n	8008630 <__sccl+0x54>
 8008638:	e7e9      	b.n	800860e <__sccl+0x32>

0800863a <_strtol_l.isra.0>:
 800863a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800863e:	4680      	mov	r8, r0
 8008640:	4689      	mov	r9, r1
 8008642:	4692      	mov	sl, r2
 8008644:	461f      	mov	r7, r3
 8008646:	468b      	mov	fp, r1
 8008648:	465d      	mov	r5, fp
 800864a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800864c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008650:	f000 f94f 	bl	80088f2 <__locale_ctype_ptr_l>
 8008654:	4420      	add	r0, r4
 8008656:	7846      	ldrb	r6, [r0, #1]
 8008658:	f016 0608 	ands.w	r6, r6, #8
 800865c:	d10b      	bne.n	8008676 <_strtol_l.isra.0+0x3c>
 800865e:	2c2d      	cmp	r4, #45	; 0x2d
 8008660:	d10b      	bne.n	800867a <_strtol_l.isra.0+0x40>
 8008662:	2601      	movs	r6, #1
 8008664:	782c      	ldrb	r4, [r5, #0]
 8008666:	f10b 0502 	add.w	r5, fp, #2
 800866a:	b167      	cbz	r7, 8008686 <_strtol_l.isra.0+0x4c>
 800866c:	2f10      	cmp	r7, #16
 800866e:	d114      	bne.n	800869a <_strtol_l.isra.0+0x60>
 8008670:	2c30      	cmp	r4, #48	; 0x30
 8008672:	d00a      	beq.n	800868a <_strtol_l.isra.0+0x50>
 8008674:	e011      	b.n	800869a <_strtol_l.isra.0+0x60>
 8008676:	46ab      	mov	fp, r5
 8008678:	e7e6      	b.n	8008648 <_strtol_l.isra.0+0xe>
 800867a:	2c2b      	cmp	r4, #43	; 0x2b
 800867c:	bf04      	itt	eq
 800867e:	782c      	ldrbeq	r4, [r5, #0]
 8008680:	f10b 0502 	addeq.w	r5, fp, #2
 8008684:	e7f1      	b.n	800866a <_strtol_l.isra.0+0x30>
 8008686:	2c30      	cmp	r4, #48	; 0x30
 8008688:	d127      	bne.n	80086da <_strtol_l.isra.0+0xa0>
 800868a:	782b      	ldrb	r3, [r5, #0]
 800868c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008690:	2b58      	cmp	r3, #88	; 0x58
 8008692:	d14b      	bne.n	800872c <_strtol_l.isra.0+0xf2>
 8008694:	2710      	movs	r7, #16
 8008696:	786c      	ldrb	r4, [r5, #1]
 8008698:	3502      	adds	r5, #2
 800869a:	2e00      	cmp	r6, #0
 800869c:	bf0c      	ite	eq
 800869e:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80086a2:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80086a6:	2200      	movs	r2, #0
 80086a8:	fbb1 fef7 	udiv	lr, r1, r7
 80086ac:	4610      	mov	r0, r2
 80086ae:	fb07 1c1e 	mls	ip, r7, lr, r1
 80086b2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80086b6:	2b09      	cmp	r3, #9
 80086b8:	d811      	bhi.n	80086de <_strtol_l.isra.0+0xa4>
 80086ba:	461c      	mov	r4, r3
 80086bc:	42a7      	cmp	r7, r4
 80086be:	dd1d      	ble.n	80086fc <_strtol_l.isra.0+0xc2>
 80086c0:	1c53      	adds	r3, r2, #1
 80086c2:	d007      	beq.n	80086d4 <_strtol_l.isra.0+0x9a>
 80086c4:	4586      	cmp	lr, r0
 80086c6:	d316      	bcc.n	80086f6 <_strtol_l.isra.0+0xbc>
 80086c8:	d101      	bne.n	80086ce <_strtol_l.isra.0+0x94>
 80086ca:	45a4      	cmp	ip, r4
 80086cc:	db13      	blt.n	80086f6 <_strtol_l.isra.0+0xbc>
 80086ce:	2201      	movs	r2, #1
 80086d0:	fb00 4007 	mla	r0, r0, r7, r4
 80086d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80086d8:	e7eb      	b.n	80086b2 <_strtol_l.isra.0+0x78>
 80086da:	270a      	movs	r7, #10
 80086dc:	e7dd      	b.n	800869a <_strtol_l.isra.0+0x60>
 80086de:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80086e2:	2b19      	cmp	r3, #25
 80086e4:	d801      	bhi.n	80086ea <_strtol_l.isra.0+0xb0>
 80086e6:	3c37      	subs	r4, #55	; 0x37
 80086e8:	e7e8      	b.n	80086bc <_strtol_l.isra.0+0x82>
 80086ea:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80086ee:	2b19      	cmp	r3, #25
 80086f0:	d804      	bhi.n	80086fc <_strtol_l.isra.0+0xc2>
 80086f2:	3c57      	subs	r4, #87	; 0x57
 80086f4:	e7e2      	b.n	80086bc <_strtol_l.isra.0+0x82>
 80086f6:	f04f 32ff 	mov.w	r2, #4294967295
 80086fa:	e7eb      	b.n	80086d4 <_strtol_l.isra.0+0x9a>
 80086fc:	1c53      	adds	r3, r2, #1
 80086fe:	d108      	bne.n	8008712 <_strtol_l.isra.0+0xd8>
 8008700:	2322      	movs	r3, #34	; 0x22
 8008702:	4608      	mov	r0, r1
 8008704:	f8c8 3000 	str.w	r3, [r8]
 8008708:	f1ba 0f00 	cmp.w	sl, #0
 800870c:	d107      	bne.n	800871e <_strtol_l.isra.0+0xe4>
 800870e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008712:	b106      	cbz	r6, 8008716 <_strtol_l.isra.0+0xdc>
 8008714:	4240      	negs	r0, r0
 8008716:	f1ba 0f00 	cmp.w	sl, #0
 800871a:	d00c      	beq.n	8008736 <_strtol_l.isra.0+0xfc>
 800871c:	b122      	cbz	r2, 8008728 <_strtol_l.isra.0+0xee>
 800871e:	3d01      	subs	r5, #1
 8008720:	f8ca 5000 	str.w	r5, [sl]
 8008724:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008728:	464d      	mov	r5, r9
 800872a:	e7f9      	b.n	8008720 <_strtol_l.isra.0+0xe6>
 800872c:	2430      	movs	r4, #48	; 0x30
 800872e:	2f00      	cmp	r7, #0
 8008730:	d1b3      	bne.n	800869a <_strtol_l.isra.0+0x60>
 8008732:	2708      	movs	r7, #8
 8008734:	e7b1      	b.n	800869a <_strtol_l.isra.0+0x60>
 8008736:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800873c <_strtol_r>:
 800873c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800873e:	4c06      	ldr	r4, [pc, #24]	; (8008758 <_strtol_r+0x1c>)
 8008740:	4d06      	ldr	r5, [pc, #24]	; (800875c <_strtol_r+0x20>)
 8008742:	6824      	ldr	r4, [r4, #0]
 8008744:	6a24      	ldr	r4, [r4, #32]
 8008746:	2c00      	cmp	r4, #0
 8008748:	bf08      	it	eq
 800874a:	462c      	moveq	r4, r5
 800874c:	9400      	str	r4, [sp, #0]
 800874e:	f7ff ff74 	bl	800863a <_strtol_l.isra.0>
 8008752:	b003      	add	sp, #12
 8008754:	bd30      	pop	{r4, r5, pc}
 8008756:	bf00      	nop
 8008758:	20000054 	.word	0x20000054
 800875c:	200000b8 	.word	0x200000b8

08008760 <_strtoul_l.isra.0>:
 8008760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008764:	4680      	mov	r8, r0
 8008766:	4689      	mov	r9, r1
 8008768:	4692      	mov	sl, r2
 800876a:	461e      	mov	r6, r3
 800876c:	460f      	mov	r7, r1
 800876e:	463d      	mov	r5, r7
 8008770:	9808      	ldr	r0, [sp, #32]
 8008772:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008776:	f000 f8bc 	bl	80088f2 <__locale_ctype_ptr_l>
 800877a:	4420      	add	r0, r4
 800877c:	7843      	ldrb	r3, [r0, #1]
 800877e:	f013 0308 	ands.w	r3, r3, #8
 8008782:	d10a      	bne.n	800879a <_strtoul_l.isra.0+0x3a>
 8008784:	2c2d      	cmp	r4, #45	; 0x2d
 8008786:	d10a      	bne.n	800879e <_strtoul_l.isra.0+0x3e>
 8008788:	2301      	movs	r3, #1
 800878a:	782c      	ldrb	r4, [r5, #0]
 800878c:	1cbd      	adds	r5, r7, #2
 800878e:	b15e      	cbz	r6, 80087a8 <_strtoul_l.isra.0+0x48>
 8008790:	2e10      	cmp	r6, #16
 8008792:	d113      	bne.n	80087bc <_strtoul_l.isra.0+0x5c>
 8008794:	2c30      	cmp	r4, #48	; 0x30
 8008796:	d009      	beq.n	80087ac <_strtoul_l.isra.0+0x4c>
 8008798:	e010      	b.n	80087bc <_strtoul_l.isra.0+0x5c>
 800879a:	462f      	mov	r7, r5
 800879c:	e7e7      	b.n	800876e <_strtoul_l.isra.0+0xe>
 800879e:	2c2b      	cmp	r4, #43	; 0x2b
 80087a0:	bf04      	itt	eq
 80087a2:	782c      	ldrbeq	r4, [r5, #0]
 80087a4:	1cbd      	addeq	r5, r7, #2
 80087a6:	e7f2      	b.n	800878e <_strtoul_l.isra.0+0x2e>
 80087a8:	2c30      	cmp	r4, #48	; 0x30
 80087aa:	d125      	bne.n	80087f8 <_strtoul_l.isra.0+0x98>
 80087ac:	782a      	ldrb	r2, [r5, #0]
 80087ae:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80087b2:	2a58      	cmp	r2, #88	; 0x58
 80087b4:	d14a      	bne.n	800884c <_strtoul_l.isra.0+0xec>
 80087b6:	2610      	movs	r6, #16
 80087b8:	786c      	ldrb	r4, [r5, #1]
 80087ba:	3502      	adds	r5, #2
 80087bc:	f04f 31ff 	mov.w	r1, #4294967295
 80087c0:	fbb1 f1f6 	udiv	r1, r1, r6
 80087c4:	2700      	movs	r7, #0
 80087c6:	fb06 fe01 	mul.w	lr, r6, r1
 80087ca:	4638      	mov	r0, r7
 80087cc:	ea6f 0e0e 	mvn.w	lr, lr
 80087d0:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
 80087d4:	2a09      	cmp	r2, #9
 80087d6:	d811      	bhi.n	80087fc <_strtoul_l.isra.0+0x9c>
 80087d8:	4614      	mov	r4, r2
 80087da:	42a6      	cmp	r6, r4
 80087dc:	dd1d      	ble.n	800881a <_strtoul_l.isra.0+0xba>
 80087de:	2f00      	cmp	r7, #0
 80087e0:	db18      	blt.n	8008814 <_strtoul_l.isra.0+0xb4>
 80087e2:	4281      	cmp	r1, r0
 80087e4:	d316      	bcc.n	8008814 <_strtoul_l.isra.0+0xb4>
 80087e6:	d101      	bne.n	80087ec <_strtoul_l.isra.0+0x8c>
 80087e8:	45a6      	cmp	lr, r4
 80087ea:	db13      	blt.n	8008814 <_strtoul_l.isra.0+0xb4>
 80087ec:	2701      	movs	r7, #1
 80087ee:	fb00 4006 	mla	r0, r0, r6, r4
 80087f2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80087f6:	e7eb      	b.n	80087d0 <_strtoul_l.isra.0+0x70>
 80087f8:	260a      	movs	r6, #10
 80087fa:	e7df      	b.n	80087bc <_strtoul_l.isra.0+0x5c>
 80087fc:	f1a4 0241 	sub.w	r2, r4, #65	; 0x41
 8008800:	2a19      	cmp	r2, #25
 8008802:	d801      	bhi.n	8008808 <_strtoul_l.isra.0+0xa8>
 8008804:	3c37      	subs	r4, #55	; 0x37
 8008806:	e7e8      	b.n	80087da <_strtoul_l.isra.0+0x7a>
 8008808:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
 800880c:	2a19      	cmp	r2, #25
 800880e:	d804      	bhi.n	800881a <_strtoul_l.isra.0+0xba>
 8008810:	3c57      	subs	r4, #87	; 0x57
 8008812:	e7e2      	b.n	80087da <_strtoul_l.isra.0+0x7a>
 8008814:	f04f 37ff 	mov.w	r7, #4294967295
 8008818:	e7eb      	b.n	80087f2 <_strtoul_l.isra.0+0x92>
 800881a:	2f00      	cmp	r7, #0
 800881c:	da09      	bge.n	8008832 <_strtoul_l.isra.0+0xd2>
 800881e:	2322      	movs	r3, #34	; 0x22
 8008820:	f04f 30ff 	mov.w	r0, #4294967295
 8008824:	f8c8 3000 	str.w	r3, [r8]
 8008828:	f1ba 0f00 	cmp.w	sl, #0
 800882c:	d107      	bne.n	800883e <_strtoul_l.isra.0+0xde>
 800882e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008832:	b103      	cbz	r3, 8008836 <_strtoul_l.isra.0+0xd6>
 8008834:	4240      	negs	r0, r0
 8008836:	f1ba 0f00 	cmp.w	sl, #0
 800883a:	d00c      	beq.n	8008856 <_strtoul_l.isra.0+0xf6>
 800883c:	b127      	cbz	r7, 8008848 <_strtoul_l.isra.0+0xe8>
 800883e:	3d01      	subs	r5, #1
 8008840:	f8ca 5000 	str.w	r5, [sl]
 8008844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008848:	464d      	mov	r5, r9
 800884a:	e7f9      	b.n	8008840 <_strtoul_l.isra.0+0xe0>
 800884c:	2430      	movs	r4, #48	; 0x30
 800884e:	2e00      	cmp	r6, #0
 8008850:	d1b4      	bne.n	80087bc <_strtoul_l.isra.0+0x5c>
 8008852:	2608      	movs	r6, #8
 8008854:	e7b2      	b.n	80087bc <_strtoul_l.isra.0+0x5c>
 8008856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0800885c <_strtoul_r>:
 800885c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800885e:	4c06      	ldr	r4, [pc, #24]	; (8008878 <_strtoul_r+0x1c>)
 8008860:	4d06      	ldr	r5, [pc, #24]	; (800887c <_strtoul_r+0x20>)
 8008862:	6824      	ldr	r4, [r4, #0]
 8008864:	6a24      	ldr	r4, [r4, #32]
 8008866:	2c00      	cmp	r4, #0
 8008868:	bf08      	it	eq
 800886a:	462c      	moveq	r4, r5
 800886c:	9400      	str	r4, [sp, #0]
 800886e:	f7ff ff77 	bl	8008760 <_strtoul_l.isra.0>
 8008872:	b003      	add	sp, #12
 8008874:	bd30      	pop	{r4, r5, pc}
 8008876:	bf00      	nop
 8008878:	20000054 	.word	0x20000054
 800887c:	200000b8 	.word	0x200000b8

08008880 <__submore>:
 8008880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008884:	460c      	mov	r4, r1
 8008886:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008888:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800888c:	4299      	cmp	r1, r3
 800888e:	d11c      	bne.n	80088ca <__submore+0x4a>
 8008890:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008894:	f7ff f9dc 	bl	8007c50 <_malloc_r>
 8008898:	b918      	cbnz	r0, 80088a2 <__submore+0x22>
 800889a:	f04f 30ff 	mov.w	r0, #4294967295
 800889e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80088a6:	63a3      	str	r3, [r4, #56]	; 0x38
 80088a8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80088ac:	6360      	str	r0, [r4, #52]	; 0x34
 80088ae:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80088b2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80088b6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80088ba:	7043      	strb	r3, [r0, #1]
 80088bc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80088c0:	7003      	strb	r3, [r0, #0]
 80088c2:	6020      	str	r0, [r4, #0]
 80088c4:	2000      	movs	r0, #0
 80088c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088ca:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80088cc:	0077      	lsls	r7, r6, #1
 80088ce:	463a      	mov	r2, r7
 80088d0:	f000 f84e 	bl	8008970 <_realloc_r>
 80088d4:	4605      	mov	r5, r0
 80088d6:	2800      	cmp	r0, #0
 80088d8:	d0df      	beq.n	800889a <__submore+0x1a>
 80088da:	eb00 0806 	add.w	r8, r0, r6
 80088de:	4601      	mov	r1, r0
 80088e0:	4632      	mov	r2, r6
 80088e2:	4640      	mov	r0, r8
 80088e4:	f7fd fb3e 	bl	8005f64 <memcpy>
 80088e8:	f8c4 8000 	str.w	r8, [r4]
 80088ec:	6365      	str	r5, [r4, #52]	; 0x34
 80088ee:	63a7      	str	r7, [r4, #56]	; 0x38
 80088f0:	e7e8      	b.n	80088c4 <__submore+0x44>

080088f2 <__locale_ctype_ptr_l>:
 80088f2:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80088f6:	4770      	bx	lr

080088f8 <__locale_ctype_ptr>:
 80088f8:	4b04      	ldr	r3, [pc, #16]	; (800890c <__locale_ctype_ptr+0x14>)
 80088fa:	4a05      	ldr	r2, [pc, #20]	; (8008910 <__locale_ctype_ptr+0x18>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	6a1b      	ldr	r3, [r3, #32]
 8008900:	2b00      	cmp	r3, #0
 8008902:	bf08      	it	eq
 8008904:	4613      	moveq	r3, r2
 8008906:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 800890a:	4770      	bx	lr
 800890c:	20000054 	.word	0x20000054
 8008910:	200000b8 	.word	0x200000b8

08008914 <__ascii_mbtowc>:
 8008914:	b082      	sub	sp, #8
 8008916:	b901      	cbnz	r1, 800891a <__ascii_mbtowc+0x6>
 8008918:	a901      	add	r1, sp, #4
 800891a:	b142      	cbz	r2, 800892e <__ascii_mbtowc+0x1a>
 800891c:	b14b      	cbz	r3, 8008932 <__ascii_mbtowc+0x1e>
 800891e:	7813      	ldrb	r3, [r2, #0]
 8008920:	600b      	str	r3, [r1, #0]
 8008922:	7812      	ldrb	r2, [r2, #0]
 8008924:	1c10      	adds	r0, r2, #0
 8008926:	bf18      	it	ne
 8008928:	2001      	movne	r0, #1
 800892a:	b002      	add	sp, #8
 800892c:	4770      	bx	lr
 800892e:	4610      	mov	r0, r2
 8008930:	e7fb      	b.n	800892a <__ascii_mbtowc+0x16>
 8008932:	f06f 0001 	mvn.w	r0, #1
 8008936:	e7f8      	b.n	800892a <__ascii_mbtowc+0x16>

08008938 <memmove>:
 8008938:	4288      	cmp	r0, r1
 800893a:	b510      	push	{r4, lr}
 800893c:	eb01 0302 	add.w	r3, r1, r2
 8008940:	d803      	bhi.n	800894a <memmove+0x12>
 8008942:	1e42      	subs	r2, r0, #1
 8008944:	4299      	cmp	r1, r3
 8008946:	d10c      	bne.n	8008962 <memmove+0x2a>
 8008948:	bd10      	pop	{r4, pc}
 800894a:	4298      	cmp	r0, r3
 800894c:	d2f9      	bcs.n	8008942 <memmove+0xa>
 800894e:	1881      	adds	r1, r0, r2
 8008950:	1ad2      	subs	r2, r2, r3
 8008952:	42d3      	cmn	r3, r2
 8008954:	d100      	bne.n	8008958 <memmove+0x20>
 8008956:	bd10      	pop	{r4, pc}
 8008958:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800895c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008960:	e7f7      	b.n	8008952 <memmove+0x1a>
 8008962:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008966:	f802 4f01 	strb.w	r4, [r2, #1]!
 800896a:	e7eb      	b.n	8008944 <memmove+0xc>

0800896c <__malloc_lock>:
 800896c:	4770      	bx	lr

0800896e <__malloc_unlock>:
 800896e:	4770      	bx	lr

08008970 <_realloc_r>:
 8008970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008972:	4607      	mov	r7, r0
 8008974:	4614      	mov	r4, r2
 8008976:	460e      	mov	r6, r1
 8008978:	b921      	cbnz	r1, 8008984 <_realloc_r+0x14>
 800897a:	4611      	mov	r1, r2
 800897c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008980:	f7ff b966 	b.w	8007c50 <_malloc_r>
 8008984:	b922      	cbnz	r2, 8008990 <_realloc_r+0x20>
 8008986:	f7ff f917 	bl	8007bb8 <_free_r>
 800898a:	4625      	mov	r5, r4
 800898c:	4628      	mov	r0, r5
 800898e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008990:	f000 f821 	bl	80089d6 <_malloc_usable_size_r>
 8008994:	4284      	cmp	r4, r0
 8008996:	d90f      	bls.n	80089b8 <_realloc_r+0x48>
 8008998:	4621      	mov	r1, r4
 800899a:	4638      	mov	r0, r7
 800899c:	f7ff f958 	bl	8007c50 <_malloc_r>
 80089a0:	4605      	mov	r5, r0
 80089a2:	2800      	cmp	r0, #0
 80089a4:	d0f2      	beq.n	800898c <_realloc_r+0x1c>
 80089a6:	4631      	mov	r1, r6
 80089a8:	4622      	mov	r2, r4
 80089aa:	f7fd fadb 	bl	8005f64 <memcpy>
 80089ae:	4631      	mov	r1, r6
 80089b0:	4638      	mov	r0, r7
 80089b2:	f7ff f901 	bl	8007bb8 <_free_r>
 80089b6:	e7e9      	b.n	800898c <_realloc_r+0x1c>
 80089b8:	4635      	mov	r5, r6
 80089ba:	e7e7      	b.n	800898c <_realloc_r+0x1c>

080089bc <__ascii_wctomb>:
 80089bc:	b149      	cbz	r1, 80089d2 <__ascii_wctomb+0x16>
 80089be:	2aff      	cmp	r2, #255	; 0xff
 80089c0:	bf8b      	itete	hi
 80089c2:	238a      	movhi	r3, #138	; 0x8a
 80089c4:	700a      	strbls	r2, [r1, #0]
 80089c6:	6003      	strhi	r3, [r0, #0]
 80089c8:	2001      	movls	r0, #1
 80089ca:	bf88      	it	hi
 80089cc:	f04f 30ff 	movhi.w	r0, #4294967295
 80089d0:	4770      	bx	lr
 80089d2:	4608      	mov	r0, r1
 80089d4:	4770      	bx	lr

080089d6 <_malloc_usable_size_r>:
 80089d6:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80089da:	2800      	cmp	r0, #0
 80089dc:	f1a0 0004 	sub.w	r0, r0, #4
 80089e0:	bfbc      	itt	lt
 80089e2:	580b      	ldrlt	r3, [r1, r0]
 80089e4:	18c0      	addlt	r0, r0, r3
 80089e6:	4770      	bx	lr

080089e8 <_init>:
 80089e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089ea:	bf00      	nop
 80089ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089ee:	bc08      	pop	{r3}
 80089f0:	469e      	mov	lr, r3
 80089f2:	4770      	bx	lr

080089f4 <_fini>:
 80089f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089f6:	bf00      	nop
 80089f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089fa:	bc08      	pop	{r3}
 80089fc:	469e      	mov	lr, r3
 80089fe:	4770      	bx	lr
